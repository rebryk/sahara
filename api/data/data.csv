id,name,description,visualizations,query
13352,Total Harvest Finance users over time,,"[{""id"": 26744, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2020-11-16T00:04:12.470856+00:00"", ""__typename"": ""visualizations""}, {""id"": 26745, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": null}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0[.]00000"", ""columnMapping"": {""date"": ""x"", ""total_users"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""total_users"": {""type"": ""area"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""area""}, ""created_at"": ""2020-11-16T00:04:12.470856+00:00"", ""__typename"": ""visualizations""}]","SELECT date, sum(users) OVER (
                              ORDER BY date ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS total_users
FROM
  (SELECT date, count(USER) AS users
   FROM
     (SELECT min(date) AS date,
             account AS USER
      FROM
        (SELECT date_trunc('day', min(block_time)) AS date,
                ""from"" AS account
         FROM ethereum.""transactions""
         WHERE ""to"" = '\xF8ce90c2710713552fb564869694B2505Bfc0846'
           AND block_time >= '2020-08-31'
           AND success
         GROUP BY 2) AS a
      GROUP BY 2) AS b
   GROUP BY 1
   ORDER BY 1) AS c"
37629,Total Tornado Cash users over time,,"[{""id"": 74571, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-04-25T01:14:04.239167+00:00"", ""__typename"": ""visualizations""}, {""id"": 74574, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""columnMapping"": {""date"": ""x"", ""total_users"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""area""}, ""created_at"": ""2021-04-25T01:18:43.776293+00:00"", ""__typename"": ""visualizations""}]","SELECT date,
       sum(users) OVER (ORDER BY date) AS total_users
FROM
  (SELECT date, count(USER) AS users
   FROM
     (SELECT min(date) AS date,
             account AS USER
      FROM
        (SELECT date_trunc('day', min(evt_block_time)) AS date,
                ""from"" AS account
         FROM tornado_cash.""eth_evt_Deposit""
         INNER JOIN ethereum.""transactions"" ON evt_tx_hash = hash
         AND block_time >= '2019-12-16'
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          ""to"" AS account
         FROM tornado_cash.""eth_evt_Withdrawal""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          ""from"" AS account
         FROM tornado_cash.""erc20_evt_Deposit""
         INNER JOIN ethereum.""transactions"" ON evt_tx_hash = hash
         AND block_time >= '2019-12-16'
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          ""to"" AS account
         FROM tornado_cash.""erc20_evt_Withdrawal""
         GROUP BY 2) a
      GROUP BY 2) b
   GROUP BY 1
   ORDER BY 1) c"
11519,Total SushiSwap users over time,,"[{""id"": 22882, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2020-10-14T23:40:07.430925+00:00"", ""__typename"": ""visualizations""}, {""id"": 22883, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": null}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0[.]00000"", ""columnMapping"": {""date"": ""x"", ""total_users"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""total_users"": {""type"": ""area"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""area""}, ""created_at"": ""2020-10-14T23:40:07.430925+00:00"", ""__typename"": ""visualizations""}]","SELECT date, sum(users) OVER (
                              ORDER BY date ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS total_users
FROM
  (SELECT date, count(USER) AS users
   FROM
     (SELECT min(date) AS date,
             account AS USER
      FROM
        (SELECT date_trunc('day', min(block_time)) AS date,
                trader_a AS account
         FROM dex.trades
         WHERE project = 'Sushiswap'
         GROUP BY 2
         UNION SELECT date_trunc('day', min(block_time)) AS date,
                      trader_b AS account
         FROM dex.trades
         WHERE project = 'Sushiswap'
         GROUP BY 2
         UNION SELECT date_trunc('day', min(call_block_time)) AS date,
                      ""to"" AS account
         FROM sushi.""Router02_call_addLiquidity""
         WHERE call_success
         GROUP BY 2
         UNION SELECT date_trunc('day', min(call_block_time)) AS date,
                      ""to"" AS account
         FROM sushi.""Router02_call_addLiquidityETH""
         WHERE call_success
         GROUP BY 2) AS a
      GROUP BY 2) AS b
   GROUP BY 1
   ORDER BY 1) AS c"
2998,Total 0x users over time,,"[{""id"": 5791, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2020-04-29T00:31:04.863554+00:00"", ""__typename"": ""visualizations""}, {""id"": 5792, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": null}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0[.]00000"", ""columnMapping"": {""date"": ""x"", ""total_users"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""total_users"": {""type"": ""area"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""area""}, ""created_at"": ""2020-04-29T00:31:27.228004+00:00"", ""__typename"": ""visualizations""}]","SELECT date, sum(users) OVER (
                              ORDER BY date ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS total_users
FROM
  (SELECT date, count(USER) AS users
   FROM
     (SELECT min(date) AS date,
             account AS USER
      FROM
        (SELECT date_trunc('day', min(block_time)) AS date,
                trader_a AS account
         FROM dex.trades
         WHERE project = '0x Native'
         GROUP BY 2
         UNION SELECT date_trunc('day', min(block_time)) AS date,
                      trader_b AS account
         FROM dex.trades
         WHERE project = '0x Native'
         GROUP BY 2) AS a
      GROUP BY 2) AS b
   GROUP BY 1
   ORDER BY 1) AS c"
2740,Total Uniswap users over time,,"[{""id"": 5276, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2020-04-20T18:04:08.475762+00:00"", ""__typename"": ""visualizations""}, {""id"": 5532, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": null}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0[.]00000"", ""columnMapping"": {""date"": ""x"", ""total_users"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""total_users"": {""type"": ""area"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""area""}, ""created_at"": ""2020-04-25T17:29:34.735+00:00"", ""__typename"": ""visualizations""}]","SELECT date, sum(users) OVER (
                              ORDER BY date ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS total_users
FROM
  (SELECT date, count(USER) AS users
   FROM
     (SELECT min(date) AS date,
             account AS USER
      FROM
        (SELECT date_trunc('day', min(block_time)) AS date,
                trader_a AS account
         FROM dex.trades
         WHERE project = 'Uniswap'
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(block_time)) AS date,
                          trader_b AS account
         FROM dex.trades
         WHERE project = 'Uniswap'
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM uniswap.""Exchange_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(call_block_time)) AS date,
                          ""to"" AS account
         FROM uniswap_v2.""Router01_call_addLiquidity""
         WHERE call_success
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(call_block_time)) AS date,
                          ""to"" AS account
         FROM uniswap_v2.""Router01_call_addLiquidityETH""
         WHERE call_success
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(call_block_time)) AS date,
                          ""to"" AS account
         FROM uniswap_v2.""Router02_call_addLiquidity""
         WHERE call_success
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(call_block_time)) AS date,
                          ""to"" AS account
         FROM uniswap_v2.""Router02_call_addLiquidityETH""
         WHERE call_success
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          ""to"" AS account
         FROM uniswap_v3.""NonfungibleTokenPositionManager_evt_Transfer""
         WHERE ""from"" = '\x0000000000000000000000000000000000000000'
         GROUP BY 2) a
      GROUP BY 2) b
   GROUP BY 1
   ORDER BY 1) c"
2873,Total dYdX users over time,,"[{""id"": 5533, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2020-04-25T17:55:59.338428+00:00"", ""__typename"": ""visualizations""}, {""id"": 5534, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": null}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0[.]00000"", ""columnMapping"": {""date"": ""x"", ""total_users"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""total_users"": {""type"": ""area"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""area""}, ""created_at"": ""2020-04-25T21:55:24.126+00:00"", ""__typename"": ""visualizations""}]","SELECT date, sum(users) OVER (
                              ORDER BY date ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS total_users
FROM
  (SELECT date, count(USER) AS users
   FROM
     (SELECT min(date) AS date,
             account AS USER
      FROM
        (SELECT date_trunc('day', min(evt_block_time)) AS date,
                maker AS account
         FROM dydx_perpetual.""PerpetualV1_evt_LogTrade""
         GROUP BY 2
         UNION SELECT date_trunc('day', min(evt_block_time)) AS date,
                      taker AS account
         FROM dydx_perpetual.""PerpetualV1_evt_LogTrade""
         GROUP BY 2
         UNION SELECT date_trunc('day', min(evt_block_time)) AS date,
                      ""accountOwner"" AS account
         FROM dydx.""SoloMargin_evt_LogDeposit""
         GROUP BY 2
         UNION SELECT date_trunc('day', min(evt_block_time)) AS date,
                      ""takerAccountOwner"" AS account
         FROM dydx.""SoloMargin_evt_LogTrade""
         GROUP BY 2
         UNION SELECT date_trunc('day', min(evt_block_time)) AS date,
                      ""makerAccountOwner"" AS account
         FROM dydx.""SoloMargin_evt_LogTrade""
         GROUP BY 2
         UNION SELECT date_trunc('day', min(block_time)),
                      ""from"" AS account
         FROM dydx.""PayableMarginMinter_call_mintMarginTokens"" dydx
         INNER JOIN ethereum.""transactions"" tx ON dydx.call_tx_hash = tx.hash
         AND tx.block_time >= '2018-09-28'
         AND call_success
         GROUP BY 2) AS a
      GROUP BY 2) AS b
   GROUP BY 1
   ORDER BY 1) AS c"
1010,Total Compound users over time,,"[{""id"": 1695, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2019-12-12T00:18:02.193547+00:00"", ""__typename"": ""visualizations""}, {""id"": 5530, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": null}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0[.]00000"", ""columnMapping"": {""date"": ""x"", ""total_users"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""total_users"": {""type"": ""area"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""area""}, ""created_at"": ""2020-04-25T15:51:36.715+00:00"", ""__typename"": ""visualizations""}]","SELECT date, sum(users) OVER (
                              ORDER BY date ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS total_users
FROM
  (SELECT date, count(USER) AS users
   FROM
     (SELECT min(date) AS date,
             account AS USER
      FROM
        (SELECT date_trunc('day', min(evt_block_time)) AS date,
                minter AS account
         FROM compound_v2.""cErc20_evt_Mint""
         GROUP BY 2
         UNION SELECT date_trunc('day', min(evt_block_time)) AS date,
                      borrower AS account
         FROM compound_v2.""cErc20_evt_Borrow""
         GROUP BY 2
         UNION SELECT date_trunc('day', min(evt_block_time)) AS date,
                      minter AS account
         FROM compound_v2.""cEther_evt_Mint""
         GROUP BY 2
         UNION SELECT date_trunc('day', min(evt_block_time)) AS date,
                      borrower AS account
         FROM compound_v2.""cEther_evt_Borrow""
         GROUP BY 2
         UNION SELECT date_trunc('day', min(evt_block_time)) AS date,
                      account
         FROM compound_v1.""MoneyMarket_evt_SupplyReceived""
         GROUP BY 2
         UNION SELECT date_trunc('day', min(evt_block_time)) AS date,
                      account
         FROM compound_v1.""MoneyMarket_evt_BorrowTaken""
         GROUP BY 2) AS a
      GROUP BY 2) AS b
   GROUP BY 1
   ORDER BY 1) AS c"
4177,Total Curve users over time,,"[{""id"": 8129, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": null}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0[.]00000"", ""columnMapping"": {""date"": ""x"", ""total_users"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""total_users"": {""type"": ""area"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""area""}, ""created_at"": ""2020-06-03T23:05:15.896685+00:00"", ""__typename"": ""visualizations""}, {""id"": 8128, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2020-06-03T23:05:06.433623+00:00"", ""__typename"": ""visualizations""}]","SELECT date, sum(users) OVER (
                              ORDER BY date) AS total_users
FROM
  (SELECT date, count(USER) AS users
   FROM
     (SELECT min(date) AS date,
             account AS USER
      FROM
        (SELECT date_trunc('day', min(block_time)) AS date,
                trader_a AS account
         FROM dex.trades
         WHERE project = 'Curve'
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(block_time)) AS date,
                          trader_b AS account
         FROM dex.trades
         WHERE project = 'Curve'
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""aave_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""ankreth_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""bbtc_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""busd_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""compound_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""compound_v2_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""compound_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""threepool_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""dusd_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""eurs_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""gusd_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""hbtc_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""husd_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""ironbank_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""linkusd_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""lusd_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""musd_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""obtc_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""pax_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""pbtc_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""ren_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""reth_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""rsv_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""sbtc_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""seth_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""steth_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""susd_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""susd_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""tbtc_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""tricrypto_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""usdk_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""usdn_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""usdt_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""ust_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""y_swap_evt_AddLiquidity""
         GROUP BY 2) a
      GROUP BY 2) b
   GROUP BY 1
   ORDER BY 1) c"
2961,Total Synthetix users over time,,"[{""id"": 5716, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2020-04-28T14:41:11.338411+00:00"", ""__typename"": ""visualizations""}, {""id"": 5722, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": null}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0[.]00000"", ""columnMapping"": {""date"": ""x"", ""total_users"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""total_users"": {""type"": ""area"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""area""}, ""created_at"": ""2020-04-28T15:41:14.933+00:00"", ""__typename"": ""visualizations""}]","SELECT date, sum(users) OVER (
                              ORDER BY date ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS total_users
FROM
  (SELECT date, count(USER) AS users
   FROM
     (SELECT min(date) AS date,
             account AS USER
      FROM
        (SELECT date_trunc('day', min(block_time)) AS date,
                trader_a AS account
         FROM dex.""trades""
         WHERE project = 'Synthetix'
         GROUP BY 2
         UNION SELECT date_trunc('day', min(block_time)) AS date,
                      trader_b AS account
         FROM dex.""trades""
         WHERE project = 'Synthetix'
         GROUP BY 2
         UNION SELECT date_trunc('day', min(evt_block_time)) AS date,
                      account
         FROM synthetix.""Synth_evt_Issued""
         GROUP BY 2) AS a
      GROUP BY 2) AS b
   GROUP BY 1
   ORDER BY 1) AS c"
2997,Total Kyber users over time,,"[{""id"": 5789, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2020-04-29T00:20:22.752875+00:00"", ""__typename"": ""visualizations""}, {""id"": 5790, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": null}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0[.]00000"", ""columnMapping"": {""date"": ""x"", ""total_users"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""total_users"": {""type"": ""area"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""area""}, ""created_at"": ""2020-04-29T00:20:39.896847+00:00"", ""__typename"": ""visualizations""}]","SELECT date, sum(users) OVER (
                              ORDER BY date ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS total_users
FROM
  (SELECT date, count(USER) AS users
   FROM
     (SELECT min(date) AS date,
             account AS USER
      FROM
        (SELECT date_trunc('day', min(block_time)) AS date,
                trader_a AS account
         FROM dex.trades
         WHERE project = 'Kyber'
         GROUP BY 2
         UNION SELECT date_trunc('day', min(block_time)) AS date,
                      trader_b AS account
         FROM dex.trades
         WHERE project = 'Kyber'
         GROUP BY 2) AS a
      GROUP BY 2) AS b
   GROUP BY 1
   ORDER BY 1) AS c"
2972,Total DeFi users over time,"Users = unique addresses. Since a user can have multiple addresses the numbers below are overestimates.
Source: @richardchen39","[{""id"": 5738, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""date"", ""type"": ""datetime"", ""order"": 100000, ""title"": ""date"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""datetime"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""right"", ""booleanValues"": [""false"", ""true""], ""dateTimeFormat"": ""MM/DD/YY"", ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}, {""name"": ""total_users"", ""type"": ""float"", ""order"": 100001, ""title"": ""total_users"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""number"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""right"", ""numberFormat"": ""0,0.00"", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}], ""autoHeight"": true, ""minColumns"": 2, ""defaultRows"": 14, ""itemsPerPage"": 250, ""defaultColumns"": 3}, ""created_at"": ""2020-04-28T16:34:35.573+00:00"", ""__typename"": ""visualizations""}, {""id"": 5739, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": null}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0[.]00000"", ""columnMapping"": {""date"": ""x"", ""total_users"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""total_users"": {""type"": ""area"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""area""}, ""created_at"": ""2020-04-28T16:36:58.27+00:00"", ""__typename"": ""visualizations""}]","SELECT date, sum(users) OVER (
                              ORDER BY date ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS total_users
FROM
  (SELECT date, count(USER) AS users
   FROM
     (SELECT min(date) AS date,
             account AS USER
      FROM
        (SELECT date_trunc('day', min(block_time)) AS date,
                trader_a AS account
         FROM dex.trades
         WHERE project = 'Uniswap'
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(block_time)) AS date,
                          trader_b AS account
         FROM dex.trades
         WHERE project = 'Uniswap'
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM uniswap.""Exchange_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(call_block_time)) AS date,
                          ""to"" AS account
         FROM uniswap_v2.""Router01_call_addLiquidity""
         WHERE call_success
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(call_block_time)) AS date,
                          ""to"" AS account
         FROM uniswap_v2.""Router01_call_addLiquidityETH""
         WHERE call_success
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(call_block_time)) AS date,
                          ""to"" AS account
         FROM uniswap_v2.""Router02_call_addLiquidity""
         WHERE call_success
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(call_block_time)) AS date,
                          ""to"" AS account
         FROM uniswap_v2.""Router02_call_addLiquidityETH""
         WHERE call_success
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          ""to"" AS account
         FROM uniswap_v3.""NonfungibleTokenPositionManager_evt_Transfer""
         WHERE ""from"" = '\x0000000000000000000000000000000000000000'
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(block_time)) AS date,
                          trader_a AS account
         FROM dex.trades
         WHERE project = 'Kyber'
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(block_time)) AS date,
                          trader_b AS account
         FROM dex.trades
         WHERE project = 'Kyber'
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          minter AS account
         FROM compound_v2.""cErc20_evt_Mint""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          borrower AS account
         FROM compound_v2.""cErc20_evt_Borrow""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          minter AS account
         FROM compound_v2.""cEther_evt_Mint""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          borrower AS account
         FROM compound_v2.""cEther_evt_Borrow""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          account
         FROM compound_v1.""MoneyMarket_evt_SupplyReceived""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          account
         FROM compound_v1.""MoneyMarket_evt_BorrowTaken""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          _user AS account
         FROM aave.""LendingPool_evt_Borrow""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          _user AS account
         FROM aave.""LendingPool_evt_Deposit""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          ""user"" AS account
         FROM aave_v2.""LendingPool_evt_Borrow""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          ""user"" AS account
         FROM aave_v2.""LendingPool_evt_Deposit""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(block_time)) AS date,
                ""from"" AS account
         FROM ethereum.""transactions""
         WHERE ""to"" in ('\x9ca85572e6a3ebf24dedd195623f188735a5179f', -- 3CRV
                        '\x29E240CFD7946BA20895a7a02eDb25C210f9f324', -- aLINK
                        '\x03403154afc09Ce8e44C3B185C82C6aD5f86b9ab', -- crvAAVE
                        '\xE625F5923303f1CE7A43ACFEFd11fd12f30DbcA4', -- crvAETH
                        '\xE625F5923303f1CE7A43ACFEFd11fd12f30DbcA4', -- crvBBTC
                        '\x2994529c0652d127b7842094103715ec5299bbed', -- crvBUSD
                        '\x629c759D1E83eFbF63d84eb3868B564d9521C129', -- crvCOMP
                        '\x8e6741b456a074F0Bc45B8b82A755d4aF7E965dF', -- crvDUSD
                        '\xec0d8d3ed5477106c6d4ea27d90a60e594693c90', -- crvGUSD
                        '\x46AFc2dfBd1ea0c0760CAD8262A5838e803A37e5', -- crvHBTC
                        '\x39546945695DCb1c037C836925B355262f551f55', -- crvHUSD
                        '\x96Ea6AF74Af09522fCB4c28C269C26F59a31ced6', -- crvLINK
                        '\x0FCDAeDFb8A7DfDa2e9838564c5A1665d856AFDF', -- crvMUSD
                        '\x7F83935EcFe4729c4Ea592Ab2bC1A32588409797', -- crvOBTC
                        '\x123964EbE096A920dae00Fb795FFBfA0c9Ff4675', -- crvPBTC
                        '\x5334e150B938dd2b6bd040D9c4a03Cff0cED3765', -- crvRENBTC
                        '\xBacB69571323575C6a5A3b4F9EEde1DC7D31FBc1', -- crvSAAVE
                        '\x7Ff566E1d69DEfF32a7b244aE7276b9f90e9D0f6', -- crvSBTC
                        '\x5533ed0a3b83F70c3c4a1f69Ef5546D3D4713E44', -- crvSUSD
                        '\x07FB4756f67bD46B748b16119E802F1f880fb2CC', -- crvTBTC
                        '\xFe39Ce91437C76178665D64d7a2694B0f6f17fE3', -- crvUSDN
                        '\x1B5eb1173D2Bf770e50F10410C9a96F7a8eB6e75', -- crvUSDP
                        '\xF6C9E9AF314982A4b38366f4AbfAa00595C5A6fC', -- crvUST
                        '\x2994529C0652D127b7842094103715ec5299bBed', -- crvYBUSD
                        '\xacd43e627e64355f1861cec6d3a6688b31a6f952', -- DAI
                        '\x98B058b2CBacF5E99bC7012DF757ea7CFEbd35BC', -- eursCRV
                        '\xe11ba472F74869176652C35D30dB89854b5ae84D', -- HEGIC
                        '\x881b06da56BB5675c54E4Ed311c21E54C5025298', -- LINK
                        '\xE0db48B4F71752C4bEf16De1DBD042B82976b8C7', -- mUSD
                        '\xdCD90C7f6324cfa40d7169ef80b12031770B4325', -- steCRV
                        '\x37d19d1c4E1fa9DC47bD1eA12f742a0887eDa74a', -- TUSD
                        '\x597aD1e0c13Bfe8025993D9e79C69E1c0233522e', -- USDC
                        '\x2f08119c6f07c006695e079aafc638b8789faf18', -- USDT
                        '\xe1237aA7f535b0CC33Fd973D66cBf830354D16c7', -- WETH
                        '\x5dbcF33D8c2E976c6b560249878e6F1491Bca25c', -- yCRV
                        '\xba2e7fed597fd0e3e70f5130bcdbbfe06bb94fe1') -- YFI
           AND block_time >= '2020-07-26'
           AND success
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(block_time)) AS date,
                          trader_a AS account
         FROM dex.trades
         WHERE project = 'Balancer'
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(block_time)) AS date,
                          trader_b AS account
         FROM dex.trades
         WHERE project = 'Balancer'
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          caller AS account
         FROM balancer.""BPool_evt_LOG_JOIN""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          lad AS account
         FROM maker.""SaiTub_evt_LogNewCup""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(block_time)) AS date,
                          borrower
         FROM lending.""borrow""
         WHERE project='MakerDAO'
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(block_time)) AS date,
                trader_a AS account
         FROM dex.trades
         WHERE project = 'Curve'
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(block_time)) AS date,
                          trader_b AS account
         FROM dex.trades
         WHERE project = 'Curve'
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""aave_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""ankreth_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""bbtc_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""busd_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""compound_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""compound_v2_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""compound_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""threepool_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""dusd_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""eurs_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""gusd_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""hbtc_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""husd_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""ironbank_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""linkusd_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""lusd_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""musd_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""obtc_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""pax_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""pbtc_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""ren_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""reth_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""rsv_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""sbtc_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""seth_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""steth_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""susd_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""susd_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""tbtc_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""tricrypto_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""usdk_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""usdn_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""usdt_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""ust_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          provider AS account
         FROM curvefi.""y_swap_evt_AddLiquidity""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          ""from"" AS account
         FROM tornado_cash.""eth_evt_Deposit""
         INNER JOIN ethereum.""transactions"" ON evt_tx_hash = hash
         AND block_time >= '2019-12-16'
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          ""to"" AS account
         FROM tornado_cash.""eth_evt_Withdrawal""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          ""from"" AS account
         FROM tornado_cash.""erc20_evt_Deposit""
         INNER JOIN ethereum.""transactions"" ON evt_tx_hash = hash
         AND block_time >= '2019-12-16'
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          ""to"" AS account
         FROM tornado_cash.""erc20_evt_Withdrawal""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          OWNER AS account
         FROM instadapp_v2.""InstaRegistry_evt_Created""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          OWNER AS account
         FROM instadapp_dsa.""InstaIndex_evt_LogAccountCreated""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(block_time)) AS date,
                          trader_a AS account
         FROM dex.trades
         WHERE project = '0x Native'
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(block_time)) AS date,
                          trader_b AS account
         FROM dex.trades
         WHERE project = '0x Native'
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(block_time)) AS date,
                          trader_a AS account
         FROM dex.trades
         WHERE project = 'Sushiswap'
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(block_time)) AS date,
                          trader_b AS account
         FROM dex.trades
         WHERE project = 'Sushiswap'
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(call_block_time)) AS date,
                          ""to"" AS account
         FROM sushi.""Router02_call_addLiquidity""
         WHERE call_success
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(call_block_time)) AS date,
                          ""to"" AS account
         FROM sushi.""Router02_call_addLiquidityETH""
         WHERE call_success
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          maker AS account
         FROM dydx_perpetual.""PerpetualV1_evt_LogTrade""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          taker AS account
         FROM dydx_perpetual.""PerpetualV1_evt_LogTrade""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          ""accountOwner"" AS account
         FROM dydx.""SoloMargin_evt_LogDeposit""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          ""takerAccountOwner"" AS account
         FROM dydx.""SoloMargin_evt_LogTrade""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          ""makerAccountOwner"" AS account
         FROM dydx.""SoloMargin_evt_LogTrade""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(block_time)),
                          ""from"" AS account
         FROM dydx.""PayableMarginMinter_call_mintMarginTokens"" dydx
         INNER JOIN ethereum.""transactions"" tx ON dydx.call_tx_hash = tx.hash
         AND tx.block_time >= '2018-09-28'
         AND call_success
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          sender AS account
         FROM pooltogether.""MCDAwarePool_evt_Deposited""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          sender AS account
         FROM pooltogether_v1.""Pool1_evt_BoughtTickets""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          sender AS account
         FROM pooltogether_v2.""Pool3_evt_Deposited""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
         OPERATOR AS account
         FROM pooltogether_v3.""CompoundPrizePool_evt_Deposited""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(block_time)) AS date,
                          trader_a AS account
         FROM dex.trades
         WHERE project = 'Bancor Network'
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(block_time)) AS date,
                          trader_b AS account
         FROM dex.trades
         WHERE project = 'Bancor Network'
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(block_time)) AS date,
                          trader_a AS account
         FROM dex.""trades""
         WHERE project = 'Synthetix'
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(block_time)) AS date,
                          trader_b AS account
         FROM dex.""trades""
         WHERE project = 'Synthetix'
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          account
         FROM synthetix.""Synth_evt_Issued""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(block_time)) AS date,
                          ""from"" AS account
         FROM ethereum.""transactions""
         WHERE ""to"" = '\xF8ce90c2710713552fb564869694B2505Bfc0846'
           AND block_time >= '2020-08-31'
           AND success
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          minter AS account
         FROM creamfinance.""CErc20Delegate_evt_Mint""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          borrower AS account
         FROM creamfinance.""CErc20Delegate_evt_Borrow""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          minter AS account
         FROM creamfinance.""CEther_evt_Mint""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          borrower AS account
         FROM creamfinance.""CEther_evt_Borrow""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          tx.""from"" AS account
         FROM erc20.""ERC20_evt_Transfer"" erc
         INNER JOIN ethereum.""transactions"" tx ON erc.evt_tx_hash = tx.hash
         AND tx.block_time >= '2020-05-13'
         WHERE contract_address = '\xeb4c2781e4eba804ce9a9803c67d0893436bb27d'
           AND erc.""from"" = '\x0000000000000000000000000000000000000000'
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          tx.""from"" AS account
         FROM erc20.""ERC20_evt_Transfer"" erc
         INNER JOIN ethereum.""transactions"" tx ON erc.evt_tx_hash = tx.hash
         AND tx.block_time >= '2020-05-13'
         WHERE contract_address = '\x1c5db575e2ff833e46a2e9864c22f4b22e0b37c2'
           AND erc.""from"" = '\x0000000000000000000000000000000000000000'
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          tx.""from"" AS account
         FROM erc20.""ERC20_evt_Transfer"" erc
         INNER JOIN ethereum.""transactions"" tx ON erc.evt_tx_hash = tx.hash
         AND tx.block_time >= '2020-05-13'
         WHERE contract_address = '\x459086f2376525bdceba5bdda135e4e9d3fef5bf'
           AND erc.""from"" = '\x0000000000000000000000000000000000000000'
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(block_time)) AS date,
                          ""from"" AS account
         FROM ethereum.""transactions""
         WHERE ""to"" = '\xd7c49cee7e9188cca6ad8ff264c1da2e69d4cf3b'
           AND block_time >= '2019-05-23'
           AND success
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          _borrower AS account
         FROM keeperdao_v1.""LiquidityPoolV1_evt_Borrowed""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          _depositor AS account
         FROM keeperdao_v1.""LiquidityPoolV1_evt_Deposited""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          _borrower AS account
         FROM keeperdao_v2.""LiquidityPoolV2_evt_Borrowed""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          _depositor AS account
         FROM keeperdao_v2.""LiquidityPoolV2_evt_Deposited""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          _borrower AS account
         FROM keeperdao_v21.""LiquidityPoolV2_evt_Borrowed""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          _depositor AS account
         FROM keeperdao_v21.""LiquidityPoolV2_evt_Deposited""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          account
         FROM hegic.""HedgeContract_evt_HedgeCreated""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          account
         FROM hegic.""HegicERCPool_evt_Provide""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          account
         FROM hegic.""HegicETHOptions_evt_Create""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          account
         FROM hegic.""HegicETHPool_evt_Provide""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          acount
         FROM hegic.""HegicStakingETH_evt_Claim""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          account
         FROM hegic.""HegicStakingPool_evt_BuyLot""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          account
         FROM hegic.""HegicStakingPool_evt_SellLot""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          account
         FROM hegic.""HegicStakingPool_evt_Deposit""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          acount
         FROM hegic.""HegicStakingWBTC_evt_Claim""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          account
         FROM hegic.""HegicWBTCOptions_evt_Create""
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          ""from"" AS account
         FROM alpha_homora.""Bank_evt_Work""
         INNER JOIN ethereum.""transactions"" ON evt_tx_hash = hash
         AND block_time >= '2020-10-07'
         GROUP BY 2
         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
                          ""caller"" AS account
         FROM alpha_homora_v2.""HomoraBank_evt_Borrow""
         GROUP BY 2) AS a
      GROUP BY 2) AS b
   GROUP BY 1
   ORDER BY 1) AS c ;"
2994,Total Aave users over time,,"[{""id"": 5785, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": null}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0[.]00000"", ""columnMapping"": {""date"": ""x"", ""users"": ""y"", ""min_dt"": ""x"", ""total_users"": ""y"", ""cumulative_count"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""total_users"": {""type"": ""area"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""area""}, ""created_at"": ""2020-04-28T22:50:20.692768+00:00"", ""__typename"": ""visualizations""}, {""id"": 5784, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2020-04-28T22:49:22.096525+00:00"", ""__typename"": ""visualizations""}]","/*  Query Description
    A new user is defined as an user who have made any one of the following transactions for the first time:
    deposit, withdraw, borrow, flashloan, liquidated, RebalanceStableBorrowRat, RedeemUnderlying, repay, ReserveUsedAsCollateralDisabled,
    ReserveUsedAsCollateralEnabled, or swap.
    
     WARNING: figures are approximate since aToken accrual is not captured by Dune!
*/


WITH user_v1 AS
  (SELECT date_trunc('day',evt_block_time) AS dt,
          _user AS user_address
   FROM aave.""LendingPool_evt_Deposit""
   WHERE date(evt_block_time)>='6/1/2020'
   UNION SELECT date_trunc('day',evt_block_time) AS dt,
                _user AS user_address
   FROM aave.""LendingPool_evt_Borrow""
   WHERE date(evt_block_time)>='6/1/2020'
   UNION SELECT date_trunc('day',evt_block_time) AS dt,
                _target AS user_address
   FROM aave.""LendingPool_evt_FlashLoan""
   WHERE date(evt_block_time)>='6/1/2020'
   UNION SELECT date_trunc('day',evt_block_time) AS dt,
                _liquidator AS user_address
   FROM aave.""LendingPool_evt_LiquidationCall""
   WHERE date(evt_block_time)>='6/1/2020'
   UNION SELECT date_trunc('day',evt_block_time) AS dt,
                _user AS user_address
   FROM aave.""LendingPool_evt_OriginationFeeLiquidated""
   WHERE date(evt_block_time)>='6/1/2020'
   UNION SELECT date_trunc('day',evt_block_time) AS dt,
                _user AS user_address
   FROM aave.""LendingPool_evt_RebalanceStableBorrowRate""
   WHERE date(evt_block_time)>='6/1/2020'
   UNION SELECT date_trunc('day',evt_block_time) AS dt,
                _user AS user_address
   FROM aave.""LendingPool_evt_RedeemUnderlying""
   WHERE date(evt_block_time)>='6/1/2020'
   UNION SELECT date_trunc('day',evt_block_time) AS dt,
                _user AS user_address
   FROM aave.""LendingPool_evt_Repay""
   WHERE date(evt_block_time)>='6/1/2020'
   UNION SELECT date_trunc('day',evt_block_time) AS dt,
                _user AS user_address
   FROM aave.""LendingPool_evt_ReserveUsedAsCollateralDisabled""
   WHERE date(evt_block_time)>='6/1/2020'
   UNION SELECT date_trunc('day',evt_block_time) AS dt,
                _user AS user_address
   FROM aave.""LendingPool_evt_ReserveUsedAsCollateralEnabled""
   WHERE date(evt_block_time)>='6/1/2020'
   UNION SELECT date_trunc('day',evt_block_time) AS dt,
                _user AS user_address
   FROM aave.""LendingPool_evt_Swap""
   WHERE date(evt_block_time)>='6/1/2020'),
     user_v2 AS
  (SELECT date_trunc('day',evt_block_time) AS dt,
          aave_v2.""LendingPool_evt_Deposit"".user AS user_address_v2
   FROM aave_v2.""LendingPool_evt_Deposit""
   WHERE date(evt_block_time)>='6/1/2020'
   UNION SELECT date_trunc('day',evt_block_time) AS dt,
                aave_v2.""LendingPool_evt_Borrow"".user AS user_address_v2
   FROM aave_v2.""LendingPool_evt_Borrow""
   WHERE date(evt_block_time)>='6/1/2020'
   UNION SELECT date_trunc('day',evt_block_time) AS dt,
                aave_v2.""LendingPool_evt_FlashLoan"".target AS user_address_v2
   FROM aave_v2.""LendingPool_evt_FlashLoan""
   WHERE date(evt_block_time)>='6/1/2020'
   UNION SELECT date_trunc('day',evt_block_time) AS dt,
                aave_v2.""LendingPool_evt_LiquidationCall"".liquidator AS user_address_v2
   FROM aave_v2.""LendingPool_evt_LiquidationCall""
   WHERE date(evt_block_time)>='6/1/2020'
   UNION SELECT date_trunc('day',evt_block_time) AS dt,
                aave_v2.""LendingPool_evt_RebalanceStableBorrowRate"".user AS user_address_v2
   FROM aave_v2.""LendingPool_evt_RebalanceStableBorrowRate""
   WHERE date(evt_block_time)>='6/1/2020'
   UNION SELECT date_trunc('day',evt_block_time) AS dt,
                aave_v2.""LendingPool_evt_Repay"".user AS user_address_v2
   FROM aave_v2.""LendingPool_evt_Repay""
   WHERE date(evt_block_time)>='6/1/2020'
   UNION SELECT date_trunc('day',evt_block_time) AS dt,
                aave_v2.""LendingPool_evt_ReserveUsedAsCollateralDisabled"".user AS user_address_v2
   FROM aave_v2.""LendingPool_evt_ReserveUsedAsCollateralDisabled""
   WHERE date(evt_block_time)>='6/1/2020'
   UNION SELECT date_trunc('day',evt_block_time) AS dt,
                aave_v2.""LendingPool_evt_ReserveUsedAsCollateralEnabled"".user AS user_address_v2
   FROM aave_v2.""LendingPool_evt_ReserveUsedAsCollateralEnabled""
   WHERE date(evt_block_time)>='6/1/2020'
   UNION SELECT date_trunc('day',evt_block_time) AS dt,
                aave_v2.""LendingPool_evt_Swap"".user AS user_address_v2
   FROM aave_v2.""LendingPool_evt_Swap""
   WHERE date(evt_block_time)>='6/1/2020'
   UNION SELECT date_trunc('day',evt_block_time) AS dt,
                aave_v2.""LendingPool_evt_Withdraw"".user AS user_address_v2
   FROM aave_v2.""LendingPool_evt_Withdraw""
   WHERE date(evt_block_time)>='6/1/2020'),

    user_all AS
    (
    SELECT * FROM user_v1
    UNION
    SELECT * FROM user_v2
    ),
    user_all_min_date AS
    (
    SELECT user_address, min(dt) as min_dt
    FROM user_all
    GROUP BY user_address
    ),
    temp AS(  
   SELECT min_dt, count(distinct user_address)
   FROM user_all_min_date
   GROUP BY min_dt
   ORDER BY min_dt desc)
   
 SELECT min_dt, count, sum(count) OVER (ORDER BY min_dt) AS users FROM temp 
   
   "
4171,Total Balancer users over time,,"[{""id"": 8114, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2020-06-03T22:18:16.551444+00:00"", ""__typename"": ""visualizations""}, {""id"": 8115, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": null}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0[.]00000"", ""columnMapping"": {""date"": ""x"", ""total_users"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""total_users"": {""type"": ""area"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""area""}, ""created_at"": ""2020-06-03T22:18:35.107035+00:00"", ""__typename"": ""visualizations""}]","SELECT date, sum(users) OVER (
                              ORDER BY date ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS total_users
FROM
  (SELECT date, count(USER) AS users
   FROM
     (SELECT min(date) AS date,
             account AS USER
      FROM
        (SELECT date_trunc('day', min(block_time)) AS date,
                trader_a AS account
         FROM dex.trades
         WHERE project = 'Balancer'
         GROUP BY 2
         UNION SELECT date_trunc('day', min(block_time)) AS date,
                      trader_b AS account
         FROM dex.trades
         WHERE project = 'Balancer'
         GROUP BY 2
         UNION SELECT date_trunc('day', min(evt_block_time)) AS date,
                      caller AS account
         FROM balancer.""BPool_evt_LOG_JOIN""
         GROUP BY 2) AS a
      GROUP BY 2) AS b
   GROUP BY 1
   ORDER BY 1) AS c"
8492,Total Ren users over time,,"[{""id"": 17033, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2020-08-25T23:09:54.242989+00:00"", ""__typename"": ""visualizations""}, {""id"": 17034, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": null}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0[.]00000"", ""columnMapping"": {""date"": ""x"", ""total_users"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""total_users"": {""type"": ""area"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""area""}, ""created_at"": ""2020-08-25T23:09:54.242989+00:00"", ""__typename"": ""visualizations""}]","SELECT date, sum(users) OVER (
                              ORDER BY date ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS total_users
FROM
  (SELECT date, count(USER) AS users
   FROM
     (SELECT min(date) AS date,
             account AS USER
      FROM
        (SELECT date_trunc('day', min(evt_block_time)) AS date,
                tx.""from"" AS account
         FROM erc20.""ERC20_evt_Transfer"" erc
         INNER JOIN ethereum.""transactions"" tx ON erc.evt_tx_hash = tx.hash
         AND tx.block_time >= '2020-05-13'
         WHERE contract_address = '\xeb4c2781e4eba804ce9a9803c67d0893436bb27d'
           AND erc.""from"" = '\x0000000000000000000000000000000000000000'
         GROUP BY 2
         UNION SELECT date_trunc('day', min(evt_block_time)) AS date,
                      tx.""from"" AS account
         FROM erc20.""ERC20_evt_Transfer"" erc
         INNER JOIN ethereum.""transactions"" tx ON erc.evt_tx_hash = tx.hash
         AND tx.block_time >= '2020-05-13'
         WHERE contract_address = '\x1c5db575e2ff833e46a2e9864c22f4b22e0b37c2'
           AND erc.""from"" = '\x0000000000000000000000000000000000000000'
         GROUP BY 2
         UNION SELECT date_trunc('day', min(evt_block_time)) AS date,
                      tx.""from"" AS account
         FROM erc20.""ERC20_evt_Transfer"" erc
         INNER JOIN ethereum.""transactions"" tx ON erc.evt_tx_hash = tx.hash
         AND tx.block_time >= '2020-05-13'
         WHERE contract_address = '\x459086f2376525bdceba5bdda135e4e9d3fef5bf'
           AND erc.""from"" = '\x0000000000000000000000000000000000000000'
         GROUP BY 2) AS a
      GROUP BY 2) AS b
   GROUP BY 1
   ORDER BY 1) AS c"
2951,Total MakerDAO users over time,,"[{""id"": 5696, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": null}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0[.]00000"", ""columnMapping"": {""date"": ""x"", ""total_users"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""total_users"": {""type"": ""area"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""area""}, ""created_at"": ""2020-04-28T02:19:13.889+00:00"", ""__typename"": ""visualizations""}, {""id"": 5694, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2020-04-28T01:44:19.660274+00:00"", ""__typename"": ""visualizations""}]","SELECT date, sum(users) OVER (
                              ORDER BY date ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS total_users
FROM
  (SELECT date, count(USER) AS users
   FROM
     (SELECT min(date) AS date,
             account AS USER
      FROM
        (SELECT date_trunc('day', min(evt_block_time)) AS date,
                lad AS account
         FROM maker.""SaiTub_evt_LogNewCup""
         GROUP BY 2
         UNION SELECT date_trunc('day', min(block_time)) AS date,
                      borrower
         FROM lending.""borrow""
         WHERE project='MakerDAO'
         GROUP BY 2) AS a
      GROUP BY 2) AS b
   GROUP BY 1
   ORDER BY 1) AS c"
2964,Total Nexus Mutual users over time,,"[{""id"": 5723, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2020-04-28T16:02:21.579545+00:00"", ""__typename"": ""visualizations""}, {""id"": 5729, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": null}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0[.]00000"", ""columnMapping"": {""date"": ""x"", ""total_users"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""total_users"": {""type"": ""area"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""area""}, ""created_at"": ""2020-04-28T16:04:55.050117+00:00"", ""__typename"": ""visualizations""}]","SELECT date, sum(users) OVER (
                              ORDER BY date ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS total_users
FROM
  (SELECT date, count(USER) AS users
   FROM
     (SELECT min(date) AS date,
             account AS USER
      FROM
        (SELECT date_trunc('day', min(block_time)) AS date,
                ""from"" AS account
         FROM ethereum.""transactions""
         WHERE ""to"" = '\xd7c49cee7e9188cca6ad8ff264c1da2e69d4cf3b'
           AND block_time >= '2019-05-23'
           AND success
         GROUP BY 2) AS a
      GROUP BY 2) AS b
   GROUP BY 1
   ORDER BY 1) AS c"
7176,Total Yearn users over time,,"[{""id"": 14231, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2020-07-30T21:03:04.655503+00:00"", ""__typename"": ""visualizations""}, {""id"": 14232, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": null}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0[.]00000"", ""columnMapping"": {""date"": ""x"", ""total_users"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""total_users"": {""type"": ""area"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""area""}, ""created_at"": ""2020-07-30T21:03:04.655503+00:00"", ""__typename"": ""visualizations""}]","SELECT date, sum(users) OVER (
                              ORDER BY date) AS total_users
FROM
  (SELECT date, count(USER) AS users
   FROM
     (SELECT min(date) AS date,
             account AS USER
      FROM
        (SELECT date_trunc('day', min(block_time)) AS date,
                ""from"" AS account
         FROM ethereum.""transactions""
         WHERE ""to"" in ('\x9ca85572e6a3ebf24dedd195623f188735a5179f', -- 3CRV
                        '\x29E240CFD7946BA20895a7a02eDb25C210f9f324', -- aLINK
                        '\x03403154afc09Ce8e44C3B185C82C6aD5f86b9ab', -- crvAAVE
                        '\xE625F5923303f1CE7A43ACFEFd11fd12f30DbcA4', -- crvAETH
                        '\xE625F5923303f1CE7A43ACFEFd11fd12f30DbcA4', -- crvBBTC
                        '\x2994529c0652d127b7842094103715ec5299bbed', -- crvBUSD
                        '\x629c759D1E83eFbF63d84eb3868B564d9521C129', -- crvCOMP
                        '\x8e6741b456a074F0Bc45B8b82A755d4aF7E965dF', -- crvDUSD
                        '\xec0d8d3ed5477106c6d4ea27d90a60e594693c90', -- crvGUSD
                        '\x46AFc2dfBd1ea0c0760CAD8262A5838e803A37e5', -- crvHBTC
                        '\x39546945695DCb1c037C836925B355262f551f55', -- crvHUSD
                        '\x96Ea6AF74Af09522fCB4c28C269C26F59a31ced6', -- crvLINK
                        '\x0FCDAeDFb8A7DfDa2e9838564c5A1665d856AFDF', -- crvMUSD
                        '\x7F83935EcFe4729c4Ea592Ab2bC1A32588409797', -- crvOBTC
                        '\x123964EbE096A920dae00Fb795FFBfA0c9Ff4675', -- crvPBTC
                        '\x5334e150B938dd2b6bd040D9c4a03Cff0cED3765', -- crvRENBTC
                        '\xBacB69571323575C6a5A3b4F9EEde1DC7D31FBc1', -- crvSAAVE
                        '\x7Ff566E1d69DEfF32a7b244aE7276b9f90e9D0f6', -- crvSBTC
                        '\x5533ed0a3b83F70c3c4a1f69Ef5546D3D4713E44', -- crvSUSD
                        '\x07FB4756f67bD46B748b16119E802F1f880fb2CC', -- crvTBTC
                        '\xFe39Ce91437C76178665D64d7a2694B0f6f17fE3', -- crvUSDN
                        '\x1B5eb1173D2Bf770e50F10410C9a96F7a8eB6e75', -- crvUSDP
                        '\xF6C9E9AF314982A4b38366f4AbfAa00595C5A6fC', -- crvUST
                        '\x2994529C0652D127b7842094103715ec5299bBed', -- crvYBUSD
                        '\xacd43e627e64355f1861cec6d3a6688b31a6f952', -- DAI
                        '\x98B058b2CBacF5E99bC7012DF757ea7CFEbd35BC', -- eursCRV
                        '\xe11ba472F74869176652C35D30dB89854b5ae84D', -- HEGIC
                        '\x881b06da56BB5675c54E4Ed311c21E54C5025298', -- LINK
                        '\xE0db48B4F71752C4bEf16De1DBD042B82976b8C7', -- mUSD
                        '\xdCD90C7f6324cfa40d7169ef80b12031770B4325', -- steCRV
                        '\x37d19d1c4E1fa9DC47bD1eA12f742a0887eDa74a', -- TUSD
                        '\x597aD1e0c13Bfe8025993D9e79C69E1c0233522e', -- USDC
                        '\x2f08119c6f07c006695e079aafc638b8789faf18', -- USDT
                        '\xe1237aA7f535b0CC33Fd973D66cBf830354D16c7', -- WETH
                        '\x5dbcF33D8c2E976c6b560249878e6F1491Bca25c', -- yCRV
                        '\xba2e7fed597fd0e3e70f5130bcdbbfe06bb94fe1') -- YFI
           AND block_time >= '2020-07-26'
           AND success
         GROUP BY 2) a
      GROUP BY 2) b
   GROUP BY 1
   ORDER BY 1) c"
2999,Total 1inch users over time,,"[{""id"": 5793, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2020-04-29T00:58:34.122655+00:00"", ""__typename"": ""visualizations""}, {""id"": 5795, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": null}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0[.]00000"", ""columnMapping"": {""date"": ""x"", ""total_users"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""total_users"": {""type"": ""area"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""area""}, ""created_at"": ""2020-04-29T01:07:34.122588+00:00"", ""__typename"": ""visualizations""}]","SELECT date, sum(users) OVER (
                              ORDER BY date ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS total_users
FROM
  (SELECT date, count(account) AS users
   FROM
     (SELECT min(date) AS date,
             account
      FROM
        (SELECT date_trunc('day', min(block_time)) AS date,
                tx_from AS account
         FROM oneinch.swaps
         GROUP BY 2
         UNION SELECT date_trunc('day', min(block_time)) AS date,
                      tx_from AS account
         FROM onesplit.swaps
         GROUP BY 2) AS a
      GROUP BY 2) AS b
   GROUP BY 1
   ORDER BY 1) AS c"
11521,Total CREAM users over time,,"[{""id"": 22886, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": null}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0[.]00000"", ""columnMapping"": {""date"": ""x"", ""total_users"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""total_users"": {""type"": ""area"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""area""}, ""created_at"": ""2020-10-14T23:50:01.297095+00:00"", ""__typename"": ""visualizations""}, {""id"": 22885, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2020-10-14T23:49:46.79623+00:00"", ""__typename"": ""visualizations""}]","SELECT date, sum(users) OVER (
                              ORDER BY date ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS total_users
FROM
  (SELECT date, count(USER) AS users
   FROM
     (SELECT min(date) AS date,
             account AS USER
      FROM
        (SELECT date_trunc('day', min(evt_block_time)) AS date,
                minter AS account
         FROM creamfinance.""CErc20Delegate_evt_Mint""
         GROUP BY 2
         UNION SELECT date_trunc('day', min(evt_block_time)) AS date,
                      borrower AS account
         FROM creamfinance.""CErc20Delegate_evt_Borrow""
         GROUP BY 2
         UNION SELECT date_trunc('day', min(evt_block_time)) AS date,
                      minter AS account
         FROM creamfinance.""CEther_evt_Mint""
         GROUP BY 2
         UNION SELECT date_trunc('day', min(evt_block_time)) AS date,
                      borrower AS account
         FROM creamfinance.""CEther_evt_Borrow""
         GROUP BY 2) AS a
      GROUP BY 2) AS b
   GROUP BY 1
   ORDER BY 1) AS c"
4170,Total PoolTogether users over time,,"[{""id"": 8110, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2020-06-03T22:00:05.830895+00:00"", ""__typename"": ""visualizations""}, {""id"": 8111, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": null}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0[.]00000"", ""columnMapping"": {""date"": ""x"", ""total_users"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""total_users"": {""type"": ""area"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""area""}, ""created_at"": ""2020-06-03T22:00:49.889758+00:00"", ""__typename"": ""visualizations""}]","SELECT date, sum(users) OVER (
                              ORDER BY date ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS total_users
FROM
  (SELECT date, count(USER) AS users
   FROM
     (SELECT min(date) AS date,
             account AS USER
      FROM
        (SELECT date_trunc('day', min(evt_block_time)) AS date,
                sender AS account
         FROM pooltogether.""MCDAwarePool_evt_Deposited""
         GROUP BY 2
         UNION SELECT date_trunc('day', min(evt_block_time)) AS date,
                      sender AS account
         FROM pooltogether_v1.""Pool1_evt_BoughtTickets""
         GROUP BY 2
         UNION SELECT date_trunc('day', min(evt_block_time)) AS date,
                      sender AS account
         FROM pooltogether_v2.""Pool3_evt_Deposited""
         GROUP BY 2
         UNION SELECT date_trunc('day', min(evt_block_time)) AS date,
         OPERATOR AS account
         FROM pooltogether_v3.""CompoundPrizePool_evt_Deposited""
         GROUP BY 2) AS a
      GROUP BY 2) AS b
   GROUP BY 1
   ORDER BY 1) AS c"
11523,Total Bancor users over time,,"[{""id"": 22889, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2020-10-14T23:54:01.202397+00:00"", ""__typename"": ""visualizations""}, {""id"": 22890, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": null}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0[.]00000"", ""columnMapping"": {""date"": ""x"", ""total_users"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""total_users"": {""type"": ""area"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""area""}, ""created_at"": ""2020-10-14T23:54:01.202397+00:00"", ""__typename"": ""visualizations""}]","SELECT date, sum(users) OVER (
                              ORDER BY date ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS total_users
FROM
  (SELECT date, count(USER) AS users
   FROM
     (SELECT min(date) AS date,
             account AS USER
      FROM
        (SELECT date_trunc('day', min(block_time)) AS date,
                trader_a AS account
         FROM dex.trades
         WHERE project = 'Bancor Network'
         GROUP BY 2
         UNION SELECT date_trunc('day', min(block_time)) AS date,
                      trader_b AS account
         FROM dex.trades
         WHERE project = 'Bancor Network'
         GROUP BY 2) AS a
      GROUP BY 2) AS b
   GROUP BY 1
   ORDER BY 1) AS c"
2995,Total InstaDApp users over time,,"[{""id"": 5786, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2020-04-28T23:02:31.787513+00:00"", ""__typename"": ""visualizations""}, {""id"": 5787, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": null}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0[.]00000"", ""columnMapping"": {""date"": ""x"", ""total_users"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""total_users"": {""type"": ""area"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""area""}, ""created_at"": ""2020-04-28T23:03:01.032129+00:00"", ""__typename"": ""visualizations""}]","SELECT date, sum(users) OVER (
                              ORDER BY date ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS total_users
FROM
  (SELECT date, count(USER) AS users
   FROM
     (SELECT min(date) AS date,
             account AS USER
      FROM
        (SELECT date_trunc('day', min(evt_block_time)) AS date,
                OWNER AS account
         FROM instadapp_v2.""InstaRegistry_evt_Created""
         GROUP BY 2
         UNION SELECT date_trunc('day', min(evt_block_time)) AS date,
                      OWNER AS account
         FROM instadapp_dsa.""InstaIndex_evt_LogAccountCreated""
         GROUP BY 2) AS a
      GROUP BY 2) AS b
   GROUP BY 1
   ORDER BY 1) AS c"
27752,Hegic MAU,,"[{""id"": 56099, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-03-30T04:53:20.441008+00:00"", ""__typename"": ""visualizations""}, {""id"": 56103, ""type"": ""chart"", ""name"": ""Hegic Monthly Active Users"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Unique Users""}}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""columnMapping"": {""month"": ""x"", ""active_users"": ""y""}, ""seriesOptions"": {""active_users"": {""type"": ""column"", ""color"": ""#E0BB6C"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2021-03-30T05:14:41.756611+00:00"", ""__typename"": ""visualizations""}]","SELECT
date_trunc('month',evt_block_time) as month,
count(distinct ""owner"") as active_users,
'account' as account FROM hegic.""Hegic_evt_Approval""
group by date_trunc('month',evt_block_time)"
394613,LooksRare Monthly Active Users,,"[{""id"": 753033, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-02-03T05:24:16.640535+00:00"", ""__typename"": ""visualizations""}, {""id"": 753034, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Unique Users""}}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""###,###"", ""columnMapping"": {""Date"": ""x"", ""Users"": ""y"", ""looksrare"": ""y""}, ""seriesOptions"": {""Users"": {""type"": ""column"", ""color"": ""#03C406"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-02-03T05:24:16.640535+00:00"", ""__typename"": ""visualizations""}]","SELECT CASE WHEN '{{Aggregation}}'='Hours' THEN date_trunc('month', block_time) 
WHEN '{{Aggregation}}'='Days' THEN date_trunc('month', block_time) END AS ""Date"",
        COUNT(distinct users) AS ""Users""
    FROM (SELECT block_time,
        buyer AS users
    FROM nft.trades
    WHERE platform = 'LooksRare'
    AND block_number > 13975855
        UNION ALL
    SELECT block_time,
    seller AS users
    FROM nft.trades
    WHERE platform = 'LooksRare'
    AND block_number > 13975855) lr_txs
    GROUP BY 1"
27182,Bancor MAU,,"[{""id"": 55019, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-03-28T19:22:53.603891+00:00"", ""__typename"": ""visualizations""}, {""id"": 55021, ""type"": ""chart"", ""name"": ""Bancor Monthly Active Users"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Unique Users""}}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""columnMapping"": {""New"": ""y"", ""Old"": ""y"", ""time"": ""x""}, ""seriesOptions"": {""New"": {""type"": ""column"", ""color"": ""#ED7F2C"", ""yAxis"": 0, ""zIndex"": 0}, ""Old"": {""type"": ""column"", ""color"": ""#000000"", ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2021-03-28T19:24:50.531632+00:00"", ""__typename"": ""visualizations""}]","SELECT
    ssq.time, 
    new_users as ""New"",
    (unique_users - new_users) as ""Old""
FROM (
    SELECT
        sq.time, 
        COUNT(*) AS new_users
    FROM (
        SELECT 
            tx_from as unique_users,
            MIN(date_trunc('month', block_time)) AS time
        FROM dex.trades
        WHERE project = 'Bancor Network'
        GROUP BY 1
        ORDER BY 1
    ) sq
    GROUP BY 1
) ssq
LEFT JOIN (
        SELECT 
            date_trunc('month', block_time) AS time,
            COUNT(DISTINCT tx_from) AS unique_users
        FROM dex.trades
        WHERE project = 'Bancor Network' 
        GROUP BY 1
        ORDER BY 1
) t2 ON t2.time = ssq.time
ORDER BY 1 DESC
"
27298,Aave V2 MAU,,"[{""id"": 55248, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-03-29T03:31:36.758275+00:00"", ""__typename"": ""visualizations""}, {""id"": 55251, ""type"": ""chart"", ""name"": ""Aave V2 Monthly Active Users"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Users""}}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""columnMapping"": {"""": ""y"", ""month"": ""x"", ""active_users"": ""y""}, ""seriesOptions"": {""active_users"": {""type"": ""column"", ""color"": ""#9D40BF"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2021-03-29T03:45:04.237154+00:00"", ""__typename"": ""visualizations""}]","SELECT
date_trunc('month',evt_block_time) as month,
count(distinct ""user"") as active_users,
'deposit' as account FROM aave_v2.""LendingPool_evt_Deposit""
group by date_trunc('month',evt_block_time)
union
select 
date_trunc('month',evt_block_time) as month,
count(distinct ""user"") as active_users,
'borrow' as account FROM aave_v2.""LendingPool_evt_Borrow""
group by date_trunc('month',evt_block_time)
union 
select 
date_trunc('month',evt_block_time) as month,
count(distinct ""target"") as active_users,
'flashloan' as account FROM aave_v2.""LendingPool_evt_FlashLoan""
group by date_trunc('month',evt_block_time)"
27179,Kyber MAU,,"[{""id"": 55014, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-03-28T19:19:14.6004+00:00"", ""__typename"": ""visualizations""}, {""id"": 55018, ""type"": ""chart"", ""name"": ""Kyber Monthly Active Users"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Unique Users""}}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""columnMapping"": {""New"": ""y"", ""Old"": ""y"", ""time"": ""x""}, ""seriesOptions"": {""New"": {""type"": ""column"", ""color"": ""#8B69BF"", ""yAxis"": 0, ""zIndex"": 0}, ""Old"": {""type"": ""column"", ""color"": ""#000000"", ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2021-03-28T19:21:35.307564+00:00"", ""__typename"": ""visualizations""}]","SELECT
    ssq.time, 
    new_users as ""New"",
    (unique_users - new_users) as ""Old""
FROM (
    SELECT
        sq.time, 
        COUNT(*) AS new_users
    FROM (
        SELECT 
            tx_from as unique_users,
            MIN(date_trunc('month', block_time)) AS time
        FROM dex.trades
        WHERE project = 'Kyber'
        GROUP BY 1
        ORDER BY 1
    ) sq
    GROUP BY 1
) ssq
LEFT JOIN (
        SELECT 
            date_trunc('month', block_time) AS time,
            COUNT(DISTINCT tx_from) AS unique_users
        FROM dex.trades
        WHERE project = 'Kyber' 
        GROUP BY 1
        ORDER BY 1
) t2 ON t2.time = ssq.time
ORDER BY 1 DESC
"
27191,Synthetix MAU,,"[{""id"": 55038, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-03-28T19:38:24.187806+00:00"", ""__typename"": ""visualizations""}, {""id"": 55042, ""type"": ""chart"", ""name"": ""Synthetix Monthly Active Users"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Unique Users""}}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""columnMapping"": {""New"": ""y"", ""Old"": ""y"", ""time"": ""x""}, ""seriesOptions"": {""New"": {""type"": ""column"", ""color"": ""#22D8AB"", ""yAxis"": 0, ""zIndex"": 0}, ""Old"": {""type"": ""column"", ""color"": ""#000000"", ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2021-03-28T19:41:51.512047+00:00"", ""__typename"": ""visualizations""}]","SELECT
    ssq.time, 
    new_users as ""New"",
    (unique_users - new_users) as ""Old""
FROM (
    SELECT
        sq.time, 
        COUNT(*) AS new_users
    FROM (
        SELECT 
            tx_from as unique_users,
            MIN(date_trunc('month', block_time)) AS time
        FROM dex.trades
        WHERE project = 'Synthetix'
        GROUP BY 1
        ORDER BY 1
    ) sq
    GROUP BY 1
) ssq
LEFT JOIN (
        SELECT 
            date_trunc('month', block_time) AS time,
            COUNT(DISTINCT tx_from) AS unique_users
        FROM dex.trades
        WHERE project = 'Synthetix' 
        GROUP BY 1
        ORDER BY 1
) t2 ON t2.time = ssq.time
ORDER BY 1 DESC
"
27168,Balancer MAU,,"[{""id"": 54985, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-03-28T18:51:23.125983+00:00"", ""__typename"": ""visualizations""}, {""id"": 54986, ""type"": ""chart"", ""name"": ""Balancer Monthly Active Users "", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Unique Users""}}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""columnMapping"": {""New"": ""y"", ""Old"": ""y"", ""time"": ""x""}, ""seriesOptions"": {""New"": {""type"": ""column"", ""color"": ""#1AD8F9"", ""yAxis"": 0, ""zIndex"": 0}, ""Old"": {""type"": ""column"", ""color"": ""#000000"", ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2021-03-28T18:51:23.125983+00:00"", ""__typename"": ""visualizations""}]","SELECT
    ssq.time, 
    new_users as ""New"",
    (unique_users - new_users) as ""Old""
FROM (
    SELECT
        sq.time, 
        COUNT(*) AS new_users
    FROM (
        SELECT 
            tx_from as unique_users,
            MIN(date_trunc('month', block_time)) AS time
        FROM dex.trades
        WHERE project = 'Balancer'
        GROUP BY 1
        ORDER BY 1
    ) sq
    GROUP BY 1
) ssq
LEFT JOIN (
        SELECT 
            date_trunc('month', block_time) AS time,
            COUNT(DISTINCT tx_from) AS unique_users
        FROM dex.trades
        WHERE project = 'Balancer' 
        GROUP BY 1
        ORDER BY 1
) t2 ON t2.time = ssq.time
ORDER BY 1 DESC
"
27166,Uniswap MAU,,"[{""id"": 54982, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-03-28T18:43:14.355193+00:00"", ""__typename"": ""visualizations""}, {""id"": 54983, ""type"": ""chart"", ""name"": ""Uniswap Monthly Active Users"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Unique Users""}}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""columnMapping"": {""New"": ""y"", ""Old"": ""y"", ""time"": ""x""}, ""seriesOptions"": {""New"": {""type"": ""column"", ""color"": ""#F50083"", ""yAxis"": 0, ""zIndex"": 0}, ""Old"": {""type"": ""column"", ""color"": ""#0B0A0A"", ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2021-03-28T18:47:07.263799+00:00"", ""__typename"": ""visualizations""}]","SELECT
    ssq.time, 
    new_users as ""New"",
    (unique_users - new_users) as ""Old""
FROM (
    SELECT
        sq.time, 
        COUNT(*) AS new_users
    FROM (
        SELECT 
            tx_from as unique_users,
            MIN(date_trunc('month', block_time)) AS time
        FROM dex.trades
        WHERE project = 'Uniswap'
        GROUP BY 1
        ORDER BY 1
    ) sq
    GROUP BY 1
) ssq
LEFT JOIN (
        SELECT 
            date_trunc('month', block_time) AS time,
            COUNT(DISTINCT tx_from) AS unique_users
        FROM dex.trades
        WHERE project = 'Uniswap' 
        GROUP BY 1
        ORDER BY 1
) t2 ON t2.time = ssq.time
ORDER BY 1 DESC
"
27293,Ox (API) MAU,,"[{""id"": 55234, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-03-29T03:01:24.350516+00:00"", ""__typename"": ""visualizations""}, {""id"": 55235, ""type"": ""chart"", ""name"": ""0x (API) Monthly Active Users"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Unique Users""}}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""columnMapping"": {""New"": ""y"", ""Old"": ""y"", ""time"": ""x""}, ""seriesOptions"": {""New"": {""type"": ""column"", ""color"": ""#2670E8"", ""yAxis"": 0, ""zIndex"": 0}, ""Old"": {""type"": ""column"", ""color"": ""#000000"", ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2021-03-29T03:03:59.262655+00:00"", ""__typename"": ""visualizations""}]","SELECT
    ssq.time, 
    new_users as ""New"",
    (unique_users - new_users) as ""Old""
FROM (
    SELECT
        sq.time, 
        COUNT(*) AS new_users
    FROM (
        SELECT 
            tx_from as unique_users,
            MIN(date_trunc('month', block_time)) AS time
        FROM dex.trades
        WHERE project = '0x API'
        GROUP BY 1
        ORDER BY 1
    ) sq
    GROUP BY 1
) ssq
LEFT JOIN (
        SELECT 
            date_trunc('month', block_time) AS time,
            COUNT(DISTINCT tx_from) AS unique_users
        FROM dex.trades
        WHERE project = '0x API' 
        GROUP BY 1
        ORDER BY 1
) t2 ON t2.time = ssq.time
ORDER BY 1 DESC
"
396491,OpenSea Monthly Active Users (Ethereum),Registered users who have made at least one transaction,"[{""id"": 756556, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2022-02-04T01:18:47.377409+00:00"", ""__typename"": ""visualizations""}, {""id"": 756557, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Unique Users""}}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""0,0[.]00000"", ""columnMapping"": {""date"": ""x"", ""count"": ""y"", ""users"": ""y""}, ""seriesOptions"": {""users"": {""type"": ""column"", ""color"": ""#0ACEF5"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-02-04T01:18:47.377409+00:00"", ""__typename"": ""visualizations""}]","SELECT date, count(account) AS users
FROM
  (SELECT date_trunc('month', evt_block_time) AS date,
          maker AS account
   FROM opensea.""WyvernExchange_evt_OrdersMatched""
   UNION SELECT date_trunc('month', evt_block_time) AS date,
                taker AS account
   FROM opensea.""WyvernExchange_evt_OrdersMatched"") a
GROUP BY 1
ORDER BY 1"
27284,Matcha MAU,,"[{""id"": 55217, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-03-29T02:39:55.078739+00:00"", ""__typename"": ""visualizations""}, {""id"": 55218, ""type"": ""chart"", ""name"": ""Matcha Monthly Active Users"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Unique Users""}}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""columnMapping"": {""New"": ""y"", ""Old"": ""y"", ""time"": ""x""}, ""seriesOptions"": {""New"": {""type"": ""column"", ""color"": ""#DF1666"", ""yAxis"": 0, ""zIndex"": 0}, ""Old"": {""type"": ""column"", ""color"": ""#000000"", ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2021-03-29T02:43:15.696829+00:00"", ""__typename"": ""visualizations""}]","SELECT
    ssq.time, 
    new_users as ""New"",
    (unique_users - new_users) as ""Old""
FROM (
    SELECT
        sq.time, 
        COUNT(*) AS new_users
    FROM (
        SELECT 
            tx_from as unique_users,
            MIN(date_trunc('month', block_time)) AS time
        FROM dex.trades
        WHERE project = 'Matcha'
        GROUP BY 1
        ORDER BY 1
    ) sq
    GROUP BY 1
) ssq
LEFT JOIN (
        SELECT 
            date_trunc('month', block_time) AS time,
            COUNT(DISTINCT tx_from) AS unique_users
        FROM dex.trades
        WHERE project = 'Matcha' 
        GROUP BY 1
        ORDER BY 1
) t2 ON t2.time = ssq.time
ORDER BY 1 DESC
"
27177,Sushiswap MAU,,"[{""id"": 55010, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-03-28T19:13:55.773055+00:00"", ""__typename"": ""visualizations""}, {""id"": 55011, ""type"": ""chart"", ""name"": ""Sushiswap Monthly Active Users"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Unique Users ""}}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""columnMapping"": {""New"": ""y"", ""Old"": ""y"", ""time"": ""x""}, ""seriesOptions"": {""New"": {""type"": ""column"", ""color"": ""#17DE1E"", ""yAxis"": 0, ""zIndex"": 0}, ""Old"": {""type"": ""column"", ""color"": ""#000000"", ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2021-03-28T19:17:30.035106+00:00"", ""__typename"": ""visualizations""}]","SELECT
    ssq.time, 
    new_users as ""New"",
    (unique_users - new_users) as ""Old""
FROM (
    SELECT
        sq.time, 
        COUNT(*) AS new_users
    FROM (
        SELECT 
            tx_from as unique_users,
            MIN(date_trunc('month', block_time)) AS time
        FROM dex.trades
        WHERE project = 'Sushiswap'
        GROUP BY 1
        ORDER BY 1
    ) sq
    GROUP BY 1
) ssq
LEFT JOIN (
        SELECT 
            date_trunc('month', block_time) AS time,
            COUNT(DISTINCT tx_from) AS unique_users
        FROM dex.trades
        WHERE project = 'Sushiswap' 
        GROUP BY 1
        ORDER BY 1
) t2 ON t2.time = ssq.time
ORDER BY 1 DESC
"
27184,Curve MAU,,"[{""id"": 55024, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-03-28T19:27:31.872146+00:00"", ""__typename"": ""visualizations""}, {""id"": 55030, ""type"": ""chart"", ""name"": ""Curve Monthly Active Users"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Unique Users""}}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""columnMapping"": {""New"": ""y"", ""Old"": ""y"", ""time"": ""x""}, ""seriesOptions"": {""New"": {""type"": ""column"", ""color"": ""#E4F40B"", ""yAxis"": 0, ""zIndex"": 0}, ""Old"": {""type"": ""column"", ""color"": ""#000005"", ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2021-03-28T19:29:00.038956+00:00"", ""__typename"": ""visualizations""}]","SELECT
    ssq.time, 
    new_users as ""New"",
    (unique_users - new_users) as ""Old""
FROM (
    SELECT
        sq.time, 
        COUNT(*) AS new_users
    FROM (
        SELECT 
            tx_from as unique_users,
            MIN(date_trunc('month', block_time)) AS time
        FROM dex.trades
        WHERE project = 'Curve'
        GROUP BY 1
        ORDER BY 1
    ) sq
    GROUP BY 1
) ssq
LEFT JOIN (
        SELECT 
            date_trunc('month', block_time) AS time,
            COUNT(DISTINCT tx_from) AS unique_users
        FROM dex.trades
        WHERE project = 'Curve' 
        GROUP BY 1
        ORDER BY 1
) t2 ON t2.time = ssq.time
ORDER BY 1 DESC
"
27188,0x (Native) MAU,,"[{""id"": 55033, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-03-28T19:31:31.054723+00:00"", ""__typename"": ""visualizations""}, {""id"": 55034, ""type"": ""chart"", ""name"": ""0x (Native) Monthly Active Users"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Unique Users""}}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""columnMapping"": {""New"": ""y"", ""Old"": ""y"", ""time"": ""x""}, ""seriesOptions"": {""New"": {""type"": ""column"", ""color"": ""#389F72"", ""yAxis"": 0, ""zIndex"": 0}, ""Old"": {""type"": ""column"", ""color"": ""#000000"", ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2021-03-28T19:33:51.898415+00:00"", ""__typename"": ""visualizations""}]","SELECT
    ssq.time, 
    new_users as ""New"",
    (unique_users - new_users) as ""Old""
FROM (
    SELECT
        sq.time, 
        COUNT(*) AS new_users
    FROM (
        SELECT 
            tx_from as unique_users,
            MIN(date_trunc('month', block_time)) AS time
        FROM dex.trades
        WHERE project = '0x Native'
        GROUP BY 1
        ORDER BY 1
    ) sq
    GROUP BY 1
) ssq
LEFT JOIN (
        SELECT 
            date_trunc('month', block_time) AS time,
            COUNT(DISTINCT tx_from) AS unique_users
        FROM dex.trades
        WHERE project = '0x Native' 
        GROUP BY 1
        ORDER BY 1
) t2 ON t2.time = ssq.time
ORDER BY 1 DESC
"
27731,dYdX Perp MAU,,"[{""id"": 56067, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-03-30T02:32:46.553981+00:00"", ""__typename"": ""visualizations""}, {""id"": 56068, ""type"": ""chart"", ""name"": ""dYdX Perpetual Monthly Active Users"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Month""}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Unique Users""}}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""columnMapping"": {""month"": ""x"", ""active_users"": ""y""}, ""seriesOptions"": {""active_users"": {""type"": ""column"", ""color"": ""#98CFE7"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2021-03-30T02:34:25.878667+00:00"", ""__typename"": ""visualizations""}]","SELECT
date_trunc('month',evt_block_time) as month,
count(distinct ""maker"") as active_users,
'maker' as user FROM dydx_perpetual.""PerpetualV1_evt_LogTrade""
group by date_trunc('month',evt_block_time)"
27288,LINKSWAP MAU,,"[{""id"": 55224, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-03-29T02:49:28.202306+00:00"", ""__typename"": ""visualizations""}, {""id"": 55233, ""type"": ""chart"", ""name"": ""LINKSWAP Monthly Active Users"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Unique Users""}}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""columnMapping"": {""New"": ""y"", ""Old"": ""y"", ""time"": ""x""}, ""seriesOptions"": {""New"": {""type"": ""column"", ""color"": ""#F50000"", ""yAxis"": 0, ""zIndex"": 0}, ""Old"": {""type"": ""column"", ""color"": ""#000000"", ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2021-03-29T02:54:56.8146+00:00"", ""__typename"": ""visualizations""}]","SELECT
    ssq.time, 
    new_users as ""New"",
    (unique_users - new_users) as ""Old""
FROM (
    SELECT
        sq.time, 
        COUNT(*) AS new_users
    FROM (
        SELECT 
            tx_from as unique_users,
            MIN(date_trunc('month', block_time)) AS time
        FROM dex.trades
        WHERE project = 'LINKSWAP'
        GROUP BY 1
        ORDER BY 1
    ) sq
    GROUP BY 1
) ssq
LEFT JOIN (
        SELECT 
            date_trunc('month', block_time) AS time,
            COUNT(DISTINCT tx_from) AS unique_users
        FROM dex.trades
        WHERE project = 'LINKSWAP' 
        GROUP BY 1
        ORDER BY 1
) t2 ON t2.time = ssq.time
ORDER BY 1 DESC
"
27170,1inch MAU,,"[{""id"": 54991, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-03-28T18:59:46.873821+00:00"", ""__typename"": ""visualizations""}, {""id"": 54992, ""type"": ""chart"", ""name"": ""1inch Monthly Active Users"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Unique Users""}}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""columnMapping"": {""New"": ""y"", ""Old"": ""y"", ""time"": ""x""}, ""seriesOptions"": {""New"": {""type"": ""column"", ""color"": ""#E10909"", ""yAxis"": 0, ""zIndex"": 0}, ""Old"": {""type"": ""column"", ""color"": ""#000000"", ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2021-03-28T19:03:04.326999+00:00"", ""__typename"": ""visualizations""}, {""id"": 55007, ""type"": ""chart"", ""name"": ""1inch Monthly Active Users"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Unique Users""}}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""columnMapping"": {""New"": ""y"", ""Old"": ""y"", ""time"": ""x""}, ""seriesOptions"": {""New"": {""type"": ""column"", ""color"": ""#ED0707"", ""yAxis"": 0, ""zIndex"": 0}, ""Old"": {""type"": ""column"", ""color"": ""#000005"", ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2021-03-28T19:10:45.607339+00:00"", ""__typename"": ""visualizations""}]","SELECT
    ssq.time, 
    new_users as ""New"",
    (unique_users - new_users) as ""Old""
FROM (
    SELECT
        sq.time, 
        COUNT(*) AS new_users
    FROM (
        SELECT 
            tx_from as unique_users,
            MIN(date_trunc('month', block_time)) AS time
        FROM dex.trades
        WHERE project = '1inch'
        GROUP BY 1
        ORDER BY 1
    ) sq
    GROUP BY 1
) ssq
LEFT JOIN (
        SELECT 
            date_trunc('month', block_time) AS time,
            COUNT(DISTINCT tx_from) AS unique_users
        FROM dex.trades
        WHERE project = '1inch' 
        GROUP BY 1
        ORDER BY 1
) t2 ON t2.time = ssq.time
ORDER BY 1 DESC
"
276473,Daily liquidations per protocol (last 14 days),,"[{""id"": 521149, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-12-04T12:23:41.862678+00:00"", ""__typename"": ""visualizations""}, {""id"": 527079, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""columnMapping"": {""day"": ""x"", ""sum"": ""y"", ""project"": ""series""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2021-12-06T09:02:33.801479+00:00"", ""__typename"": ""visualizations""}]","with flipper_contracts (symbol, project, contract_address, underlying_token_address) AS (VALUES
        ('MakerDAO'::text, 'WETH'::text,   '\xF32836B9E1f47a0515c6Ec431592D5EbC276407f'::bytea, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea), --
    ('MakerDAO'::text, 'WETH'::text,   '\xF04a5cC80B1E94C69B48f5ee68a08CD2F09A7c3E'::bytea, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea), --v
    ('MakerDAO'::text, 'WETH'::text,   '\x7A67901A68243241EBf66beEB0e7b5395582BF17'::bytea, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea), --
    ('MakerDAO'::text, 'BAT'::text,   '\xF7C569B2B271354179AaCC9fF1e42390983110BA'::bytea, '\x0d8775f648430679a709e98d2b0cb6250d2887ef'::bytea), --
    ('MakerDAO'::text, 'USDC'::text,   '\xbe359e53038E41a1ffA47DAE39645756C80e557a'::bytea, '\xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48'::bytea), --
    ('MakerDAO'::text, 'USDC'::text,   '\x77282aD36aADAfC16bCA42c865c674F108c4a616'::bytea, '\xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48'::bytea), --
    ('MakerDAO'::text, 'TUSD'::text,   '\x9E4b213C4defbce7564F2Ac20B6E3bF40954C440'::bytea, '\x0000000000085d4780B73119b644AE5ecd22b376'::bytea), --
    ('MakerDAO'::text, 'ZRX'::text,   '\xa4341cAf9F9F098ecb20fb2CeE2a0b8C78A18118'::bytea, '\xe41d2489571d322189246dafa5ebde1f4699f498'::bytea), --
    ('MakerDAO'::text, 'KNC'::text,   '\x57B01F1B3C59e2C0bdfF3EC9563B71EEc99a3f2f'::bytea, '\xdd974d5c2e2928dea5f71b9825b8b646686bd200'::bytea), --
    ('MakerDAO'::text, 'Mana'::text,   '\x0a1D75B4f49BA80724a214599574080CD6B68357'::bytea, '\x0f5d2fb29fb7d3cfee444a200298f468908cc942'::bytea), --
    ('MakerDAO'::text, 'USDT'::text,   '\x667F41d0fDcE1945eE0f56A79dd6c142E37fCC26'::bytea, '\xdac17f958d2ee523a2206206994597c13d831ec7'::bytea), --
    ('MakerDAO'::text, 'PAXUSD'::text,   '\x52D5D1C05CC79Fc24A629Cb24cB06C5BE5d766E7'::bytea, '\x8e870d67f660d95d5be530380d0ec0bd388289e1'::bytea), --
    ('MakerDAO'::text, 'COMP'::text,   '\x524826F84cB3A19B6593370a5889A58c00554739'::bytea, '\xc00e94cb662c3520282e6f5717214004a7f26888'::bytea), --
    ('MakerDAO'::text, 'LRC'::text,   '\x7FdDc36dcdC435D8F54FDCB3748adcbBF70f3dAC'::bytea, '\xbbbbca6a901c926f240b89eacb641d8aec7aeafd'::bytea), --
    ('MakerDAO'::text, 'LINK'::text,   '\xB907EEdD63a30A3381E6D898e5815Ee8c9fd2c85'::bytea, '\x514910771af9ca656af840dff83e8264ecf986ca'::bytea), --
    ('MakerDAO'::text, 'WBTC'::text,   '\x58CD24ac7322890382eE45A3E4F903a5B22Ee930'::bytea, '\x2260fac5e5542a773aa44fbcfedf7c193bc2c599'::bytea), --
    ('MakerDAO'::text, 'BAL'::text,   '\xb2b9bd446eE5e58036D2876fce62b7Ab7334583e'::bytea, '\xba100000625a3754423978a60c9317c58a424e3d'::bytea), --
    ('MakerDAO'::text, 'YFI'::text,   '\xEe4C9C36257afB8098059a4763A374a4ECFE28A7'::bytea, '\x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e'::bytea), --
    ('MakerDAO'::text, 'GUSD'::text,   '\xCAa8D152A8b98229fB77A213BE16b234cA4f612f'::bytea, '\x056Fd409E1d7A124BD7017459dFEa2F387b6d5Cd'::bytea), --
    ('MakerDAO'::text, 'UNI'::text,   '\xF5b8cD9dB5a0EC031304A7B815010aa7761BD426'::bytea, '\x1f9840a85d5aF5bf1D1762F925BDADdC4201F984'::bytea), --
    ('MakerDAO'::text, 'RENBTC'::text,   '\x30BC6eBC27372e50606880a36B279240c0bA0758'::bytea, '\xEB4C2781e4ebA804CE9a9803C67d0893436bB27D'::bytea), --
    ('MakerDAO'::text, 'AAVE'::text,   '\x16e1b844094c885a37509a8f76c533B5fbFED13a'::bytea, '\x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9'::bytea), --
    ('MakerDAO'::text, 'UNIV2DAIUSDC'::text,   '\x4a613f79a250D522DdB53904D87b8f442EA94496'::bytea, '\xAE461cA67B15dc8dc81CE7615e0320dA1A9aB8D5'::bytea), --
    ('MakerDAO'::text, 'UNIV2DAIETH'::text,    '\x57dfd99f45747DD55C1c432Db4aEa07FBd5d2B5c'::bytea, '\xA478c2975Ab1Ea89e8196811F51A7B7Ade33eB11'::bytea), --
    ('MakerDAO'::text, 'UNIV2WBTCETH'::text,   '\xbc95e8904d879F371Ac6B749727a0EAfDCd2ACB6'::bytea, '\xBb2b8038a1640196FbE3e38816F3e67Cba72D940'::bytea), --
    ('MakerDAO'::text, 'UNIV2USDCETH'::text,   '\x48d2C08b93E57701C8ae8974Fc4ADd725222B0BB'::bytea, '\xB4e16d0168e52d35CaCD2c6185b44281Ec28C9Dc'::bytea), --
    ('MakerDAO'::text, 'UNIV2WBTCDAI'::text,   '\x172200d12D09C2698Dd918d347155fE6692f5662'::bytea, '\x231B7589426Ffe1b75405526fC32aC09D44364c4'::bytea), --
    ('MakerDAO'::text, 'UNIV2LINKETH'::text,   '\xb79f818E3c73FCA387845f892356224CA75eac4b'::bytea, '\xa2107FA5B38d9bbd2C461D6EDf11B11A50F6b974'::bytea), --
    ('MakerDAO'::text, 'UNIV2DAIUSDT'::text,   '\xD32f8B8aDbE331eC0CfADa9cfDbc537619622cFe'::bytea, '\xB20bd5D04BE54f870D5C0d3cA85d82b34B836405'::bytea), --
    ('MakerDAO'::text, 'UNIV2UNIETH'::text,    '\xe5ED7da0483e291485011D5372F3BF46235EB277'::bytea, '\xd3d2E2692501A5c9Ca623199D38826e513033a17'::bytea), --
    ('MakerDAO'::text, 'UNIV2ETHUSDT'::text,   '\x118d5051e70F9EaF3B4a6a11F765185A2Ca0802E'::bytea, '\x0d4a11d5EEaaC28EC3F61d100daF4d40471f1852'::bytea), --
    ('MakerDAO'::text, 'UNIV2AAVEETH'::text,   '\x20D298ca96bf8c2000203B911908DbDc1a8Bac58'::bytea, '\xDFC14d2Af169B0D36C4EFF567Ada9b2E0CAE044f'::bytea)    ), 

    clipper_contracts (symbol, project, contract_address, underlying_token_address) AS (VALUES
('MakerDAO'::text, 'WETH'::text,   '\xc67963a226eddd77B91aD8c421630A1b0AdFF270'::bytea, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea), --
    ('MakerDAO'::text, 'WETH'::text,   '\x71eb894330e8a4b96b8d6056962e7F116F50e06F'::bytea, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea), --v
    ('MakerDAO'::text, 'WETH'::text,   '\xc2b12567523e3f3CBd9931492b91fe65b240bc47'::bytea, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea), --
    ('MakerDAO'::text, 'BAT'::text,   '\x3D22e6f643e2F4c563fD9db22b229Cbb0Cd570fb'::bytea, '\x0d8775f648430679a709e98d2b0cb6250d2887ef'::bytea), --
    ('MakerDAO'::text, 'USDC'::text,   '\x046b1A5718da6A226D912cFd306BA19980772908'::bytea, '\xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48'::bytea), --
    ('MakerDAO'::text, 'USDC'::text,   '\x5590F23358Fe17361d7E4E4f91219145D8cCfCb3'::bytea, '\xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48'::bytea), --
    ('MakerDAO'::text, 'TUSD'::text,   '\x0F6f88f8A4b918584E3539182793a0C276097f44'::bytea, '\x0000000000085d4780B73119b644AE5ecd22b376'::bytea), --
    ('MakerDAO'::text, 'ZRX'::text,   '\xdc90d461E148552387f3aB3EBEE0Bdc58Aa16375'::bytea, '\xe41d2489571d322189246dafa5ebde1f4699f498'::bytea), --
    ('MakerDAO'::text, 'KNC'::text,   '\x006Aa3eB5E666D8E006aa647D4afAB212555Ddea'::bytea, '\xdd974d5c2e2928dea5f71b9825b8b646686bd200'::bytea), --
    ('MakerDAO'::text, 'Mana'::text,   '\xF5C8176E1eB0915359E46DEd16E52C071Bb435c0'::bytea, '\x0f5d2fb29fb7d3cfee444a200298f468908cc942'::bytea), --
    ('MakerDAO'::text, 'USDT'::text,   '\xFC9D6Dd08BEE324A5A8B557d2854B9c36c2AeC5d'::bytea, '\xdac17f958d2ee523a2206206994597c13d831ec7'::bytea), --
    ('MakerDAO'::text, 'PAXUSD'::text,   '\xBCb396Cd139D1116BD89562B49b9D1d6c25378B0'::bytea, '\x8e870d67f660d95d5be530380d0ec0bd388289e1'::bytea), --
    ('MakerDAO'::text, 'COMP'::text,   '\x2Bb690931407DCA7ecE84753EA931ffd304f0F38'::bytea, '\xc00e94cb662c3520282e6f5717214004a7f26888'::bytea), --
    ('MakerDAO'::text, 'LRC'::text,   '\x81C5CDf4817DBf75C7F08B8A1cdaB05c9B3f70F7'::bytea, '\xbbbbca6a901c926f240b89eacb641d8aec7aeafd'::bytea), --
    ('MakerDAO'::text, 'LINK'::text,   '\x832Dd5f17B30078a5E46Fdb8130A68cBc4a74dC0'::bytea, '\x514910771af9ca656af840dff83e8264ecf986ca'::bytea), --
    ('MakerDAO'::text, 'WBTC'::text,   '\x0227b54AdbFAEec5f1eD1dFa11f54dcff9076e2C'::bytea, '\x2260fac5e5542a773aa44fbcfedf7c193bc2c599'::bytea), --
    ('MakerDAO'::text, 'BAL'::text,   '\x6AAc067bb903E633A422dE7BE9355E62B3CE0378'::bytea, '\xba100000625a3754423978a60c9317c58a424e3d'::bytea), --
    ('MakerDAO'::text, 'YFI'::text,   '\x9daCc11dcD0aa13386D295eAeeBBd38130897E6f'::bytea, '\x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e'::bytea), --
    ('MakerDAO'::text, 'GUSD'::text,   '\xa47D68b9dB0A0361284fA04BA40623fcBd1a263E'::bytea, '\x056Fd409E1d7A124BD7017459dFEa2F387b6d5Cd'::bytea), --
    ('MakerDAO'::text, 'UNI'::text,   '\x3713F83Ee6D138Ce191294C131148176015bC29a'::bytea, '\x1f9840a85d5aF5bf1D1762F925BDADdC4201F984'::bytea), --
    ('MakerDAO'::text, 'RENBTC'::text,   '\x834719BEa8da68c46484E001143bDDe29370a6A3'::bytea, '\xEB4C2781e4ebA804CE9a9803C67d0893436bB27D'::bytea), --
    ('MakerDAO'::text, 'AAVE'::text,   '\x8723b74F598DE2ea49747de5896f9034CC09349e'::bytea, '\x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9'::bytea), --
    ('MakerDAO'::text,'MATIC'::text,   '\x29342F530ed6120BDB219D602DaFD584676293d1'::bytea, '\x7d1afa7b718fb893db30a3abc0cfc608aacfebb0'::bytea), --
    ('MakerDAO'::text, 'WSTETH'::text,   '\x49A33A28C4C7D9576ab28898F4C9ac7e52EA457A'::bytea, '\x7f39c581f595b53c5cb19bd0b3f8da6c935e2ca0'::bytea), --
    ('MakerDAO'::text, 'UNIV2DAIUSDC'::text,   '\x9B3310708af333f6F379FA42a5d09CBAA10ab309'::bytea, '\xAE461cA67B15dc8dc81CE7615e0320dA1A9aB8D5'::bytea), --
    ('MakerDAO'::text, 'UNIV2DAIETH'::text,   '\x9F6981bA5c77211A34B76c6385c0f6FA10414035'::bytea, '\xA478c2975Ab1Ea89e8196811F51A7B7Ade33eB11'::bytea), --
    ('MakerDAO'::text, 'UNIV2WBTCETH'::text,   '\xb15afaB996904170f87a64Fe42db0b64a6F75d24'::bytea, '\xBb2b8038a1640196FbE3e38816F3e67Cba72D940'::bytea), --
    ('MakerDAO'::text, 'UNIV2USDCETH'::text,   '\x93AE03815BAF1F19d7F18D9116E4b637cc32A131'::bytea, '\xB4e16d0168e52d35CaCD2c6185b44281Ec28C9Dc'::bytea), --
    ('MakerDAO'::text, 'UNIV2WBTCDAI'::text,   '\x4fC53a57262B87ABDa61d6d0DB2bE7E9BE68F6b8'::bytea, '\x231B7589426Ffe1b75405526fC32aC09D44364c4'::bytea), --
    ('MakerDAO'::text, 'UNIV2LINKETH'::text,   '\x6aa0520354d1b84e1C6ABFE64a708939529b619e'::bytea, '\xa2107FA5B38d9bbd2C461D6EDf11B11A50F6b974'::bytea), --
    ('MakerDAO'::text, 'UNIV2DAIUSDT'::text,   '\xe4B82Be84391b9e7c56a1fC821f47569B364dd4a'::bytea, '\xB20bd5D04BE54f870D5C0d3cA85d82b34B836405'::bytea), --
    ('MakerDAO'::text, 'GUNIV3DAIUSDC1'::text,   '\x5048c5Cd3102026472f8914557A1FD35c8Dc6c9e'::bytea, '\x6c6Bc977E13Df9b0de53b251522280BB72383700'::bytea), --
    ('MakerDAO'::text, 'UNIV2UNIETH'::text,   '\xb0ece6F5542A4577E2f1Be491A937Ccbbec8479e'::bytea, '\xd3d2E2692501A5c9Ca623199D38826e513033a17'::bytea), --
    ('MakerDAO'::text, 'UNIV2ETHUSDT'::text,   '\x2aC4C9b49051275AcB4C43Ec973082388D015D48'::bytea, '\x0d4a11d5EEaaC28EC3F61d100daF4d40471f1852'::bytea), --
    ('MakerDAO'::text, 'UNIV2AAVEETH'::text,   '\x854b252BA15eaFA4d1609D3B98e00cc10084Ec55'::bytea, '\xDFC14d2Af169B0D36C4EFF567Ada9b2E0CAE044f'::bytea) --    ),
), 
liquidations   as (
    SELECT
        project,
        version,
        liquidation.block_number,
        liquidation.block_time,
        tx_hash,
        evt_index,
        trace_address,
        tx.""from"" AS tx_from,
        liquidated_borrower,
        t.symbol AS debt_to_cover_asset_symbol,
        debt_to_cover_asset_address,
        collateral_asset_address,
        debt_to_cover_amount / 10^t.decimals AS debt_to_cover_token_amount,
        debt_to_cover_amount / 10^t.decimals*p.price AS debt_to_cover_usd_value
    FROM (

        -- Aave liquidation
        SELECT
            'Aave' AS project,
            '1' AS version,
            evt_block_number AS block_number,
            evt_block_time AS block_time,
            evt_tx_hash AS tx_hash,
            evt_index,
            NULL::integer[] AS trace_address,
            ""_user"" AS liquidated_borrower,
            CASE --Use WETH instead of Aave ""mock"" address
                WHEN _reserve = '\xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE' THEN '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'
                ELSE _reserve
            END AS debt_to_cover_asset_address,
            CASE --Use WETH instead of Aave ""mock"" address
                WHEN _collateral = '\xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE' THEN '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'
                ELSE _collateral
            END AS collateral_asset_address,
            ""_purchaseAmount"" AS debt_to_cover_amount
        FROM aave.""LendingPool_evt_LiquidationCall""
        WHERE evt_block_time >= '2022-01-01'
        AND evt_block_time < (SELECT now())

        UNION ALL
        --Aave 2 liquidation
        SELECT
            'Aave' AS project,
            '2' AS version,
            evt_block_number AS block_number,
            evt_block_time AS block_time,
            evt_tx_hash AS tx_hash,
            evt_index,
            NULL::integer[] AS trace_address,
            ""user"" AS liquidated_borrower,
            ""debtAsset"" AS debt_to_cover_asset_address,
            ""collateralAsset"" AS collateral_asset_address,
            ""debtToCover"" AS debt_to_cover_amount
        FROM aave_v2.""LendingPool_evt_LiquidationCall""
        WHERE evt_block_time >= '2022-01-01'
        AND evt_block_time < (SELECT now())
        AND ""receiveAToken"" = FALSE

    UNION ALL
    -- Compound liquidation

    SELECT
        'Compound' AS project,
        '2' AS version,
        evt_block_number AS block_number,
        evt_block_time AS block_time,
        evt_tx_hash AS tx_hash,
        evt_index,
        NULL::integer[] AS trace_address,
        borrower AS liquidated_borrower,
        c_asset.""asset_underlying_token_address"" AS debt_to_cover_asset_address,
        c_collateral.""collateral_underlying_token_address"" AS collateral_asset_address,
        ""repayAmount"" AS debt_to_cover_amount
    FROM (
        SELECT * FROM compound_v2.""cErc20_evt_LiquidateBorrow"" WHERE evt_block_time >= '2022-01-01' AND evt_block_time < (SELECT now())
        UNION ALL
        SELECT * FROM compound_v2.""cEther_evt_LiquidateBorrow"" WHERE evt_block_time >= '2022-01-01' AND evt_block_time < (SELECT now())
        UNION ALL
        SELECT * FROM compound_v2.""CErc20Delegator_evt_LiquidateBorrow"" WHERE evt_block_time >= '2022-01-01' AND evt_block_time < (SELECT now())
    ) c
    LEFT JOIN (SELECT contract_address as collateral_contract_address, 
                        underlying_token_address as collateral_underlying_token_address
                FROM compound.view_ctokens) c_collateral ON c.""cTokenCollateral"" = c_collateral.collateral_contract_address
    LEFT JOIN (SELECT contract_address as asset_contract_address, 
                        underlying_token_address as asset_underlying_token_address
                FROM compound.view_ctokens) c_asset ON c.contract_address = c_asset.asset_contract_address

        UNION ALL
        -- MakerDAO liquidation
        SELECT
            'MakerDAO' AS project,
            '2' AS version,
            evt_block_number AS block_number,
            evt_block_time AS block_time,
            evt_tx_hash AS tx_hash,
            evt_index,
            NULL::integer[] AS trace_address,
            liquidated_borrower,
            '\x6b175474e89094c44da98b954eedeac495271d0f'::bytea AS debt_to_cover_asset_address,
            m.""underlying_token_address"" AS collateral_asset_address,
            debt_to_cover_amount
        FROM (
            -- Liquidation V1.0
            SELECT evt_block_number, evt_block_time, evt_tx_hash, 
                   ""flip"" AS contract_address, evt_index,
                   ""art"" AS debt_to_cover_amount, ""urn"" AS liquidated_borrower 
            FROM makermcd.""CAT_evt_Bite""
            WHERE tab > 0
            AND evt_block_time >= '2022-01-01'
            AND evt_block_time < (SELECT now())

            UNION ALL
            -- Liquidation V2.0 
            SELECT evt_block_number, evt_block_time, evt_tx_hash, 
                   ""clip"" AS contract_address, evt_index,
                   ""art"" AS debt_to_cover_amount, ""urn"" AS liquidated_borrower
            FROM makerdao.""Dog_evt_Bark""
            WHERE art > 0
            AND evt_block_time >= '2022-01-01'
            AND evt_block_time < (SELECT now())
        ) maker_liq
        LEFT JOIN (SELECT * FROM makermcd.flipper_addresses
                   UNION ALL
                   SELECT * FROM makermcd.clipper_addresses) m 
        ON maker_liq.contract_address = m.contract_address

    ) liquidation
    INNER JOIN ethereum.transactions tx
        ON liquidation.tx_hash = tx.hash
        AND tx.block_time >= '2022-01-01'
        AND tx.block_time < (SELECT now())
    LEFT JOIN erc20.tokens t ON t.contract_address = liquidation.debt_to_cover_asset_address
    LEFT JOIN prices.usd p ON p.minute = date_trunc('minute', liquidation.block_time) AND p.contract_address = liquidation.debt_to_cover_asset_address AND p.minute >= '2022-01-01' AND p.minute < (SELECT now())
),

liquidation AS (
    SELECT 
        date_trunc('day', block_time) AS day,
        project,
        SUM(debt_to_cover_usd_value) AS amount
    FROM liquidations
    WHERE date_trunc('day', block_time) > date_trunc('day', now() - interval '14 days')
    AND date_trunc('day', block_time) < date_trunc('day', now()) + interval '1' day
    GROUP BY 1,2 
)

SELECT day, project, SUM(amount)
FROM liquidation
GROUP BY 1,2 
;"
279582,Liquidations on Aave (last 30 days),,"[{""id"": 527341, ""type"": ""table"", ""name"": ""Query results"", ""options"": {""columns"": [{""name"": ""project"", ""title"": ""Project""}, {""name"": ""asset_symbol"", ""title"": ""Asset symbol""}, {""name"": ""asset_address"", ""title"": ""Asset address""}, {""name"": ""time"", ""title"": ""Time""}, {""name"": ""debt_amount"", ""title"": ""Debt to cover"", ""numberFormat"": "",000.00""}]}, ""created_at"": ""2021-12-06T11:06:49.21105+00:00"", ""__typename"": ""visualizations""}, {""id"": 527350, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""project"", ""title"": ""Project""}, {""name"": ""asset_symbol"", ""title"": ""Asset symbol""}, {""name"": ""asset_address"", ""title"": ""Asset address""}, {""name"": ""time"", ""title"": ""Time""}, {""name"": ""debt_amount"", ""title"": ""Debt to cover"", ""numberFormat"": ""$,""}]}, ""created_at"": ""2021-12-06T11:10:05.12651+00:00"", ""__typename"": ""visualizations""}]","
WITH liquidations AS (
SELECT project,
    debt_to_cover_asset_symbol AS asset_symbol,
    debt_to_cover_asset_address AS asset_address,
    block_time as time,
    SUM(debt_to_cover_usd_value) AS debt_amount
FROM lending.""liquidation""
WHERE block_time > now() - interval '30 days'
GROUP BY 1, 2, 3, 4
)

SELECT project, asset_symbol, asset_address, time, debt_amount
FROM liquidations
WHERE project='Aave'
;"
279629,When do liquidations happen?,,"[{""id"": 527431, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""columnMapping"": {""moment_of_day"": ""x"", ""number_of_liquidations"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {""night"": {""color"": ""#A472E5""}, ""evening"": {""color"": ""#D2DAF5""}, ""morning"": {""color"": ""#1EFFBC""}}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2021-12-06T11:37:07.051568+00:00"", ""__typename"": ""visualizations""}, {""id"": 527402, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-12-06T11:28:45.718966+00:00"", ""__typename"": ""visualizations""}]","WITH liquidations AS (
    
    SELECT  CASE 
                WHEN hour >= 0  AND hour <= 6  THEN 'Night' 
                WHEN hour >  6  AND hour <= 12 THEN 'Morning'
                WHEN hour > 12  AND hour <= 18 THEN 'Day'
                WHEN hour > 18              THEN 'Evening'
            END AS moment_of_day,
            day,
            project,
            token_symbol,
            token_address, 
            sum(amount) AS amount
    FROM
    
    (
        SELECT  extract(hour from block_time) AS hour,
                date_trunc('day', block_time) AS day,
                project,
                block_time as time,
                debt_to_cover_asset_address AS token_address,
                debt_to_cover_asset_symbol AS token_symbol,
                debt_to_cover_usd_value AS amount
        FROM lending.""liquidation""
    ) l
   GROUP BY 1, 2, 3, 4, 5
   )
    
SELECT  l.moment_of_day,
        count(amount) AS number_of_liquidations
FROM liquidations l
WHERE l.day > now() - interval '12 months'
GROUP BY 1;"
276471,Amount of liquidations (last 7 days),,"[{""id"": 521143, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-12-04T12:19:24.17553+00:00"", ""__typename"": ""visualizations""}, {""id"": 521148, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Amount of liquidations (last 7 days)"", ""stringPrefix"": ""$"", ""counterColName"": ""sum""}, ""created_at"": ""2021-12-04T12:19:57.903175+00:00"", ""__typename"": ""visualizations""}]","with flipper_contracts (symbol, project, contract_address, underlying_token_address) AS (VALUES
        ('MakerDAO'::text, 'WETH'::text,   '\xF32836B9E1f47a0515c6Ec431592D5EbC276407f'::bytea, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea), --
    ('MakerDAO'::text, 'WETH'::text,   '\xF04a5cC80B1E94C69B48f5ee68a08CD2F09A7c3E'::bytea, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea), --v
    ('MakerDAO'::text, 'WETH'::text,   '\x7A67901A68243241EBf66beEB0e7b5395582BF17'::bytea, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea), --
    ('MakerDAO'::text, 'BAT'::text,   '\xF7C569B2B271354179AaCC9fF1e42390983110BA'::bytea, '\x0d8775f648430679a709e98d2b0cb6250d2887ef'::bytea), --
    ('MakerDAO'::text, 'USDC'::text,   '\xbe359e53038E41a1ffA47DAE39645756C80e557a'::bytea, '\xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48'::bytea), --
    ('MakerDAO'::text, 'USDC'::text,   '\x77282aD36aADAfC16bCA42c865c674F108c4a616'::bytea, '\xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48'::bytea), --
    ('MakerDAO'::text, 'TUSD'::text,   '\x9E4b213C4defbce7564F2Ac20B6E3bF40954C440'::bytea, '\x0000000000085d4780B73119b644AE5ecd22b376'::bytea), --
    ('MakerDAO'::text, 'ZRX'::text,   '\xa4341cAf9F9F098ecb20fb2CeE2a0b8C78A18118'::bytea, '\xe41d2489571d322189246dafa5ebde1f4699f498'::bytea), --
    ('MakerDAO'::text, 'KNC'::text,   '\x57B01F1B3C59e2C0bdfF3EC9563B71EEc99a3f2f'::bytea, '\xdd974d5c2e2928dea5f71b9825b8b646686bd200'::bytea), --
    ('MakerDAO'::text, 'Mana'::text,   '\x0a1D75B4f49BA80724a214599574080CD6B68357'::bytea, '\x0f5d2fb29fb7d3cfee444a200298f468908cc942'::bytea), --
    ('MakerDAO'::text, 'USDT'::text,   '\x667F41d0fDcE1945eE0f56A79dd6c142E37fCC26'::bytea, '\xdac17f958d2ee523a2206206994597c13d831ec7'::bytea), --
    ('MakerDAO'::text, 'PAXUSD'::text,   '\x52D5D1C05CC79Fc24A629Cb24cB06C5BE5d766E7'::bytea, '\x8e870d67f660d95d5be530380d0ec0bd388289e1'::bytea), --
    ('MakerDAO'::text, 'COMP'::text,   '\x524826F84cB3A19B6593370a5889A58c00554739'::bytea, '\xc00e94cb662c3520282e6f5717214004a7f26888'::bytea), --
    ('MakerDAO'::text, 'LRC'::text,   '\x7FdDc36dcdC435D8F54FDCB3748adcbBF70f3dAC'::bytea, '\xbbbbca6a901c926f240b89eacb641d8aec7aeafd'::bytea), --
    ('MakerDAO'::text, 'LINK'::text,   '\xB907EEdD63a30A3381E6D898e5815Ee8c9fd2c85'::bytea, '\x514910771af9ca656af840dff83e8264ecf986ca'::bytea), --
    ('MakerDAO'::text, 'WBTC'::text,   '\x58CD24ac7322890382eE45A3E4F903a5B22Ee930'::bytea, '\x2260fac5e5542a773aa44fbcfedf7c193bc2c599'::bytea), --
    ('MakerDAO'::text, 'BAL'::text,   '\xb2b9bd446eE5e58036D2876fce62b7Ab7334583e'::bytea, '\xba100000625a3754423978a60c9317c58a424e3d'::bytea), --
    ('MakerDAO'::text, 'YFI'::text,   '\xEe4C9C36257afB8098059a4763A374a4ECFE28A7'::bytea, '\x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e'::bytea), --
    ('MakerDAO'::text, 'GUSD'::text,   '\xCAa8D152A8b98229fB77A213BE16b234cA4f612f'::bytea, '\x056Fd409E1d7A124BD7017459dFEa2F387b6d5Cd'::bytea), --
    ('MakerDAO'::text, 'UNI'::text,   '\xF5b8cD9dB5a0EC031304A7B815010aa7761BD426'::bytea, '\x1f9840a85d5aF5bf1D1762F925BDADdC4201F984'::bytea), --
    ('MakerDAO'::text, 'RENBTC'::text,   '\x30BC6eBC27372e50606880a36B279240c0bA0758'::bytea, '\xEB4C2781e4ebA804CE9a9803C67d0893436bB27D'::bytea), --
    ('MakerDAO'::text, 'AAVE'::text,   '\x16e1b844094c885a37509a8f76c533B5fbFED13a'::bytea, '\x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9'::bytea), --
    ('MakerDAO'::text, 'UNIV2DAIUSDC'::text,   '\x4a613f79a250D522DdB53904D87b8f442EA94496'::bytea, '\xAE461cA67B15dc8dc81CE7615e0320dA1A9aB8D5'::bytea), --
    ('MakerDAO'::text, 'UNIV2DAIETH'::text,    '\x57dfd99f45747DD55C1c432Db4aEa07FBd5d2B5c'::bytea, '\xA478c2975Ab1Ea89e8196811F51A7B7Ade33eB11'::bytea), --
    ('MakerDAO'::text, 'UNIV2WBTCETH'::text,   '\xbc95e8904d879F371Ac6B749727a0EAfDCd2ACB6'::bytea, '\xBb2b8038a1640196FbE3e38816F3e67Cba72D940'::bytea), --
    ('MakerDAO'::text, 'UNIV2USDCETH'::text,   '\x48d2C08b93E57701C8ae8974Fc4ADd725222B0BB'::bytea, '\xB4e16d0168e52d35CaCD2c6185b44281Ec28C9Dc'::bytea), --
    ('MakerDAO'::text, 'UNIV2WBTCDAI'::text,   '\x172200d12D09C2698Dd918d347155fE6692f5662'::bytea, '\x231B7589426Ffe1b75405526fC32aC09D44364c4'::bytea), --
    ('MakerDAO'::text, 'UNIV2LINKETH'::text,   '\xb79f818E3c73FCA387845f892356224CA75eac4b'::bytea, '\xa2107FA5B38d9bbd2C461D6EDf11B11A50F6b974'::bytea), --
    ('MakerDAO'::text, 'UNIV2DAIUSDT'::text,   '\xD32f8B8aDbE331eC0CfADa9cfDbc537619622cFe'::bytea, '\xB20bd5D04BE54f870D5C0d3cA85d82b34B836405'::bytea), --
    ('MakerDAO'::text, 'UNIV2UNIETH'::text,    '\xe5ED7da0483e291485011D5372F3BF46235EB277'::bytea, '\xd3d2E2692501A5c9Ca623199D38826e513033a17'::bytea), --
    ('MakerDAO'::text, 'UNIV2ETHUSDT'::text,   '\x118d5051e70F9EaF3B4a6a11F765185A2Ca0802E'::bytea, '\x0d4a11d5EEaaC28EC3F61d100daF4d40471f1852'::bytea), --
    ('MakerDAO'::text, 'UNIV2AAVEETH'::text,   '\x20D298ca96bf8c2000203B911908DbDc1a8Bac58'::bytea, '\xDFC14d2Af169B0D36C4EFF567Ada9b2E0CAE044f'::bytea)    ), 

    clipper_contracts (symbol, project, contract_address, underlying_token_address) AS (VALUES
('MakerDAO'::text, 'WETH'::text,   '\xc67963a226eddd77B91aD8c421630A1b0AdFF270'::bytea, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea), --
    ('MakerDAO'::text, 'WETH'::text,   '\x71eb894330e8a4b96b8d6056962e7F116F50e06F'::bytea, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea), --v
    ('MakerDAO'::text, 'WETH'::text,   '\xc2b12567523e3f3CBd9931492b91fe65b240bc47'::bytea, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea), --
    ('MakerDAO'::text, 'BAT'::text,   '\x3D22e6f643e2F4c563fD9db22b229Cbb0Cd570fb'::bytea, '\x0d8775f648430679a709e98d2b0cb6250d2887ef'::bytea), --
    ('MakerDAO'::text, 'USDC'::text,   '\x046b1A5718da6A226D912cFd306BA19980772908'::bytea, '\xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48'::bytea), --
    ('MakerDAO'::text, 'USDC'::text,   '\x5590F23358Fe17361d7E4E4f91219145D8cCfCb3'::bytea, '\xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48'::bytea), --
    ('MakerDAO'::text, 'TUSD'::text,   '\x0F6f88f8A4b918584E3539182793a0C276097f44'::bytea, '\x0000000000085d4780B73119b644AE5ecd22b376'::bytea), --
    ('MakerDAO'::text, 'ZRX'::text,   '\xdc90d461E148552387f3aB3EBEE0Bdc58Aa16375'::bytea, '\xe41d2489571d322189246dafa5ebde1f4699f498'::bytea), --
    ('MakerDAO'::text, 'KNC'::text,   '\x006Aa3eB5E666D8E006aa647D4afAB212555Ddea'::bytea, '\xdd974d5c2e2928dea5f71b9825b8b646686bd200'::bytea), --
    ('MakerDAO'::text, 'Mana'::text,   '\xF5C8176E1eB0915359E46DEd16E52C071Bb435c0'::bytea, '\x0f5d2fb29fb7d3cfee444a200298f468908cc942'::bytea), --
    ('MakerDAO'::text, 'USDT'::text,   '\xFC9D6Dd08BEE324A5A8B557d2854B9c36c2AeC5d'::bytea, '\xdac17f958d2ee523a2206206994597c13d831ec7'::bytea), --
    ('MakerDAO'::text, 'PAXUSD'::text,   '\xBCb396Cd139D1116BD89562B49b9D1d6c25378B0'::bytea, '\x8e870d67f660d95d5be530380d0ec0bd388289e1'::bytea), --
    ('MakerDAO'::text, 'COMP'::text,   '\x2Bb690931407DCA7ecE84753EA931ffd304f0F38'::bytea, '\xc00e94cb662c3520282e6f5717214004a7f26888'::bytea), --
    ('MakerDAO'::text, 'LRC'::text,   '\x81C5CDf4817DBf75C7F08B8A1cdaB05c9B3f70F7'::bytea, '\xbbbbca6a901c926f240b89eacb641d8aec7aeafd'::bytea), --
    ('MakerDAO'::text, 'LINK'::text,   '\x832Dd5f17B30078a5E46Fdb8130A68cBc4a74dC0'::bytea, '\x514910771af9ca656af840dff83e8264ecf986ca'::bytea), --
    ('MakerDAO'::text, 'WBTC'::text,   '\x0227b54AdbFAEec5f1eD1dFa11f54dcff9076e2C'::bytea, '\x2260fac5e5542a773aa44fbcfedf7c193bc2c599'::bytea), --
    ('MakerDAO'::text, 'BAL'::text,   '\x6AAc067bb903E633A422dE7BE9355E62B3CE0378'::bytea, '\xba100000625a3754423978a60c9317c58a424e3d'::bytea), --
    ('MakerDAO'::text, 'YFI'::text,   '\x9daCc11dcD0aa13386D295eAeeBBd38130897E6f'::bytea, '\x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e'::bytea), --
    ('MakerDAO'::text, 'GUSD'::text,   '\xa47D68b9dB0A0361284fA04BA40623fcBd1a263E'::bytea, '\x056Fd409E1d7A124BD7017459dFEa2F387b6d5Cd'::bytea), --
    ('MakerDAO'::text, 'UNI'::text,   '\x3713F83Ee6D138Ce191294C131148176015bC29a'::bytea, '\x1f9840a85d5aF5bf1D1762F925BDADdC4201F984'::bytea), --
    ('MakerDAO'::text, 'RENBTC'::text,   '\x834719BEa8da68c46484E001143bDDe29370a6A3'::bytea, '\xEB4C2781e4ebA804CE9a9803C67d0893436bB27D'::bytea), --
    ('MakerDAO'::text, 'AAVE'::text,   '\x8723b74F598DE2ea49747de5896f9034CC09349e'::bytea, '\x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9'::bytea), --
    ('MakerDAO'::text,'MATIC'::text,   '\x29342F530ed6120BDB219D602DaFD584676293d1'::bytea, '\x7d1afa7b718fb893db30a3abc0cfc608aacfebb0'::bytea), --
    ('MakerDAO'::text, 'WSTETH'::text,   '\x49A33A28C4C7D9576ab28898F4C9ac7e52EA457A'::bytea, '\x7f39c581f595b53c5cb19bd0b3f8da6c935e2ca0'::bytea), --
    ('MakerDAO'::text, 'UNIV2DAIUSDC'::text,   '\x9B3310708af333f6F379FA42a5d09CBAA10ab309'::bytea, '\xAE461cA67B15dc8dc81CE7615e0320dA1A9aB8D5'::bytea), --
    ('MakerDAO'::text, 'UNIV2DAIETH'::text,   '\x9F6981bA5c77211A34B76c6385c0f6FA10414035'::bytea, '\xA478c2975Ab1Ea89e8196811F51A7B7Ade33eB11'::bytea), --
    ('MakerDAO'::text, 'UNIV2WBTCETH'::text,   '\xb15afaB996904170f87a64Fe42db0b64a6F75d24'::bytea, '\xBb2b8038a1640196FbE3e38816F3e67Cba72D940'::bytea), --
    ('MakerDAO'::text, 'UNIV2USDCETH'::text,   '\x93AE03815BAF1F19d7F18D9116E4b637cc32A131'::bytea, '\xB4e16d0168e52d35CaCD2c6185b44281Ec28C9Dc'::bytea), --
    ('MakerDAO'::text, 'UNIV2WBTCDAI'::text,   '\x4fC53a57262B87ABDa61d6d0DB2bE7E9BE68F6b8'::bytea, '\x231B7589426Ffe1b75405526fC32aC09D44364c4'::bytea), --
    ('MakerDAO'::text, 'UNIV2LINKETH'::text,   '\x6aa0520354d1b84e1C6ABFE64a708939529b619e'::bytea, '\xa2107FA5B38d9bbd2C461D6EDf11B11A50F6b974'::bytea), --
    ('MakerDAO'::text, 'UNIV2DAIUSDT'::text,   '\xe4B82Be84391b9e7c56a1fC821f47569B364dd4a'::bytea, '\xB20bd5D04BE54f870D5C0d3cA85d82b34B836405'::bytea), --
    ('MakerDAO'::text, 'GUNIV3DAIUSDC1'::text,   '\x5048c5Cd3102026472f8914557A1FD35c8Dc6c9e'::bytea, '\x6c6Bc977E13Df9b0de53b251522280BB72383700'::bytea), --
    ('MakerDAO'::text, 'UNIV2UNIETH'::text,   '\xb0ece6F5542A4577E2f1Be491A937Ccbbec8479e'::bytea, '\xd3d2E2692501A5c9Ca623199D38826e513033a17'::bytea), --
    ('MakerDAO'::text, 'UNIV2ETHUSDT'::text,   '\x2aC4C9b49051275AcB4C43Ec973082388D015D48'::bytea, '\x0d4a11d5EEaaC28EC3F61d100daF4d40471f1852'::bytea), --
    ('MakerDAO'::text, 'UNIV2AAVEETH'::text,   '\x854b252BA15eaFA4d1609D3B98e00cc10084Ec55'::bytea, '\xDFC14d2Af169B0D36C4EFF567Ada9b2E0CAE044f'::bytea) --    ),
), 
liquidations   as (
    SELECT
        project,
        version,
        liquidation.block_number,
        liquidation.block_time,
        tx_hash,
        evt_index,
        trace_address,
        tx.""from"" AS tx_from,
        liquidated_borrower,
        t.symbol AS debt_to_cover_asset_symbol,
        debt_to_cover_asset_address,
        collateral_asset_address,
        debt_to_cover_amount / 10^t.decimals AS debt_to_cover_token_amount,
        debt_to_cover_amount / 10^t.decimals*p.price AS debt_to_cover_usd_value
    FROM (

        -- Aave liquidation
        SELECT
            'Aave' AS project,
            '1' AS version,
            evt_block_number AS block_number,
            evt_block_time AS block_time,
            evt_tx_hash AS tx_hash,
            evt_index,
            NULL::integer[] AS trace_address,
            ""_user"" AS liquidated_borrower,
            CASE --Use WETH instead of Aave ""mock"" address
                WHEN _reserve = '\xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE' THEN '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'
                ELSE _reserve
            END AS debt_to_cover_asset_address,
            CASE --Use WETH instead of Aave ""mock"" address
                WHEN _collateral = '\xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE' THEN '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'
                ELSE _collateral
            END AS collateral_asset_address,
            ""_purchaseAmount"" AS debt_to_cover_amount
        FROM aave.""LendingPool_evt_LiquidationCall""
        WHERE evt_block_time >= '2022-01-01'
        AND evt_block_time < (SELECT now())

        UNION ALL
        --Aave 2 liquidation
        SELECT
            'Aave' AS project,
            '2' AS version,
            evt_block_number AS block_number,
            evt_block_time AS block_time,
            evt_tx_hash AS tx_hash,
            evt_index,
            NULL::integer[] AS trace_address,
            ""user"" AS liquidated_borrower,
            ""debtAsset"" AS debt_to_cover_asset_address,
            ""collateralAsset"" AS collateral_asset_address,
            ""debtToCover"" AS debt_to_cover_amount
        FROM aave_v2.""LendingPool_evt_LiquidationCall""
        WHERE evt_block_time >= '2022-01-01'
        AND evt_block_time < (SELECT now())
        AND ""receiveAToken"" = FALSE

    UNION ALL
    -- Compound liquidation

    SELECT
        'Compound' AS project,
        '2' AS version,
        evt_block_number AS block_number,
        evt_block_time AS block_time,
        evt_tx_hash AS tx_hash,
        evt_index,
        NULL::integer[] AS trace_address,
        borrower AS liquidated_borrower,
        c_asset.""asset_underlying_token_address"" AS debt_to_cover_asset_address,
        c_collateral.""collateral_underlying_token_address"" AS collateral_asset_address,
        ""repayAmount"" AS debt_to_cover_amount
    FROM (
        SELECT * FROM compound_v2.""cErc20_evt_LiquidateBorrow"" WHERE evt_block_time >= '2022-01-01' AND evt_block_time < (SELECT now())
        UNION ALL
        SELECT * FROM compound_v2.""cEther_evt_LiquidateBorrow"" WHERE evt_block_time >= '2022-01-01' AND evt_block_time < (SELECT now())
        UNION ALL
        SELECT * FROM compound_v2.""CErc20Delegator_evt_LiquidateBorrow"" WHERE evt_block_time >= '2022-01-01' AND evt_block_time < (SELECT now())
    ) c
    LEFT JOIN (SELECT contract_address as collateral_contract_address, 
                        underlying_token_address as collateral_underlying_token_address
                FROM compound.view_ctokens) c_collateral ON c.""cTokenCollateral"" = c_collateral.collateral_contract_address
    LEFT JOIN (SELECT contract_address as asset_contract_address, 
                        underlying_token_address as asset_underlying_token_address
                FROM compound.view_ctokens) c_asset ON c.contract_address = c_asset.asset_contract_address

        UNION ALL
        -- MakerDAO liquidation
        SELECT
            'MakerDAO' AS project,
            '2' AS version,
            evt_block_number AS block_number,
            evt_block_time AS block_time,
            evt_tx_hash AS tx_hash,
            evt_index,
            NULL::integer[] AS trace_address,
            liquidated_borrower,
            '\x6b175474e89094c44da98b954eedeac495271d0f'::bytea AS debt_to_cover_asset_address,
            m.""underlying_token_address"" AS collateral_asset_address,
            debt_to_cover_amount
        FROM (
            -- Liquidation V1.0
            SELECT evt_block_number, evt_block_time, evt_tx_hash, 
                   ""flip"" AS contract_address, evt_index,
                   ""art"" AS debt_to_cover_amount, ""urn"" AS liquidated_borrower 
            FROM makermcd.""CAT_evt_Bite""
            WHERE tab > 0
            AND evt_block_time >= '2022-01-01'
            AND evt_block_time < (SELECT now())

            UNION ALL
            -- Liquidation V2.0 
            SELECT evt_block_number, evt_block_time, evt_tx_hash, 
                   ""clip"" AS contract_address, evt_index,
                   ""art"" AS debt_to_cover_amount, ""urn"" AS liquidated_borrower
            FROM makerdao.""Dog_evt_Bark""
            WHERE art > 0
            AND evt_block_time >= '2022-01-01'
            AND evt_block_time < (SELECT now())
        ) maker_liq
        LEFT JOIN (SELECT * FROM makermcd.flipper_addresses
                   UNION ALL
                   SELECT * FROM makermcd.clipper_addresses) m 
        ON maker_liq.contract_address = m.contract_address

    ) liquidation
    INNER JOIN ethereum.transactions tx
        ON liquidation.tx_hash = tx.hash
        AND tx.block_time >= '2022-01-01'
        AND tx.block_time < (SELECT now())
    LEFT JOIN erc20.tokens t ON t.contract_address = liquidation.debt_to_cover_asset_address
    LEFT JOIN prices.usd p ON p.minute = date_trunc('minute', liquidation.block_time) AND p.contract_address = liquidation.debt_to_cover_asset_address AND p.minute >= '2022-01-01' AND p.minute < (SELECT now())
),

liquidation AS (
SELECT SUM(debt_to_cover_usd_value) AS amount
FROM liquidations
WHERE block_time > now() - interval '7 days'
)

SELECT SUM(amount) FROM liquidation;"
279486,Total amount of liquidations per project (last 30 days),,"[{""id"": 527197, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-12-06T10:06:35.490105+00:00"", ""__typename"": ""visualizations""}, {""id"": 527199, ""type"": ""table"", ""name"": """", ""options"": {""columns"": [{""name"": ""sum"", ""title"": ""Debt to cover"", ""numberFormat"": ""$,""}, {""name"": ""project"", ""title"": ""Project""}]}, ""created_at"": ""2021-12-06T10:07:56.084741+00:00"", ""__typename"": ""visualizations""}]","with flipper_contracts (symbol, project, contract_address, underlying_token_address) AS (VALUES
        ('MakerDAO'::text, 'WETH'::text,   '\xF32836B9E1f47a0515c6Ec431592D5EbC276407f'::bytea, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea), --
    ('MakerDAO'::text, 'WETH'::text,   '\xF04a5cC80B1E94C69B48f5ee68a08CD2F09A7c3E'::bytea, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea), --v
    ('MakerDAO'::text, 'WETH'::text,   '\x7A67901A68243241EBf66beEB0e7b5395582BF17'::bytea, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea), --
    ('MakerDAO'::text, 'BAT'::text,   '\xF7C569B2B271354179AaCC9fF1e42390983110BA'::bytea, '\x0d8775f648430679a709e98d2b0cb6250d2887ef'::bytea), --
    ('MakerDAO'::text, 'USDC'::text,   '\xbe359e53038E41a1ffA47DAE39645756C80e557a'::bytea, '\xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48'::bytea), --
    ('MakerDAO'::text, 'USDC'::text,   '\x77282aD36aADAfC16bCA42c865c674F108c4a616'::bytea, '\xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48'::bytea), --
    ('MakerDAO'::text, 'TUSD'::text,   '\x9E4b213C4defbce7564F2Ac20B6E3bF40954C440'::bytea, '\x0000000000085d4780B73119b644AE5ecd22b376'::bytea), --
    ('MakerDAO'::text, 'ZRX'::text,   '\xa4341cAf9F9F098ecb20fb2CeE2a0b8C78A18118'::bytea, '\xe41d2489571d322189246dafa5ebde1f4699f498'::bytea), --
    ('MakerDAO'::text, 'KNC'::text,   '\x57B01F1B3C59e2C0bdfF3EC9563B71EEc99a3f2f'::bytea, '\xdd974d5c2e2928dea5f71b9825b8b646686bd200'::bytea), --
    ('MakerDAO'::text, 'Mana'::text,   '\x0a1D75B4f49BA80724a214599574080CD6B68357'::bytea, '\x0f5d2fb29fb7d3cfee444a200298f468908cc942'::bytea), --
    ('MakerDAO'::text, 'USDT'::text,   '\x667F41d0fDcE1945eE0f56A79dd6c142E37fCC26'::bytea, '\xdac17f958d2ee523a2206206994597c13d831ec7'::bytea), --
    ('MakerDAO'::text, 'PAXUSD'::text,   '\x52D5D1C05CC79Fc24A629Cb24cB06C5BE5d766E7'::bytea, '\x8e870d67f660d95d5be530380d0ec0bd388289e1'::bytea), --
    ('MakerDAO'::text, 'COMP'::text,   '\x524826F84cB3A19B6593370a5889A58c00554739'::bytea, '\xc00e94cb662c3520282e6f5717214004a7f26888'::bytea), --
    ('MakerDAO'::text, 'LRC'::text,   '\x7FdDc36dcdC435D8F54FDCB3748adcbBF70f3dAC'::bytea, '\xbbbbca6a901c926f240b89eacb641d8aec7aeafd'::bytea), --
    ('MakerDAO'::text, 'LINK'::text,   '\xB907EEdD63a30A3381E6D898e5815Ee8c9fd2c85'::bytea, '\x514910771af9ca656af840dff83e8264ecf986ca'::bytea), --
    ('MakerDAO'::text, 'WBTC'::text,   '\x58CD24ac7322890382eE45A3E4F903a5B22Ee930'::bytea, '\x2260fac5e5542a773aa44fbcfedf7c193bc2c599'::bytea), --
    ('MakerDAO'::text, 'BAL'::text,   '\xb2b9bd446eE5e58036D2876fce62b7Ab7334583e'::bytea, '\xba100000625a3754423978a60c9317c58a424e3d'::bytea), --
    ('MakerDAO'::text, 'YFI'::text,   '\xEe4C9C36257afB8098059a4763A374a4ECFE28A7'::bytea, '\x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e'::bytea), --
    ('MakerDAO'::text, 'GUSD'::text,   '\xCAa8D152A8b98229fB77A213BE16b234cA4f612f'::bytea, '\x056Fd409E1d7A124BD7017459dFEa2F387b6d5Cd'::bytea), --
    ('MakerDAO'::text, 'UNI'::text,   '\xF5b8cD9dB5a0EC031304A7B815010aa7761BD426'::bytea, '\x1f9840a85d5aF5bf1D1762F925BDADdC4201F984'::bytea), --
    ('MakerDAO'::text, 'RENBTC'::text,   '\x30BC6eBC27372e50606880a36B279240c0bA0758'::bytea, '\xEB4C2781e4ebA804CE9a9803C67d0893436bB27D'::bytea), --
    ('MakerDAO'::text, 'AAVE'::text,   '\x16e1b844094c885a37509a8f76c533B5fbFED13a'::bytea, '\x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9'::bytea), --
    ('MakerDAO'::text, 'UNIV2DAIUSDC'::text,   '\x4a613f79a250D522DdB53904D87b8f442EA94496'::bytea, '\xAE461cA67B15dc8dc81CE7615e0320dA1A9aB8D5'::bytea), --
    ('MakerDAO'::text, 'UNIV2DAIETH'::text,    '\x57dfd99f45747DD55C1c432Db4aEa07FBd5d2B5c'::bytea, '\xA478c2975Ab1Ea89e8196811F51A7B7Ade33eB11'::bytea), --
    ('MakerDAO'::text, 'UNIV2WBTCETH'::text,   '\xbc95e8904d879F371Ac6B749727a0EAfDCd2ACB6'::bytea, '\xBb2b8038a1640196FbE3e38816F3e67Cba72D940'::bytea), --
    ('MakerDAO'::text, 'UNIV2USDCETH'::text,   '\x48d2C08b93E57701C8ae8974Fc4ADd725222B0BB'::bytea, '\xB4e16d0168e52d35CaCD2c6185b44281Ec28C9Dc'::bytea), --
    ('MakerDAO'::text, 'UNIV2WBTCDAI'::text,   '\x172200d12D09C2698Dd918d347155fE6692f5662'::bytea, '\x231B7589426Ffe1b75405526fC32aC09D44364c4'::bytea), --
    ('MakerDAO'::text, 'UNIV2LINKETH'::text,   '\xb79f818E3c73FCA387845f892356224CA75eac4b'::bytea, '\xa2107FA5B38d9bbd2C461D6EDf11B11A50F6b974'::bytea), --
    ('MakerDAO'::text, 'UNIV2DAIUSDT'::text,   '\xD32f8B8aDbE331eC0CfADa9cfDbc537619622cFe'::bytea, '\xB20bd5D04BE54f870D5C0d3cA85d82b34B836405'::bytea), --
    ('MakerDAO'::text, 'UNIV2UNIETH'::text,    '\xe5ED7da0483e291485011D5372F3BF46235EB277'::bytea, '\xd3d2E2692501A5c9Ca623199D38826e513033a17'::bytea), --
    ('MakerDAO'::text, 'UNIV2ETHUSDT'::text,   '\x118d5051e70F9EaF3B4a6a11F765185A2Ca0802E'::bytea, '\x0d4a11d5EEaaC28EC3F61d100daF4d40471f1852'::bytea), --
    ('MakerDAO'::text, 'UNIV2AAVEETH'::text,   '\x20D298ca96bf8c2000203B911908DbDc1a8Bac58'::bytea, '\xDFC14d2Af169B0D36C4EFF567Ada9b2E0CAE044f'::bytea)    ), 

    clipper_contracts (symbol, project, contract_address, underlying_token_address) AS (VALUES
('MakerDAO'::text, 'WETH'::text,   '\xc67963a226eddd77B91aD8c421630A1b0AdFF270'::bytea, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea), --
    ('MakerDAO'::text, 'WETH'::text,   '\x71eb894330e8a4b96b8d6056962e7F116F50e06F'::bytea, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea), --v
    ('MakerDAO'::text, 'WETH'::text,   '\xc2b12567523e3f3CBd9931492b91fe65b240bc47'::bytea, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea), --
    ('MakerDAO'::text, 'BAT'::text,   '\x3D22e6f643e2F4c563fD9db22b229Cbb0Cd570fb'::bytea, '\x0d8775f648430679a709e98d2b0cb6250d2887ef'::bytea), --
    ('MakerDAO'::text, 'USDC'::text,   '\x046b1A5718da6A226D912cFd306BA19980772908'::bytea, '\xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48'::bytea), --
    ('MakerDAO'::text, 'USDC'::text,   '\x5590F23358Fe17361d7E4E4f91219145D8cCfCb3'::bytea, '\xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48'::bytea), --
    ('MakerDAO'::text, 'TUSD'::text,   '\x0F6f88f8A4b918584E3539182793a0C276097f44'::bytea, '\x0000000000085d4780B73119b644AE5ecd22b376'::bytea), --
    ('MakerDAO'::text, 'ZRX'::text,   '\xdc90d461E148552387f3aB3EBEE0Bdc58Aa16375'::bytea, '\xe41d2489571d322189246dafa5ebde1f4699f498'::bytea), --
    ('MakerDAO'::text, 'KNC'::text,   '\x006Aa3eB5E666D8E006aa647D4afAB212555Ddea'::bytea, '\xdd974d5c2e2928dea5f71b9825b8b646686bd200'::bytea), --
    ('MakerDAO'::text, 'Mana'::text,   '\xF5C8176E1eB0915359E46DEd16E52C071Bb435c0'::bytea, '\x0f5d2fb29fb7d3cfee444a200298f468908cc942'::bytea), --
    ('MakerDAO'::text, 'USDT'::text,   '\xFC9D6Dd08BEE324A5A8B557d2854B9c36c2AeC5d'::bytea, '\xdac17f958d2ee523a2206206994597c13d831ec7'::bytea), --
    ('MakerDAO'::text, 'PAXUSD'::text,   '\xBCb396Cd139D1116BD89562B49b9D1d6c25378B0'::bytea, '\x8e870d67f660d95d5be530380d0ec0bd388289e1'::bytea), --
    ('MakerDAO'::text, 'COMP'::text,   '\x2Bb690931407DCA7ecE84753EA931ffd304f0F38'::bytea, '\xc00e94cb662c3520282e6f5717214004a7f26888'::bytea), --
    ('MakerDAO'::text, 'LRC'::text,   '\x81C5CDf4817DBf75C7F08B8A1cdaB05c9B3f70F7'::bytea, '\xbbbbca6a901c926f240b89eacb641d8aec7aeafd'::bytea), --
    ('MakerDAO'::text, 'LINK'::text,   '\x832Dd5f17B30078a5E46Fdb8130A68cBc4a74dC0'::bytea, '\x514910771af9ca656af840dff83e8264ecf986ca'::bytea), --
    ('MakerDAO'::text, 'WBTC'::text,   '\x0227b54AdbFAEec5f1eD1dFa11f54dcff9076e2C'::bytea, '\x2260fac5e5542a773aa44fbcfedf7c193bc2c599'::bytea), --
    ('MakerDAO'::text, 'BAL'::text,   '\x6AAc067bb903E633A422dE7BE9355E62B3CE0378'::bytea, '\xba100000625a3754423978a60c9317c58a424e3d'::bytea), --
    ('MakerDAO'::text, 'YFI'::text,   '\x9daCc11dcD0aa13386D295eAeeBBd38130897E6f'::bytea, '\x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e'::bytea), --
    ('MakerDAO'::text, 'GUSD'::text,   '\xa47D68b9dB0A0361284fA04BA40623fcBd1a263E'::bytea, '\x056Fd409E1d7A124BD7017459dFEa2F387b6d5Cd'::bytea), --
    ('MakerDAO'::text, 'UNI'::text,   '\x3713F83Ee6D138Ce191294C131148176015bC29a'::bytea, '\x1f9840a85d5aF5bf1D1762F925BDADdC4201F984'::bytea), --
    ('MakerDAO'::text, 'RENBTC'::text,   '\x834719BEa8da68c46484E001143bDDe29370a6A3'::bytea, '\xEB4C2781e4ebA804CE9a9803C67d0893436bB27D'::bytea), --
    ('MakerDAO'::text, 'AAVE'::text,   '\x8723b74F598DE2ea49747de5896f9034CC09349e'::bytea, '\x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9'::bytea), --
    ('MakerDAO'::text,'MATIC'::text,   '\x29342F530ed6120BDB219D602DaFD584676293d1'::bytea, '\x7d1afa7b718fb893db30a3abc0cfc608aacfebb0'::bytea), --
    ('MakerDAO'::text, 'WSTETH'::text,   '\x49A33A28C4C7D9576ab28898F4C9ac7e52EA457A'::bytea, '\x7f39c581f595b53c5cb19bd0b3f8da6c935e2ca0'::bytea), --
    ('MakerDAO'::text, 'UNIV2DAIUSDC'::text,   '\x9B3310708af333f6F379FA42a5d09CBAA10ab309'::bytea, '\xAE461cA67B15dc8dc81CE7615e0320dA1A9aB8D5'::bytea), --
    ('MakerDAO'::text, 'UNIV2DAIETH'::text,   '\x9F6981bA5c77211A34B76c6385c0f6FA10414035'::bytea, '\xA478c2975Ab1Ea89e8196811F51A7B7Ade33eB11'::bytea), --
    ('MakerDAO'::text, 'UNIV2WBTCETH'::text,   '\xb15afaB996904170f87a64Fe42db0b64a6F75d24'::bytea, '\xBb2b8038a1640196FbE3e38816F3e67Cba72D940'::bytea), --
    ('MakerDAO'::text, 'UNIV2USDCETH'::text,   '\x93AE03815BAF1F19d7F18D9116E4b637cc32A131'::bytea, '\xB4e16d0168e52d35CaCD2c6185b44281Ec28C9Dc'::bytea), --
    ('MakerDAO'::text, 'UNIV2WBTCDAI'::text,   '\x4fC53a57262B87ABDa61d6d0DB2bE7E9BE68F6b8'::bytea, '\x231B7589426Ffe1b75405526fC32aC09D44364c4'::bytea), --
    ('MakerDAO'::text, 'UNIV2LINKETH'::text,   '\x6aa0520354d1b84e1C6ABFE64a708939529b619e'::bytea, '\xa2107FA5B38d9bbd2C461D6EDf11B11A50F6b974'::bytea), --
    ('MakerDAO'::text, 'UNIV2DAIUSDT'::text,   '\xe4B82Be84391b9e7c56a1fC821f47569B364dd4a'::bytea, '\xB20bd5D04BE54f870D5C0d3cA85d82b34B836405'::bytea), --
    ('MakerDAO'::text, 'GUNIV3DAIUSDC1'::text,   '\x5048c5Cd3102026472f8914557A1FD35c8Dc6c9e'::bytea, '\x6c6Bc977E13Df9b0de53b251522280BB72383700'::bytea), --
    ('MakerDAO'::text, 'UNIV2UNIETH'::text,   '\xb0ece6F5542A4577E2f1Be491A937Ccbbec8479e'::bytea, '\xd3d2E2692501A5c9Ca623199D38826e513033a17'::bytea), --
    ('MakerDAO'::text, 'UNIV2ETHUSDT'::text,   '\x2aC4C9b49051275AcB4C43Ec973082388D015D48'::bytea, '\x0d4a11d5EEaaC28EC3F61d100daF4d40471f1852'::bytea), --
    ('MakerDAO'::text, 'UNIV2AAVEETH'::text,   '\x854b252BA15eaFA4d1609D3B98e00cc10084Ec55'::bytea, '\xDFC14d2Af169B0D36C4EFF567Ada9b2E0CAE044f'::bytea) --    ),
), 
liquidations   as (
    SELECT
        project,
        version,
        liquidation.block_number,
        liquidation.block_time,
        tx_hash,
        evt_index,
        trace_address,
        tx.""from"" AS tx_from,
        liquidated_borrower,
        t.symbol AS debt_to_cover_asset_symbol,
        debt_to_cover_asset_address,
        collateral_asset_address,
        debt_to_cover_amount / 10^t.decimals AS debt_to_cover_token_amount,
        debt_to_cover_amount / 10^t.decimals*p.price AS debt_to_cover_usd_value
    FROM (

        -- Aave liquidation
        SELECT
            'Aave' AS project,
            '1' AS version,
            evt_block_number AS block_number,
            evt_block_time AS block_time,
            evt_tx_hash AS tx_hash,
            evt_index,
            NULL::integer[] AS trace_address,
            ""_user"" AS liquidated_borrower,
            CASE --Use WETH instead of Aave ""mock"" address
                WHEN _reserve = '\xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE' THEN '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'
                ELSE _reserve
            END AS debt_to_cover_asset_address,
            CASE --Use WETH instead of Aave ""mock"" address
                WHEN _collateral = '\xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE' THEN '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'
                ELSE _collateral
            END AS collateral_asset_address,
            ""_purchaseAmount"" AS debt_to_cover_amount
        FROM aave.""LendingPool_evt_LiquidationCall""
        WHERE evt_block_time >= '2021-12-15'
        AND evt_block_time < (SELECT now())

        UNION ALL
        --Aave 2 liquidation
        SELECT
            'Aave' AS project,
            '2' AS version,
            evt_block_number AS block_number,
            evt_block_time AS block_time,
            evt_tx_hash AS tx_hash,
            evt_index,
            NULL::integer[] AS trace_address,
            ""user"" AS liquidated_borrower,
            ""debtAsset"" AS debt_to_cover_asset_address,
            ""collateralAsset"" AS collateral_asset_address,
            ""debtToCover"" AS debt_to_cover_amount
        FROM aave_v2.""LendingPool_evt_LiquidationCall""
        WHERE evt_block_time >= '2021-12-15'
        AND evt_block_time < (SELECT now())
        AND ""receiveAToken"" = FALSE

    UNION ALL
    -- Compound liquidation

    SELECT
        'Compound' AS project,
        '2' AS version,
        evt_block_number AS block_number,
        evt_block_time AS block_time,
        evt_tx_hash AS tx_hash,
        evt_index,
        NULL::integer[] AS trace_address,
        borrower AS liquidated_borrower,
        c_asset.""asset_underlying_token_address"" AS debt_to_cover_asset_address,
        c_collateral.""collateral_underlying_token_address"" AS collateral_asset_address,
        ""repayAmount"" AS debt_to_cover_amount
    FROM (
        SELECT * FROM compound_v2.""cErc20_evt_LiquidateBorrow"" WHERE evt_block_time >= '2021-12-15' AND evt_block_time < (SELECT now())
        UNION ALL
        SELECT * FROM compound_v2.""cEther_evt_LiquidateBorrow"" WHERE evt_block_time >= '2021-12-15' AND evt_block_time < (SELECT now())
        UNION ALL
        SELECT * FROM compound_v2.""CErc20Delegator_evt_LiquidateBorrow"" WHERE evt_block_time >= '2021-12-15' AND evt_block_time < (SELECT now())
    ) c
    LEFT JOIN (SELECT contract_address as collateral_contract_address, 
                        underlying_token_address as collateral_underlying_token_address
                FROM compound.view_ctokens) c_collateral ON c.""cTokenCollateral"" = c_collateral.collateral_contract_address
    LEFT JOIN (SELECT contract_address as asset_contract_address, 
                        underlying_token_address as asset_underlying_token_address
                FROM compound.view_ctokens) c_asset ON c.contract_address = c_asset.asset_contract_address

        UNION ALL
        -- MakerDAO liquidation
        SELECT
            'MakerDAO' AS project,
            '2' AS version,
            evt_block_number AS block_number,
            evt_block_time AS block_time,
            evt_tx_hash AS tx_hash,
            evt_index,
            NULL::integer[] AS trace_address,
            liquidated_borrower,
            '\x6b175474e89094c44da98b954eedeac495271d0f'::bytea AS debt_to_cover_asset_address,
            m.""underlying_token_address"" AS collateral_asset_address,
            debt_to_cover_amount
        FROM (
            -- Liquidation V1.0
            SELECT evt_block_number, evt_block_time, evt_tx_hash, 
                   ""flip"" AS contract_address, evt_index,
                   ""art"" AS debt_to_cover_amount, ""urn"" AS liquidated_borrower 
            FROM makermcd.""CAT_evt_Bite""
            WHERE tab > 0
            AND evt_block_time >= '2021-12-15'
            AND evt_block_time < (SELECT now())

            UNION ALL
            -- Liquidation V2.0 
            SELECT evt_block_number, evt_block_time, evt_tx_hash, 
                   ""clip"" AS contract_address, evt_index,
                   ""art"" AS debt_to_cover_amount, ""urn"" AS liquidated_borrower
            FROM makerdao.""Dog_evt_Bark""
            WHERE art > 0
            AND evt_block_time >= '2021-12-15'
            AND evt_block_time < (SELECT now())
        ) maker_liq
        LEFT JOIN (SELECT * FROM makermcd.flipper_addresses
                   UNION ALL
                   SELECT * FROM makermcd.clipper_addresses) m 
        ON maker_liq.contract_address = m.contract_address

    ) liquidation
    INNER JOIN ethereum.transactions tx
        ON liquidation.tx_hash = tx.hash
        AND tx.block_time >= '2021-12-15'
        AND tx.block_time < (SELECT now())
    LEFT JOIN erc20.tokens t ON t.contract_address = liquidation.debt_to_cover_asset_address
    LEFT JOIN prices.usd p ON p.minute = date_trunc('minute', liquidation.block_time) AND p.contract_address = liquidation.debt_to_cover_asset_address AND p.minute >= '2021-12-15' AND p.minute < (SELECT now())
),


liquidation AS (
SELECT project, SUM(debt_to_cover_usd_value) AS amount
FROM liquidations
WHERE block_time > now() - interval '30 days'
GROUP BY project
)

SELECT project, SUM(amount) 
FROM liquidation
GROUP BY project
;"
279578,Liquidations on MakerDAO (last 30 days),,"[{""id"": 527336, ""type"": ""table"", ""name"": ""Query results"", ""options"": {""columns"": [{""name"": ""project"", ""title"": ""Project""}, {""name"": ""asset_symbol"", ""title"": ""Asset symbol""}, {""name"": ""asset_address"", ""title"": ""Asset address""}, {""name"": ""time"", ""title"": ""Time""}, {""name"": ""debt_amount"", ""title"": ""Debt to cover"", ""numberFormat"": "",000.00""}]}, ""created_at"": ""2021-12-06T11:02:08.692945+00:00"", ""__typename"": ""visualizations""}, {""id"": 527354, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""project"", ""title"": ""Project""}, {""name"": ""asset_symbol"", ""title"": ""Asset symbol""}, {""name"": ""asset_address"", ""title"": ""Asset address""}, {""name"": ""time"", ""title"": ""Time""}, {""name"": ""debt_amount"", ""title"": ""Debt to cover"", ""numberFormat"": ""$,""}]}, ""created_at"": ""2021-12-06T11:11:27.670452+00:00"", ""__typename"": ""visualizations""}]","
WITH liquidations AS (
SELECT project,
    debt_to_cover_asset_symbol AS asset_symbol,
    debt_to_cover_asset_address AS asset_address,
    block_time as time,
    SUM(debt_to_cover_usd_value) AS debt_amount
FROM lending.""liquidation""
WHERE block_time > now() - interval '30 days'
GROUP BY 1, 2, 3, 4
)

SELECT project, asset_symbol, asset_address, time, debt_amount
FROM liquidations
WHERE project='MakerDAO'
;"
279581,Liquidations on Compound (last 30 days),,"[{""id"": 527340, ""type"": ""table"", ""name"": ""Query results"", ""options"": {""columns"": [{""name"": ""project"", ""title"": ""Project""}, {""name"": ""asset_symbol"", ""title"": ""Asset symbol""}, {""name"": ""asset_address"", ""title"": ""Asset address""}, {""name"": ""time"", ""title"": ""Time""}, {""name"": ""debt_amount"", ""title"": ""Debt to cover"", ""numberFormat"": "",000.00""}]}, ""created_at"": ""2021-12-06T11:06:25.262536+00:00"", ""__typename"": ""visualizations""}, {""id"": 527352, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""project"", ""title"": ""Project""}, {""name"": ""asset_symbol"", ""title"": ""Asset symbol""}, {""name"": ""asset_address"", ""title"": ""Asset address""}, {""name"": ""time"", ""title"": ""Time""}, {""name"": ""debt_amount"", ""title"": ""Debt to cover"", ""numberFormat"": ""$,""}]}, ""created_at"": ""2021-12-06T11:10:52.484047+00:00"", ""__typename"": ""visualizations""}]","
WITH liquidations AS (
SELECT project,
    debt_to_cover_asset_symbol AS asset_symbol,
    debt_to_cover_asset_address AS asset_address,
    block_time as time,
    SUM(debt_to_cover_usd_value) AS debt_amount
FROM lending.""liquidation""
WHERE block_time > now() - interval '30 days'
GROUP BY 1, 2, 3, 4
)

SELECT project, asset_symbol, asset_address, time, debt_amount
FROM liquidations
WHERE project='Compound'
;"
279597,Daily unique liquidated borrowers,,"[{""id"": 527361, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2021-12-06T11:14:05.087465+00:00"", ""__typename"": ""visualizations""}, {""id"": 527362, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": ""stack""}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0[.]00000"", ""columnMapping"": {""count"": ""y"", ""project"": ""series"", ""date_trunc"": ""x""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""Aave"": {""type"": ""column"", ""color"": ""#B554FF"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}, ""Compound"": {""type"": ""column"", ""color"": ""#3BD973"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 1}, ""MakerDAO"": {""type"": ""column"", ""color"": ""#FB8D3D"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 2}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""column""}, ""created_at"": ""2021-12-06T11:14:05.087465+00:00"", ""__typename"": ""visualizations""}]","SELECT  date_trunc('day', block_time),
        project,
        COUNT(distinct liquidated_borrower)
FROM lending.""liquidation""
WHERE block_time > now() - interval '30 days'
GROUP BY 1, 2"
702271,Daily liquidations per protocol (last 150 days),,"[{""id"": 1299178, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-05-12T08:54:35.04874+00:00"", ""__typename"": ""visualizations""}, {""id"": 1299179, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""columnMapping"": {""day"": ""x"", ""sum"": ""y"", ""project"": ""series""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-05-12T08:54:35.04874+00:00"", ""__typename"": ""visualizations""}]","with flipper_contracts (symbol, project, contract_address, underlying_token_address) AS (VALUES
        ('MakerDAO'::text, 'WETH'::text,   '\xF32836B9E1f47a0515c6Ec431592D5EbC276407f'::bytea, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea), --
    ('MakerDAO'::text, 'WETH'::text,   '\xF04a5cC80B1E94C69B48f5ee68a08CD2F09A7c3E'::bytea, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea), --v
    ('MakerDAO'::text, 'WETH'::text,   '\x7A67901A68243241EBf66beEB0e7b5395582BF17'::bytea, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea), --
    ('MakerDAO'::text, 'BAT'::text,   '\xF7C569B2B271354179AaCC9fF1e42390983110BA'::bytea, '\x0d8775f648430679a709e98d2b0cb6250d2887ef'::bytea), --
    ('MakerDAO'::text, 'USDC'::text,   '\xbe359e53038E41a1ffA47DAE39645756C80e557a'::bytea, '\xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48'::bytea), --
    ('MakerDAO'::text, 'USDC'::text,   '\x77282aD36aADAfC16bCA42c865c674F108c4a616'::bytea, '\xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48'::bytea), --
    ('MakerDAO'::text, 'TUSD'::text,   '\x9E4b213C4defbce7564F2Ac20B6E3bF40954C440'::bytea, '\x0000000000085d4780B73119b644AE5ecd22b376'::bytea), --
    ('MakerDAO'::text, 'ZRX'::text,   '\xa4341cAf9F9F098ecb20fb2CeE2a0b8C78A18118'::bytea, '\xe41d2489571d322189246dafa5ebde1f4699f498'::bytea), --
    ('MakerDAO'::text, 'KNC'::text,   '\x57B01F1B3C59e2C0bdfF3EC9563B71EEc99a3f2f'::bytea, '\xdd974d5c2e2928dea5f71b9825b8b646686bd200'::bytea), --
    ('MakerDAO'::text, 'Mana'::text,   '\x0a1D75B4f49BA80724a214599574080CD6B68357'::bytea, '\x0f5d2fb29fb7d3cfee444a200298f468908cc942'::bytea), --
    ('MakerDAO'::text, 'USDT'::text,   '\x667F41d0fDcE1945eE0f56A79dd6c142E37fCC26'::bytea, '\xdac17f958d2ee523a2206206994597c13d831ec7'::bytea), --
    ('MakerDAO'::text, 'PAXUSD'::text,   '\x52D5D1C05CC79Fc24A629Cb24cB06C5BE5d766E7'::bytea, '\x8e870d67f660d95d5be530380d0ec0bd388289e1'::bytea), --
    ('MakerDAO'::text, 'COMP'::text,   '\x524826F84cB3A19B6593370a5889A58c00554739'::bytea, '\xc00e94cb662c3520282e6f5717214004a7f26888'::bytea), --
    ('MakerDAO'::text, 'LRC'::text,   '\x7FdDc36dcdC435D8F54FDCB3748adcbBF70f3dAC'::bytea, '\xbbbbca6a901c926f240b89eacb641d8aec7aeafd'::bytea), --
    ('MakerDAO'::text, 'LINK'::text,   '\xB907EEdD63a30A3381E6D898e5815Ee8c9fd2c85'::bytea, '\x514910771af9ca656af840dff83e8264ecf986ca'::bytea), --
    ('MakerDAO'::text, 'WBTC'::text,   '\x58CD24ac7322890382eE45A3E4F903a5B22Ee930'::bytea, '\x2260fac5e5542a773aa44fbcfedf7c193bc2c599'::bytea), --
    ('MakerDAO'::text, 'BAL'::text,   '\xb2b9bd446eE5e58036D2876fce62b7Ab7334583e'::bytea, '\xba100000625a3754423978a60c9317c58a424e3d'::bytea), --
    ('MakerDAO'::text, 'YFI'::text,   '\xEe4C9C36257afB8098059a4763A374a4ECFE28A7'::bytea, '\x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e'::bytea), --
    ('MakerDAO'::text, 'GUSD'::text,   '\xCAa8D152A8b98229fB77A213BE16b234cA4f612f'::bytea, '\x056Fd409E1d7A124BD7017459dFEa2F387b6d5Cd'::bytea), --
    ('MakerDAO'::text, 'UNI'::text,   '\xF5b8cD9dB5a0EC031304A7B815010aa7761BD426'::bytea, '\x1f9840a85d5aF5bf1D1762F925BDADdC4201F984'::bytea), --
    ('MakerDAO'::text, 'RENBTC'::text,   '\x30BC6eBC27372e50606880a36B279240c0bA0758'::bytea, '\xEB4C2781e4ebA804CE9a9803C67d0893436bB27D'::bytea), --
    ('MakerDAO'::text, 'AAVE'::text,   '\x16e1b844094c885a37509a8f76c533B5fbFED13a'::bytea, '\x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9'::bytea), --
    ('MakerDAO'::text, 'UNIV2DAIUSDC'::text,   '\x4a613f79a250D522DdB53904D87b8f442EA94496'::bytea, '\xAE461cA67B15dc8dc81CE7615e0320dA1A9aB8D5'::bytea), --
    ('MakerDAO'::text, 'UNIV2DAIETH'::text,    '\x57dfd99f45747DD55C1c432Db4aEa07FBd5d2B5c'::bytea, '\xA478c2975Ab1Ea89e8196811F51A7B7Ade33eB11'::bytea), --
    ('MakerDAO'::text, 'UNIV2WBTCETH'::text,   '\xbc95e8904d879F371Ac6B749727a0EAfDCd2ACB6'::bytea, '\xBb2b8038a1640196FbE3e38816F3e67Cba72D940'::bytea), --
    ('MakerDAO'::text, 'UNIV2USDCETH'::text,   '\x48d2C08b93E57701C8ae8974Fc4ADd725222B0BB'::bytea, '\xB4e16d0168e52d35CaCD2c6185b44281Ec28C9Dc'::bytea), --
    ('MakerDAO'::text, 'UNIV2WBTCDAI'::text,   '\x172200d12D09C2698Dd918d347155fE6692f5662'::bytea, '\x231B7589426Ffe1b75405526fC32aC09D44364c4'::bytea), --
    ('MakerDAO'::text, 'UNIV2LINKETH'::text,   '\xb79f818E3c73FCA387845f892356224CA75eac4b'::bytea, '\xa2107FA5B38d9bbd2C461D6EDf11B11A50F6b974'::bytea), --
    ('MakerDAO'::text, 'UNIV2DAIUSDT'::text,   '\xD32f8B8aDbE331eC0CfADa9cfDbc537619622cFe'::bytea, '\xB20bd5D04BE54f870D5C0d3cA85d82b34B836405'::bytea), --
    ('MakerDAO'::text, 'UNIV2UNIETH'::text,    '\xe5ED7da0483e291485011D5372F3BF46235EB277'::bytea, '\xd3d2E2692501A5c9Ca623199D38826e513033a17'::bytea), --
    ('MakerDAO'::text, 'UNIV2ETHUSDT'::text,   '\x118d5051e70F9EaF3B4a6a11F765185A2Ca0802E'::bytea, '\x0d4a11d5EEaaC28EC3F61d100daF4d40471f1852'::bytea), --
    ('MakerDAO'::text, 'UNIV2AAVEETH'::text,   '\x20D298ca96bf8c2000203B911908DbDc1a8Bac58'::bytea, '\xDFC14d2Af169B0D36C4EFF567Ada9b2E0CAE044f'::bytea)    ), 

    clipper_contracts (symbol, project, contract_address, underlying_token_address) AS (VALUES
('MakerDAO'::text, 'WETH'::text,   '\xc67963a226eddd77B91aD8c421630A1b0AdFF270'::bytea, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea), --
    ('MakerDAO'::text, 'WETH'::text,   '\x71eb894330e8a4b96b8d6056962e7F116F50e06F'::bytea, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea), --v
    ('MakerDAO'::text, 'WETH'::text,   '\xc2b12567523e3f3CBd9931492b91fe65b240bc47'::bytea, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea), --
    ('MakerDAO'::text, 'BAT'::text,   '\x3D22e6f643e2F4c563fD9db22b229Cbb0Cd570fb'::bytea, '\x0d8775f648430679a709e98d2b0cb6250d2887ef'::bytea), --
    ('MakerDAO'::text, 'USDC'::text,   '\x046b1A5718da6A226D912cFd306BA19980772908'::bytea, '\xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48'::bytea), --
    ('MakerDAO'::text, 'USDC'::text,   '\x5590F23358Fe17361d7E4E4f91219145D8cCfCb3'::bytea, '\xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48'::bytea), --
    ('MakerDAO'::text, 'TUSD'::text,   '\x0F6f88f8A4b918584E3539182793a0C276097f44'::bytea, '\x0000000000085d4780B73119b644AE5ecd22b376'::bytea), --
    ('MakerDAO'::text, 'ZRX'::text,   '\xdc90d461E148552387f3aB3EBEE0Bdc58Aa16375'::bytea, '\xe41d2489571d322189246dafa5ebde1f4699f498'::bytea), --
    ('MakerDAO'::text, 'KNC'::text,   '\x006Aa3eB5E666D8E006aa647D4afAB212555Ddea'::bytea, '\xdd974d5c2e2928dea5f71b9825b8b646686bd200'::bytea), --
    ('MakerDAO'::text, 'Mana'::text,   '\xF5C8176E1eB0915359E46DEd16E52C071Bb435c0'::bytea, '\x0f5d2fb29fb7d3cfee444a200298f468908cc942'::bytea), --
    ('MakerDAO'::text, 'USDT'::text,   '\xFC9D6Dd08BEE324A5A8B557d2854B9c36c2AeC5d'::bytea, '\xdac17f958d2ee523a2206206994597c13d831ec7'::bytea), --
    ('MakerDAO'::text, 'PAXUSD'::text,   '\xBCb396Cd139D1116BD89562B49b9D1d6c25378B0'::bytea, '\x8e870d67f660d95d5be530380d0ec0bd388289e1'::bytea), --
    ('MakerDAO'::text, 'COMP'::text,   '\x2Bb690931407DCA7ecE84753EA931ffd304f0F38'::bytea, '\xc00e94cb662c3520282e6f5717214004a7f26888'::bytea), --
    ('MakerDAO'::text, 'LRC'::text,   '\x81C5CDf4817DBf75C7F08B8A1cdaB05c9B3f70F7'::bytea, '\xbbbbca6a901c926f240b89eacb641d8aec7aeafd'::bytea), --
    ('MakerDAO'::text, 'LINK'::text,   '\x832Dd5f17B30078a5E46Fdb8130A68cBc4a74dC0'::bytea, '\x514910771af9ca656af840dff83e8264ecf986ca'::bytea), --
    ('MakerDAO'::text, 'WBTC'::text,   '\x0227b54AdbFAEec5f1eD1dFa11f54dcff9076e2C'::bytea, '\x2260fac5e5542a773aa44fbcfedf7c193bc2c599'::bytea), --
    ('MakerDAO'::text, 'BAL'::text,   '\x6AAc067bb903E633A422dE7BE9355E62B3CE0378'::bytea, '\xba100000625a3754423978a60c9317c58a424e3d'::bytea), --
    ('MakerDAO'::text, 'YFI'::text,   '\x9daCc11dcD0aa13386D295eAeeBBd38130897E6f'::bytea, '\x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e'::bytea), --
    ('MakerDAO'::text, 'GUSD'::text,   '\xa47D68b9dB0A0361284fA04BA40623fcBd1a263E'::bytea, '\x056Fd409E1d7A124BD7017459dFEa2F387b6d5Cd'::bytea), --
    ('MakerDAO'::text, 'UNI'::text,   '\x3713F83Ee6D138Ce191294C131148176015bC29a'::bytea, '\x1f9840a85d5aF5bf1D1762F925BDADdC4201F984'::bytea), --
    ('MakerDAO'::text, 'RENBTC'::text,   '\x834719BEa8da68c46484E001143bDDe29370a6A3'::bytea, '\xEB4C2781e4ebA804CE9a9803C67d0893436bB27D'::bytea), --
    ('MakerDAO'::text, 'AAVE'::text,   '\x8723b74F598DE2ea49747de5896f9034CC09349e'::bytea, '\x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9'::bytea), --
    ('MakerDAO'::text,'MATIC'::text,   '\x29342F530ed6120BDB219D602DaFD584676293d1'::bytea, '\x7d1afa7b718fb893db30a3abc0cfc608aacfebb0'::bytea), --
    ('MakerDAO'::text, 'WSTETH'::text,   '\x49A33A28C4C7D9576ab28898F4C9ac7e52EA457A'::bytea, '\x7f39c581f595b53c5cb19bd0b3f8da6c935e2ca0'::bytea), --
    ('MakerDAO'::text, 'UNIV2DAIUSDC'::text,   '\x9B3310708af333f6F379FA42a5d09CBAA10ab309'::bytea, '\xAE461cA67B15dc8dc81CE7615e0320dA1A9aB8D5'::bytea), --
    ('MakerDAO'::text, 'UNIV2DAIETH'::text,   '\x9F6981bA5c77211A34B76c6385c0f6FA10414035'::bytea, '\xA478c2975Ab1Ea89e8196811F51A7B7Ade33eB11'::bytea), --
    ('MakerDAO'::text, 'UNIV2WBTCETH'::text,   '\xb15afaB996904170f87a64Fe42db0b64a6F75d24'::bytea, '\xBb2b8038a1640196FbE3e38816F3e67Cba72D940'::bytea), --
    ('MakerDAO'::text, 'UNIV2USDCETH'::text,   '\x93AE03815BAF1F19d7F18D9116E4b637cc32A131'::bytea, '\xB4e16d0168e52d35CaCD2c6185b44281Ec28C9Dc'::bytea), --
    ('MakerDAO'::text, 'UNIV2WBTCDAI'::text,   '\x4fC53a57262B87ABDa61d6d0DB2bE7E9BE68F6b8'::bytea, '\x231B7589426Ffe1b75405526fC32aC09D44364c4'::bytea), --
    ('MakerDAO'::text, 'UNIV2LINKETH'::text,   '\x6aa0520354d1b84e1C6ABFE64a708939529b619e'::bytea, '\xa2107FA5B38d9bbd2C461D6EDf11B11A50F6b974'::bytea), --
    ('MakerDAO'::text, 'UNIV2DAIUSDT'::text,   '\xe4B82Be84391b9e7c56a1fC821f47569B364dd4a'::bytea, '\xB20bd5D04BE54f870D5C0d3cA85d82b34B836405'::bytea), --
    ('MakerDAO'::text, 'GUNIV3DAIUSDC1'::text,   '\x5048c5Cd3102026472f8914557A1FD35c8Dc6c9e'::bytea, '\x6c6Bc977E13Df9b0de53b251522280BB72383700'::bytea), --
    ('MakerDAO'::text, 'UNIV2UNIETH'::text,   '\xb0ece6F5542A4577E2f1Be491A937Ccbbec8479e'::bytea, '\xd3d2E2692501A5c9Ca623199D38826e513033a17'::bytea), --
    ('MakerDAO'::text, 'UNIV2ETHUSDT'::text,   '\x2aC4C9b49051275AcB4C43Ec973082388D015D48'::bytea, '\x0d4a11d5EEaaC28EC3F61d100daF4d40471f1852'::bytea), --
    ('MakerDAO'::text, 'UNIV2AAVEETH'::text,   '\x854b252BA15eaFA4d1609D3B98e00cc10084Ec55'::bytea, '\xDFC14d2Af169B0D36C4EFF567Ada9b2E0CAE044f'::bytea) --    ),
), 
liquidations   as (
    SELECT
        project,
        version,
        liquidation.block_number,
        liquidation.block_time,
        tx_hash,
        evt_index,
        trace_address,
        tx.""from"" AS tx_from,
        liquidated_borrower,
        t.symbol AS debt_to_cover_asset_symbol,
        debt_to_cover_asset_address,
        collateral_asset_address,
        debt_to_cover_amount / 10^t.decimals AS debt_to_cover_token_amount,
        debt_to_cover_amount / 10^t.decimals*p.price AS debt_to_cover_usd_value
    FROM (

        -- Aave liquidation
        SELECT
            'Aave' AS project,
            '1' AS version,
            evt_block_number AS block_number,
            evt_block_time AS block_time,
            evt_tx_hash AS tx_hash,
            evt_index,
            NULL::integer[] AS trace_address,
            ""_user"" AS liquidated_borrower,
            CASE --Use WETH instead of Aave ""mock"" address
                WHEN _reserve = '\xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE' THEN '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'
                ELSE _reserve
            END AS debt_to_cover_asset_address,
            CASE --Use WETH instead of Aave ""mock"" address
                WHEN _collateral = '\xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE' THEN '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'
                ELSE _collateral
            END AS collateral_asset_address,
            ""_purchaseAmount"" AS debt_to_cover_amount
        FROM aave.""LendingPool_evt_LiquidationCall""
        WHERE evt_block_time >= '2022-01-01'
        AND evt_block_time < (SELECT now())

        UNION ALL
        --Aave 2 liquidation
        SELECT
            'Aave' AS project,
            '2' AS version,
            evt_block_number AS block_number,
            evt_block_time AS block_time,
            evt_tx_hash AS tx_hash,
            evt_index,
            NULL::integer[] AS trace_address,
            ""user"" AS liquidated_borrower,
            ""debtAsset"" AS debt_to_cover_asset_address,
            ""collateralAsset"" AS collateral_asset_address,
            ""debtToCover"" AS debt_to_cover_amount
        FROM aave_v2.""LendingPool_evt_LiquidationCall""
        WHERE evt_block_time >= '2022-01-01'
        AND evt_block_time < (SELECT now())
        AND ""receiveAToken"" = FALSE

    UNION ALL
    -- Compound liquidation

    SELECT
        'Compound' AS project,
        '2' AS version,
        evt_block_number AS block_number,
        evt_block_time AS block_time,
        evt_tx_hash AS tx_hash,
        evt_index,
        NULL::integer[] AS trace_address,
        borrower AS liquidated_borrower,
        c_asset.""asset_underlying_token_address"" AS debt_to_cover_asset_address,
        c_collateral.""collateral_underlying_token_address"" AS collateral_asset_address,
        ""repayAmount"" AS debt_to_cover_amount
    FROM (
        SELECT * FROM compound_v2.""cErc20_evt_LiquidateBorrow"" WHERE evt_block_time >= '2022-01-01' AND evt_block_time < (SELECT now())
        UNION ALL
        SELECT * FROM compound_v2.""cEther_evt_LiquidateBorrow"" WHERE evt_block_time >= '2022-01-01' AND evt_block_time < (SELECT now())
        UNION ALL
        SELECT * FROM compound_v2.""CErc20Delegator_evt_LiquidateBorrow"" WHERE evt_block_time >= '2022-01-01' AND evt_block_time < (SELECT now())
    ) c
    LEFT JOIN (SELECT contract_address as collateral_contract_address, 
                        underlying_token_address as collateral_underlying_token_address
                FROM compound.view_ctokens) c_collateral ON c.""cTokenCollateral"" = c_collateral.collateral_contract_address
    LEFT JOIN (SELECT contract_address as asset_contract_address, 
                        underlying_token_address as asset_underlying_token_address
                FROM compound.view_ctokens) c_asset ON c.contract_address = c_asset.asset_contract_address

        UNION ALL
        -- MakerDAO liquidation
        SELECT
            'MakerDAO' AS project,
            '2' AS version,
            evt_block_number AS block_number,
            evt_block_time AS block_time,
            evt_tx_hash AS tx_hash,
            evt_index,
            NULL::integer[] AS trace_address,
            liquidated_borrower,
            '\x6b175474e89094c44da98b954eedeac495271d0f'::bytea AS debt_to_cover_asset_address,
            m.""underlying_token_address"" AS collateral_asset_address,
            debt_to_cover_amount
        FROM (
            -- Liquidation V1.0
            SELECT evt_block_number, evt_block_time, evt_tx_hash, 
                   ""flip"" AS contract_address, evt_index,
                   ""art"" AS debt_to_cover_amount, ""urn"" AS liquidated_borrower 
            FROM makermcd.""CAT_evt_Bite""
            WHERE tab > 0
            AND evt_block_time >= '2022-01-01'
            AND evt_block_time < (SELECT now())

            UNION ALL
            -- Liquidation V2.0 
            SELECT evt_block_number, evt_block_time, evt_tx_hash, 
                   ""clip"" AS contract_address, evt_index,
                   ""art"" AS debt_to_cover_amount, ""urn"" AS liquidated_borrower
            FROM makerdao.""Dog_evt_Bark""
            WHERE art > 0
            AND evt_block_time >= '2022-01-01'
            AND evt_block_time < (SELECT now())
        ) maker_liq
        LEFT JOIN (SELECT * FROM makermcd.flipper_addresses
                   UNION ALL
                   SELECT * FROM makermcd.clipper_addresses) m 
        ON maker_liq.contract_address = m.contract_address

    ) liquidation
    INNER JOIN ethereum.transactions tx
        ON liquidation.tx_hash = tx.hash
        AND tx.block_time >= '2022-01-01'
        AND tx.block_time < (SELECT now())
    LEFT JOIN erc20.tokens t ON t.contract_address = liquidation.debt_to_cover_asset_address
    LEFT JOIN prices.usd p ON p.minute = date_trunc('minute', liquidation.block_time) AND p.contract_address = liquidation.debt_to_cover_asset_address AND p.minute >= '2022-01-01' AND p.minute < (SELECT now())
),

liquidation AS (
    SELECT 
        date_trunc('day', block_time) AS day,
        project,
        SUM(debt_to_cover_usd_value) AS amount
    FROM liquidations
    WHERE date_trunc('day', block_time) > date_trunc('day', now() - interval '150 days')
    AND date_trunc('day', block_time) < date_trunc('day', now()) + interval '1' day
    GROUP BY 1,2 
)

SELECT day, project, SUM(amount)
FROM liquidation
GROUP BY 1,2 
;"
79255,DeFi Project Users,,"[{""id"": 157800, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-07-10T08:51:37.556182+00:00"", ""__typename"": ""visualizations""}, {""id"": 157880, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""-""}], ""legend"": {""enabled"": true}, ""series"": {""percentValues"": false}, ""reverseX"": false, ""numberFormat"": ""0,0"", ""columnMapping"": {""date"": ""x"", ""count"": ""y"", ""users"": ""y"", ""project"": ""series""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""line""}, ""created_at"": ""2021-07-10T11:54:09.921699+00:00"", ""__typename"": ""visualizations""}]","SELECT
    date,
    project,
    SUM(COUNT(*)) OVER (partition by project order by date) as users
FROM(
    SELECT
        project,
        account,
        date_trunc('day', min(date)) as date
    FROM (
        SELECT project, trader_a AS account, block_time AS date
            FROM dex.trades
        UNION ALL
        
        SELECT project, trader_b AS account, block_time AS date
            FROM dex.trades
        UNION ALL
        
        SELECT 'Uniswap' as project, provider AS account, evt_block_time AS date
            FROM uniswap.""Exchange_evt_AddLiquidity""
        UNION ALL
        
        SELECT 'Uniswap' as project, ""to"" AS account, call_block_time AS date
            FROM uniswap_v2.""Router01_call_addLiquidity""
            WHERE call_success
        UNION ALL
        
        SELECT 'Uniswap' as project, ""to"" AS account, call_block_time AS date
            FROM uniswap_v2.""Router01_call_addLiquidityETH""
            WHERE call_success
        UNION ALL
            
        SELECT 'Uniswap' as project, ""to"" AS account, call_block_time AS date
            FROM uniswap_v2.""Router02_call_addLiquidity""
            WHERE call_success
        UNION ALL
        
        SELECT 'Uniswap' as project, ""to"" AS account, call_block_time AS date
            FROM uniswap_v2.""Router02_call_addLiquidityETH""
            WHERE call_success
        UNION ALL
        
        SELECT 'Uniswap' as project, ""to"" AS account, evt_block_time AS date
            FROM uniswap_v3.""NonfungibleTokenPositionManager_evt_Transfer""
            WHERE ""from"" = '\x0000000000000000000000000000000000000000'
        UNION ALL
        
        SELECT 'Curve' as project, ""from"" AS account, block_time AS date
            FROM ethereum.transactions
            WHERE success AND block_time >= '2020-07-26' AND
            ""to"" in (
                '\x9ca85572e6a3ebf24dedd195623f188735a5179f', -- 3CRV
                '\x29E240CFD7946BA20895a7a02eDb25C210f9f324', -- aLINK
                '\x03403154afc09Ce8e44C3B185C82C6aD5f86b9ab', -- crvAave
                '\xE625F5923303f1CE7A43ACFEFd11fd12f30DbcA4', -- crvAETH
                '\xE625F5923303f1CE7A43ACFEFd11fd12f30DbcA4', -- crvBBTC
                '\x2994529c0652d127b7842094103715ec5299bbed', -- crvBUSD
                '\x629c759D1E83eFbF63d84eb3868B564d9521C129', -- crvCOMP
                '\x8e6741b456a074F0Bc45B8b82A755d4aF7E965dF', -- crvDUSD
                '\xec0d8d3ed5477106c6d4ea27d90a60e594693c90', -- crvGUSD
                '\x46AFc2dfBd1ea0c0760CAD8262A5838e803A37e5', -- crvHBTC
                '\x39546945695DCb1c037C836925B355262f551f55', -- crvHUSD
                '\x96Ea6AF74Af09522fCB4c28C269C26F59a31ced6', -- crvLINK
                '\x0FCDAeDFb8A7DfDa2e9838564c5A1665d856AFDF', -- crvMUSD
                '\x7F83935EcFe4729c4Ea592Ab2bC1A32588409797', -- crvOBTC
                '\x123964EbE096A920dae00Fb795FFBfA0c9Ff4675', -- crvPBTC
                '\x5334e150B938dd2b6bd040D9c4a03Cff0cED3765', -- crvRENBTC
                '\xBacB69571323575C6a5A3b4F9EEde1DC7D31FBc1', -- crvSAave
                '\x7Ff566E1d69DEfF32a7b244aE7276b9f90e9D0f6', -- crvSBTC
                '\x5533ed0a3b83F70c3c4a1f69Ef5546D3D4713E44', -- crvSUSD
                '\x07FB4756f67bD46B748b16119E802F1f880fb2CC', -- crvTBTC
                '\xFe39Ce91437C76178665D64d7a2694B0f6f17fE3', -- crvUSDN
                '\x1B5eb1173D2Bf770e50F10410C9a96F7a8eB6e75', -- crvUSDP
                '\xF6C9E9AF314982A4b38366f4AbfAa00595C5A6fC', -- crvUST
                '\x2994529C0652D127b7842094103715ec5299bBed', -- crvYBUSD
                '\xacd43e627e64355f1861cec6d3a6688b31a6f952', -- DAI
                '\x98B058b2CBacF5E99bC7012DF757ea7CFEbd35BC', -- eursCRV
                '\xe11ba472F74869176652C35D30dB89854b5ae84D', -- HEGIC
                '\x881b06da56BB5675c54E4Ed311c21E54C5025298', -- LINK
                '\xE0db48B4F71752C4bEf16De1DBD042B82976b8C7', -- mUSD
                '\xdCD90C7f6324cfa40d7169ef80b12031770B4325', -- steCRV
                '\x37d19d1c4E1fa9DC47bD1eA12f742a0887eDa74a', -- TUSD
                '\x597aD1e0c13Bfe8025993D9e79C69E1c0233522e', -- USDC
                '\x2f08119c6f07c006695e079aafc638b8789faf18', -- USDT
                '\xe1237aA7f535b0CC33Fd973D66cBf830354D16c7', -- WETH
                '\x5dbcF33D8c2E976c6b560249878e6F1491Bca25c', -- yCRV
                '\xba2e7fed597fd0e3e70f5130bcdbbfe06bb94fe1'  -- YFI
            )
        UNION ALL
        
        SELECT project, borrower AS account, block_time AS date
            FROM lending.borrow
        UNION ALL
        
        SELECT project, borrower AS account, block_time AS date
            FROM lending.collateral_change
    ) t
    GROUP BY 1, 2
) tt
GROUP BY 1, 2
order by 3 desc

--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   caller AS account
--     FROM balancer.""BPool_evt_LOG_JOIN""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   lad AS account
--     FROM maker.""SaiTub_evt_LogNewCup""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(block_time)) AS date,
--                   borrower
--     FROM lending.""borrow""
--     WHERE project='MakerDAO'
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(block_time)) AS date,
--         trader_a AS account
--     FROM dex.trades
--     WHERE project = 'Curve'
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(block_time)) AS date,
--                   trader_b AS account
--     FROM dex.trades
--     WHERE project = 'Curve'
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   provider AS account
--     FROM curvefi.""aave_swap_evt_AddLiquidity""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   provider AS account
--     FROM curvefi.""ankreth_swap_evt_AddLiquidity""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   provider AS account
--     FROM curvefi.""bbtc_swap_evt_AddLiquidity""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   provider AS account
--     FROM curvefi.""busd_swap_evt_AddLiquidity""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   provider AS account
--     FROM curvefi.""compound_evt_AddLiquidity""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   provider AS account
--     FROM curvefi.""compound_v2_evt_AddLiquidity""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   provider AS account
--     FROM curvefi.""compound_swap_evt_AddLiquidity""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   provider AS account
--     FROM curvefi.""threepool_swap_evt_AddLiquidity""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   provider AS account
--     FROM curvefi.""dusd_swap_evt_AddLiquidity""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   provider AS account
--     FROM curvefi.""eurs_swap_evt_AddLiquidity""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   provider AS account
--     FROM curvefi.""gusd_swap_evt_AddLiquidity""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   provider AS account
--     FROM curvefi.""hbtc_swap_evt_AddLiquidity""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   provider AS account
--     FROM curvefi.""husd_swap_evt_AddLiquidity""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   provider AS account
--     FROM curvefi.""ironbank_swap_evt_AddLiquidity""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   provider AS account
--     FROM curvefi.""linkusd_swap_evt_AddLiquidity""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   provider AS account
--     FROM curvefi.""lusd_swap_evt_AddLiquidity""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   provider AS account
--     FROM curvefi.""musd_swap_evt_AddLiquidity""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   provider AS account
--     FROM curvefi.""obtc_swap_evt_AddLiquidity""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   provider AS account
--     FROM curvefi.""pax_swap_evt_AddLiquidity""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   provider AS account
--     FROM curvefi.""pbtc_swap_swap_evt_AddLiquidity""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   provider AS account
--     FROM curvefi.""ren_swap_evt_AddLiquidity""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   provider AS account
--     FROM curvefi.""reth_swap_evt_AddLiquidity""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   provider AS account
--     FROM curvefi.""rsv_swap_evt_AddLiquidity""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   provider AS account
--     FROM curvefi.""sbtc_swap_evt_AddLiquidity""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   provider AS account
--     FROM curvefi.""seth_swap_evt_AddLiquidity""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   provider AS account
--     FROM curvefi.""steth_swap_evt_AddLiquidity""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   provider AS account
--     FROM curvefi.""susd_evt_AddLiquidity""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   provider AS account
--     FROM curvefi.""susd_swap_evt_AddLiquidity""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   provider AS account
--     FROM curvefi.""tbtc_swap_evt_AddLiquidity""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   provider AS account
--     FROM curvefi.""tricrypto_swap_evt_AddLiquidity""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   provider AS account
--     FROM curvefi.""usdk_swap_evt_AddLiquidity""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   provider AS account
--     FROM curvefi.""usdn_swap_evt_AddLiquidity""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   provider AS account
--     FROM curvefi.""usdt_swap_evt_AddLiquidity""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   provider AS account
--     FROM curvefi.""ust_swap_evt_AddLiquidity""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   provider AS account
--     FROM curvefi.""y_swap_evt_AddLiquidity""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   ""from"" AS account
--     FROM tornado_cash.""eth_evt_Deposit""
--     INNER JOIN ethereum.""transactions"" ON evt_tx_hash = hash
--     AND block_time >= '2019-12-16'
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   ""to"" AS account
--     FROM tornado_cash.""eth_evt_Withdrawal""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   ""from"" AS account
--     FROM tornado_cash.""erc20_evt_Deposit""
--     INNER JOIN ethereum.""transactions"" ON evt_tx_hash = hash
--     AND block_time >= '2019-12-16'
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   ""to"" AS account
--     FROM tornado_cash.""erc20_evt_Withdrawal""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   OWNER AS account
--     FROM instadapp_v2.""InstaRegistry_evt_Created""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   OWNER AS account
--     FROM instadapp_dsa.""InstaIndex_evt_LogAccountCreated""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(block_time)) AS date,
--                   trader_a AS account
--     FROM dex.trades
--     WHERE project = '0x Native'
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(block_time)) AS date,
--                   trader_b AS account
--     FROM dex.trades
--     WHERE project = '0x Native'
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(block_time)) AS date,
--                   trader_a AS account
--     FROM dex.trades
--     WHERE project = 'Sushiswap'
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(block_time)) AS date,
--                   trader_b AS account
--     FROM dex.trades
--     WHERE project = 'Sushiswap'
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(call_block_time)) AS date,
--                   ""to"" AS account
--     FROM sushi.""Router02_call_addLiquidity""
--     WHERE call_success
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(call_block_time)) AS date,
--                   ""to"" AS account
--     FROM sushi.""Router02_call_addLiquidityETH""
--     WHERE call_success
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   maker AS account
--     FROM dydx_perpetual.""PerpetualV1_evt_LogTrade""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   taker AS account
--     FROM dydx_perpetual.""PerpetualV1_evt_LogTrade""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   ""accountOwner"" AS account
--     FROM dydx.""SoloMargin_evt_LogDeposit""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   ""takerAccountOwner"" AS account
--     FROM dydx.""SoloMargin_evt_LogTrade""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   ""makerAccountOwner"" AS account
--     FROM dydx.""SoloMargin_evt_LogTrade""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(block_time)),
--                   ""from"" AS account
--     FROM dydx.""PayableMarginMinter_call_mintMarginTokens"" dydx
--     INNER JOIN ethereum.""transactions"" tx ON dydx.call_tx_hash = tx.hash
--     AND tx.block_time >= '2018-09-28'
--     AND call_success
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   sender AS account
--     FROM pooltogether.""MCDAwarePool_evt_Deposited""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   sender AS account
--     FROM pooltogether_v1.""Pool1_evt_BoughtTickets""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   sender AS account
--     FROM pooltogether_v2.""Pool3_evt_Deposited""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--     OPERATOR AS account
--     FROM pooltogether_v3.""CompoundPrizePool_evt_Deposited""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(block_time)) AS date,
--                   trader_a AS account
--     FROM dex.trades
--     WHERE project = 'Bancor Network'
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(block_time)) AS date,
--                   trader_b AS account
--     FROM dex.trades
--     WHERE project = 'Bancor Network'
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(block_time)) AS date,
--                   trader_a AS account
--     FROM dex.""trades""
--     WHERE project = 'Synthetix'
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(block_time)) AS date,
--                   trader_b AS account
--     FROM dex.""trades""
--     WHERE project = 'Synthetix'
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   account
--     FROM synthetix.""Synth_evt_Issued""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(block_time)) AS date,
--                   ""from"" AS account
--     FROM ethereum.""transactions""
--     WHERE ""to"" = '\xF8ce90c2710713552fb564869694B2505Bfc0846'
--     AND block_time >= '2020-08-31'
--     AND success
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   minter AS account
--     FROM creamfinance.""CErc20Delegate_evt_Mint""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   borrower AS account
--     FROM creamfinance.""CErc20Delegate_evt_Borrow""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   minter AS account
--     FROM creamfinance.""CEther_evt_Mint""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   borrower AS account
--     FROM creamfinance.""CEther_evt_Borrow""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   tx.""from"" AS account
--     FROM erc20.""ERC20_evt_Transfer"" erc
--     INNER JOIN ethereum.""transactions"" tx ON erc.evt_tx_hash = tx.hash
--     AND tx.block_time >= '2020-05-13'
--     WHERE contract_address = '\xeb4c2781e4eba804ce9a9803c67d0893436bb27d'
--     AND erc.""from"" = '\x0000000000000000000000000000000000000000'
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   tx.""from"" AS account
--     FROM erc20.""ERC20_evt_Transfer"" erc
--     INNER JOIN ethereum.""transactions"" tx ON erc.evt_tx_hash = tx.hash
--     AND tx.block_time >= '2020-05-13'
--     WHERE contract_address = '\x1c5db575e2ff833e46a2e9864c22f4b22e0b37c2'
--     AND erc.""from"" = '\x0000000000000000000000000000000000000000'
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   tx.""from"" AS account
--     FROM erc20.""ERC20_evt_Transfer"" erc
--     INNER JOIN ethereum.""transactions"" tx ON erc.evt_tx_hash = tx.hash
--     AND tx.block_time >= '2020-05-13'
--     WHERE contract_address = '\x459086f2376525bdceba5bdda135e4e9d3fef5bf'
--     AND erc.""from"" = '\x0000000000000000000000000000000000000000'
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(block_time)) AS date,
--                   ""from"" AS account
--     FROM ethereum.""transactions""
--     WHERE ""to"" = '\xd7c49cee7e9188cca6ad8ff264c1da2e69d4cf3b'
--     AND block_time >= '2019-05-23'
--     AND success
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   _borrower AS account
--     FROM keeperdao_v1.""LiquidityPoolV1_evt_Borrowed""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   _depositor AS account
--     FROM keeperdao_v1.""LiquidityPoolV1_evt_Deposited""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   _borrower AS account
--     FROM keeperdao_v2.""LiquidityPoolV2_evt_Borrowed""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   _depositor AS account
--     FROM keeperdao_v2.""LiquidityPoolV2_evt_Deposited""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   _borrower AS account
--     FROM keeperdao_v21.""LiquidityPoolV2_evt_Borrowed""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   _depositor AS account
--     FROM keeperdao_v21.""LiquidityPoolV2_evt_Deposited""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   account
--     FROM hegic.""HedgeContract_evt_HedgeCreated""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   account
--     FROM hegic.""HegicERCPool_evt_Provide""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   account
--     FROM hegic.""HegicETHOptions_evt_Create""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   account
--     FROM hegic.""HegicETHPool_evt_Provide""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   acount
--     FROM hegic.""HegicStakingETH_evt_Claim""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   account
--     FROM hegic.""HegicStakingPool_evt_BuyLot""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   account
--     FROM hegic.""HegicStakingPool_evt_SellLot""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   account
--     FROM hegic.""HegicStakingPool_evt_Deposit""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   acount
--     FROM hegic.""HegicStakingWBTC_evt_Claim""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   account
--     FROM hegic.""HegicWBTCOptions_evt_Create""
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   ""from"" AS account
--     FROM alpha_homora.""Bank_evt_Work""
--     INNER JOIN ethereum.""transactions"" ON evt_tx_hash = hash
--     AND block_time >= '2020-10-07'
--     GROUP BY 2
--     UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,
--                   ""caller"" AS account
--     FROM alpha_homora_v2.""HomoraBank_evt_Borrow""
--     GROUP BY 2"
142938,Minute by minute gas (24h),,"[{""id"": 281852, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-09-08T08:37:59.824121+00:00"", ""__typename"": ""visualizations""}, {""id"": 281859, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""eth price""}}, {""type"": ""-"", ""title"": {""text"": ""gas""}}], ""legend"": {""enabled"": false}, ""series"": {""percentValues"": false}, ""reverseX"": false, ""columnMapping"": {""minute"": ""x"", ""avg_price_eth"": ""y"", ""eth_price_movement"": ""y"", ""median_gas_price_gwei"": ""y""}, ""seriesOptions"": {""avg_price_eth"": {""type"": ""line"", ""color"": ""#FF9B29"", ""yAxis"": 0, ""zIndex"": 0}, ""median_gas_price_gwei"": {""type"": ""line"", ""color"": ""#3A2AB2"", ""yAxis"": 1, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""line""}, ""created_at"": ""2021-09-08T08:47:46.895921+00:00"", ""__typename"": ""visualizations""}]","with gas as (
SELECT
    DATE_TRUNC('minute',block_time) AS minute
    , (PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY gas_price)) / 1e9  AS median_gas_price_gwei
FROM ethereum.transactions
WHERE
    block_time >= (DATE_TRUNC('minute',CURRENT_TIMESTAMP) - '1 days'::INTERVAL)
GROUP BY 1
ORDER BY 1
),

eth as (
    select *
    from (
    select date_trunc('minute', minute) as minute, avg(price) as avg_price_eth
    from prices.""layer1_usd"" p
    where symbol = 'ETH'
    group by 1
    order by 1
    ) z
    where minute >= CURRENT_TIMESTAMP - '1 days'::INTERVAL
)

select *
from eth
left join gas on gas.minute = eth.minute"
142958,Stablecoin deviation from peg (24h),,"[{""id"": 281897, ""type"": ""table"", ""name"": ""Query results"", ""options"": {""columns"": [{""name"": ""deviation_from_peg"", ""numberFormat"": ""0.000%""}]}, ""created_at"": ""2021-09-08T09:02:15.667554+00:00"", ""__typename"": ""visualizations""}]","with usd as (
select *
from prices.""usd"" 
where (symbol like '%USD%'
and minute > now() - interval '1 days')
order by 1
),

ust as (
select *
from prices.""usd"" 
where (symbol like '%UST%'
and minute > now() - interval '1 days')
order by 1
),

dai as (
select *
from prices.""usd"" 
where (symbol like '%DAI%'
and minute > now() - interval '1 days')
order by 1
)

select symbol, avg(price-1) as deviation_from_peg
from (
select * from usd union all 
select * from ust union all
select * from dai
) z
group by 1
order by 2"
142972,Granular active addresses (48h),,"[{""id"": 281921, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-09-08T09:22:01.68792+00:00"", ""__typename"": ""visualizations""}, {""id"": 281925, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""columnMapping"": {""avg"": ""y"", ""hour"": ""x"", ""minute"": ""x"", ""hourly_avg_aa"": ""y"", ""active_addresses"": ""y""}, ""seriesOptions"": {""hourly_avg_aa"": {""type"": ""line"", ""yAxis"": 0, ""zIndex"": 1}, ""active_addresses"": {""type"": ""scatter"", ""color"": ""#AFC3FD"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""line""}, ""created_at"": ""2021-09-08T09:24:06.928109+00:00"", ""__typename"": ""visualizations""}]","select *, avg(active_addresses) OVER (ORDER BY minute ROWS BETWEEN 60 PRECEDING AND CURRENT ROW) as hourly_avg_aa
from (
select 
    date_trunc('minute', block_time) as minute,
    count (distinct et.""from"") as active_addresses
from ethereum.transactions et
where block_time > now() - interval '2 days'
group by 1
) z"
142927,Stablecoin pegs (48h),,"[{""id"": 281848, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": false, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""logarithmic"", ""tickFormat"": ""0.000""}], ""legend"": {""enabled"": true}, ""series"": {""percentValues"": false}, ""reverseX"": false, ""columnMapping"": {""price"": ""y"", ""minute"": ""x"", ""symbol"": ""series""}, ""seriesOptions"": {""DAI"": {""type"": ""line"", ""color"": ""#FF9747"", ""yAxis"": 0, ""zIndex"": 0}, ""BUSD"": {""type"": ""line"", ""color"": ""#D4C70C"", ""yAxis"": 0, ""zIndex"": 5}, ""GUSD"": {""type"": ""line"", ""color"": ""#C2DCE0"", ""yAxis"": 0, ""zIndex"": 6}, ""HUSD"": {""type"": ""line"", ""color"": ""#FF0000"", ""yAxis"": 0, ""zIndex"": 1}, ""LUSD"": {""type"": ""line"", ""yAxis"": 0, ""zIndex"": 5}, ""TUSD"": {""type"": ""line"", ""color"": ""#475DFF"", ""yAxis"": 0, ""zIndex"": 7}, ""USDC"": {""type"": ""line"", ""color"": ""#80B7FF"", ""yAxis"": 0, ""zIndex"": 3}, ""USDN"": {""type"": ""line"", ""color"": ""#D333FF"", ""yAxis"": 0, ""zIndex"": 4}, ""USDT"": {""type"": ""line"", ""color"": ""#3BB503"", ""yAxis"": 0, ""zIndex"": 2}, ""sUSD"": {""type"": ""line"", ""color"": ""#858585"", ""yAxis"": 0, ""zIndex"": 4}}, ""valuesOptions"": {}, ""globalSeriesType"": ""line""}, ""created_at"": ""2021-09-08T08:29:03.770907+00:00"", ""__typename"": ""visualizations""}, {""id"": 281849, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""percentValues"": false}, ""reverseX"": false, ""columnMapping"": {""avg"": ""y"", ""symbol"": ""x""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""showDataLabels"": false, ""globalSeriesType"": ""column""}, ""created_at"": ""2021-09-08T08:32:03.490645+00:00"", ""__typename"": ""visualizations""}, {""id"": 319995, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""logarithmic"", ""tickFormat"": ""0.0000""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""0.000"", ""columnMapping"": {""price"": ""y"", ""minute"": ""x"", ""symbol"": ""series""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""scatter""}, ""created_at"": ""2021-09-23T12:28:03.635+00:00"", ""__typename"": ""visualizations""}, {""id"": 281827, ""type"": ""table"", ""name"": ""Query results"", ""options"": {""columns"": [{""name"": ""avg"", ""numberFormat"": ""0.000%""}, {""name"": ""avg_deviation_from_peg"", ""numberFormat"": ""0.000%""}]}, ""created_at"": ""2021-09-08T08:09:33.973399+00:00"", ""__typename"": ""visualizations""}]","with usd as (
select *
from prices.""usd"" 
where (symbol like '%USD%'
and minute > now() - interval '2 days')
order by 1
),

ust as (
select *
from prices.""usd"" 
where (symbol like '%UST%'
and minute > now() - interval '2 days')
order by 1
),

dai as (
select *
from prices.""usd"" 
where (symbol like '%DAI%'
and minute > now() - interval '2 days')
order by 1
)

select *
from (
select * from usd union all 
select * from ust union all 
select * from dai
) z
where price > 0.5"
142956,Hourly dex volume (48h),,"[{""id"": 281893, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-09-08T08:56:52.582412+00:00"", ""__typename"": ""visualizations""}, {""id"": 281894, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""columnMapping"": {""project"": ""series"", ""date_trunc"": ""x"", ""usd_volume"": ""y""}, ""seriesOptions"": {""DODO"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 4}, ""dYdX"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 9}, ""Curve"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 12}, ""Kyber"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 13}, ""Clipper"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 6}, ""Uniswap"": {""type"": ""column"", ""color"": ""#FF85E4"", ""yAxis"": 0, ""zIndex"": 1}, ""airswap"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 10}, ""1inch LP"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 15}, ""Balancer"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 3}, ""LINKSWAP"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 14}, ""0x Native"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 5}, ""Mooniswap"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 0}, ""Sushiswap"": {""type"": ""column"", ""color"": ""#824DFF"", ""yAxis"": 0, ""zIndex"": 2}, ""Synthetix"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 8}, ""Bancor Network"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 11}, ""1inch Limit Order Protocol"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 7}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2021-09-08T08:57:15.315688+00:00"", ""__typename"": ""visualizations""}]","SELECT  project,                                                                                       
        date_trunc('hour', block_time),                                                                 
        SUM(usd_amount) as usd_volume                                                                               
FROM dex.""trades"" t                                                                                    
WHERE block_time > now() - interval '2 days'
AND category = 'DEX'
AND ""exchange_contract_address"" != '\xf9c1fA7d41bf44ADe1dd08D37CC68f67Ae75bF92' 
GROUP BY 1, 2;"
143033,WETH price per DEX granular (24h),,"[{""id"": 282044, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-09-08T10:19:15.125845+00:00"", ""__typename"": ""visualizations""}, {""id"": 282090, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""-"", ""tickFormat"": ""0,000""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""$0,000"", ""columnMapping"": {""hour"": ""x"", ""price"": ""y"", ""minute"": ""x"", ""project"": ""series""}, ""seriesOptions"": {""DODO"": {""type"": ""scatter"", ""yAxis"": 0, ""zIndex"": 11}, ""dYdX"": {""type"": ""scatter"", ""yAxis"": 0, ""zIndex"": 17}, ""1inch"": {""type"": ""scatter"", ""yAxis"": 0, ""zIndex"": 3}, ""Curve"": {""type"": ""scatter"", ""yAxis"": 0, ""zIndex"": 14}, ""Kyber"": {""type"": ""scatter"", ""yAxis"": 0, ""zIndex"": 18}, ""mistX"": {""type"": ""scatter"", ""yAxis"": 0, ""zIndex"": 16}, ""0x API"": {""type"": ""scatter"", ""yAxis"": 0, ""zIndex"": 2}, ""Matcha"": {""type"": ""scatter"", ""yAxis"": 0, ""zIndex"": 4}, ""Clipper"": {""type"": ""scatter"", ""yAxis"": 0, ""zIndex"": 8}, ""Uniswap"": {""type"": ""scatter"", ""color"": ""#FF61E5"", ""yAxis"": 0, ""zIndex"": 0}, ""airswap"": {""type"": ""scatter"", ""yAxis"": 0, ""zIndex"": 10}, ""Balancer"": {""type"": ""scatter"", ""yAxis"": 0, ""zIndex"": 13}, ""LINKSWAP"": {""type"": ""scatter"", ""yAxis"": 0, ""zIndex"": 15}, ""Paraswap"": {""type"": ""scatter"", ""yAxis"": 0, ""zIndex"": 5}, ""Tokenlon"": {""type"": ""scatter"", ""yAxis"": 0, ""zIndex"": 7}, ""0x Native"": {""type"": ""scatter"", ""yAxis"": 0, ""zIndex"": 6}, ""Mooniswap"": {""type"": ""scatter"", ""yAxis"": 0, ""zIndex"": 20}, ""Sushiswap"": {""type"": ""scatter"", ""color"": ""#822EFF"", ""yAxis"": 0, ""zIndex"": 1}, ""Synthetix"": {""type"": ""scatter"", ""yAxis"": 0, ""zIndex"": 19}, ""1inch Limit Order Protocol"": {""type"": ""scatter"", ""yAxis"": 0, ""zIndex"": 12}}, ""valuesOptions"": {}, ""globalSeriesType"": ""scatter""}, ""created_at"": ""2021-09-08T10:49:51.711614+00:00"", ""__typename"": ""visualizations""}]","with sells as (
    select *, token_b_amount/token_a_amount as price
    from (
    select date_trunc('minute', block_time) as minute, 'WETH sells' as flow, project, sum(token_b_amount) as token_b_amount, sum(token_a_amount) as token_a_amount
    from (
        select *
        from dex.trades
        where (block_time > now() - interval '1 days')
        ) z
    where token_a_symbol like '%ETH%'
    and token_b_symbol like '%USD%'
    group by 1, 2, 3
    ) w
    where (token_b_amount != 0
    or token_a_amount != 0)
),

buys as (
    select *, token_a_amount/token_b_amount as price
    from (
    select date_trunc('minute', block_time) as minute, 'WETH buys' as flow, project, sum(token_b_amount) as token_b_amount, sum(token_a_amount) as token_a_amount
    from (
        select *
        from dex.trades
        where (block_time > now() - interval '1 days')
        ) z
    where token_b_symbol like '%ETH%'
    and token_a_symbol like '%USD%'
    group by 1, 2, 3
    ) w
    where (token_b_amount > 0
    or token_a_amount > 0)
)

select minute, project, avg(price) as price
from (
select * from sells union all
select * from buys
) z
where (price > 1500
and price < 11000)
group by 1, 2
order by 1"
21691,Aggregators 7 days volume,,"[{""id"": 44797, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""defaultRows"": 5, ""counterLabel"": ""Volume last 7 days\ud83c\udf9a"", ""stringPrefix"": ""$"", ""stringDecChar"": ""."", ""stringDecimal"": 0, ""stringThouSep"": "","", ""counterColName"": ""usd_volume"", ""defaultColumns"": 2, ""targetRowNumber"": 1}, ""created_at"": ""2021-03-03T08:08:52.257356+00:00"", ""__typename"": ""visualizations""}, {""id"": 44798, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""defaultRows"": 5, ""counterLabel"": ""Volume last 7 days \ud83d\udce2"", ""stringPrefix"": ""$"", ""stringSuffix"": ""B"", ""stringDecChar"": ""."", ""stringDecimal"": 1, ""stringThouSep"": "","", ""counterColName"": ""billion_volume"", ""defaultColumns"": 2, ""targetRowNumber"": 1}, ""created_at"": ""2021-03-03T08:08:52.257+00:00"", ""__typename"": ""visualizations""}, {""id"": 44796, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""Rank"", ""type"": ""integer"", ""order"": 100000, ""title"": ""Rank"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""number"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""right"", ""numberFormat"": ""0,0"", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}, {""name"": ""Project"", ""type"": ""string"", ""order"": 100001, ""title"": ""Project"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""string"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""left"", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}, {""name"": ""sum"", ""type"": ""float"", ""order"": 100002, ""title"": ""USD volume"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""number"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""right"", ""numberFormat"": ""0,0."", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}], ""autoHeight"": true, ""minColumns"": 2, ""defaultRows"": 14, ""itemsPerPage"": 25, ""defaultColumns"": 3}, ""created_at"": ""2021-03-03T08:08:52.257356+00:00"", ""__typename"": ""visualizations""}]","
SELECT
    SUM(usd_amount)/1e9 AS billion_volume
FROM dex.""trades"" t                                                                             
WHERE block_time > now() - interval '7 days'
AND category = 'Aggregator'
AND project != 'Matcha'
;
"
4319,DEX by volume 🏦,,"[{""id"": 8411, ""type"": ""chart"", ""name"": ""Market share \ud83c\udf70"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": null}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""$0,0[.]"", ""columnMapping"": {""Rank"": ""unused"", ""Project"": ""x"", ""7 Days Volume"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""7 Days Volume"": {""type"": ""pie"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {""0x"": {}, ""DDEX"": {}, ""IDEX"": {}, ""dYdX"": {}, ""Curve"": {}, ""Kyber"": {}, ""Oasis"": {}, ""Uniswap"": {""color"": ""#FF7DE3""}, ""Balancer"": {}, ""Loopring"": {}, ""Synthetix"": {}, ""Bancor Network"": {}, ""Gnosis Protocol"": {}}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2020-06-08T11:23:33.234+00:00"", ""__typename"": ""visualizations""}, {""id"": 22558, ""type"": ""table"", ""name"": ""Ranked \ud83e\udd47"", ""options"": {""columns"": [{""name"": ""Rank"", ""type"": ""integer"", ""order"": 100000, ""title"": ""Rank"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""number"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""right"", ""numberFormat"": """", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}, {""name"": ""Project"", ""type"": ""string"", ""order"": 100001, ""title"": ""Project"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""string"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""left"", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}, {""name"": ""7 Days Volume"", ""type"": ""float"", ""order"": 100002, ""title"": ""7 Days Volume \ud83d\udcc8"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""number"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""right"", ""numberFormat"": ""$0,0."", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}, {""name"": ""24 Hours Volume"", ""type"": ""float"", ""order"": 100003, ""title"": ""24 Hours Volume \ud83d\udcb8"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""number"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""right"", ""numberFormat"": ""$0,0."", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}], ""autoHeight"": true, ""minColumns"": 2, ""defaultRows"": 14, ""itemsPerPage"": 25, ""defaultColumns"": 3}, ""created_at"": ""2020-10-12T16:35:34.304+00:00"", ""__typename"": ""visualizations""}]","WITH seven_day_volume AS

(
    SELECT  project AS ""Project"",                        
            SUM(usd_amount) as usd_volume                                                                             
    FROM dex.""trades"" t                                                                             
    WHERE block_time > now() - interval '7 days'
    AND category = 'DEX'
    GROUP BY 1

), one_day_volume AS (
    SELECT  project AS ""Project"",                        
            SUM(usd_amount) as usd_volume                                                                             
    FROM dex.""trades"" t                                                                             
    WHERE block_time > now() - interval '1 days'
    AND category = 'DEX'
    GROUP BY 1
)

SELECT  ROW_NUMBER () OVER (ORDER BY SUM(seven.usd_volume) DESC) AS ""Rank"",
        seven.""Project"",
        SUM(seven.usd_volume) AS ""7 Days Volume"",
        SUM(one.usd_volume) AS ""24 Hours Volume""
FROM  seven_day_volume seven
LEFT JOIN one_day_volume one ON seven.""Project"" = one.""Project""
WHERE seven.usd_volume IS NOT NULL
GROUP BY 2
ORDER BY 3 DESC;
"
21693,Aggregator share of DEX volume 🍰,,"[{""id"": 44803, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""defaultRows"": 5, ""counterLabel"": """", ""stringPrefix"": """", ""stringSuffix"": ""%"", ""stringDecChar"": ""."", ""stringDecimal"": 1, ""stringThouSep"": "","", ""counterColName"": ""agg_share"", ""defaultColumns"": 2, ""targetRowNumber"": 1}, ""created_at"": ""2021-03-03T08:32:40.673+00:00"", ""__typename"": ""visualizations""}, {""id"": 44801, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""Rank"", ""type"": ""integer"", ""order"": 100000, ""title"": ""Rank"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""number"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""right"", ""numberFormat"": ""0,0"", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}, {""name"": ""Project"", ""type"": ""string"", ""order"": 100001, ""title"": ""Project"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""string"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""left"", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}, {""name"": ""sum"", ""type"": ""float"", ""order"": 100002, ""title"": ""USD volume"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""number"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""right"", ""numberFormat"": ""0,0."", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}], ""autoHeight"": true, ""minColumns"": 2, ""defaultRows"": 14, ""itemsPerPage"": 25, ""defaultColumns"": 3}, ""created_at"": ""2021-03-03T08:32:40.673959+00:00"", ""__typename"": ""visualizations""}]","
WITH agg AS (
SELECT
    SUM(usd_amount)/1e9 AS agg_bill_vol
FROM dex.""trades"" t                                                                             
WHERE block_time > now() - interval '7 days'
AND category = 'Aggregator'
AND project != 'Matcha'
)

, dex AS (
SELECT
    SUM(usd_amount)/1e9 AS dex_bill_vol
FROM dex.""trades"" t                                                                             
WHERE block_time > now() - interval '7 days'
AND category = 'DEX'
)

SELECT agg_bill_vol/dex_bill_vol*100 AS agg_share 
FROM agg, dex
;

"
4424,Monthly DEX volume grouped by year,,"[{""id"": 8621, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2020-06-11T14:08:44.100846+00:00"", ""__typename"": ""visualizations""}, {""id"": 8622, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Month number""}, ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Total USD DEX Volume""}}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": null}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0[.]"", ""columnMapping"": {""year"": ""series"", ""month"": ""x"", ""usd_volume"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""2019"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}, ""2020"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""column""}, ""created_at"": ""2020-06-11T14:10:10.861+00:00"", ""__typename"": ""visualizations""}]","SELECT                      
    date_part('year', block_time) AS year,
    date_part('month', block_time) AS month,
    SUM(usd_amount) as usd_volume                                                                                  
FROM dex.""trades"" t                                                                             
WHERE block_time >= '2019-01-01'
--AND block_time < date_trunc('month', Now()) -- This line can be added in case you only want to see full months
GROUP BY 1, 2
;"
21689,Aggregator by volume 📢,Note that Matcha trades go through 0x API so numbers below are not mutually exclusive.,"[{""id"": 44793, ""type"": ""table"", ""name"": ""Ranked \ud83e\udd47"", ""options"": {""columns"": [{""name"": ""Rank"", ""type"": ""integer"", ""order"": 100000, ""title"": ""Rank"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""number"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""right"", ""numberFormat"": """", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}, {""name"": ""Project"", ""type"": ""string"", ""order"": 100001, ""title"": ""Project"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""string"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""left"", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}, {""name"": ""7 Days Volume"", ""type"": ""float"", ""order"": 100002, ""title"": ""7 Days Volume \ud83d\udcc8"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""number"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""right"", ""numberFormat"": ""$0,0."", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}, {""name"": ""24 Hours Volume"", ""type"": ""float"", ""order"": 100003, ""title"": ""24 Hours Volume \ud83d\udcb8"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""number"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""right"", ""numberFormat"": ""$0,0."", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}], ""autoHeight"": true, ""minColumns"": 2, ""defaultRows"": 14, ""itemsPerPage"": 25, ""defaultColumns"": 3}, ""created_at"": ""2021-03-03T07:39:01.297183+00:00"", ""__typename"": ""visualizations""}, {""id"": 44792, ""type"": ""chart"", ""name"": ""Market share \ud83c\udf70"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": null}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""$0,0[.]"", ""columnMapping"": {""Rank"": ""unused"", ""Project"": ""x"", ""7 Days Volume"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""7 Days Volume"": {""type"": ""pie"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {""0x"": {}, ""DDEX"": {}, ""IDEX"": {}, ""dYdX"": {}, ""Curve"": {}, ""Kyber"": {}, ""Oasis"": {}, ""Uniswap"": {""color"": ""#FF7DE3""}, ""Balancer"": {}, ""Loopring"": {}, ""Synthetix"": {}, ""Bancor Network"": {}, ""Gnosis Protocol"": {}}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2021-03-03T07:39:01.297183+00:00"", ""__typename"": ""visualizations""}, {""id"": 2294224, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""7 Days Volume"", ""type"": ""progressbar"", ""numberFormat"": ""0,0""}, {""name"": ""Project"", ""numberFormat"": """"}, {""name"": ""24 Hours Volume"", ""type"": ""progressbar"", ""numberFormat"": ""0,0""}]}, ""created_at"": ""2022-10-03T14:49:37.753085+00:00"", ""__typename"": ""visualizations""}]","WITH seven_day_volume AS

(
    SELECT  project AS ""Project"",                        
            SUM(usd_amount) as usd_volume                                                                             
    FROM dex.""trades"" t                                                                             
    WHERE block_time > now() - interval '7 days'
    AND category = 'Aggregator'
    GROUP BY 1

), one_day_volume AS (
    SELECT  project AS ""Project"",                        
            SUM(usd_amount) as usd_volume                                                                             
    FROM dex.""trades"" t                                                                             
    WHERE block_time > now() - interval '1 days'
    AND category = 'Aggregator'
    GROUP BY 1
)

SELECT  ROW_NUMBER () OVER (ORDER BY SUM(seven.usd_volume) DESC) AS ""Rank"",
        seven.""Project"",
        SUM(seven.usd_volume) AS ""7 Days Volume"",
        SUM(one.usd_volume) AS ""24 Hours Volume""
FROM  seven_day_volume seven
LEFT JOIN one_day_volume one ON seven.""Project"" = one.""Project""
GROUP BY 2
ORDER BY 3 DESC;
"
21694,Aggregator share of DEX volume,,"[{""id"": 44805, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""Rank"", ""type"": ""integer"", ""order"": 100000, ""title"": ""Rank"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""number"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""right"", ""numberFormat"": ""0,0"", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}, {""name"": ""Project"", ""type"": ""string"", ""order"": 100001, ""title"": ""Project"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""string"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""left"", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}, {""name"": ""sum"", ""type"": ""float"", ""order"": 100002, ""title"": ""USD volume"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""number"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""right"", ""numberFormat"": ""0,0."", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}], ""autoHeight"": true, ""minColumns"": 2, ""defaultRows"": 14, ""itemsPerPage"": 25, ""defaultColumns"": 3}, ""created_at"": ""2021-03-03T08:54:16.413813+00:00"", ""__typename"": ""visualizations""}, {""id"": 44807, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Billion USD Volume""}}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": ""stack""}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0[.]00000"", ""columnMapping"": {""day"": ""x"", ""agg_share"": ""unused"", ""dex_non_agg"": ""y"", ""agg_bill_vol"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""dex_non_agg"": {""name"": ""Direct DEX volume"", ""type"": ""column"", ""color"": ""#FB8D3D"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 1}, ""agg_bill_vol"": {""name"": ""Aggregator volume"", ""type"": ""column"", ""color"": ""#604FE9"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""column""}, ""created_at"": ""2021-03-03T08:57:18.163+00:00"", ""__typename"": ""visualizations""}, {""id"": 44808, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": ""stack"", ""percentValues"": true}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0[.]"", ""columnMapping"": {""day"": ""x"", ""agg_vol"": ""y"", ""agg_share"": ""unused"", ""dex_non_agg"": ""y""}, ""percentFormat"": ""0[.]0%"", ""seriesOptions"": {""agg_vol"": {""name"": ""Aggregator Volume"", ""type"": ""area"", ""color"": ""#604FE9"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 1}, ""dex_non_agg"": {""name"": ""Direct DEX Volume"", ""type"": ""area"", ""color"": ""#E92828"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""area""}, ""created_at"": ""2021-03-03T09:09:05.21+00:00"", ""__typename"": ""visualizations""}]","
WITH agg AS (
SELECT
    date_trunc('day', block_time) AS day,
    SUM(usd_amount) AS agg_vol
FROM dex.""trades"" t                                                                             
WHERE block_time > now() - interval '14 days'
AND category = 'Aggregator'
AND project != 'Matcha'
GROUP BY 1
)

, dex AS (
SELECT
    date_trunc('day', block_time) AS day,
    SUM(usd_amount) AS dex_vol
FROM dex.""trades"" t                                                                             
WHERE block_time > now() - interval '14 days'
AND category = 'DEX'
GROUP BY 1
)

SELECT agg.day, agg_vol, (dex_vol-agg_vol) AS dex_non_agg, agg_vol/dex_vol AS agg_share
FROM agg 
LEFT JOIN dex ON dex.day = agg.day
;

"
4235,DEX 7 days volume,,"[{""id"": 8248, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""defaultRows"": 5, ""counterLabel"": ""Volume last 7 days\ud83c\udf9a"", ""stringPrefix"": ""$"", ""stringDecChar"": ""."", ""stringDecimal"": 0, ""stringThouSep"": "","", ""counterColName"": ""usd_volume"", ""defaultColumns"": 2, ""targetRowNumber"": 1}, ""created_at"": ""2020-06-05T13:06:48.161+00:00"", ""__typename"": ""visualizations""}, {""id"": 8247, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""Rank"", ""type"": ""integer"", ""order"": 100000, ""title"": ""Rank"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""number"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""right"", ""numberFormat"": ""0,0"", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}, {""name"": ""Project"", ""type"": ""string"", ""order"": 100001, ""title"": ""Project"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""string"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""left"", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}, {""name"": ""sum"", ""type"": ""float"", ""order"": 100002, ""title"": ""USD volume"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""number"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""right"", ""numberFormat"": ""0,0."", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}], ""autoHeight"": true, ""minColumns"": 2, ""defaultRows"": 14, ""itemsPerPage"": 25, ""defaultColumns"": 3}, ""created_at"": ""2020-06-05T13:06:48.161858+00:00"", ""__typename"": ""visualizations""}, {""id"": 16510, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""defaultRows"": 5, ""counterLabel"": ""Volume last 7 days\ud83c\udf9a"", ""stringPrefix"": ""$"", ""stringSuffix"": ""B"", ""stringDecChar"": ""."", ""stringDecimal"": null, ""stringThouSep"": "","", ""counterColName"": ""billion_volume"", ""defaultColumns"": 2, ""targetRowNumber"": 1}, ""created_at"": ""2020-08-21T07:36:50.422+00:00"", ""__typename"": ""visualizations""}]","
SELECT
    SUM(usd_amount)/1e9 AS billion_volume
FROM dex.""trades"" t                                                                             
WHERE block_time > now() - interval '7 days'
AND category = 'DEX'
;
"
4234,DEX 24 hours volume,,"[{""id"": 8245, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""sum"", ""type"": ""float"", ""order"": 100000, ""title"": ""USD volume"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""number"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""right"", ""numberFormat"": ""0,0."", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}], ""autoHeight"": true, ""minColumns"": 2, ""defaultRows"": 14, ""itemsPerPage"": 25, ""defaultColumns"": 3}, ""created_at"": ""2020-06-05T13:02:55.292732+00:00"", ""__typename"": ""visualizations""}, {""id"": 16518, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""defaultRows"": 5, ""counterLabel"": ""Volume last 24 hours \ud83d\udcab"", ""stringPrefix"": ""$"", ""stringSuffix"": ""B"", ""stringDecChar"": ""."", ""stringDecimal"": 2, ""stringThouSep"": "","", ""counterColName"": ""billion_volume"", ""defaultColumns"": 2, ""targetRowNumber"": 1}, ""created_at"": ""2020-08-21T10:52:33.677+00:00"", ""__typename"": ""visualizations""}]","SELECT
    SUM(usd_amount)/1e9 AS billion_volume
FROM dex.""trades"" t                                                                             
WHERE block_time > now() - interval '24 hours'
AND category = 'DEX'
;"
8246,DEX Trailing 24 hours growth 📈,,"[{""id"": 16525, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""Rank"", ""type"": ""integer"", ""order"": 100000, ""title"": ""Rank"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""number"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""right"", ""numberFormat"": ""0,0"", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}, {""name"": ""Project"", ""type"": ""string"", ""order"": 100001, ""title"": ""Project"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""string"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""left"", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}, {""name"": ""sum"", ""type"": ""float"", ""order"": 100002, ""title"": ""USD volume"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""number"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""right"", ""numberFormat"": ""0,0."", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}], ""autoHeight"": true, ""minColumns"": 2, ""defaultRows"": 14, ""itemsPerPage"": 25, ""defaultColumns"": 3}, ""created_at"": ""2020-08-21T12:52:45.275848+00:00"", ""__typename"": ""visualizations""}, {""id"": 16526, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 2, ""defaultRows"": 5, ""counterLabel"": """", ""stringPrefix"": """", ""stringSuffix"": ""%"", ""stringDecChar"": ""."", ""stringDecimal"": 0, ""stringThouSep"": "","", ""counterColName"": ""growth"", ""defaultColumns"": 2, ""targetRowNumber"": 1}, ""created_at"": ""2020-08-21T12:52:45.275848+00:00"", ""__typename"": ""visualizations""}]","WITH volume AS

(
SELECT 
    CASE WHEN block_time > now() - interval '1 days' THEN  '2' 
    ELSE '1'
    END AS week,
    SUM(usd_amount) as usd_volume                                                                             
FROM dex.""trades"" t                                                                             
WHERE block_time > now() - interval '2 days'
AND category = 'DEX'
GROUP BY 1
)

SELECT
week,
SUM(usd_volume) AS usd_volume,
(sum(usd_volume) - lag(sum(usd_volume), 1) over (order by week)) / lag(sum(usd_volume), 1) over (order by week)*100 as growth
FROM volume
GROUP BY 1;"
8243,30 days DEX volume,,"[{""id"": 16521, ""type"": ""counter"", ""name"": """", ""options"": {""countRow"": false, ""rowNumber"": 1, ""defaultRows"": 5, ""counterLabel"": ""Volume last 30 days \ud83d\uddd3"", ""stringPrefix"": ""$"", ""stringSuffix"": ""B"", ""stringDecChar"": ""."", ""stringDecimal"": 1, ""stringThouSep"": "" "", ""counterColName"": ""usd_volume_in_billion"", ""defaultColumns"": 2, ""targetRowNumber"": 1}, ""created_at"": ""2020-08-21T11:04:18.324+00:00"", ""__typename"": ""visualizations""}, {""id"": 16519, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": ""stack""}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0[.]"", ""columnMapping"": {""project"": ""series"", ""date_trunc"": ""x"", ""usd_volume"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""0x"": {""type"": ""column"", ""color"": ""#494949"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}, ""DDEX"": {""type"": ""column"", ""color"": ""#E92828"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 2}, ""IDEX"": {""type"": ""column"", ""color"": ""#604FE9"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 3}, ""dYdX"": {""type"": ""column"", ""color"": ""#000000"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 8}, ""Curve"": {""type"": ""column"", ""color"": ""#981717"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 1}, ""Kyber"": {""type"": ""column"", ""color"": ""#3BD973"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 4}, ""Oasis"": {""type"": ""column"", ""color"": ""#FB8D3D"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 6}, ""Uniswap"": {""type"": ""column"", ""color"": ""#FF7DE3"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 7}, ""Loopring"": {""type"": ""column"", ""color"": ""#356AFF"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 5}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""column""}, ""created_at"": ""2020-08-21T11:04:18.324294+00:00"", ""__typename"": ""visualizations""}, {""id"": 16520, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""usd_volume"", ""type"": ""float"", ""order"": 100000, ""title"": ""usd_volume"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""number"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""right"", ""numberFormat"": """", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}], ""autoHeight"": true, ""minColumns"": 2, ""defaultRows"": 14, ""itemsPerPage"": 25, ""defaultColumns"": 3}, ""created_at"": ""2020-08-21T11:04:18.324294+00:00"", ""__typename"": ""visualizations""}]","SELECT
        SUM(usd_amount/1e9) AS usd_volume_in_billion
FROM dex.""trades"" t                                                                             
WHERE block_time > now() - interval '30 days'
AND category = 'DEX'
;
"
14138,Number of DEX traders,,"[{""id"": 28322, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2020-11-26T10:35:01.482131+00:00"", ""__typename"": ""visualizations""}, {""id"": 28323, ""type"": ""counter"", ""name"": ""Counter"", ""options"": {""rowNumber"": 1, ""defaultRows"": 5, ""counterLabel"": ""Total unique trading addresses"", ""stringDecChar"": ""."", ""stringDecimal"": 0, ""stringThouSep"": "","", ""counterColName"": ""count"", ""defaultColumns"": 2, ""targetRowNumber"": 1}, ""created_at"": ""2020-11-26T10:40:00.021771+00:00"", ""__typename"": ""visualizations""}]","SELECT COUNT(*)
FROM 
(
    SELECT
    trader_a AS user
    FROM dex.trades
    
    UNION
    
    SELECT
    trader_b AS address
    FROM dex.trades
) traders
;


"
7486,12 Months DEX volume,,"[{""id"": 14831, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""usd_volume"", ""type"": ""float"", ""order"": 100000, ""title"": ""usd_volume"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""number"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""right"", ""numberFormat"": """", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}], ""autoHeight"": true, ""minColumns"": 2, ""defaultRows"": 14, ""itemsPerPage"": 25, ""defaultColumns"": 3}, ""created_at"": ""2020-08-06T09:00:48.167+00:00"", ""__typename"": ""visualizations""}, {""id"": 14832, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": ""stack""}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0[.]"", ""columnMapping"": {""project"": ""series"", ""date_trunc"": ""x"", ""usd_volume"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""0x"": {""type"": ""column"", ""color"": ""#494949"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}, ""DDEX"": {""type"": ""column"", ""color"": ""#E92828"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 2}, ""IDEX"": {""type"": ""column"", ""color"": ""#604FE9"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 3}, ""dYdX"": {""type"": ""column"", ""color"": ""#000000"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 8}, ""Curve"": {""type"": ""column"", ""color"": ""#981717"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 1}, ""Kyber"": {""type"": ""column"", ""color"": ""#3BD973"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 4}, ""Oasis"": {""type"": ""column"", ""color"": ""#FB8D3D"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 6}, ""Uniswap"": {""type"": ""column"", ""color"": ""#FF7DE3"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 7}, ""Loopring"": {""type"": ""column"", ""color"": ""#356AFF"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 5}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""column""}, ""created_at"": ""2020-08-06T09:00:48.167194+00:00"", ""__typename"": ""visualizations""}, {""id"": 14836, ""type"": ""counter"", ""name"": """", ""options"": {""countRow"": false, ""rowNumber"": 1, ""defaultRows"": 5, ""counterLabel"": ""Volume last 12 months \ud83d\udcaa"", ""stringPrefix"": ""$"", ""stringSuffix"": "" B"", ""stringDecChar"": ""."", ""stringDecimal"": -1, ""stringThouSep"": "","", ""counterColName"": ""usd_volume_in_billion"", ""defaultColumns"": 2, ""targetRowNumber"": 1}, ""created_at"": ""2020-08-06T09:10:23.905+00:00"", ""__typename"": ""visualizations""}]","SELECT  SUM(
            usd_amount)/1000000000               -- Convert to billion :D 
        AS usd_volume_in_billion                                                                             
FROM dex.""trades"" t                                                                             
WHERE block_time >= now() - interval '12 months'
AND category = 'DEX'
; "
4323,Weekly DEX volume,,"[{""id"": 8420, ""type"": ""table"", ""name"": ""Ranked\ud83e\udd47"", ""options"": {""columns"": [{""name"": ""Rank"", ""type"": ""integer"", ""order"": 100000, ""title"": ""Rank"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""number"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""right"", ""numberFormat"": ""0,0"", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}, {""name"": ""Project"", ""type"": ""string"", ""order"": 100001, ""title"": ""Project"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""string"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""left"", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}, {""name"": ""Volume"", ""type"": ""float"", ""order"": 100002, ""title"": ""USD Volume"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""number"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""right"", ""numberFormat"": ""0,0."", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}], ""autoHeight"": true, ""minColumns"": 2, ""defaultRows"": 14, ""itemsPerPage"": 25, ""defaultColumns"": 3}, ""created_at"": ""2020-06-08T12:29:00.907202+00:00"", ""__typename"": ""visualizations""}, {""id"": 8545, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""project"", ""type"": ""string"", ""order"": 100000, ""title"": ""project"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""string"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""left"", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}, {""name"": ""date_trunc"", ""type"": ""datetime"", ""order"": 100001, ""title"": ""date_trunc"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""datetime"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""right"", ""booleanValues"": [""false"", ""true""], ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}, {""name"": ""usd_volume"", ""type"": ""float"", ""order"": 100002, ""title"": ""usd_volume"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""number"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""right"", ""numberFormat"": """", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}], ""autoHeight"": true, ""minColumns"": 2, ""defaultRows"": 14, ""itemsPerPage"": 25, ""defaultColumns"": 3}, ""created_at"": ""2020-06-10T14:39:46.369738+00:00"", ""__typename"": ""visualizations""}, {""id"": 8546, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": ""stack""}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0[.]"", ""columnMapping"": {""project"": ""series"", ""date_trunc"": ""x"", ""usd_volume"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""0x"": {""type"": ""area"", ""color"": ""#494949"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}, ""DDEX"": {""type"": ""area"", ""color"": ""#E92828"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 2}, ""IDEX"": {""type"": ""area"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 3}, ""dYdX"": {""type"": ""area"", ""color"": ""#000000"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 8}, ""Curve"": {""type"": ""area"", ""color"": ""#981717"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 1}, ""Kyber"": {""type"": ""area"", ""color"": ""#3BD973"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 4}, ""Oasis"": {""type"": ""area"", ""color"": ""#FB8D3D"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 6}, ""Uniswap"": {""type"": ""area"", ""color"": ""#FF7DE3"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 7}, ""Loopring"": {""type"": ""area"", ""color"": ""#356AFF"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 5}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""area""}, ""created_at"": ""2020-06-10T14:49:41.211+00:00"", ""__typename"": ""visualizations""}, {""id"": 8547, ""type"": ""chart"", ""name"": ""Market share"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": ""stack"", ""percentValues"": true}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0[.]"", ""columnMapping"": {""project"": ""series"", ""date_trunc"": ""x"", ""usd_volume"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""0x"": {""type"": ""area"", ""color"": ""#494949"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}, ""DDEX"": {""type"": ""area"", ""color"": ""#E92828"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 2}, ""IDEX"": {""type"": ""area"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 3}, ""dYdX"": {""type"": ""area"", ""color"": ""#000000"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 8}, ""Curve"": {""type"": ""area"", ""color"": ""#981717"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 1}, ""Kyber"": {""type"": ""area"", ""color"": ""#3BD973"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 4}, ""Oasis"": {""type"": ""area"", ""color"": ""#FB8D3D"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 6}, ""Uniswap"": {""type"": ""area"", ""color"": ""#FF7DE3"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 7}, ""Loopring"": {""type"": ""area"", ""color"": ""#356AFF"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 5}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""area""}, ""created_at"": ""2020-06-10T14:56:11.014+00:00"", ""__typename"": ""visualizations""}]","SELECT  project,                        
        date_trunc('week', block_time),
        SUM(usd_amount) as usd_volume                                                                              
FROM dex.""trades"" t                                                                             
WHERE block_time > now() - interval '365 days'
--AND block_time < date_trunc('week', Now()) -- Add this line to see stats from current week
AND category = 'DEX'
GROUP BY 1, 2
; "
1847,Monthly DEX Volume By Project,,"[{""id"": 3259, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2020-02-28T08:43:57.650958+00:00"", ""__typename"": ""visualizations""}, {""id"": 3261, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": ""stack""}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0[.]"", ""columnMapping"": {""project"": ""series"", ""date_trunc"": ""x"", ""usd_volume"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""0x"": {""type"": ""column"", ""color"": ""#494949"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}, ""DDEX"": {""type"": ""column"", ""color"": ""#E92828"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 2}, ""IDEX"": {""type"": ""column"", ""color"": ""#604FE9"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 3}, ""dYdX"": {""type"": ""column"", ""color"": ""#000000"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 8}, ""Curve"": {""type"": ""column"", ""color"": ""#981717"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 1}, ""Kyber"": {""type"": ""column"", ""color"": ""#3BD973"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 4}, ""Oasis"": {""type"": ""column"", ""color"": ""#FB8D3D"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 6}, ""Uniswap"": {""type"": ""column"", ""color"": ""#FF7DE3"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 7}, ""Loopring"": {""type"": ""column"", ""color"": ""#356AFF"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 5}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""column""}, ""created_at"": ""2020-02-28T09:01:58.387+00:00"", ""__typename"": ""visualizations""}]","SELECT  project,                        
        date_trunc('month', block_time),
        SUM(usd_amount) as usd_volume                                                                             
FROM dex.""trades"" t                                                                             
WHERE block_time > '2019-01-01'
AND category = 'DEX'
--AND block_time < date_trunc('month', Now()) -- This line can be added in case you only want to see full months
GROUP BY 1, 2
;"
4388,Daily DEX volume,,"[{""id"": 8548, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""project"", ""type"": ""string"", ""order"": 100000, ""title"": ""project"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""string"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""left"", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}, {""name"": ""date_trunc"", ""type"": ""datetime"", ""order"": 100001, ""title"": ""date_trunc"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""datetime"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""right"", ""booleanValues"": [""false"", ""true""], ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}, {""name"": ""usd_volume"", ""type"": ""float"", ""order"": 100002, ""title"": ""usd_volume"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""number"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""right"", ""numberFormat"": """", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}], ""autoHeight"": true, ""minColumns"": 2, ""defaultRows"": 14, ""itemsPerPage"": 25, ""defaultColumns"": 3}, ""created_at"": ""2020-06-10T15:05:14.018+00:00"", ""__typename"": ""visualizations""}, {""id"": 8550, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": ""stack""}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0[.]"", ""columnMapping"": {""project"": ""series"", ""date_trunc"": ""x"", ""usd_volume"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""0x"": {""type"": ""column"", ""color"": ""#494949"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}, ""DDEX"": {""type"": ""column"", ""color"": ""#E92828"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 2}, ""IDEX"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 3}, ""dYdX"": {""type"": ""column"", ""color"": ""#000000"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 8}, ""Curve"": {""type"": ""column"", ""color"": ""#981717"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 1}, ""Kyber"": {""type"": ""column"", ""color"": ""#3BD973"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 4}, ""Oasis"": {""type"": ""column"", ""color"": ""#FB8D3D"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 6}, ""Uniswap"": {""type"": ""column"", ""color"": ""#FF7DE3"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 7}, ""Loopring"": {""type"": ""column"", ""color"": ""#356AFF"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 5}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""column""}, ""created_at"": ""2020-06-10T15:05:14.018+00:00"", ""__typename"": ""visualizations""}, {""id"": 8551, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": ""stack"", ""percentValues"": true}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0[.]"", ""columnMapping"": {""project"": ""series"", ""date_trunc"": ""x"", ""usd_volume"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""0x"": {""type"": ""area"", ""color"": ""#494949"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}, ""DDEX"": {""type"": ""area"", ""color"": ""#E92828"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 2}, ""IDEX"": {""type"": ""area"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 3}, ""dYdX"": {""type"": ""area"", ""color"": ""#000000"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 8}, ""Curve"": {""type"": ""area"", ""color"": ""#981717"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 1}, ""Kyber"": {""type"": ""area"", ""color"": ""#3BD973"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 4}, ""Oasis"": {""type"": ""area"", ""color"": ""#FB8D3D"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 6}, ""Uniswap"": {""type"": ""area"", ""color"": ""#FF7DE3"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 7}, ""Loopring"": {""type"": ""area"", ""color"": ""#356AFF"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 5}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""area""}, ""created_at"": ""2020-06-10T15:05:14.018149+00:00"", ""__typename"": ""visualizations""}]","SELECT  project,                                                                                       
        date_trunc('day', block_time),                                                                 
        SUM(usd_amount) as usd_volume                                                                               
FROM dex.""trades"" t                                                                                    
WHERE block_time > date_trunc('day', now()) - interval '30 days'                                                          
AND block_time < date_trunc('day', Now())
AND category = 'DEX'
GROUP BY 1, 2;"
4236,DEX Trailing 7 days growth 📈,,"[{""id"": 8250, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 2, ""defaultRows"": 5, ""counterLabel"": """", ""stringPrefix"": """", ""stringSuffix"": ""%"", ""stringDecChar"": ""."", ""stringDecimal"": 0, ""stringThouSep"": "","", ""counterColName"": ""growth"", ""defaultColumns"": 2, ""targetRowNumber"": 1}, ""created_at"": ""2020-06-05T13:08:00.723+00:00"", ""__typename"": ""visualizations""}, {""id"": 8249, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""Rank"", ""type"": ""integer"", ""order"": 100000, ""title"": ""Rank"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""number"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""right"", ""numberFormat"": ""0,0"", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}, {""name"": ""Project"", ""type"": ""string"", ""order"": 100001, ""title"": ""Project"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""string"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""left"", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}, {""name"": ""sum"", ""type"": ""float"", ""order"": 100002, ""title"": ""USD volume"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""number"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""right"", ""numberFormat"": ""0,0."", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}], ""autoHeight"": true, ""minColumns"": 2, ""defaultRows"": 14, ""itemsPerPage"": 25, ""defaultColumns"": 3}, ""created_at"": ""2020-06-05T13:08:00.723699+00:00"", ""__typename"": ""visualizations""}]","WITH volume AS

(
SELECT 
    CASE WHEN block_time > now() - interval '7 days' THEN  '2' 
    ELSE '1'
    END AS week,
    SUM(usd_amount) as usd_volume                                                                             
FROM dex.""trades"" t                                                                             
WHERE block_time > now() - interval '14 days'
AND category = 'DEX'
GROUP BY 1
)

SELECT
week,
SUM(usd_volume) AS usd_volume,
(sum(usd_volume) - lag(sum(usd_volume), 1) over (order by week)) / lag(sum(usd_volume), 1) over (order by week)*100 as growth
FROM volume
GROUP BY 1;"
1296781,"Margin Trading MUX Stats (AVAX, BNB, ARBITRUM)",Excludes Fantom,"[{""id"": 2221121, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-09-22T07:38:32.95181+00:00"", ""__typename"": ""visualizations""}, {""id"": 2221122, ""type"": ""counter"", ""name"": ""\ud83d\udcb0 Total Margin Volume"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""counterColName"": ""total_notional_value""}, ""created_at"": ""2022-09-22T07:38:32.95181+00:00"", ""__typename"": ""visualizations""}, {""id"": 2221123, ""type"": ""counter"", ""name"": ""\ud83d\udc5b 24 Hour Volume"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""counterColName"": ""daily_volume""}, ""created_at"": ""2022-09-22T07:38:32.95181+00:00"", ""__typename"": ""visualizations""}, {""id"": 2221124, ""type"": ""counter"", ""name"": ""\ud83d\udcb5 1 Week Volume"", ""options"": {""rowNumber"": 1, ""counterColName"": ""weekly_volume""}, ""created_at"": ""2022-09-22T07:38:32.95181+00:00"", ""__typename"": ""visualizations""}, {""id"": 2221125, ""type"": ""counter"", ""name"": ""\ud83d\udcb8 1 Month Volume"", ""options"": {""rowNumber"": 1, ""counterColName"": ""monthly_volume""}, ""created_at"": ""2022-09-22T07:38:32.95181+00:00"", ""__typename"": ""visualizations""}, {""id"": 2221126, ""type"": ""counter"", ""name"": ""\ud83d\udcbc 24 Hour AVG Trade Size"", ""options"": {""rowNumber"": 1, ""counterColName"": ""avg_trade_volume""}, ""created_at"": ""2022-09-22T07:38:32.95181+00:00"", ""__typename"": ""visualizations""}, {""id"": 2221127, ""type"": ""counter"", ""name"": ""\ud83d\udc9c 24 Hour Traders"", ""options"": {""rowNumber"": 1, ""counterColName"": ""daily_traders""}, ""created_at"": ""2022-09-22T07:38:32.95181+00:00"", ""__typename"": ""visualizations""}, {""id"": 2221129, ""type"": ""counter"", ""name"": ""\ud83e\udd16 Total Unique Traders"", ""options"": {""rowNumber"": 1, ""counterColName"": ""total_traders""}, ""created_at"": ""2022-09-22T07:38:32.95181+00:00"", ""__typename"": ""visualizations""}, {""id"": 2221128, ""type"": ""counter"", ""name"": ""\ud83d\udc9c Weekly Traders"", ""options"": {""rowNumber"": 1, ""counterColName"": ""weekly_traders""}, ""created_at"": ""2022-09-22T07:38:32.95181+00:00"", ""__typename"": ""visualizations""}, {""id"": 2411013, ""type"": ""counter"", ""name"": ""\ud83d\udcb3 Total Weekly Fees"", ""options"": {""rowNumber"": 1, ""counterColName"": ""weekly_fees""}, ""created_at"": ""2022-10-18T07:38:16.323038+00:00"", ""__typename"": ""visualizations""}, {""id"": 2411011, ""type"": ""counter"", ""name"": ""\ud83d\udcb3  Total Margin Fees"", ""options"": {""rowNumber"": 1, ""counterColName"": ""total_fees""}, ""created_at"": ""2022-10-18T07:38:08.489902+00:00"", ""__typename"": ""visualizations""}, {""id"": 2411012, ""type"": ""counter"", ""name"": ""\ud83d\udcb3 Total Daily Fees"", ""options"": {""rowNumber"": 1, ""counterColName"": ""daily_fees""}, ""created_at"": ""2022-10-18T07:38:12.30993+00:00"", ""__typename"": ""visualizations""}]","SELECT CONCAT('$', 
        ROUND(
            (CASE 
            WHEN total_notional_value/1e3 < 1 THEN total_notional_value
            WHEN total_notional_value/1e6 < 1 THEN total_notional_value/1e3
            WHEN total_notional_value/1e9 < 1 THEN total_notional_value/1e6
            WHEN total_notional_value/1e12 < 1 THEN total_notional_value/1e9
            WHEN total_notional_value/1e15 < 1 THEN total_notional_value/1e12
            END)
        , 2),
        (
            CASE 
            WHEN total_notional_value/1e3 < 1 THEN ''
            WHEN total_notional_value/1e6 < 1 THEN 'K'
            WHEN total_notional_value/1e9 < 1 THEN 'M'
            WHEN total_notional_value/1e12 < 1 THEN 'B'
            WHEN total_notional_value/1e15 < 1 THEN 'T'
            END)
        ) as total_notional_value, 
        CONCAT('$', 
        ROUND(
            (CASE 
            WHEN total_fees/1e3 < 1 THEN total_fees
            WHEN total_fees/1e6 < 1 THEN total_fees/1e3
            WHEN total_fees/1e9 < 1 THEN total_fees/1e6
            WHEN total_fees/1e12 < 1 THEN total_fees/1e9
            WHEN total_fees/1e15 < 1 THEN total_fees/1e12
            END)
        , 2),
        (
            CASE 
            WHEN total_fees/1e3 < 1 THEN ''
            WHEN total_fees/1e6 < 1 THEN 'K'
            WHEN total_fees/1e9 < 1 THEN 'M'
            WHEN total_fees/1e12 < 1 THEN 'B'
            WHEN total_fees/1e15 < 1 THEN 'T'
            END)
        ) as total_fees, 
        CONCAT('$', 
        ROUND(
            (CASE 
            WHEN daily_fees/1e3 < 1 THEN daily_fees
            WHEN daily_fees/1e6 < 1 THEN daily_fees/1e3
            WHEN daily_fees/1e9 < 1 THEN daily_fees/1e6
            WHEN daily_fees/1e12 < 1 THEN daily_fees/1e9
            WHEN daily_fees/1e15 < 1 THEN daily_fees/1e12
            END)
        , 2),
        (
            CASE 
            WHEN daily_fees/1e3 < 1 THEN ''
            WHEN daily_fees/1e6 < 1 THEN 'K'
            WHEN daily_fees/1e9 < 1 THEN 'M'
            WHEN daily_fees/1e12 < 1 THEN 'B'
            WHEN daily_fees/1e15 < 1 THEN 'T'
            END)
        ) as daily_fees, 
        CONCAT('$', 
        ROUND(
            (CASE 
            WHEN weekly_fees/1e3 < 1 THEN weekly_fees
            WHEN weekly_fees/1e6 < 1 THEN weekly_fees/1e3
            WHEN weekly_fees/1e9 < 1 THEN weekly_fees/1e6
            WHEN weekly_fees/1e12 < 1 THEN weekly_fees/1e9
            WHEN weekly_fees/1e15 < 1 THEN weekly_fees/1e12
            END)
        , 2),
        (
            CASE 
            WHEN weekly_fees/1e3 < 1 THEN ''
            WHEN weekly_fees/1e6 < 1 THEN 'K'
            WHEN weekly_fees/1e9 < 1 THEN 'M'
            WHEN weekly_fees/1e12 < 1 THEN 'B'
            WHEN weekly_fees/1e15 < 1 THEN 'T'
            END)
        ) as weekly_fees, 
        CONCAT('$', 
        ROUND(
            (CASE 
            WHEN daily_volume/1e3 < 1 THEN daily_volume
            WHEN daily_volume/1e6 < 1 THEN daily_volume/1e3
            WHEN daily_volume/1e9 < 1 THEN daily_volume/1e6
            WHEN daily_volume/1e12 < 1 THEN daily_volume/1e9
            WHEN daily_volume/1e15 < 1 THEN daily_volume/1e12
            END)
        , 2),
        (
            CASE 
            WHEN daily_volume/1e3 < 1 THEN ''
            WHEN daily_volume/1e6 < 1 THEN 'K'
            WHEN daily_volume/1e9 < 1 THEN 'M'
            WHEN daily_volume/1e12 < 1 THEN 'B'
            WHEN daily_volume/1e15 < 1 THEN 'T'
            END)
        ) as daily_volume, 
        CONCAT('$', 
        ROUND(
            (CASE 
            WHEN weekly_volume/1e3 < 1 THEN weekly_volume
            WHEN weekly_volume/1e6 < 1 THEN weekly_volume/1e3
            WHEN weekly_volume/1e9 < 1 THEN weekly_volume/1e6
            WHEN weekly_volume/1e12 < 1 THEN weekly_volume/1e9
            WHEN weekly_volume/1e15 < 1 THEN weekly_volume/1e12
            END)
        , 2),
        (
            CASE 
            WHEN weekly_volume/1e3 < 1 THEN ''
            WHEN weekly_volume/1e6 < 1 THEN 'K'
            WHEN weekly_volume/1e9 < 1 THEN 'M'
            WHEN weekly_volume/1e12 < 1 THEN 'B'
            WHEN weekly_volume/1e15 < 1 THEN 'T'
            END)
        ) as weekly_volume,
        CONCAT('$', 
        ROUND(
            (CASE 
            WHEN monthly_volume/1e3 < 1 THEN monthly_volume
            WHEN monthly_volume/1e6 < 1 THEN monthly_volume/1e3
            WHEN monthly_volume/1e9 < 1 THEN monthly_volume/1e6
            WHEN monthly_volume/1e12 < 1 THEN monthly_volume/1e9
            WHEN monthly_volume/1e15 < 1 THEN monthly_volume/1e12
            END)
        , 2),
        (
            CASE 
            WHEN monthly_volume/1e3 < 1 THEN ''
            WHEN monthly_volume/1e6 < 1 THEN 'K'
            WHEN monthly_volume/1e9 < 1 THEN 'M'
            WHEN monthly_volume/1e12 < 1 THEN 'B'
            WHEN monthly_volume/1e15 < 1 THEN 'T'
            END)
        ) as monthly_volume, 
        CONCAT('$', 
        ROUND(
            (CASE 
            WHEN avg_trade_volume/1e3 < 1 THEN avg_trade_volume
            WHEN avg_trade_volume/1e6 < 1 THEN avg_trade_volume/1e3
            WHEN avg_trade_volume/1e9 < 1 THEN avg_trade_volume/1e6
            WHEN avg_trade_volume/1e12 < 1 THEN avg_trade_volume/1e9
            WHEN avg_trade_volume/1e15 < 1 THEN avg_trade_volume/1e12
            END)
        , 2),
        (
            CASE 
            WHEN avg_trade_volume/1e3 < 1 THEN ''
            WHEN avg_trade_volume/1e6 < 1 THEN 'K'
            WHEN avg_trade_volume/1e9 < 1 THEN 'M'
            WHEN avg_trade_volume/1e12 < 1 THEN 'B'
            WHEN avg_trade_volume/1e15 < 1 THEN 'T'
            END)
        ) as avg_trade_volume,
        (total_traders) as total_traders,
        (daily_traders) as daily_traders,
        (weekly_traders) as weekly_traders
        
        
FROM (
    select SUM(token_amount * token_price) as total_notional_value,
    SUM(fees) as total_fees,
    SUM(fees)  filter (WHERE block_time >= NOW() - INTERVAL '1 DAY') as daily_fees,
    SUM(fees)  filter (WHERE block_time >= NOW() - INTERVAL '1 WEEK') as weekly_fees,
    COUNT(DISTINCT trader) as total_traders,
    COUNT(DISTINCT trader)  filter (WHERE block_time >= NOW() - INTERVAL '1 DAY') as daily_traders,
    COUNT(DISTINCT trader)  filter (WHERE block_time >= NOW() - INTERVAL '1 WEEK') as weekly_traders,

    SUM(token_amount * token_price) filter (WHERE block_time >= NOW() - INTERVAL '1 DAY') as daily_volume,
    SUM(token_amount * token_price) filter (WHERE block_time >= NOW() - INTERVAL '1 WEEK') as weekly_volume,
    SUM(token_amount * token_price) filter (WHERE block_time >= NOW() - INTERVAL '1 MONTH')  as monthly_volume,
    AVG(token_amount * token_price) filter (WHERE block_time >= NOW() - INTERVAL '1 DAY') as avg_trade_volume
    from (
        -- open position
        SELECT block_time, concat('0x', SUBSTRING(topic2 FROM 27 FOR 40)) AS trader,
        -- IF(bytea2numeric_v2(SUBSTRING(data, 3+64*3 - 1, 1)) = 1, 'LONG', 'SHORT') as position_side,
        bytea2numeric_v2(SUBSTRING(data FROM 3+64*3, 64))/1e18 as token_amount,
        bytea2numeric_v2(SUBSTRING(data FROM 3+64*4, 64))/1e18 as token_price,
        bytea2numeric_v2(SUBSTRING(data from 3+64*7, 64))/1e18 as fees --usd fees

        FROM arbitrum.logs
        WHERE block_time >= TIMESTAMP '2022-07-01' and
        topic1 = '0xdb27855d3e94a6c985e1e59c77870a73484ef3c40d29fbfe14bb3e686da86efb' and
        contract_address = '0x3e0199792ce69dc29a0a36146bfa68bd7c8d6633'
        UNION ALL

        -- closing position
        SELECT block_time, concat('0x', SUBSTRING(topic2 FROM 27 FOR 40)) AS trader,
        -- IF(bytea2numeric_v2(SUBSTRING(data, 3+64*4 - 1, 1)) = 1, 'LONG', 'SHORT') as position_side,
        bytea2numeric_v2(SUBSTRING(data FROM 3+64*4, 64))/1e18 as token_amount,
        bytea2numeric_v2(SUBSTRING(data FROM 3+64*5, 64))/1e18 as token_price,
        bytea2numeric_v2(SUBSTRING(data from 3+64*8, 64))/1e18 as fees --usd fees

        FROM arbitrum.logs
        WHERE block_time >= TIMESTAMP '2022-07-01' and
        topic1 = '0x645156066afee3ede009256908a9e96538cc1ad681c46b10114f6ce98ebd0600' and 
        contract_address = '0x3e0199792ce69dc29a0a36146bfa68bd7c8d6633'


        UNION ALL
        -- liquidate
        SELECT block_time, concat('0x', SUBSTRING(topic2 FROM 27 FOR 40)) AS trader,
        -- IF(bytea2numeric_v2(SUBSTRING(data, 3+64*4 - 1, 1)) = 1, 'LONG', 'SHORT') as position_side,
        bytea2numeric_v2(SUBSTRING(data FROM 3+64*4, 64))/1e18 as token_amount,
        bytea2numeric_v2(SUBSTRING(data FROM 3+64*5, 64))/1e18 as token_price,
        bytea2numeric_v2(SUBSTRING(data from 3+64*8, 64))/1e18 as fees --usd fees
        FROM arbitrum.logs
        WHERE block_time >= TIMESTAMP '2022-07-01' and
        topic1 = '0xd63e21d9ddaf46f8d28d121f06e7ed33fcc0300af1f8c794e69056dbf37e2d6a' and 
        contract_address = '0x3e0199792ce69dc29a0a36146bfa68bd7c8d6633'


        UNION ALL

        SELECT block_time, concat('0x', SUBSTRING(topic2 FROM 27 FOR 40)) AS trader,
        -- IF(bytea2numeric_v2(SUBSTRING(data, 3+64*3 - 1, 1)) = 1, 'LONG', 'SHORT') as position_side,
        bytea2numeric_v2(SUBSTRING(data FROM 3+64*3, 64))/1e18 as token_amount,
        bytea2numeric_v2(SUBSTRING(data FROM 3+64*4, 64))/1e18 as token_price,
        bytea2numeric_v2(SUBSTRING(data from 3+64*7, 64))/1e18 as fees --usd fees

        FROM avalanche_c.logs
        WHERE block_time >= TIMESTAMP '2022-07-01' and 
        contract_address = '0x0ba2e492e8427fad51692ee8958ebf936bee1d84' and
        topic1 = '0xdb27855d3e94a6c985e1e59c77870a73484ef3c40d29fbfe14bb3e686da86efb'  
        

        UNION ALL

        SELECT block_time, concat('0x', SUBSTRING(topic2 FROM 27 FOR 40)) AS trader,
        -- IF(bytea2numeric_v2(SUBSTRING(data, 3+64*4 - 1, 1)) = 1, 'LONG', 'SHORT') as position_side,
        bytea2numeric_v2(SUBSTRING(data FROM 3+64*4, 64))/1e18 as token_amount,
        bytea2numeric_v2(SUBSTRING(data FROM 3+64*5, 64))/1e18 as token_price,
        bytea2numeric_v2(SUBSTRING(data from 3+64*8, 64))/1e18 as fees --usd fees

        FROM avalanche_c.logs
        WHERE block_time >= TIMESTAMP '2022-07-01' and 
        topic1 = '0x645156066afee3ede009256908a9e96538cc1ad681c46b10114f6ce98ebd0600' and
        contract_address = '0x0ba2e492e8427fad51692ee8958ebf936bee1d84'
        

        UNION ALL
        -- liquidate
        SELECT block_time, concat('0x', SUBSTRING(topic2 FROM 27 FOR 40)) AS trader,
        -- IF(bytea2numeric_v2(SUBSTRING(data, 3+64*4 - 1, 1)) = 1, 'LONG', 'SHORT') as position_side,
        bytea2numeric_v2(SUBSTRING(data FROM 3+64*4, 64))/1e18 as token_amount,
        bytea2numeric_v2(SUBSTRING(data FROM 3+64*5, 64))/1e18 as token_price,
        bytea2numeric_v2(SUBSTRING(data from 3+64*8, 64))/1e18 as fees --usd fees
        FROM avalanche_c.logs
        WHERE  block_time >= TIMESTAMP '2022-07-01' and 
        topic1 = '0xd63e21d9ddaf46f8d28d121f06e7ed33fcc0300af1f8c794e69056dbf37e2d6a' and 
        contract_address = '0x0ba2e492e8427fad51692ee8958ebf936bee1d84' 

        UNION ALL

        SELECT block_time, concat('0x', SUBSTRING(topic2 FROM 27 FOR 40)) AS trader,
        -- IF(bytea2numeric_v2(SUBSTRING(data, 3+64*3 - 1, 1)) = 1, 'LONG', 'SHORT') as position_side,
        bytea2numeric_v2(SUBSTRING(data FROM 3+64*3, 64))/1e18 as token_amount,
        bytea2numeric_v2(SUBSTRING(data FROM 3+64*4, 64))/1e18 as token_price,
        bytea2numeric_v2(SUBSTRING(data from 3+64*7, 64))/1e18 as fees --usd fees

        FROM bnb.logs
        WHERE block_time >= TIMESTAMP '2022-07-01' and 
        topic1 = '0xdb27855d3e94a6c985e1e59c77870a73484ef3c40d29fbfe14bb3e686da86efb' and
        contract_address = '0x855e99f768fad76dd0d3eb7c446c0b759c96d520'
        UNION ALL

        SELECT block_time, concat('0x', SUBSTRING(topic2 FROM 27 FOR 40)) AS trader,
        -- IF(bytea2numeric_v2(SUBSTRING(data, 3+64*4 - 1, 1)) = 1, 'LONG', 'SHORT') as position_side,
        bytea2numeric_v2(SUBSTRING(data FROM 3+64*4, 64))/1e18 as token_amount,
        bytea2numeric_v2(SUBSTRING(data FROM 3+64*5, 64))/1e18 as token_price,
        bytea2numeric_v2(SUBSTRING(data from 3+64*8, 64))/1e18 as fees --usd fees

        FROM bnb.logs
        WHERE block_time >= TIMESTAMP '2022-07-01' and 
        topic1 = '0x645156066afee3ede009256908a9e96538cc1ad681c46b10114f6ce98ebd0600' and 
        contract_address = '0x855e99f768fad76dd0d3eb7c446c0b759c96d520'
        
        UNION ALL
        -- liquidate
        SELECT block_time, concat('0x', SUBSTRING(topic2 FROM 27 FOR 40)) AS trader,
        -- IF(bytea2numeric_v2(SUBSTRING(data, 3+64*4 - 1, 1)) = 1, 'LONG', 'SHORT') as position_side,
        bytea2numeric_v2(SUBSTRING(data FROM 3+64*4, 64))/1e18 as token_amount,
        bytea2numeric_v2(SUBSTRING(data FROM 3+64*5, 64))/1e18 as token_price,
        bytea2numeric_v2(SUBSTRING(data from 3+64*8, 64))/1e18 as fees --usd fees
        FROM bnb.logs
        WHERE block_time >= TIMESTAMP '2022-07-01'  and
        topic1 = '0xd63e21d9ddaf46f8d28d121f06e7ed33fcc0300af1f8c794e69056dbf37e2d6a' and
        contract_address = '0x855e99f768fad76dd0d3eb7c446c0b759c96d520'
        
    ) as mcb_trades
) as trades;"
1280347,Margin Trading Cap Stats,,"[{""id"": 2193812, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-09-18T03:21:30.973722+00:00"", ""__typename"": ""visualizations""}, {""id"": 2194826, ""type"": ""counter"", ""name"": ""\ud83d\udc5b 24 Hour Volume"", ""options"": {""rowNumber"": 1, ""counterColName"": ""daily_volume""}, ""created_at"": ""2022-09-18T12:02:35.873654+00:00"", ""__typename"": ""visualizations""}, {""id"": 2194831, ""type"": ""counter"", ""name"": ""\ud83e\udd16 Total Unique Traders"", ""options"": {""rowNumber"": 1, ""counterColName"": ""total_traders""}, ""created_at"": ""2022-09-18T12:02:42.279944+00:00"", ""__typename"": ""visualizations""}, {""id"": 2194832, ""type"": ""counter"", ""name"": ""\ud83d\udc99 24 Hour Traders"", ""options"": {""rowNumber"": 1, ""counterColName"": ""daily_traders""}, ""created_at"": ""2022-09-18T12:02:44.923247+00:00"", ""__typename"": ""visualizations""}, {""id"": 2194827, ""type"": ""counter"", ""name"": ""\ud83d\udcb5 1 Week Volume"", ""options"": {""rowNumber"": 1, ""counterColName"": ""weekly_volume""}, ""created_at"": ""2022-09-18T12:02:37.333701+00:00"", ""__typename"": ""visualizations""}, {""id"": 2194828, ""type"": ""counter"", ""name"": ""\ud83d\udcb8 1 Month Volume"", ""options"": {""rowNumber"": 1, ""counterColName"": ""monthly_volume""}, ""created_at"": ""2022-09-18T12:02:38.898887+00:00"", ""__typename"": ""visualizations""}, {""id"": 2210833, ""type"": ""counter"", ""name"": ""\ud83d\udc99 Weekly Traders"", ""options"": {""rowNumber"": 1, ""counterColName"": ""weekly_traders""}, ""created_at"": ""2022-09-21T02:54:20.345897+00:00"", ""__typename"": ""visualizations""}, {""id"": 2194824, ""type"": ""counter"", ""name"": ""\ud83d\udcb0 Total Margin Volume"", ""options"": {""rowNumber"": 1, ""counterColName"": ""total_notional_value""}, ""created_at"": ""2022-09-18T12:02:32.798312+00:00"", ""__typename"": ""visualizations""}, {""id"": 2194830, ""type"": ""counter"", ""name"": ""\ud83d\udcbc 24 Hour AVG Trade Size"", ""options"": {""rowNumber"": 1, ""counterColName"": ""avg_trade_volume""}, ""created_at"": ""2022-09-18T12:02:40.4234+00:00"", ""__typename"": ""visualizations""}]","SELECT CONCAT('$', 
        ROUND(
            (CASE 
            WHEN total_notional_value/1e3 < 1 THEN total_notional_value
            WHEN total_notional_value/1e6 < 1 THEN total_notional_value/1e3
            WHEN total_notional_value/1e9 < 1 THEN total_notional_value/1e6
            WHEN total_notional_value/1e12 < 1 THEN total_notional_value/1e9
            WHEN total_notional_value/1e15 < 1 THEN total_notional_value/1e12
            END)
        , 2),
        (
            CASE 
            WHEN total_notional_value/1e3 < 1 THEN ''
            WHEN total_notional_value/1e6 < 1 THEN 'K'
            WHEN total_notional_value/1e9 < 1 THEN 'M'
            WHEN total_notional_value/1e12 < 1 THEN 'B'
            WHEN total_notional_value/1e15 < 1 THEN 'T'
            END)
        ) as total_notional_value, 
        CONCAT('$', 
        ROUND(
            (CASE 
            WHEN daily_volume/1e3 < 1 THEN daily_volume
            WHEN daily_volume/1e6 < 1 THEN daily_volume/1e3
            WHEN daily_volume/1e9 < 1 THEN daily_volume/1e6
            WHEN daily_volume/1e12 < 1 THEN daily_volume/1e9
            WHEN daily_volume/1e15 < 1 THEN daily_volume/1e12
            END)
        , 2),
        (
            CASE 
            WHEN daily_volume/1e3 < 1 THEN ''
            WHEN daily_volume/1e6 < 1 THEN 'K'
            WHEN daily_volume/1e9 < 1 THEN 'M'
            WHEN daily_volume/1e12 < 1 THEN 'B'
            WHEN daily_volume/1e15 < 1 THEN 'T'
            END)
        ) as daily_volume, 
        CONCAT('$', 
        ROUND(
            (CASE 
            WHEN weekly_volume/1e3 < 1 THEN weekly_volume
            WHEN weekly_volume/1e6 < 1 THEN weekly_volume/1e3
            WHEN weekly_volume/1e9 < 1 THEN weekly_volume/1e6
            WHEN weekly_volume/1e12 < 1 THEN weekly_volume/1e9
            WHEN weekly_volume/1e15 < 1 THEN weekly_volume/1e12
            END)
        , 2),
        (
            CASE 
            WHEN weekly_volume/1e3 < 1 THEN ''
            WHEN weekly_volume/1e6 < 1 THEN 'K'
            WHEN weekly_volume/1e9 < 1 THEN 'M'
            WHEN weekly_volume/1e12 < 1 THEN 'B'
            WHEN weekly_volume/1e15 < 1 THEN 'T'
            END)
        ) as weekly_volume,
        CONCAT('$', 
        ROUND(
            (CASE 
            WHEN monthly_volume/1e3 < 1 THEN monthly_volume
            WHEN monthly_volume/1e6 < 1 THEN monthly_volume/1e3
            WHEN monthly_volume/1e9 < 1 THEN monthly_volume/1e6
            WHEN monthly_volume/1e12 < 1 THEN monthly_volume/1e9
            WHEN monthly_volume/1e15 < 1 THEN monthly_volume/1e12
            END)
        , 2),
        (
            CASE 
            WHEN monthly_volume/1e3 < 1 THEN ''
            WHEN monthly_volume/1e6 < 1 THEN 'K'
            WHEN monthly_volume/1e9 < 1 THEN 'M'
            WHEN monthly_volume/1e12 < 1 THEN 'B'
            WHEN monthly_volume/1e15 < 1 THEN 'T'
            END)
        ) as monthly_volume, 
        CONCAT('$', 
        ROUND(
            (CASE 
            WHEN avg_trade_volume/1e3 < 1 THEN avg_trade_volume
            WHEN avg_trade_volume/1e6 < 1 THEN avg_trade_volume/1e3
            WHEN avg_trade_volume/1e9 < 1 THEN avg_trade_volume/1e6
            WHEN avg_trade_volume/1e12 < 1 THEN avg_trade_volume/1e9
            WHEN avg_trade_volume/1e15 < 1 THEN avg_trade_volume/1e12
            END)
        , 2),
        (
            CASE 
            WHEN avg_trade_volume/1e3 < 1 THEN ''
            WHEN avg_trade_volume/1e6 < 1 THEN 'K'
            WHEN avg_trade_volume/1e9 < 1 THEN 'M'
            WHEN avg_trade_volume/1e12 < 1 THEN 'B'
            WHEN avg_trade_volume/1e15 < 1 THEN 'T'
            END)
        ) as avg_trade_volume,
        (total_traders) as total_traders,
        (daily_traders) as daily_traders,
        (weekly_traders) as weekly_traders
FROM 
    (
    select 
        -- date_trunc('day', time) as time,
        COUNT(DISTINCT account) as total_traders,
        COUNT(DISTINCT account)  filter (WHERE time >= NOW() - INTERVAL '1 DAY') as daily_traders,
        COUNT(DISTINCT account)  filter (WHERE time >= NOW() - INTERVAL '1 WEEK') as weekly_traders,
        SUM(abs(size)) as total_notional_value,
        SUM(abs(size)) filter (WHERE time >= NOW() - INTERVAL '1 DAY') as daily_volume,
        SUM(abs(size)) filter (WHERE time >= NOW() - INTERVAL '1 WEEK') as weekly_volume,
        SUM(abs(size)) filter (WHERE time >= NOW() - INTERVAL '1 MONTH')  as monthly_volume,
        AVG(abs(size)) filter (WHERE time >= NOW() - INTERVAL '1 DAY') as avg_trade_volume
    from (
        SELECT date_trunc('day', evt_block_time) as time, 
        user as account,
        IF(currency = '0xff970a61a04b1ca14834a43f5de4533ebddb5cc8',
        (size - LAG(size, 1, 0) OVER (PARTITION BY `key` order by evt_block_time))/1e8,
        (price/1e8) * (size - LAG(size, 1, 0) OVER (PARTITION BY `key` order by evt_block_time))/1e8) as size,
        if(`isLong`, 'LONG', 'SHORT') as position_side,
        evt_tx_hash
        FROM cap_arbitrum.Trading_evt_PositionUpdated as pos_changed
        UNION
        
        SELECT date_trunc('day', evt_block_time) as time, 
        user as account,
        IF(currency = '0xff970a61a04b1ca14834a43f5de4533ebddb5cc8', size/1e8, (price/1e8) * size/1e8) as size,
        if(`isLong`, 'LONG', 'SHORT') as position_side,
        evt_tx_hash
        FROM cap_arbitrum.Trading_evt_ClosePosition as closed
        WHERE not `wasLiquidated`
        -- select date_trunc('day', block_time) as time, 
        --   CONCAT('0x', SUBSTRING(topic3 FROM 27 FOR 40)) as account,
        -- --   CONCAT('0x', SUBSTRING(data FROM 27 FOR 40)) currency,
        -- bytea2numeric_v2(SUBSTRING(data FROM (27+64*3) FOR 40))/1e8 as size,
        -- if(bytea2numeric_v2(SUBSTRING(data FROM (27+64) FOR 40)) = 1, 'LONG', 'SHORT') as position_side,
        -- --   bytea2numeric_v2(SUBSTRING(data FROM (27+64*2) FOR 40))/1e8 as margin,
        -- --   bytea2numeric_v2(SUBSTRING(data FROM (27+64*4) FOR 40)) as is_close,
        -- --   , if(bytea2numeric_v2(SUBSTRING(data FROM (27+64) FOR 40)), 'LONG', 'SHORT') as position_side,
        -- tx_hash as evt_tx_hash
        -- FROM arbitrum.logs
        -- WHERE contract_address = '0xcaec650502f15c1a6bff1c2288fc8f819776b2ec' and topic1 = '0xe6f0e81a24c1b1c11cfcbbce67e7c5ef361e984c1e4f3528125c93f6f906680d'
    ) as trading_volume
) as volume_stat
 "
1257969,Margin Trading PERP v2,,"[{""id"": 2155638, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-09-11T03:28:53.301204+00:00"", ""__typename"": ""visualizations""}, {""id"": 2155643, ""type"": ""counter"", ""name"": ""\ud83d\udcbc 24 Hour AVG Trade Size"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""stringDecimal"": 0, ""counterColName"": ""avg_trade_volume""}, ""created_at"": ""2022-09-11T03:28:53.301204+00:00"", ""__typename"": ""visualizations""}, {""id"": 2155644, ""type"": ""counter"", ""name"": ""\ud83e\udd16 Total Unique Traders"", ""options"": {""rowNumber"": 1, ""counterColName"": ""total_traders""}, ""created_at"": ""2022-09-11T03:28:53.301204+00:00"", ""__typename"": ""visualizations""}, {""id"": 2155639, ""type"": ""counter"", ""name"": ""\ud83d\udcb0 Total Margin Volume"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""stringSuffix"": """", ""stringDecimal"": 0, ""counterColName"": ""total_notional_value""}, ""created_at"": ""2022-09-11T03:28:53.301204+00:00"", ""__typename"": ""visualizations""}, {""id"": 2210969, ""type"": ""counter"", ""name"": ""\ud83d\udc9a Weekly Traders"", ""options"": {""rowNumber"": 1, ""counterColName"": ""weekly_traders""}, ""created_at"": ""2022-09-21T03:15:28.252144+00:00"", ""__typename"": ""visualizations""}, {""id"": 2396770, ""type"": ""counter"", ""name"": ""\ud83d\udcb3 Total Margin Fees"", ""options"": {""rowNumber"": 1, ""counterColName"": ""total_fees""}, ""created_at"": ""2022-10-16T05:40:30.308724+00:00"", ""__typename"": ""visualizations""}, {""id"": 2155645, ""type"": ""counter"", ""name"": ""\ud83d\udc9a 24 Hour Traders"", ""options"": {""rowNumber"": 1, ""counterColName"": ""daily_traders""}, ""created_at"": ""2022-09-11T03:28:53.301204+00:00"", ""__typename"": ""visualizations""}, {""id"": 2155640, ""type"": ""counter"", ""name"": ""\ud83d\udc5b 24 Hour Volume"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""stringSuffix"": """", ""stringDecimal"": 0, ""counterColName"": ""daily_volume""}, ""created_at"": ""2022-09-11T03:28:53.301204+00:00"", ""__typename"": ""visualizations""}, {""id"": 2155641, ""type"": ""counter"", ""name"": ""\ud83d\udcb5 1 Week Volume"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""stringSuffix"": """", ""stringDecimal"": 0, ""counterColName"": ""weekly_volume""}, ""created_at"": ""2022-09-11T03:28:53.301204+00:00"", ""__typename"": ""visualizations""}, {""id"": 2155642, ""type"": ""counter"", ""name"": ""\ud83d\udcb8 1 Month Volume"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""stringSuffix"": """", ""stringDecimal"": 0, ""counterColName"": ""monthly_volume""}, ""created_at"": ""2022-09-11T03:28:53.301204+00:00"", ""__typename"": ""visualizations""}, {""id"": 2396842, ""type"": ""counter"", ""name"": ""\ud83d\udcb3 Daily Fees"", ""options"": {""rowNumber"": 1, ""counterColName"": ""daily_fees""}, ""created_at"": ""2022-10-16T05:56:44.252661+00:00"", ""__typename"": ""visualizations""}, {""id"": 2396843, ""type"": ""counter"", ""name"": ""\ud83d\udcb3 Weekly Fees"", ""options"": {""rowNumber"": 1, ""counterColName"": ""weekly_fees""}, ""created_at"": ""2022-10-16T05:56:49.942976+00:00"", ""__typename"": ""visualizations""}]","CREATE OR REPLACE FUNCTION pg_temp.format_number(d numeric) RETURNS text AS $$
DECLARE
    result  text;
BEGIN
    IF d/1e3 < 1 THEN 
        EXECUTE 'SELECT CONCAT(''$'', ROUND(''' || d || ''', 2))  ' into result;
        RETURN result;
    ELSIF d / 1e6 < 1 THEN
        EXECUTE 'SELECT CONCAT(''$'', ROUND(''' || d/1e3 || ''', 2), ''K'')  ' into result;
        RETURN result;
    ELSIF d / 1e9 < 1 THEN
        EXECUTE 'SELECT CONCAT(''$'', ROUND(''' || d/1e6 || ''', 2), ''M'')  ' into result;
        RETURN result;
    ELSIF d / 1e12 < 1 THEN
        EXECUTE 'SELECT CONCAT(''$'', ROUND(''' || d/1e9 || ''', 2), ''B'')  ' into result;
        RETURN result;
    ELSIF d / 1e15 < 1 THEN
        EXECUTE 'SELECT CONCAT(''$'', ROUND(''' || d/1e12 || ''', 2), ''T'')  ' into result;
        RETURN result;
    END IF;
    RETURN '';
END;
$$ LANGUAGE plpgsql IMMUTABLE STRICT;


SELECT pg_temp.format_number(total_notional_value) as total_notional_value,
        pg_temp.format_number(total_fees) AS total_fees,
        pg_temp.format_number(daily_volume) as daily_volume, 
        pg_temp.format_number(weekly_volume) as weekly_volume,
        pg_temp.format_number(monthly_volume) as monthly_volume, 
        pg_temp.format_number(avg_trade_volume) as avg_trade_volume,
        total_traders as total_traders,
        daily_traders as daily_traders,
        weekly_traders as weekly_traders,
        pg_temp.format_number(daily_fees) as daily_fees,
        pg_temp.format_number(weekly_fees) as weekly_fees
        
        
FROM (
    select SUM(volume) as total_notional_value,
    SUM(fees) as total_fees,
    SUM(fees) FILTER (WHERE block_time >= NOW() - INTERVAL '1 Day') as daily_fees,
    SUM(fees) FILTER (WHERE block_time >= NOW() - INTERVAL '1 WEEK') as weekly_fees,
    COUNT(DISTINCT trader) as total_traders,
    COUNT(DISTINCT trader)  filter (WHERE block_time >= NOW() - INTERVAL '1 DAY') as daily_traders,
    COUNT(DISTINCT trader)  filter (WHERE block_time >= NOW() - INTERVAL '1 WEEK') as weekly_traders,
    
    SUM(volume) filter (WHERE block_time >= NOW() - INTERVAL '1 DAY') as daily_volume,
    SUM(volume) filter (WHERE block_time >= NOW() - INTERVAL '1 WEEK') as weekly_volume,
    SUM(volume) filter (WHERE block_time >= NOW() - INTERVAL '1 MONTH')  as monthly_volume,
    AVG(volume) filter (WHERE block_time >= NOW() - INTERVAL '1 DAY') as avg_trade_volume
    from (
        SELECT  evt_block_time as block_time, ABS(""exchangedPositionNotional"")/1e18 as volume,
        trader, (fee/1e18) as fees
        FROM perp_v2.""ClearingHouse_evt_PositionChanged""
    ) as perp_trades
) as trades"
1513931,Margin Trading Pika Open Interest ,,"[{""id"": 2545728, ""type"": ""chart"", ""name"": ""Open Interest"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""tickFormat"": ""$0[]a""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""numberFormat"": ""$0[].00a"", ""columnMapping"": {""time"": ""x"", ""total_size"": ""y"", ""position_side"": ""series""}, ""seriesOptions"": {""LONG"": {""type"": ""column"", ""color"": ""#21eda8"", ""yAxis"": 0, ""zIndex"": 0}, ""SHORT"": {""type"": ""column"", ""color"": ""#f70f0f"", ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-11-03T01:22:48.639226+00:00"", ""__typename"": ""visualizations""}, {""id"": 2545731, ""type"": ""counter"", ""name"": ""\ud83d\udd34 Short Open Interest"", ""options"": {""rowNumber"": 2, ""stringPrefix"": ""$"", ""stringSuffix"": ""K"", ""stringDecimal"": 2, ""counterColName"": ""converted_size""}, ""created_at"": ""2022-11-03T01:22:48.639226+00:00"", ""__typename"": ""visualizations""}, {""id"": 2545730, ""type"": ""counter"", ""name"": ""\ud83d\udfe2 Long Open Interest "", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""stringSuffix"": ""K"", ""stringDecimal"": 2, ""counterColName"": ""converted_size""}, ""created_at"": ""2022-11-03T01:22:48.639226+00:00"", ""__typename"": ""visualizations""}, {""id"": 2545729, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-11-03T01:22:48.639226+00:00"", ""__typename"": ""visualizations""}]","
select time, position_side, SUM(SUM(size)) OVER (PARTITION BY position_side ORDER BY time) as total_size,
SUM(SUM(size)/1e3) OVER (PARTITION BY position_side ORDER BY time) as converted_size
from (

    -- SELECT closed_positions.evt_block_time as time,
    --     -- closed_positions.margin/1e8 as margin,
    --     -- closed_positions.leverage/1e8 as leverage,
    --     -(closed_positions.leverage/1e8 *closed_positions.margin/1e8) as size, 
    --     if(execute_closed_positions.isLong, 'LONG', 'SHORT') as position_side, closed_positions.evt_tx_hash
    -- FROM pika_perp_v3_optimism.PikaPerpV3_evt_ClosePosition as closed_positions 
    -- join pika_perp_v3_optimism.PositionManager_evt_ExecuteClosePosition as execute_closed_positions on closed_positions.evt_tx_hash = execute_closed_positions.evt_tx_hash
    -- WHERE closed_positions.evt_block_time <= TIMESTAMP '2022-07-28 00:00'

    -- UNION ALL
    
    -- SELECT  execute_open_positions.evt_block_time as time,
    --     -- execute_open_positions.margin/1e8 as margin,
    --     -- execute_open_positions.leverage/1e8 as leverage,
    --     (execute_open_positions.leverage/1e8 *execute_open_positions.margin/1e8) as size, 
    --     if(execute_open_positions.isLong, 'LONG', 'SHORT') as position_side,
    --     execute_open_positions.evt_tx_hash
    -- FROM  pika_perp_v3_optimism.PositionManager_evt_ExecuteOpenPosition as execute_open_positions
    -- WHERE execute_open_positions.evt_block_time <= TIMESTAMP '2022-07-28 00:00'
    

    -- UNION ALL
    
    -- SELECT  date_trunc('day', execute_open_order.evt_block_time) as time,
    --     -- execute_open_order.margin/1e8 as margin,
    --     -- execute_open_order.leverage/1e8 as leverage,
    --     (execute_open_order.leverage/1e8 *execute_open_order.margin/1e8) as size, 
    --     if(execute_open_order.isLong, 'LONG', 'SHORT') as position_side,
    --     execute_open_order.evt_tx_hash
    -- FROM  pika_perp_v3_optimism.OrderBook_evt_ExecuteOpenOrder as execute_open_order
    -- WHERE execute_open_order.evt_block_time <= TIMESTAMP '2022-07-28 00:00'
    
    -- UNION ALL
    
    -- SELECT  execute_close_order.evt_block_time as time,
    --     -(execute_close_order.size/1e8) as size, 
    --     if(execute_close_order.isLong, 'LONG', 'SHORT') as position_side,
    --     execute_close_order.evt_tx_hash
    -- FROM  pika_perp_v3_optimism.OrderBook_evt_ExecuteCloseOrder as execute_close_order
    -- WHERE execute_close_order.evt_block_time <= TIMESTAMP '2022-07-28 00:00'    

    -- UNION ALL
    -- SELECT close_position.evt_block_time as time,
    --     -(close_position.margin/1e8 * close_position.leverage/1e8) as size, 
    --     if(new_position.isLong, 'LONG', 'SHORT') as position_side,
    --     close_position.evt_tx_hash
    -- FROM 
    --     pika_perp_v3_optimism.PikaPerpV3_evt_ClosePosition  as close_position join
    --     pika_perp_v3_optimism.PikaPerpV3_evt_NewPosition as new_position on
    --     close_position.positionId = new_position.positionId and 
    --     close_position.entryPrice = new_position.price and
    --     close_position.productId = new_position.productId
    -- WHERE close_position.wasLiquidated and close_position.evt_block_time <= TIMESTAMP '2022-07-28 00:00'  
    
    -- From @unionepro https://dune.com/queries/1517423
    SELECT date_trunc('day', block_time) as time, (CASE WHEN ""long"" THEN 'LONG' ELSE 'SHORT' END) as position_side,
        (CASE ""type"" when 'OPEN' then margin * leverage ELSE -margin * leverage end) as size
    from dune_user_generated.pika_view_orders
    where version = 3
) as open_interest
GROUP BY time, 2
ORDER BY time DESC, 2
"
1258695,PERP Open Interest,,"[{""id"": 2156795, ""type"": ""chart"", ""name"": ""Longs vs Shorts"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack"", ""percentValues"": true}, ""reverseX"": false, ""columnMapping"": {""day"": ""x"", ""long"": ""series"", ""time"": ""x"", ""week"": ""x"", ""volume"": ""y"", ""long_oi"": ""y"", ""short_oi"": ""y"", ""long_volume"": ""y"", ""short_volume"": ""y""}, ""seriesOptions"": {""long_oi"": {""name"": ""LONG"", ""type"": ""column"", ""color"": ""#21eda8"", ""yAxis"": 0, ""zIndex"": 0}, ""short_oi"": {""name"": ""SHORT"", ""type"": ""column"", ""color"": ""#f70f0f"", ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-09-11T10:20:49.885734+00:00"", ""__typename"": ""visualizations""}, {""id"": 2166827, ""type"": ""chart"", ""name"": ""Open Interest"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""tickFormat"": ""$0[.]00a""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""numberFormat"": ""$0[.]00a"", ""columnMapping"": {""day"": ""x"", ""time"": ""x"", ""week"": ""x"", ""long_oi"": ""y"", ""short_oi"": ""y"", ""total_volume"": ""y""}, ""seriesOptions"": {""long_oi"": {""name"": ""LONG"", ""type"": ""column"", ""color"": ""#21eda8"", ""yAxis"": 0, ""zIndex"": 0}, ""short_oi"": {""name"": ""SHORT"", ""type"": ""column"", ""color"": ""#f70f0f"", ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-09-13T04:59:11.594046+00:00"", ""__typename"": ""visualizations""}, {""id"": 2156796, ""type"": ""counter"", ""name"": ""\ud83d\udfe2 Long Open Interest"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""stringSuffix"": ""M"", ""stringDecimal"": 2, ""counterColName"": ""long_oi_format""}, ""created_at"": ""2022-09-11T10:20:49.885734+00:00"", ""__typename"": ""visualizations""}, {""id"": 2156793, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-09-11T10:20:49.885734+00:00"", ""__typename"": ""visualizations""}, {""id"": 2156794, ""type"": ""counter"", ""name"": ""\ud83d\udd34 Short Open Interest"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""stringSuffix"": ""M"", ""stringDecimal"": 2, ""counterColName"": ""short_oi_format""}, ""created_at"": ""2022-09-11T10:20:49.885734+00:00"", ""__typename"": ""visualizations""}]","CREATE OR REPLACE FUNCTION pg_temp.format_number(d numeric) RETURNS text AS $$
DECLARE
    result  text;
BEGIN
    IF d/1e3 < 1 THEN 
        EXECUTE 'SELECT CONCAT(''$'', ROUND(''' || d || ''', 2))  ' into result;
        RETURN result;
    ELSIF d / 1e6 < 1 THEN
        EXECUTE 'SELECT CONCAT(''$'', ROUND(''' || d/1e3 || ''', 2), ''K'')  ' into result;
        RETURN result;
    ELSIF d / 1e9 < 1 THEN
        EXECUTE 'SELECT CONCAT(''$'', ROUND(''' || d/1e6 || ''', 2), ''M'')  ' into result;
        RETURN result;
    ELSIF d / 1e12 < 1 THEN
        EXECUTE 'SELECT CONCAT(''$'', ROUND(''' || d/1e9 || ''', 2), ''B'')  ' into result;
        RETURN result;
    ELSIF d / 1e15 < 1 THEN
        EXECUTE 'SELECT CONCAT(''$'', ROUND(''' || d/1e12 || ''', 2), ''T'')  ' into result;
        RETURN result;
    END IF;
    RETURN '';
END;
$$ LANGUAGE plpgsql IMMUTABLE STRICT;


with days AS ( 
    SELECT generate_series('2021-11-01'::TIMESTAMP, date_trunc('day', NOW()), '1 day') AS DAY -- Generate all days since the month of Kwenta Creation
)
    -- SELECT time, long_volume, short_volume, delta_volume, total_volume
    -- FROM (
        -- SELECT time, SUM(SUM(CASE position_side WHEN 'LONG' then volume else 0 end)) OVER (ORDER BY time) as long_volume,
        --     SUM(SUM(CASE position_side WHEN 'SHORT' then volume else 0 end)) OVER (ORDER BY time) as short_volume,
        --     SUM(SUM(volume)) OVER (ORDER BY time) as delta_volume,
        --     SUM(volume) as total_volume
SELECT day as time, SUM(long_oi) as long_oi, SUM(short_oi) as short_oi, 
pg_temp.format_number(SUM(long_oi)) as long_oi_format, pg_temp.format_number(SUM(short_oi)) as short_oi_format
FROM (
    SELECT day, SUM(CASE when total_volume < 0 then total_volume * pricing.avg_price else 0 END) as long_oi, 
        SUM(CASE when total_volume > 0 then total_volume * pricing.avg_price  else 0 END)  * -1 as short_oi
    FROM (
        SELECT d.day, trader, token, SUM(total_volume) as total_volume
        FROM (
                SELECT time, trader, token, SUM(volume) OVER (PARTITION BY trader, token ORDER BY time) as total_volume,
                lead(time, 1, now()) OVER (PARTITION BY trader, token ORDER BY time) AS next_day 
                FROM (

                    
                    SELECT date_Trunc('day', evt_block_time) as time,
                    trader, ""exchangedPositionSize""/1e18 as volume,
                    ""baseToken"" as token, evt_tx_hash
                    FROM perp_v2.""ClearingHouse_evt_PositionChanged"" 

                    -- Open Positions
                    -- WHERE ""openNotional"" = 0
                    -- WHERE trader = '\x9c1e0c67aa30c063f341885b12cb81cc94613fc7'
                    -- LIMIT 1000

                ) as trades
                -- GROUP BY time
            -- ) as formatted_trades
            ORDER BY 1 DESC
        ) as open_interest inner join days as d on open_interest.time <= d.day
        and d.day < open_interest.next_day
        GROUP BY 1, 2, 3
    ) as o_i JOIN (
        SELECT time,  contract_address, AVG(price) as avg_price
        FROM (
        SELECT date_trunc('day', evt_block_time) as time, ""baseToken"" as contract_address,
            (case 
            when ""exchangedPositionSize"" <> 0 THEN (""exchangedPositionNotional"" / ""exchangedPositionSize"")
            else 0
            end) as price
            FROM perp_v2.""ClearingHouse_evt_PositionChanged""
        ) as position_pricing
        GROUP BY 1, 2
    ) as pricing on o_i.day = pricing.time and o_i.token = pricing.contract_address

    GROUP BY 1
    ORDER BY 1 DESC
) AS perp_open_interest
    GROUP BY 1
    ORDER BY 1 DESC
"
1108993,GMX Market Cap and Circulating Supply,https://api.gmx.io/gmx_supply,"[{""id"": 1894299, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-07-27T03:22:23.439584+00:00"", ""__typename"": ""visualizations""}, {""id"": 1895664, ""type"": ""counter"", ""name"": ""$GMX Market Capitalisation \ud83d\udcb0"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""stringSuffix"": ""M"", ""stringDecimal"": 2, ""counterColName"": ""market_cap""}, ""created_at"": ""2022-07-27T09:42:29.921656+00:00"", ""__typename"": ""visualizations""}, {""id"": 2212893, ""type"": ""counter"", ""name"": ""$GMX Fully Diluted Value \ud83d\udcb0"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""stringSuffix"": ""M"", ""stringDecimal"": 2, ""counterColName"": ""fdv""}, ""created_at"": ""2022-09-21T09:24:48.864852+00:00"", ""__typename"": ""visualizations""}, {""id"": 2212895, ""type"": ""counter"", ""name"": ""$GMX Total Supply"", ""options"": {""rowNumber"": 1, ""counterColName"": ""total_supply""}, ""created_at"": ""2022-09-21T09:24:51.040808+00:00"", ""__typename"": ""visualizations""}, {""id"": 1895666, ""type"": ""counter"", ""name"": ""$GMX Circulating Supply"", ""options"": {""rowNumber"": 1, ""stringSuffix"": """", ""stringDecimal"": 0, ""counterColName"": ""cir_supply""}, ""created_at"": ""2022-07-27T09:43:01.296568+00:00"", ""__typename"": ""visualizations""}]","With 
lp_txs as (
    select date_trunc('day', evt_block_time) as time,
        abs(amount0)/1e18 as eth_amount,
        abs(amount1)/1e18 as gmx_amount,
        abs(amount0)/abs(amount1) as eth_gmx_amount
    from uniswap_v3_arbitrum.Pair_evt_Swap
    where contract_address in ('0x80a9ae39310abf666a87c743d6ebbd0e8c42158e',
    '0x1aeedd3727a6431b8f070c0afaa81cc74f273882')
),
weth_price as (
    SELECT date_trunc('day', minute) as time, avg(price) as avg_price
    FROM prices.usd
    WHERE symbol IN ('WETH') and minute >= '2021-08-31' 
    GROUP BY 1
    ORDER BY 1 DESC
),
gmx_price as (
    select lp_txs.time, AVG(eth_gmx_amount * weth_price.avg_price) as avg_price
    from lp_txs join weth_price on lp_txs.time = weth_price.time
    GROUP BY 1
    ORDER BY 1 DESC
    LIMIT 1
), mint_burnt_supply as 
(
    SELECT SUM(tokens) as tokens
    FROM (
        SELECT SUM(bytea2numeric_v2(substring(data FROM 27 FOR 40))/1e18) as tokens
        FROM arbitrum.logs
        where contract_address = '0xfc5a1a6eb076a2c7ad06ed22c90d7e710e35ad0a' 
        AND topic1 = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'
        AND CONCAT('0x',substring(topic2 FROM 27 FOR 40)) = '0x0000000000000000000000000000000000000000'
        union all
        
        SELECT -SUM(bytea2numeric_v2(substring(data FROM 27 FOR 40))/1e18) as tokens
        FROM arbitrum.logs
        where contract_address = '0xfc5a1a6eb076a2c7ad06ed22c90d7e710e35ad0a' 
        AND topic1 = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'
        AND CONCAT('0x',substring(topic3 FROM 27 FOR 40)) = '0x0000000000000000000000000000000000000000'
    ) as total_supply
), arbitrum_excluded_tokens as 
(
    SELECT SUM(tokens) as tokens
    FROM (
        SELECT SUM(bytea2numeric_v2(substring(data FROM 27 FOR 40))/1e18) as tokens
        FROM arbitrum.logs
        where contract_address = '0xfc5a1a6eb076a2c7ad06ed22c90d7e710e35ad0a' 
        AND topic1 = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'
        AND CONCAT('0x',substring(topic3 FROM 27 FOR 40)) in (
            LOWER('0xa75287d2f8b217273e7fcd7e86ef07d33972042e'), LOWER('0x199070ddfd1cfb69173aa2f7e20906f26b363004'),
            LOWER('0x2032f4294f5c7111Cac355B48d3d7f118c2e41A8')
        )
    
        UNION ALL
        SELECT -SUM(bytea2numeric_v2(substring(data FROM 27 FOR 40))/1e18) as tokens
        FROM arbitrum.logs
        where contract_address = '0xfc5a1a6eb076a2c7ad06ed22c90d7e710e35ad0a' 
        AND topic1 = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'
        AND CONCAT('0x',substring(topic2 FROM 27 FOR 40)) in (
            LOWER('0xa75287d2f8b217273e7fcd7e86ef07d33972042e'), LOWER('0x199070ddfd1cfb69173aa2f7e20906f26b363004'),
            LOWER('0x2032f4294f5c7111Cac355B48d3d7f118c2e41A8')
        )
    ) AS arbitrum_excluded_coins
    
), avalanche_excluded_tokens as (
    SELECT SUM(tokens) as tokens
    FROM (
        SELECT SUM(bytea2numeric_v2(substring(data FROM 27 FOR 40))/1e18) as tokens
        FROM avalanche_c.logs
        where contract_address = LOWER('0x62edc0692bd897d2295872a9ffcac5425011c661')
        AND topic1 = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'
        AND CONCAT('0x',substring(topic3 FROM 27 FOR 40)) in (
            LOWER('0x472361d3cA5F49c8E633FB50385BfaD1e018b445'), '0x62331a7bd1dfb3a7642b7db50b5509e57ca3154a'
        )
    
        UNION ALL
        SELECT -SUM(bytea2numeric_v2(substring(data FROM 27 FOR 40))/1e18) as tokens
        FROM avalanche_c.logs
        where contract_address = LOWER('0x62edc0692BD897D2295872a9FFCac5425011c661') 
        AND topic1 = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'
        AND CONCAT('0x',substring(topic2 FROM 27 FOR 40)) in (
            LOWER('0x472361d3cA5F49c8E633FB50385BfaD1e018b445'), '0x62331a7bd1dfb3a7642b7db50b5509e57ca3154a'
        )
    ) AS avalanche_excluded_coins

)


SELECT tokens * gmx_price.avg_price/1e6  as market_cap, tokens as cir_supply,  1.325e7 * gmx_price.avg_price/1e6 as fdv, 1.325e7 as total_supply
FROM ( 
    SELECT SUM(tokens) as tokens
    FROM (
        select tokens
        FROM mint_burnt_supply
        
        UNION ALL
    
        select -tokens
        FROM arbitrum_excluded_tokens
        
    
        UNION ALL
        
        select -tokens
        from avalanche_excluded_tokens
    ) as token_supply
    
) AS gmx_circ_supply join gmx_price on 1=1;"
1279035,MVX Market Cap and Circulating Supply,,"[{""id"": 2191687, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-09-17T12:00:24.63039+00:00"", ""__typename"": ""visualizations""}, {""id"": 2191688, ""type"": ""counter"", ""name"": ""$MVX Circulating Supply"", ""options"": {""rowNumber"": 1, ""stringSuffix"": """", ""stringDecimal"": 0, ""counterColName"": ""cir_supply""}, ""created_at"": ""2022-09-17T12:00:24.63039+00:00"", ""__typename"": ""visualizations""}, {""id"": 2191689, ""type"": ""counter"", ""name"": ""$MVX Total Supply"", ""options"": {""rowNumber"": 1, ""counterColName"": ""total_supply""}, ""created_at"": ""2022-09-17T12:00:24.63039+00:00"", ""__typename"": ""visualizations""}, {""id"": 2191690, ""type"": ""counter"", ""name"": ""$MVX Market Capitalisation \ud83d\udcb0"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""stringSuffix"": ""M"", ""stringDecimal"": 2, ""counterColName"": ""market_cap""}, ""created_at"": ""2022-09-17T12:00:24.63039+00:00"", ""__typename"": ""visualizations""}, {""id"": 2191691, ""type"": ""counter"", ""name"": ""$MVX Fully Diluted Value \ud83d\udcb0"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""stringSuffix"": ""M"", ""stringDecimal"": 2, ""counterColName"": ""fdv""}, ""created_at"": ""2022-09-17T12:00:24.63039+00:00"", ""__typename"": ""visualizations""}]","With 
mvx_price as (
    SELECT date_trunc('day', block_time) as time, AVG(usd_amount/(token_a_amount_raw/1e18)) as avg_price
    FROM dex.trades
    WHERE token_a_address = '\x2760e46d9bb43dafcbecaad1f64b93207f9f0ed7'
    group by 1
    ORDER BY 1 DESC
    limit 1
), token_supply as 
(
    SELECT SUM(tokens) as tokens
    FROM (
        SELECT value/1e18  as tokens
        FROM erc20.""ERC20_evt_Transfer""
        where contract_address = '\x2760e46d9bb43dafcbecaad1f64b93207f9f0ed7' 
        AND ""from"" = '\x0000000000000000000000000000000000000000'
        union all
        
        SELECT -value/1e18 as tokens
        FROM erc20.""ERC20_evt_Transfer""
        where contract_address = '\x2760e46d9bb43dafcbecaad1f64b93207f9f0ed7' 
        AND ""to"" = '\x0000000000000000000000000000000000000000'
    ) as total_supply
    
    UNION ALL
    
    SELECT -SUM(tokens) as tokens
    FROM (
        SELECT -value/1e18  as tokens
        FROM erc20.""ERC20_evt_Transfer""
        where contract_address = '\x2760e46d9bb43dafcbecaad1f64b93207f9f0ed7' 
        AND ""from"" = '\x203d15f68d594060c0eae4edecbd2ab124d6450c'
        union all
        
        SELECT value/1e18 as tokens
        FROM erc20.""ERC20_evt_Transfer""
        where contract_address = '\x2760e46d9bb43dafcbecaad1f64b93207f9f0ed7' 
        AND ""to"" = '\x203d15f68d594060c0eae4edecbd2ab124d6450c'
    ) as mvx_multisig
    
    UNION ALL
    
    SELECT -SUM(tokens) as tokens
    FROM (
        SELECT -value/1e18  as tokens
        FROM erc20.""ERC20_evt_Transfer""
        where contract_address = '\x2760e46d9bb43dafcbecaad1f64b93207f9f0ed7' 
        AND ""from"" = '\x4876e4303dad975effe107ba84598ce4a24724ed'
        union all
        
        SELECT value/1e18 as tokens
        FROM erc20.""ERC20_evt_Transfer""
        where contract_address = '\x2760e46d9bb43dafcbecaad1f64b93207f9f0ed7' 
        AND ""to"" = '\x4876e4303dad975effe107ba84598ce4a24724ed'
    ) as mvd_multisig

    UNION ALL
    
    SELECT -SUM(tokens) as tokens
    FROM (
        SELECT -value/1e18  as tokens
        FROM erc20.""ERC20_evt_Transfer""
        where contract_address = '\x2760e46d9bb43dafcbecaad1f64b93207f9f0ed7' 
        AND ""from"" = '\x30f5c777ab316e6878d2b71a32274e4c2842327a'
        union all
        
        SELECT value/1e18 as tokens
        FROM erc20.""ERC20_evt_Transfer""
        where contract_address = '\x2760e46d9bb43dafcbecaad1f64b93207f9f0ed7' 
        AND ""to"" = '\x30f5c777ab316e6878d2b71a32274e4c2842327a'
    ) as uni_lp
    
    UNION ALL
    
    SELECT -SUM(tokens) as tokens
    FROM (
        SELECT -value/1e18  as tokens
        FROM erc20.""ERC20_evt_Transfer""
        where contract_address = '\x2760e46d9bb43dafcbecaad1f64b93207f9f0ed7' 
        AND ""from"" = '\x505b0ecac7a2709c59df1f7e7b21dbc7fb5f7dc6'
        union all
        
        SELECT value/1e18 as tokens
        FROM erc20.""ERC20_evt_Transfer""
        where contract_address = '\x2760e46d9bb43dafcbecaad1f64b93207f9f0ed7' 
        AND ""to"" = '\x505b0ecac7a2709c59df1f7e7b21dbc7fb5f7dc6'
    ) as mvx_vest
    
    UNION ALL
    
    SELECT -SUM(tokens) as tokens
    FROM (
        SELECT -value/1e18  as tokens
        FROM erc20.""ERC20_evt_Transfer""
        where contract_address = '\x2760e46d9bb43dafcbecaad1f64b93207f9f0ed7' 
        AND ""from"" = '\x041d005ef436c41383ad9a36bc86aee6cc526d07'
        union all
        
        SELECT value/1e18 as tokens
        FROM erc20.""ERC20_evt_Transfer""
        where contract_address = '\x2760e46d9bb43dafcbecaad1f64b93207f9f0ed7' 
        AND ""to"" = '\x041d005ef436c41383ad9a36bc86aee6cc526d07'
    ) as mv_lp_vest
)


SELECT (cir_supply * mvx_price.avg_price)/1e6  as market_cap, cir_supply, 1e7 as total_supply, (1e7 * mvx_price.avg_price)/1e6 as fdv
FROM ( 
    select SUM(tokens) as cir_supply
    FROM token_supply
) AS gns_supply JOIN mvx_price on 1=1;"
1359953,Margin Trading Pika Stats,,"[{""id"": 2318438, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-10-06T10:38:43.12311+00:00"", ""__typename"": ""visualizations""}, {""id"": 2318436, ""type"": ""counter"", ""name"": ""\ud83e\udd16 Total Unique Traders"", ""options"": {""rowNumber"": 1, ""counterColName"": ""total_traders""}, ""created_at"": ""2022-10-06T10:38:43.12311+00:00"", ""__typename"": ""visualizations""}, {""id"": 2318437, ""type"": ""counter"", ""name"": ""\ud83d\udcb5 1 Week Volume"", ""options"": {""rowNumber"": 1, ""counterColName"": ""weekly_volume""}, ""created_at"": ""2022-10-06T10:38:43.12311+00:00"", ""__typename"": ""visualizations""}, {""id"": 2318439, ""type"": ""counter"", ""name"": ""\ud83d\udcb8 1 Month Volume"", ""options"": {""rowNumber"": 1, ""counterColName"": ""monthly_volume""}, ""created_at"": ""2022-10-06T10:38:43.12311+00:00"", ""__typename"": ""visualizations""}, {""id"": 2318440, ""type"": ""counter"", ""name"": ""\ud83d\udcbc 24 Hour AVG Trade Size"", ""options"": {""rowNumber"": 1, ""counterColName"": ""avg_trade_volume""}, ""created_at"": ""2022-10-06T10:38:43.12311+00:00"", ""__typename"": ""visualizations""}, {""id"": 2318441, ""type"": ""counter"", ""name"": ""\ud83d\udda4 24 Hour Traders"", ""options"": {""rowNumber"": 1, ""counterColName"": ""daily_traders""}, ""created_at"": ""2022-10-06T10:38:43.12311+00:00"", ""__typename"": ""visualizations""}, {""id"": 2318442, ""type"": ""counter"", ""name"": ""\ud83d\udda4 Weekly Traders"", ""options"": {""rowNumber"": 1, ""counterColName"": ""weekly_traders""}, ""created_at"": ""2022-10-06T10:38:43.12311+00:00"", ""__typename"": ""visualizations""}, {""id"": 2318443, ""type"": ""counter"", ""name"": ""\ud83d\udc5b 24 Hour Volume"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""counterColName"": ""daily_volume""}, ""created_at"": ""2022-10-06T10:38:43.12311+00:00"", ""__typename"": ""visualizations""}, {""id"": 2318444, ""type"": ""counter"", ""name"": ""\ud83d\udcb0 Total Margin Volume"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""counterColName"": ""total_notional_value""}, ""created_at"": ""2022-10-06T10:38:43.12311+00:00"", ""__typename"": ""visualizations""}, {""id"": 2318479, ""type"": ""counter"", ""name"": ""\ud83d\udcb3 Total Margin Fees"", ""options"": {""rowNumber"": 1, ""counterColName"": ""total_fees""}, ""created_at"": ""2022-10-06T10:43:13.611875+00:00"", ""__typename"": ""visualizations""}]","SELECT CONCAT('$', 
        ROUND(
            (CASE 
            WHEN total_notional_value/1e3 < 1 THEN total_notional_value
            WHEN total_notional_value/1e6 < 1 THEN total_notional_value/1e3
            WHEN total_notional_value/1e9 < 1 THEN total_notional_value/1e6
            WHEN total_notional_value/1e12 < 1 THEN total_notional_value/1e9
            WHEN total_notional_value/1e15 < 1 THEN total_notional_value/1e12
            END)
        , 2),
        (
            CASE 
            WHEN total_notional_value/1e3 < 1 THEN ''
            WHEN total_notional_value/1e6 < 1 THEN 'K'
            WHEN total_notional_value/1e9 < 1 THEN 'M'
            WHEN total_notional_value/1e12 < 1 THEN 'B'
            WHEN total_notional_value/1e15 < 1 THEN 'T'
            END)
        ) as total_notional_value, 
        CONCAT('$', 
        ROUND(
            (CASE 
            WHEN total_fees/1e3 < 1 THEN total_fees
            WHEN total_fees/1e6 < 1 THEN total_fees/1e3
            WHEN total_fees/1e9 < 1 THEN total_fees/1e6
            WHEN total_fees/1e12 < 1 THEN total_fees/1e9
            WHEN total_fees/1e15 < 1 THEN total_fees/1e12
            END)
        , 2),
        (
            CASE 
            WHEN total_fees/1e3 < 1 THEN ''
            WHEN total_fees/1e6 < 1 THEN 'K'
            WHEN total_fees/1e9 < 1 THEN 'M'
            WHEN total_fees/1e12 < 1 THEN 'B'
            WHEN total_fees/1e15 < 1 THEN 'T'
            END)
        ) as total_fees, 
        CONCAT('$', 
        ROUND(
            (CASE 
            WHEN daily_volume/1e3 < 1 THEN daily_volume
            WHEN daily_volume/1e6 < 1 THEN daily_volume/1e3
            WHEN daily_volume/1e9 < 1 THEN daily_volume/1e6
            WHEN daily_volume/1e12 < 1 THEN daily_volume/1e9
            WHEN daily_volume/1e15 < 1 THEN daily_volume/1e12
            END)
        , 2),
        (
            CASE 
            WHEN daily_volume/1e3 < 1 THEN ''
            WHEN daily_volume/1e6 < 1 THEN 'K'
            WHEN daily_volume/1e9 < 1 THEN 'M'
            WHEN daily_volume/1e12 < 1 THEN 'B'
            WHEN daily_volume/1e15 < 1 THEN 'T'
            END)
        ) as daily_volume, 

        CONCAT('$', 
        ROUND(
            (CASE 
            WHEN weekly_volume/1e3 < 1 THEN weekly_volume
            WHEN weekly_volume/1e6 < 1 THEN weekly_volume/1e3
            WHEN weekly_volume/1e9 < 1 THEN weekly_volume/1e6
            WHEN weekly_volume/1e12 < 1 THEN weekly_volume/1e9
            WHEN weekly_volume/1e15 < 1 THEN weekly_volume/1e12
            END)
        , 2),
        (
            CASE 
            WHEN weekly_volume/1e3 < 1 THEN ''
            WHEN weekly_volume/1e6 < 1 THEN 'K'
            WHEN weekly_volume/1e9 < 1 THEN 'M'
            WHEN weekly_volume/1e12 < 1 THEN 'B'
            WHEN weekly_volume/1e15 < 1 THEN 'T'
            END)
        ) as weekly_volume,
        CONCAT('$', 
        ROUND(
            (CASE 
            WHEN monthly_volume/1e3 < 1 THEN monthly_volume
            WHEN monthly_volume/1e6 < 1 THEN monthly_volume/1e3
            WHEN monthly_volume/1e9 < 1 THEN monthly_volume/1e6
            WHEN monthly_volume/1e12 < 1 THEN monthly_volume/1e9
            WHEN monthly_volume/1e15 < 1 THEN monthly_volume/1e12
            END)
        , 2),
        (
            CASE 
            WHEN monthly_volume/1e3 < 1 THEN ''
            WHEN monthly_volume/1e6 < 1 THEN 'K'
            WHEN monthly_volume/1e9 < 1 THEN 'M'
            WHEN monthly_volume/1e12 < 1 THEN 'B'
            WHEN monthly_volume/1e15 < 1 THEN 'T'
            END)
        ) as monthly_volume, 
        CONCAT('$', 
        ROUND(
            (CASE 
            WHEN avg_trade_volume/1e3 < 1 THEN avg_trade_volume
            WHEN avg_trade_volume/1e6 < 1 THEN avg_trade_volume/1e3
            WHEN avg_trade_volume/1e9 < 1 THEN avg_trade_volume/1e6
            WHEN avg_trade_volume/1e12 < 1 THEN avg_trade_volume/1e9
            WHEN avg_trade_volume/1e15 < 1 THEN avg_trade_volume/1e12
            END)
        , 2),
        (
            CASE 
            WHEN avg_trade_volume/1e3 < 1 THEN ''
            WHEN avg_trade_volume/1e6 < 1 THEN 'K'
            WHEN avg_trade_volume/1e9 < 1 THEN 'M'
            WHEN avg_trade_volume/1e12 < 1 THEN 'B'
            WHEN avg_trade_volume/1e15 < 1 THEN 'T'
            END)
        ) as avg_trade_volume,
        (total_traders) as total_traders,
        (daily_traders) as daily_traders,
        (weekly_traders) as weekly_traders
        
        
FROM (
    select SUM(volume) as total_notional_value,
    COUNT(DISTINCT trader) as total_traders,
    SUM(fee) as total_fees,
    COUNT(DISTINCT trader)  filter (WHERE evt_block_time >= NOW() - INTERVAL '1 DAY') as daily_traders,
    COUNT(DISTINCT trader)  filter (WHERE evt_block_time >= NOW() - INTERVAL '1 WEEK') as weekly_traders,

    SUM(volume) filter (WHERE evt_block_time >= NOW() - INTERVAL '1 DAY') as daily_volume,
    SUM(volume) filter (WHERE evt_block_time >= NOW() - INTERVAL '1 WEEK') as weekly_volume,
    SUM(volume) filter (WHERE evt_block_time >= NOW() - INTERVAL '1 MONTH')  as monthly_volume,
    AVG(volume) filter (WHERE evt_block_time >= NOW() - INTERVAL '1 DAY') as avg_trade_volume
    from (
        -- open position
        SELECT date_trunc('day', evt_block_time) as evt_block_time, (leverage/1e8 * margin/1e8) as volume, 
        fee/1e8 as fee,
        `user` as trader
        FROM pika_perp_v3_optimism.PikaPerpV3_evt_NewPosition
        
        UNION ALL
        
        SELECT date_trunc('day', evt_block_time) as time, (leverage/1e8 * margin/1e8) as volume, 
        fee/1e8 as fee,
        `user` as trader

        FROM pika_perp_v3_optimism.PikaPerpV3_evt_ClosePosition
        
        UNION ALL

        SELECT date_trunc('day', evt_block_time) as time, (leverage/1e8 * margin/1e8) as volume, 
        fee/1e8 as fee,
        `user` as trader
        FROM pika_perp_v2_optimism.PikaPerpV2_evt_NewPosition
        
        UNION ALL
        
        SELECT date_trunc('day', evt_block_time) as time, (leverage/1e8 * margin/1e8) as volume, 
        fee/1e8 as fee,
        `user` as trader
        FROM pika_perp_v2_optimism.PikaPerpV2_evt_ClosePosition
  
        UNION ALL

        SELECT date_trunc('day', evt_block_time) as time, 0 as volume, 
        liquidatorReward/1e8 as fee,
        NULL as trader
        FROM pika_perp_v3_optimism.PikaPerpV3_evt_PositionLiquidated
        
        UNION ALL
        
        SELECT date_trunc('day', evt_block_time) as time, 0 as volume, 
        liquidatorReward/1e8 as fee,
        NULL as trader
        FROM pika_perp_v2_optimism.PikaPerpV2_evt_PositionLiquidated
    ) as pika_trades
) as trades;"
1276013,Metavault Trade Open Interest,,"[{""id"": 2186808, ""type"": ""chart"", ""name"": ""LONGs vs SHORTs"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack"", ""percentValues"": true}, ""reverseX"": false, ""columnMapping"": {""time"": ""x"", ""long_size"": ""y"", ""short_size"": ""y"", ""total_size"": ""y"", ""position_side"": ""series""}, ""seriesOptions"": {""long_size"": {""name"": ""LONG"", ""type"": ""column"", ""color"": ""#21eda8"", ""yAxis"": 0, ""zIndex"": 1}, ""short_size"": {""name"": ""SHORT"", ""type"": ""column"", ""color"": ""#f70f0f"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-09-16T08:10:32.030856+00:00"", ""__typename"": ""visualizations""}, {""id"": 2186766, ""type"": ""counter"", ""name"": ""\ud83d\udfe2 Long Open Interest "", ""options"": {""rowNumber"": 1, ""counterColName"": ""converted_long_size""}, ""created_at"": ""2022-09-16T07:56:28.579244+00:00"", ""__typename"": ""visualizations""}, {""id"": 2186767, ""type"": ""counter"", ""name"": ""\ud83d\udd34 Short Open Interest"", ""options"": {""rowNumber"": 1, ""stringPrefix"": """", ""counterColName"": ""converted_short_size""}, ""created_at"": ""2022-09-16T07:56:28.579244+00:00"", ""__typename"": ""visualizations""}, {""id"": 2186768, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-09-16T07:56:28.579244+00:00"", ""__typename"": ""visualizations""}, {""id"": 2204206, ""type"": ""chart"", ""name"": ""Open Interest"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""tickFormat"": ""$0[]a""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""numberFormat"": ""$0[]a"", ""columnMapping"": {""time"": ""x"", ""long_size"": ""y"", ""short_size"": ""y""}, ""seriesOptions"": {""long_size"": {""name"": ""LONG"", ""type"": ""column"", ""color"": ""#21eda8"", ""yAxis"": 0, ""zIndex"": 1}, ""short_size"": {""name"": ""SHORT"", ""type"": ""column"", ""color"": ""#f70f0f"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-09-20T02:01:18.347704+00:00"", ""__typename"": ""visualizations""}]","SELECT time, short_size, long_size, CONCAT('$', 
        ROUND(
            (CASE 
            WHEN long_size/1e3 < 1 THEN long_size
            WHEN long_size/1e6 < 1 THEN long_size/1e3
            WHEN long_size/1e9 < 1 THEN long_size/1e6
            WHEN long_size/1e12 < 1 THEN long_size/1e9
            WHEN long_size/1e15 < 1 THEN long_size/1e12
            END)
        , 2),
        (
            CASE 
            WHEN long_size/1e3 < 1 THEN ''
            WHEN long_size/1e6 < 1 THEN 'K'
            WHEN long_size/1e9 < 1 THEN 'M'
            WHEN long_size/1e12 < 1 THEN 'B'
            WHEN long_size/1e15 < 1 THEN 'T'
            END)
        ) as converted_long_size, CONCAT('$', 
        ROUND(
            (CASE 
            WHEN short_size/1e3 < 1 THEN short_size
            WHEN short_size/1e6 < 1 THEN short_size/1e3
            WHEN short_size/1e9 < 1 THEN short_size/1e6
            WHEN short_size/1e12 < 1 THEN short_size/1e9
            WHEN short_size/1e15 < 1 THEN short_size/1e12
            END)
        , 2),
        (
            CASE 
            WHEN short_size/1e3 < 1 THEN ''
            WHEN short_size/1e6 < 1 THEN 'K'
            WHEN short_size/1e9 < 1 THEN 'M'
            WHEN short_size/1e12 < 1 THEN 'B'
            WHEN short_size/1e15 < 1 THEN 'T'
            END)
        ) as converted_short_size
FROM (
    SELECT main_time.time, 
    
    SUM(SUM((CASE WHEN position_side = 'SHORT' THEN volume ELSE 0 END))) OVER ( ORDER BY main_time.time) as short_size,
    SUM(SUM((CASE WHEN position_side = 'LONG' THEN volume ELSE 0 END))) OVER (ORDER BY main_time.time) as long_size
    FROM (
        SELECT 
              date_trunc('day', ""evt_block_time"") as time,    
              ""account""  as trader,
              ""sizeDelta""/1e30  as volume,
             (CASE WHEN ""isLong"" THEN 'LONG' ELSE 'SHORT' END) as position_side
            FROM metavault_trade.""Vault_evt_IncreasePosition""
        UNION ALL
        SELECT 
              date_trunc('day', ""evt_block_time"") as time,    
              ""account""  as trader,
              -""sizeDelta""/1e30  as volume,
             (CASE WHEN ""isLong"" THEN 'LONG' ELSE 'SHORT' END) as position_side

        FROM metavault_trade.""Vault_evt_DecreasePosition""
        UNION ALL 
        SELECT 
              date_trunc('day', ""evt_block_time"") as time,    
              ""account""  as trader,
              -""size""/1e30  as volume,
             (CASE WHEN ""isLong"" THEN 'LONG' ELSE 'SHORT' END) as position_side
        FROM metavault_trade.""Vault_evt_LiquidatePosition""
    ) as metavault_trades right JOIN (
        SELECT generate_series('2022-06-15'::TIMESTAMP, date_trunc('day', NOW()), '1 day') AS time
    ) AS main_time on metavault_trades.time = main_time.time
    GROUP BY 1
    ORDER BY 1 DESC
) as trades
ORDER BY 1 DESC
"
1275509,Margin Trading GMX Stats,,"[{""id"": 2185912, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-09-16T02:54:54.133205+00:00"", ""__typename"": ""visualizations""}, {""id"": 2186310, ""type"": ""counter"", ""name"": ""\ud83d\udcb8 1 Month Volume"", ""options"": {""rowNumber"": 1, ""counterColName"": ""monthly_volume""}, ""created_at"": ""2022-09-16T05:24:04.87668+00:00"", ""__typename"": ""visualizations""}, {""id"": 2186311, ""type"": ""counter"", ""name"": ""\ud83d\udcbc 24 Hour AVG Trade Size"", ""options"": {""rowNumber"": 1, ""counterColName"": ""avg_trade_volume""}, ""created_at"": ""2022-09-16T05:24:11.326639+00:00"", ""__typename"": ""visualizations""}, {""id"": 2186314, ""type"": ""counter"", ""name"": ""\ud83d\udc9c 24 Hour Traders"", ""options"": {""rowNumber"": 1, ""counterColName"": ""daily_traders""}, ""created_at"": ""2022-09-16T05:24:54.359068+00:00"", ""__typename"": ""visualizations""}, {""id"": 2396074, ""type"": ""counter"", ""name"": ""\ud83d\udcb3 Total Margin Fees"", ""options"": {""rowNumber"": 1, ""counterColName"": ""total_fees""}, ""created_at"": ""2022-10-16T04:31:02.369215+00:00"", ""__typename"": ""visualizations""}, {""id"": 2185916, ""type"": ""counter"", ""name"": ""\ud83d\udcb0 Total Margin Volume"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""counterColName"": ""total_notional_value""}, ""created_at"": ""2022-09-16T02:54:54.133205+00:00"", ""__typename"": ""visualizations""}, {""id"": 2185917, ""type"": ""counter"", ""name"": ""\ud83d\udc5b 24 Hour Volume"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""counterColName"": ""daily_volume""}, ""created_at"": ""2022-09-16T02:54:54.133205+00:00"", ""__typename"": ""visualizations""}, {""id"": 2185918, ""type"": ""counter"", ""name"": ""\ud83d\udcb5 1 Week Volume"", ""options"": {""rowNumber"": 1, ""counterColName"": ""weekly_volume""}, ""created_at"": ""2022-09-16T02:54:54.133205+00:00"", ""__typename"": ""visualizations""}, {""id"": 2186313, ""type"": ""counter"", ""name"": ""\ud83e\udd16 Total Unique Traders"", ""options"": {""rowNumber"": 1, ""counterColName"": ""total_traders""}, ""created_at"": ""2022-09-16T05:24:41.921463+00:00"", ""__typename"": ""visualizations""}, {""id"": 2210863, ""type"": ""counter"", ""name"": ""\ud83d\udc9c Weekly Traders"", ""options"": {""rowNumber"": 1, ""counterColName"": ""weekly_traders""}, ""created_at"": ""2022-09-21T03:00:47.915514+00:00"", ""__typename"": ""visualizations""}, {""id"": 2397601, ""type"": ""counter"", ""name"": ""\ud83d\udcb3 Daily Margin Fees"", ""options"": {""rowNumber"": 1, ""counterColName"": ""daily_fees""}, ""created_at"": ""2022-10-16T08:42:16.200504+00:00"", ""__typename"": ""visualizations""}, {""id"": 2397602, ""type"": ""counter"", ""name"": ""\ud83d\udcb3 Weekly Margin Fees"", ""options"": {""rowNumber"": 1, ""counterColName"": ""weekly_fees""}, ""created_at"": ""2022-10-16T08:43:12.628369+00:00"", ""__typename"": ""visualizations""}]","-- Credits to @Msilb7: https://dune.com/queries/474394/898543

-- CREATE OR REPLACE FUNCTION format_number(d numeric)
-- RETURNS text 
-- LANGUAGE sql
-- return SELECT CONCAT('$', 
--         ROUND(
--             (CASE 
--             WHEN d/1e3 < 1 THEN d
--             WHEN d/1e6 < 1 THEN d/1e3
--             WHEN d/1e9 < 1 THEN d/1e6
--             WHEN d/1e12 < 1 THEN d/1e9
--             WHEN d/1e15 < 1 THEN d/1e12
--             END)
--         , 2),
--         (
--             CASE 
--             WHEN d/1e3 < 1 THEN ''
--             WHEN d/1e6 < 1 THEN 'K'
--             WHEN d/1e9 < 1 THEN 'M'
--             WHEN d/1e12 < 1 THEN 'B'
--             WHEN d/1e15 < 1 THEN 'T'
--             END
--         ))

SELECT CONCAT('$', 
        ROUND(
            (CASE 
            WHEN total_notional_value/1e3 < 1 THEN total_notional_value
            WHEN total_notional_value/1e6 < 1 THEN total_notional_value/1e3
            WHEN total_notional_value/1e9 < 1 THEN total_notional_value/1e6
            WHEN total_notional_value/1e12 < 1 THEN total_notional_value/1e9
            WHEN total_notional_value/1e15 < 1 THEN total_notional_value/1e12
            END)
        , 2),
        (
            CASE 
            WHEN total_notional_value/1e3 < 1 THEN ''
            WHEN total_notional_value/1e6 < 1 THEN 'K'
            WHEN total_notional_value/1e9 < 1 THEN 'M'
            WHEN total_notional_value/1e12 < 1 THEN 'B'
            WHEN total_notional_value/1e15 < 1 THEN 'T'
            END)
        ) as total_notional_value, 

        CONCAT('$', 
        ROUND(
            (CASE 
            WHEN total_fees/1e3 < 1 THEN total_fees
            WHEN total_fees/1e6 < 1 THEN total_fees/1e3
            WHEN total_fees/1e9 < 1 THEN total_fees/1e6
            WHEN total_fees/1e12 < 1 THEN total_fees/1e9
            WHEN total_fees/1e15 < 1 THEN total_fees/1e12
            END)
        , 2),
        (
            CASE 
            WHEN total_fees/1e3 < 1 THEN ''
            WHEN total_fees/1e6 < 1 THEN 'K'
            WHEN total_fees/1e9 < 1 THEN 'M'
            WHEN total_fees/1e12 < 1 THEN 'B'
            WHEN total_fees/1e15 < 1 THEN 'T'
            END)
        ) as total_fees, 
        CONCAT('$', 
        ROUND(
            (CASE 
            WHEN daily_fees/1e3 < 1 THEN daily_fees
            WHEN daily_fees/1e6 < 1 THEN daily_fees/1e3
            WHEN daily_fees/1e9 < 1 THEN daily_fees/1e6
            WHEN daily_fees/1e12 < 1 THEN daily_fees/1e9
            WHEN daily_fees/1e15 < 1 THEN daily_fees/1e12
            END)
        , 2),
        (
            CASE 
            WHEN daily_fees/1e3 < 1 THEN ''
            WHEN daily_fees/1e6 < 1 THEN 'K'
            WHEN daily_fees/1e9 < 1 THEN 'M'
            WHEN daily_fees/1e12 < 1 THEN 'B'
            WHEN daily_fees/1e15 < 1 THEN 'T'
            END)
        ) as daily_fees, 
        CONCAT('$', 
        ROUND(
            (CASE 
            WHEN weekly_fees/1e3 < 1 THEN weekly_fees
            WHEN weekly_fees/1e6 < 1 THEN weekly_fees/1e3
            WHEN weekly_fees/1e9 < 1 THEN weekly_fees/1e6
            WHEN weekly_fees/1e12 < 1 THEN weekly_fees/1e9
            WHEN weekly_fees/1e15 < 1 THEN weekly_fees/1e12
            END)
        , 2),
        (
            CASE 
            WHEN weekly_fees/1e3 < 1 THEN ''
            WHEN weekly_fees/1e6 < 1 THEN 'K'
            WHEN weekly_fees/1e9 < 1 THEN 'M'
            WHEN weekly_fees/1e12 < 1 THEN 'B'
            WHEN weekly_fees/1e15 < 1 THEN 'T'
            END)
        ) as weekly_fees, 
        CONCAT('$', 
        ROUND(
            (CASE 
            WHEN daily_volume/1e3 < 1 THEN daily_volume
            WHEN daily_volume/1e6 < 1 THEN daily_volume/1e3
            WHEN daily_volume/1e9 < 1 THEN daily_volume/1e6
            WHEN daily_volume/1e12 < 1 THEN daily_volume/1e9
            WHEN daily_volume/1e15 < 1 THEN daily_volume/1e12
            END)
        , 2),
        (
            CASE 
            WHEN daily_volume/1e3 < 1 THEN ''
            WHEN daily_volume/1e6 < 1 THEN 'K'
            WHEN daily_volume/1e9 < 1 THEN 'M'
            WHEN daily_volume/1e12 < 1 THEN 'B'
            WHEN daily_volume/1e15 < 1 THEN 'T'
            END)
        ) as daily_volume, 
        CONCAT('$', 
        ROUND(
            (CASE 
            WHEN weekly_volume/1e3 < 1 THEN weekly_volume
            WHEN weekly_volume/1e6 < 1 THEN weekly_volume/1e3
            WHEN weekly_volume/1e9 < 1 THEN weekly_volume/1e6
            WHEN weekly_volume/1e12 < 1 THEN weekly_volume/1e9
            WHEN weekly_volume/1e15 < 1 THEN weekly_volume/1e12
            END)
        , 2),
        (
            CASE 
            WHEN weekly_volume/1e3 < 1 THEN ''
            WHEN weekly_volume/1e6 < 1 THEN 'K'
            WHEN weekly_volume/1e9 < 1 THEN 'M'
            WHEN weekly_volume/1e12 < 1 THEN 'B'
            WHEN weekly_volume/1e15 < 1 THEN 'T'
            END)
        ) as weekly_volume,
        CONCAT('$', 
        ROUND(
            (CASE 
            WHEN monthly_volume/1e3 < 1 THEN monthly_volume
            WHEN monthly_volume/1e6 < 1 THEN monthly_volume/1e3
            WHEN monthly_volume/1e9 < 1 THEN monthly_volume/1e6
            WHEN monthly_volume/1e12 < 1 THEN monthly_volume/1e9
            WHEN monthly_volume/1e15 < 1 THEN monthly_volume/1e12
            END)
        , 2),
        (
            CASE 
            WHEN monthly_volume/1e3 < 1 THEN ''
            WHEN monthly_volume/1e6 < 1 THEN 'K'
            WHEN monthly_volume/1e9 < 1 THEN 'M'
            WHEN monthly_volume/1e12 < 1 THEN 'B'
            WHEN monthly_volume/1e15 < 1 THEN 'T'
            END)
        ) as monthly_volume, 
        CONCAT('$', 
        ROUND(
            (CASE 
            WHEN avg_trade_volume/1e3 < 1 THEN avg_trade_volume
            WHEN avg_trade_volume/1e6 < 1 THEN avg_trade_volume/1e3
            WHEN avg_trade_volume/1e9 < 1 THEN avg_trade_volume/1e6
            WHEN avg_trade_volume/1e12 < 1 THEN avg_trade_volume/1e9
            WHEN avg_trade_volume/1e15 < 1 THEN avg_trade_volume/1e12
            END)
        , 2),
        (
            CASE 
            WHEN avg_trade_volume/1e3 < 1 THEN ''
            WHEN avg_trade_volume/1e6 < 1 THEN 'K'
            WHEN avg_trade_volume/1e9 < 1 THEN 'M'
            WHEN avg_trade_volume/1e12 < 1 THEN 'B'
            WHEN avg_trade_volume/1e15 < 1 THEN 'T'
            END)
        ) as avg_trade_volume,
        total_traders as total_traders,
        daily_traders as daily_traders,
        weekly_traders as weekly_traders
        
FROM (
    select SUM(volume) as total_notional_value, SUM(fees) as total_fees,
    SUM(fees) FILTER (where block_time >= NOW() - INTERVAL '1 DAY') as daily_fees,
    SUM(fees) FILTER (where block_time >= NOW() - INTERVAL '1 WEEK') as weekly_fees,

    COUNT(DISTINCT trader) as total_traders,
    COUNT(DISTINCT trader)  filter (WHERE block_time >= NOW() - INTERVAL '1 DAY') as daily_traders,
    COUNT(DISTINCT trader)  filter (WHERE block_time >= NOW() - INTERVAL '1 WEEK') as weekly_traders,

    SUM(volume) filter (WHERE block_time >= NOW() - INTERVAL '1 DAY') as daily_volume,
    SUM(volume) filter (WHERE block_time >= NOW() - INTERVAL '1 WEEK') as weekly_volume,
    SUM(volume) filter (WHERE block_time >= NOW() - INTERVAL '1 MONTH')  as monthly_volume,
    AVG(volume) filter (WHERE block_time >= NOW() - INTERVAL '1 DAY') as avg_trade_volume
    from (
        select evt_block_time as block_time, sizeDelta/1e30 as volume, account as trader,
        fee/1e30 as fees
        FROM gmx_arbitrum.Vault_evt_IncreasePosition
        UNION ALL
        select evt_block_time as block_time, sizeDelta/1e30 as volume, account as trader,
        fee/1e30 as fees
        FROM gmx_arbitrum.Vault_evt_DecreasePosition
        union all
        select evt_block_time as block_time, sizeDelta/1e30 as volume, account as trader,
        fee/1e30 as fees
        FROM gmx_avalanche_c.Vault_evt_IncreasePosition
        union all
        select evt_block_time as block_time, sizeDelta/1e30 as volume, account as trader,
        fee/1e30 as fees
        FROM gmx_avalanche_c.Vault_evt_DecreasePosition
        UNION ALL
        select evt_block_time as block_time, size/1e30 as volume, account as trader,
        0 as fees
        FROM gmx_arbitrum.Vault_evt_LiquidatePosition
        UNION ALL
        select evt_block_time as block_time, size/1e30 as volume, account as trader,
        0 as fees
        FROM gmx_avalanche_c.Vault_evt_LiquidatePosition
    ) as gmx_trades
) as trades;"
1347247,Volume & Fees Comparison,,"[{""id"": 2298707, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-10-04T05:02:00.946933+00:00"", ""__typename"": ""visualizations""}, {""id"": 2298892, ""type"": ""chart"", ""name"": ""Fees Comparison"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""tickFormat"": ""$0[.]a""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack"", ""percentValues"": false}, ""reverseX"": false, ""numberFormat"": ""$0,.00"", ""columnMapping"": {""day"": ""x"", ""fees"": ""y"", ""label"": ""series""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-10-04T05:52:20.240402+00:00"", ""__typename"": ""visualizations""}, {""id"": 2299026, ""type"": ""chart"", ""name"": ""Volume Comparison"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""tickFormat"": ""$0[.]a""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack"", ""percentValues"": false}, ""reverseX"": false, ""numberFormat"": ""$0,.00"", ""columnMapping"": {""day"": ""x"", ""label"": ""series"", ""volume"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-10-04T06:22:26.437034+00:00"", ""__typename"": ""visualizations""}, {""id"": 2299287, ""type"": ""chart"", ""name"": ""Users Comparison"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""columnMapping"": {""day"": ""x"", ""label"": ""series"", ""traders"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-10-04T07:19:20.258961+00:00"", ""__typename"": ""visualizations""}]","WITH gmx as (
    SELECT day,
    'GMX' as label,
    SUM(volume) as volume,
    SUM(fees) as fees,
    COUNT(distinct trader) as traders
    FROM (
        select  
        date_trunc('day', block_time) as day,    
        substring(data, 3+64*1, 64)  as trader,
        -- tx_hash  as trades,
        bytea2numeric_v2(substring(data, 3+64*5, 64))/1e30  as volume,
        bytea2numeric_v2(substring(data, 3+64*8, 64))/1e30  as fees
        from arbitrum.logs
        WHERE 
          (contract_address = '0x489ee077994b6658eafa855c308275ead8097c4a')
          AND
          (topic1 = '0x2fe68525253654c21998f35787a8d0f361905ef647c854092430ab65f2f15022'
          OR topic1 = '0x93d75d64d1f84fc6f430a64fc578bdd4c1e090e90ea2d51773e626d19de56d30')
        
        union ALL
        
        select  
            date_trunc('day', block_time) as day,    
        substring(data, 3+64*1, 64)  as trader,
        -- tx_hash as trades,
        bytea2numeric_v2(substring(data, 3+64*5, 64))/1e30 as volume,
        bytea2numeric_v2(substring(data, 3+64*8, 64))/1e30 as fees
        from avalanche_c.logs
        WHERE 
          (contract_address = '0x9ab2de34a33fb459b538c43f251eb825645e8595')
          AND
          (topic1 = '0x2fe68525253654c21998f35787a8d0f361905ef647c854092430ab65f2f15022'
          OR topic1 = '0x93d75d64d1f84fc6f430a64fc578bdd4c1e090e90ea2d51773e626d19de56d30')

    ) as trades
    GROUP BY 1, 2
)
,
perp as (
    SELECT
      date_trunc('day', block_time) as day,
      'Perp' as label,
      SUM(IF(margin_usd > 0, volume_usd, 0)) as volume,
      SUM(fee_usd) as fees,
      COUNT(distinct trader) as traders
    
    FROM
      perpetual_protocol_v2_optimism.trades
    GROUP BY 1, 2
),
kwenta as (
    SELECT date_trunc('day', evt_block_time) as day, 
    'Kwenta' as label,
    sum((lastPrice/1e18) * ABS(tradeSize/1e18)) as volume,
    SUM(fee/1e18) as fees, -- in sUSD
    COUNT(DISTINCT account) as traders

    -- contract_address
    FROM synthetix_optimism.FuturesMarket_evt_PositionModified
    GROUP BY 1, 2
)
,
mycelium as (
    SELECT 
    date_trunc('day', block_time) as day,  
    'Mycelium' as label,
    SUM(bytea2numeric_v2(substring(data, 3+64*5, 64)))/1e30  as volume,
    sum(bytea2numeric_v2(substring(data, 3+64*8, 64)))/1e30  as fees,
    COUNT(distinct substring(data, 3+64*1, 64)) as traders
    FROM arbitrum.logs
        WHERE 
        (contract_address = '0xdfba8ad57d2c62f61f0a60b2c508bcdeb182f855')
        AND
        (topic1 = '0x2fe68525253654c21998f35787a8d0f361905ef647c854092430ab65f2f15022'
        OR topic1 = '0x93d75d64d1f84fc6f430a64fc578bdd4c1e090e90ea2d51773e626d19de56d30')
    GROUP BY 1, 2
)
,
cap as (
    SELECT time AS day, 'Cap' as label, SUM(size) as volume, SUM(fee) as fees, COUNT(DISTINCT trader) as traders
    FROM
    (
        SELECT date_trunc('day', evt_block_time) as time, 
        -- user as account,
        IF(currency = '0xff970a61a04b1ca14834a43f5de4533ebddb5cc8',
        (size - LAG(size, 1, 0) OVER (PARTITION BY `key` order by evt_block_time))/1e8,
        ABS(pricing.avg_price * (size - LAG(size, 1, 0) OVER (PARTITION BY `key` order by evt_block_time))/1e8)) as size,
        -- if(`isLong`, 'LONG', 'SHORT') as position_side,
        evt_tx_hash,
        `productId` as token,
        0 as fee, -- no fee for opening,
        `user` as trader
        FROM cap_arbitrum.Trading_evt_PositionUpdated as pos_changed JOIN (
            SELECT date_trunc('day', minute) as time, AVG(price) as avg_price
            FROM prices.usd
            WHERE symbol = 'WETH'
            GROUP BY 1
            ORDER BY 1 DESC
        ) as pricing on date_trunc('day', pos_changed.evt_block_time) = pricing.time
        UNION
        
        SELECT date_trunc('day', evt_block_time) as time, 
        -- user as account,
        ABS(IF(currency = '0xff970a61a04b1ca14834a43f5de4533ebddb5cc8', (`wasLiquidated`::int ^ 1) * size/1e8, (`wasLiquidated`::int ^ 1) *pricing.avg_price * size/1e8)) as size,
        -- if(`isLong`, 'LONG', 'SHORT') as position_side,
        evt_tx_hash,
        `productId` as token,
        IF(currency = '0xff970a61a04b1ca14834a43f5de4533ebddb5cc8', fee/1e8, pricing.avg_price * fee/1e8) as fee,
        `user` as trader
        FROM cap_arbitrum.Trading_evt_ClosePosition as closed  JOIN (
            SELECT date_trunc('day', minute) as time, AVG(price) as avg_price
            FROM prices.usd
            WHERE symbol = 'WETH'
            GROUP BY 1
            ORDER BY 1 DESC
        ) as pricing on date_trunc('day', closed.evt_block_time) = pricing.time
        -- WHERE not `wasLiquidated`
    ) as cap_trades
    GROUP BY 1, 2
),
pika as (

    SELECT  time as day, 'Pika' AS label, SUM(volume) as volume, SUM(fee) AS FEEs, COUNT(DISTINCT trader) as traders
    FROM (
        SELECT date_trunc('day', evt_block_time) as time, (leverage/1e8 * margin/1e8) as volume, 
        fee/1e8 as fee,
        `user` as trader
        FROM pika_perp_v3_optimism.PikaPerpV3_evt_NewPosition
        
        UNION ALL
        
        SELECT date_trunc('day', evt_block_time) as time, (leverage/1e8 * margin/1e8) as volume, 
        fee/1e8 as fee,
        `user` as trader

        FROM pika_perp_v3_optimism.PikaPerpV3_evt_ClosePosition
        
        UNION ALL

        SELECT date_trunc('day', evt_block_time) as time, (leverage/1e8 * margin/1e8) as volume, 
        fee/1e8 as fee,
        `user` as trader
        FROM pika_perp_v2_optimism.PikaPerpV2_evt_NewPosition
        
        UNION ALL
        
        SELECT date_trunc('day', evt_block_time) as time, (leverage/1e8 * margin/1e8) as volume, 
        fee/1e8 as fee,
        `user` as trader
        FROM pika_perp_v2_optimism.PikaPerpV2_evt_ClosePosition
  
        UNION ALL

        SELECT date_trunc('day', evt_block_time) as time, 0 as volume, 
        liquidatorReward/1e8 as fee,
        NULL as trader
        FROM pika_perp_v3_optimism.PikaPerpV3_evt_PositionLiquidated
        
        UNION ALL
        
        SELECT date_trunc('day', evt_block_time) as time, 0 as volume, 
        liquidatorReward/1e8 as fee,
        NULL as trader
        FROM pika_perp_v2_optimism.PikaPerpV2_evt_PositionLiquidated

    ) as pika_trades
    GROUP BY 1, 2
),
-- Rage Trade
rage as (
    SELECT day, 'Rage' AS label,  SUM(VOLUME) as volume, SUM(fee) as fees, COUNT(distinct trader) as traders
    FROM 
    (
        SELECT date_trunc('day', evt_block_time) as day, ABS(`vQuoteAmountOut`/1e6) as volume,
        0 as fee,
        `accountId` as trader
        FROM rage_trade_arbitrum.ClearingHouse_evt_TokenPositionChanged
        
        UNION all
        
        SELECT date_trunc('day', evt_block_time) as day, 0 as volume,
        `keeperFee`/1e6 + `insuranceFundFee`/1e6  as fee,
        `accountId` as trader
        FROM rage_trade_arbitrum.ClearingHouse_evt_TokenPositionLiquidated
        
    )
    GROUP BY 1, 2

),
metavault as (
    SELECT  day, 'Metavault' as label, SUM(volume) as volume, SUM(fees) as fees,COUNT(distinct trader) as traders
    FROM (
        SELECT 
              date_trunc('day', evt_block_time) as day,    
              account  as trader,
              sizeDelta/1e30  as volume,
              fee/1e30  as fees
            FROM metavault_trade_polygon.Vault_evt_IncreasePosition
        UNION ALL
        SELECT 
              date_trunc('day', evt_block_time) as time,    
              account  as trader,
              sizeDelta/1e30  as volume,
              fee/1e30  as fees
        FROM metavault_trade_polygon.Vault_evt_DecreasePosition
    ) as metavault_trades
    GROUP BY 1, 2
), mux_protocol as (
    SELECT day, 'Mux' as label, SUM(token_amount * token_price) as volume, SUM(fees) as fees, COUNT(distinct trader) as traders
    FROM (
        -- open position
        SELECT date_trunc('day', block_time) as day, concat('0x', SUBSTRING(topic2 FROM 27 FOR 40)) AS trader,
        bytea2numeric_v2(SUBSTRING(data FROM 3+64*3, 64))/1e18 as token_amount,
        bytea2numeric_v2(SUBSTRING(data FROM 3+64*4, 64))/1e18 as token_price,
        bytea2numeric_v2(SUBSTRING(data from 3+64*7, 64))/1e18 as fees --usd fees
        FROM arbitrum.logs
        WHERE block_time >= TIMESTAMP '2022-07-01' and
        topic1 = '0xdb27855d3e94a6c985e1e59c77870a73484ef3c40d29fbfe14bb3e686da86efb' and
        contract_address = '0x3e0199792ce69dc29a0a36146bfa68bd7c8d6633'
        UNION ALL

        -- closing position
        SELECT date_trunc('day', block_time) as day, concat('0x', SUBSTRING(topic2 FROM 27 FOR 40)) AS trader,
        bytea2numeric_v2(SUBSTRING(data FROM 3+64*4, 64))/1e18 as token_amount,
        bytea2numeric_v2(SUBSTRING(data FROM 3+64*5, 64))/1e18 as token_price,
        bytea2numeric_v2(SUBSTRING(data from 3+64*8, 64))/1e18 as fees --usd fees

        FROM arbitrum.logs
        WHERE block_time >= TIMESTAMP '2022-07-01' and
        topic1 = '0x645156066afee3ede009256908a9e96538cc1ad681c46b10114f6ce98ebd0600' and 
        contract_address = '0x3e0199792ce69dc29a0a36146bfa68bd7c8d6633'


        UNION ALL

        SELECT date_trunc('day', block_time) as day, concat('0x', SUBSTRING(topic2 FROM 27 FOR 40)) AS trader,
        -- IF(bytea2numeric_v2(SUBSTRING(data, 3+64*3 - 1, 1)) = 1, 'LONG', 'SHORT') as position_side,
        bytea2numeric_v2(SUBSTRING(data FROM 3+64*3, 64))/1e18 as token_amount,
        bytea2numeric_v2(SUBSTRING(data FROM 3+64*4, 64))/1e18 as token_price,
        bytea2numeric_v2(SUBSTRING(data from 3+64*7, 64))/1e18 as fees --usd fees

        FROM avalanche_c.logs
        WHERE block_time >= TIMESTAMP '2022-07-01' and 
        contract_address = '0x0ba2e492e8427fad51692ee8958ebf936bee1d84' and
        topic1 = '0xdb27855d3e94a6c985e1e59c77870a73484ef3c40d29fbfe14bb3e686da86efb'  
        

        UNION ALL

        SELECT date_trunc('day', block_time) as day, concat('0x', SUBSTRING(topic2 FROM 27 FOR 40)) AS trader,
        bytea2numeric_v2(SUBSTRING(data FROM 3+64*4, 64))/1e18 as token_amount,
        bytea2numeric_v2(SUBSTRING(data FROM 3+64*5, 64))/1e18 as token_price,
        bytea2numeric_v2(SUBSTRING(data from 3+64*8, 64))/1e18 as fees --usd fees

        FROM avalanche_c.logs
        WHERE block_time >= TIMESTAMP '2022-07-01' and 
        topic1 = '0x645156066afee3ede009256908a9e96538cc1ad681c46b10114f6ce98ebd0600' and
        contract_address = '0x0ba2e492e8427fad51692ee8958ebf936bee1d84'

        UNION ALL

        SELECT date_trunc('day', block_time) as day, concat('0x', SUBSTRING(topic2 FROM 27 FOR 40)) AS trader,
        bytea2numeric_v2(SUBSTRING(data FROM 3+64*3, 64))/1e18 as token_amount,
        bytea2numeric_v2(SUBSTRING(data FROM 3+64*4, 64))/1e18 as token_price,
        bytea2numeric_v2(SUBSTRING(data from 3+64*7, 64))/1e18 as fees --usd fees

        FROM bnb.logs
        WHERE block_time >= TIMESTAMP '2022-07-01' and 
        topic1 = '0xdb27855d3e94a6c985e1e59c77870a73484ef3c40d29fbfe14bb3e686da86efb' and
        contract_address = '0x855e99f768fad76dd0d3eb7c446c0b759c96d520'
        UNION ALL

        SELECT date_trunc('day', block_time) as day, concat('0x', SUBSTRING(topic2 FROM 27 FOR 40)) AS trader,
        bytea2numeric_v2(SUBSTRING(data FROM 3+64*4, 64))/1e18 as token_amount,
        bytea2numeric_v2(SUBSTRING(data FROM 3+64*5, 64))/1e18 as token_price,
        bytea2numeric_v2(SUBSTRING(data from 3+64*8, 64))/1e18 as fees --usd fees

        FROM bnb.logs
        WHERE block_time >= TIMESTAMP '2022-07-01' and 
        topic1 = '0x645156066afee3ede009256908a9e96538cc1ad681c46b10114f6ce98ebd0600' and 
        contract_address = '0x855e99f768fad76dd0d3eb7c446c0b759c96d520'
    ) as mcb_trades
    GROUP BY 1, 2

)



SELECT day, label, volume, fees, traders
FROM gmx
WHERE day >= NOW() - INTERVAL '180 Days'
UNION ALL
SELECT day, label, volume, fees, traders
FROM perp
WHERE day >= NOW() - INTERVAL '180 Days'
UNION ALL
SELECT day, label, volume, fees, traders
FROM kwenta
WHERE day >= NOW() - INTERVAL '180 Days'
UNION ALL
SELECT day, label, volume, fees, traders
FROM mycelium
WHERE day >= NOW() - INTERVAL '180 Days'
UNION ALL
SELECT day, label, volume, fees, traders
FROM cap
WHERE day >= NOW() - INTERVAL '180 Days'
UNION ALL
SELECT day, label, volume, fees, traders
FROM pika
WHERE day >= NOW() - INTERVAL '180 Days'
UNION ALL
SELECT day, label, volume, fees, traders
FROM rage
WHERE day >= NOW() - INTERVAL '180 Days'
UNION ALL
SELECT day, label, volume, fees, traders
FROM metavault
WHERE day >= NOW() - INTERVAL '180 Days'
UNION ALL
SELECT day, label, volume, fees, traders
FROM mux_protocol
WHERE day >= NOW() - INTERVAL '180 Days'
;

"
1295985,Margin Trading Mycelium Daily,,"[{""id"": 2219915, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-09-22T05:03:53.669551+00:00"", ""__typename"": ""visualizations""}, {""id"": 2219927, ""type"": ""chart"", ""name"": ""Mycelium Margin Trading Volume "", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""tickFormat"": ""$0[.]a""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""numberFormat"": ""$0[,]00"", ""columnMapping"": {""time"": ""x"", ""token"": ""series"", ""total_volume"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-09-22T05:06:00.354523+00:00"", ""__typename"": ""visualizations""}]","    SELECT
        time,
        ( 
            CASE index_token
            WHEN '0x82af49447d8a07e3bd95bd0d56f35241523fbab1' THEN 'WETH'
            WHEN '0x2f2a2543b76a4166549f7aab2e75bef0aefc5b0f' THEN 'WBTC'
            WHEN '0xf97f4df75117a78c1a5a0dbb814af92458539fb4' THEN 'LINK'
            WHEN '0xfa7f8980b0f1e64a2062791cc3b0871572f1f7f0' THEN 'UNI'
            WHEN '0x11cdb42b0eb46d95f990bedd4695a6e3fa034978' THEN 'CRV'
            WHEN '0x040d1edc9569d4bab2d15287dc5a4f10f56a56b8' THEN 'BAL'
            WHEN '0x9d2f299715d94d8a7e6f5eaa8e654e8c74a988a7' THEN 'FXS'
            else index_token
            END
        ) as token,
        SUM(volume) as total_volume
    FROM (
        SELECT 
              date_trunc('day', block_time) as time,    
              (substring(data, 24+3+64*1, 40))  as trader,
              tx_hash,
              (IF(bytea2numeric_v2(substring(data, 3+64*6, 64))=1, 1, 0)) as longs,
              (IF(bytea2numeric_v2(substring(data, 3+64*6, 64))=1, 0, 1)) as shorts,
            --   SUM(IF(bytea2numeric_v2(substring(data, 3+64*6, 64))=1, (bytea2numeric_v2(substring(data, 3+64*5, 64)))/1e30, 0)) as longs_volume,
            --   SUM(IF(bytea2numeric_v2(substring(data, 3+64*6, 64))=1, 0, (bytea2numeric_v2(substring(data, 3+64*5, 64)))/1e30)) as shorts_volume,
              (bytea2numeric_v2(substring(data, 3+64*5, 64)))/1e30  as volume,
               CONCAT('0x', substring(data, 24+3+64*3, 40)) as index_token,

              (bytea2numeric_v2(substring(data, 3+64*8, 64)))/1e30  as fees
              
            FROM arbitrum.logs
            WHERE 
              (contract_address = '0xdfba8ad57d2c62f61f0a60b2c508bcdeb182f855')
              AND
              (topic1 = '0x2fe68525253654c21998f35787a8d0f361905ef647c854092430ab65f2f15022'
              OR topic1 = '0x93d75d64d1f84fc6f430a64fc578bdd4c1e090e90ea2d51773e626d19de56d30')
        ORDER BY 1
    ) as mycelium_trades
    WHERE time >= NOW() - interval '4 months'
    GROUP BY 1, 2
    ORDER BY 1"
1295841,Margin Trading Cap Stats Daily,,"[{""id"": 2219669, ""type"": ""chart"", ""name"": ""Cap Margin Trading Volume"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""tickFormat"": ""$0[.]a""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""numberFormat"": ""$0[,]00"", ""columnMapping"": {""time"": ""x"", ""token"": ""series"", ""daily_volume"": ""y"", ""total_volume"": ""y"", ""total_notional_value"": ""x""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-09-22T04:23:38.23801+00:00"", ""__typename"": ""visualizations""}, {""id"": 2219647, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-09-22T04:21:17.780226+00:00"", ""__typename"": ""visualizations""}]","
    select 
        date_trunc('day', time) as time,
        (CASE btrim(token, '0x')
        WHEN '4554482d555344' then 'ETH'
        WHEN '4254432d555344' then 'BTC'
        END) as token,
        SUM(size) as total_volume,
        SUM(size)/1e6 as total_volume_format,

        COUNT(evt_tx_hash) as total_hash
    from (
        SELECT date_trunc('day', evt_block_time) as time, 
        user as account,
        IF(currency = '0xff970a61a04b1ca14834a43f5de4533ebddb5cc8',
        (size - LAG(size, 1, 0) OVER (PARTITION BY `key` order by evt_block_time))/1e8,
        ABS(pricing.avg_price * (size - LAG(size, 1, 0) OVER (PARTITION BY `key` order by evt_block_time))/1e8)) as size,
        if(`isLong`, 'LONG', 'SHORT') as position_side,
        evt_tx_hash,
        `productId` as token
        FROM cap_arbitrum.Trading_evt_PositionUpdated as pos_changed JOIN (
            SELECT date_trunc('day', minute) as time, AVG(price) as avg_price
            FROM prices.usd
            WHERE symbol = 'WETH'
            GROUP BY 1
            ORDER BY 1 DESC
        ) as pricing on date_trunc('day', pos_changed.evt_block_time) = pricing.time
        UNION
        
        SELECT date_trunc('day', evt_block_time) as time, 
        user as account,
        ABS(IF(currency = '0xff970a61a04b1ca14834a43f5de4533ebddb5cc8', size/1e8, pricing.avg_price * size/1e8)) as size,
        if(`isLong`, 'LONG', 'SHORT') as position_side,
        evt_tx_hash,
        `productId` as token
        FROM cap_arbitrum.Trading_evt_ClosePosition as closed  JOIN (
            SELECT date_trunc('day', minute) as time, AVG(price) as avg_price
            FROM prices.usd
            WHERE symbol = 'WETH'
            GROUP BY 1
            ORDER BY 1 DESC
        ) as pricing on date_trunc('day', closed.evt_block_time) = pricing.time
        WHERE not `wasLiquidated`
        -- select date_trunc('day', block_time) as time, 
        --   CONCAT('0x', SUBSTRING(topic3 FROM 27 FOR 40)) as account,
        -- --   CONCAT('0x', SUBSTRING(data FROM 27 FOR 40)) currency,
        -- bytea2numeric_v2(SUBSTRING(data FROM (27+64*3) FOR 40))/1e8 as size,
        -- if(bytea2numeric_v2(SUBSTRING(data FROM (27+64) FOR 40)) = 1, 'LONG', 'SHORT') as position_side,
        -- --   bytea2numeric_v2(SUBSTRING(data FROM (27+64*2) FOR 40))/1e8 as margin,
        -- --   bytea2numeric_v2(SUBSTRING(data FROM (27+64*4) FOR 40)) as is_close,
        -- --   , if(bytea2numeric_v2(SUBSTRING(data FROM (27+64) FOR 40)), 'LONG', 'SHORT') as position_side,
        -- tx_hash as evt_tx_hash
        -- FROM arbitrum.logs
        -- WHERE contract_address = '0xcaec650502f15c1a6bff1c2288fc8f819776b2ec' and topic1 = '0xe6f0e81a24c1b1c11cfcbbce67e7c5ef361e984c1e4f3528125c93f6f906680d'
    ) as trading_volume
    WHERE time >= NOW() - INTERVAL '4 months'
    GROUP BY 1, 2
    ORDER BY 1 DESC
"
1352352,Margin Trading Rage Stats,,"[{""id"": 2306801, ""type"": ""counter"", ""name"": ""\ud83e\udd16 Total Unique Traders"", ""options"": {""rowNumber"": 1, ""counterColName"": ""total_traders""}, ""created_at"": ""2022-10-05T03:15:55.83877+00:00"", ""__typename"": ""visualizations""}, {""id"": 2306802, ""type"": ""counter"", ""name"": ""\ud83d\udcb5 1 Week Volume"", ""options"": {""rowNumber"": 1, ""counterColName"": ""weekly_volume""}, ""created_at"": ""2022-10-05T03:15:55.83877+00:00"", ""__typename"": ""visualizations""}, {""id"": 2306803, ""type"": ""counter"", ""name"": ""\ud83d\udcb8 1 Month Volume"", ""options"": {""rowNumber"": 1, ""counterColName"": ""monthly_volume""}, ""created_at"": ""2022-10-05T03:15:55.83877+00:00"", ""__typename"": ""visualizations""}, {""id"": 2306804, ""type"": ""counter"", ""name"": ""\ud83d\udcbc 24 Hour AVG Trade Size"", ""options"": {""rowNumber"": 1, ""counterColName"": ""avg_trade_volume""}, ""created_at"": ""2022-10-05T03:15:55.83877+00:00"", ""__typename"": ""visualizations""}, {""id"": 2306805, ""type"": ""counter"", ""name"": ""\ud83d\udda4 24 Hour Traders"", ""options"": {""rowNumber"": 1, ""counterColName"": ""daily_traders""}, ""created_at"": ""2022-10-05T03:15:55.83877+00:00"", ""__typename"": ""visualizations""}, {""id"": 2306800, ""type"": ""counter"", ""name"": ""\ud83d\udc5b 24 Hour Volume"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""counterColName"": ""daily_volume""}, ""created_at"": ""2022-10-05T03:15:55.83877+00:00"", ""__typename"": ""visualizations""}, {""id"": 2306798, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-10-05T03:15:55.83877+00:00"", ""__typename"": ""visualizations""}, {""id"": 2306806, ""type"": ""counter"", ""name"": ""\ud83d\udda4 Weekly Traders"", ""options"": {""rowNumber"": 1, ""counterColName"": ""weekly_traders""}, ""created_at"": ""2022-10-05T03:15:55.83877+00:00"", ""__typename"": ""visualizations""}, {""id"": 2306799, ""type"": ""counter"", ""name"": ""\ud83d\udcb0 Total Margin Volume"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""counterColName"": ""total_notional_value""}, ""created_at"": ""2022-10-05T03:15:55.83877+00:00"", ""__typename"": ""visualizations""}, {""id"": 2410985, ""type"": ""counter"", ""name"": ""\ud83d\udecd\ufe0f Total Margin Fees"", ""options"": {""rowNumber"": 1, ""counterColName"": ""weekly_fees""}, ""created_at"": ""2022-10-18T07:33:04.371184+00:00"", ""__typename"": ""visualizations""}]","SELECT CONCAT('$', 
        ROUND(
            (CASE 
            WHEN total_notional_value/1e3 < 1 THEN total_notional_value
            WHEN total_notional_value/1e6 < 1 THEN total_notional_value/1e3
            WHEN total_notional_value/1e9 < 1 THEN total_notional_value/1e6
            WHEN total_notional_value/1e12 < 1 THEN total_notional_value/1e9
            WHEN total_notional_value/1e15 < 1 THEN total_notional_value/1e12
            END)
        , 2),
        (
            CASE 
            WHEN total_notional_value/1e3 < 1 THEN ''
            WHEN total_notional_value/1e6 < 1 THEN 'K'
            WHEN total_notional_value/1e9 < 1 THEN 'M'
            WHEN total_notional_value/1e12 < 1 THEN 'B'
            WHEN total_notional_value/1e15 < 1 THEN 'T'
            END)
        ) as total_notional_value, 
        CONCAT('$', 
        ROUND(
            (CASE 
            WHEN daily_volume/1e3 < 1 THEN daily_volume
            WHEN daily_volume/1e6 < 1 THEN daily_volume/1e3
            WHEN daily_volume/1e9 < 1 THEN daily_volume/1e6
            WHEN daily_volume/1e12 < 1 THEN daily_volume/1e9
            WHEN daily_volume/1e15 < 1 THEN daily_volume/1e12
            END)
        , 2),
        (
            CASE 
            WHEN daily_volume/1e3 < 1 THEN ''
            WHEN daily_volume/1e6 < 1 THEN 'K'
            WHEN daily_volume/1e9 < 1 THEN 'M'
            WHEN daily_volume/1e12 < 1 THEN 'B'
            WHEN daily_volume/1e15 < 1 THEN 'T'
            END)
        ) as daily_volume, 
        CONCAT('$', 
        ROUND(
            (CASE 
            WHEN weekly_volume/1e3 < 1 THEN weekly_volume
            WHEN weekly_volume/1e6 < 1 THEN weekly_volume/1e3
            WHEN weekly_volume/1e9 < 1 THEN weekly_volume/1e6
            WHEN weekly_volume/1e12 < 1 THEN weekly_volume/1e9
            WHEN weekly_volume/1e15 < 1 THEN weekly_volume/1e12
            END)
        , 2),
        (
            CASE 
            WHEN weekly_volume/1e3 < 1 THEN ''
            WHEN weekly_volume/1e6 < 1 THEN 'K'
            WHEN weekly_volume/1e9 < 1 THEN 'M'
            WHEN weekly_volume/1e12 < 1 THEN 'B'
            WHEN weekly_volume/1e15 < 1 THEN 'T'
            END)
        ) as weekly_volume,
        CONCAT('$', 
        ROUND(
            (CASE 
            WHEN monthly_volume/1e3 < 1 THEN monthly_volume
            WHEN monthly_volume/1e6 < 1 THEN monthly_volume/1e3
            WHEN monthly_volume/1e9 < 1 THEN monthly_volume/1e6
            WHEN monthly_volume/1e12 < 1 THEN monthly_volume/1e9
            WHEN monthly_volume/1e15 < 1 THEN monthly_volume/1e12
            END)
        , 2),
        (
            CASE 
            WHEN monthly_volume/1e3 < 1 THEN ''
            WHEN monthly_volume/1e6 < 1 THEN 'K'
            WHEN monthly_volume/1e9 < 1 THEN 'M'
            WHEN monthly_volume/1e12 < 1 THEN 'B'
            WHEN monthly_volume/1e15 < 1 THEN 'T'
            END)
        ) as monthly_volume, 
        CONCAT('$', 
        ROUND(
            (CASE 
            WHEN avg_trade_volume/1e3 < 1 THEN avg_trade_volume
            WHEN avg_trade_volume/1e6 < 1 THEN avg_trade_volume/1e3
            WHEN avg_trade_volume/1e9 < 1 THEN avg_trade_volume/1e6
            WHEN avg_trade_volume/1e12 < 1 THEN avg_trade_volume/1e9
            WHEN avg_trade_volume/1e15 < 1 THEN avg_trade_volume/1e12
            END)
        , 2),
        (
            CASE 
            WHEN avg_trade_volume/1e3 < 1 THEN ''
            WHEN avg_trade_volume/1e6 < 1 THEN 'K'
            WHEN avg_trade_volume/1e9 < 1 THEN 'M'
            WHEN avg_trade_volume/1e12 < 1 THEN 'B'
            WHEN avg_trade_volume/1e15 < 1 THEN 'T'
            END)
        ) as avg_trade_volume,
        CONCAT('$', 
        ROUND(
            (CASE 
            WHEN total_fees/1e3 < 1 THEN total_fees
            WHEN total_fees/1e6 < 1 THEN total_fees/1e3
            WHEN total_fees/1e9 < 1 THEN total_fees/1e6
            WHEN total_fees/1e12 < 1 THEN total_fees/1e9
            WHEN total_fees/1e15 < 1 THEN total_fees/1e12
            END)
        , 2),
        (
            CASE 
            WHEN total_fees/1e3 < 1 THEN ''
            WHEN total_fees/1e6 < 1 THEN 'K'
            WHEN total_fees/1e9 < 1 THEN 'M'
            WHEN total_fees/1e12 < 1 THEN 'B'
            WHEN total_fees/1e15 < 1 THEN 'T'
            END)
        ) as total_fees, 
        CONCAT('$', 
        ROUND(
            (CASE 
            WHEN daily_fees/1e3 < 1 THEN daily_fees
            WHEN daily_fees/1e6 < 1 THEN daily_fees/1e3
            WHEN daily_fees/1e9 < 1 THEN daily_fees/1e6
            WHEN daily_fees/1e12 < 1 THEN daily_fees/1e9
            WHEN daily_fees/1e15 < 1 THEN daily_fees/1e12
            END)
        , 2),
        (
            CASE 
            WHEN daily_fees/1e3 < 1 THEN ''
            WHEN daily_fees/1e6 < 1 THEN 'K'
            WHEN daily_fees/1e9 < 1 THEN 'M'
            WHEN daily_fees/1e12 < 1 THEN 'B'
            WHEN daily_fees/1e15 < 1 THEN 'T'
            END)
        ) as daily_fees, 
        CONCAT('$', 
        ROUND(
            (CASE 
            WHEN weekly_fees/1e3 < 1 THEN weekly_fees
            WHEN weekly_fees/1e6 < 1 THEN weekly_fees/1e3
            WHEN weekly_fees/1e9 < 1 THEN weekly_fees/1e6
            WHEN weekly_fees/1e12 < 1 THEN weekly_fees/1e9
            WHEN weekly_fees/1e15 < 1 THEN weekly_fees/1e12
            END)
        , 2),
        (
            CASE 
            WHEN weekly_fees/1e3 < 1 THEN ''
            WHEN weekly_fees/1e6 < 1 THEN 'K'
            WHEN weekly_fees/1e9 < 1 THEN 'M'
            WHEN weekly_fees/1e12 < 1 THEN 'B'
            WHEN weekly_fees/1e15 < 1 THEN 'T'
            END)
        ) as weekly_fees, 
        (total_traders) as total_traders,
        (daily_traders) as daily_traders,
        (weekly_traders) as weekly_traders
        
        
FROM (
    select SUM(volume) as total_notional_value,
    SUM(fees) as total_fees,
    SUM(fees)  filter (WHERE evt_block_time >= NOW() - INTERVAL '1 DAY') as daily_fees,
    SUM(fees)  filter (WHERE evt_block_time >= NOW() - INTERVAL '1 WEEK') as weekly_fees,
    
    COUNT(DISTINCT trader) as total_traders,
    COUNT(DISTINCT trader)  filter (WHERE evt_block_time >= NOW() - INTERVAL '1 DAY') as daily_traders,
    COUNT(DISTINCT trader)  filter (WHERE evt_block_time >= NOW() - INTERVAL '1 WEEK') as weekly_traders,

    SUM(volume) filter (WHERE evt_block_time >= NOW() - INTERVAL '1 DAY') as daily_volume,
    SUM(volume) filter (WHERE evt_block_time >= NOW() - INTERVAL '1 WEEK') as weekly_volume,
    SUM(volume) filter (WHERE evt_block_time >= NOW() - INTERVAL '1 MONTH')  as monthly_volume,
    AVG(volume) filter (WHERE evt_block_time >= NOW() - INTERVAL '1 DAY') as avg_trade_volume
    from (
        -- open position
        SELECT evt_block_time, accountId AS trader,
        ABS(vQuoteAmountOut/1e6) as volume,
        0 as fees
        -- ,
        -- IF(bytea2numeric_v2(SUBSTRING(data, 3+64*3 - 1, 1)) = 1, 'LONG', 'SHORT') as position_side,
        -- bytea2numeric_v2(SUBSTRING(data FROM 3+64*3, 64))/1e18 as token_amount,
        -- bytea2numeric_v2(SUBSTRING(data from 3+64*7, 64))/1e18 as fees --usd fees
        
        FROM rage_trade_arbitrum.ClearingHouse_evt_TokenPositionChanged
        
        union all

        SELECT  evt_block_time,
        `accountId` as trader,
        0 as volume,
        `keeperFee`/1e6 + `insuranceFundFee`/1e6  as fees
        FROM rage_trade_arbitrum.ClearingHouse_evt_TokenPositionLiquidated
    ) as rage_trades
) as trades;"
1352411,Rage Trade Open Interest,,"[{""id"": 2306900, ""type"": ""counter"", ""name"": ""\ud83d\udd34 Short Open Interest"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""stringSuffix"": ""K"", ""stringDecimal"": 2, ""counterColName"": ""short_oi_format""}, ""created_at"": ""2022-10-05T03:30:21.71869+00:00"", ""__typename"": ""visualizations""}, {""id"": 2306901, ""type"": ""counter"", ""name"": ""\ud83d\udfe2 Long Open Interest "", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""stringSuffix"": ""K"", ""stringDecimal"": 2, ""counterColName"": ""long_oi_format""}, ""created_at"": ""2022-10-05T03:30:21.71869+00:00"", ""__typename"": ""visualizations""}, {""id"": 2306902, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-10-05T03:30:21.71869+00:00"", ""__typename"": ""visualizations""}, {""id"": 2306903, ""type"": ""chart"", ""name"": ""Longs vs Shorts"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack"", ""percentValues"": true}, ""reverseX"": false, ""columnMapping"": {"""": ""y"", ""day"": ""x"", ""time"": ""x"", ""week"": ""x"", ""long_oi"": ""y"", ""short_oi"": ""y"", ""total_volume"": ""y"", ""short_open_interest"": ""y""}, ""seriesOptions"": {""long_oi"": {""name"": ""LONG"", ""type"": ""column"", ""color"": ""#21eda8"", ""yAxis"": 0, ""zIndex"": 0}, ""short_oi"": {""name"": ""SHORT"", ""type"": ""column"", ""color"": ""#f70f0f"", ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-10-05T03:30:21.71869+00:00"", ""__typename"": ""visualizations""}, {""id"": 2306904, ""type"": ""chart"", ""name"": ""Rage Open Interest"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""tickFormat"": ""$0[].00a""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""numberFormat"": ""$0[].00a"", ""columnMapping"": {""week"": ""x"", ""long_oi"": ""y"", ""short_oi"": ""y""}, ""seriesOptions"": {""long_oi"": {""name"": ""LONG"", ""type"": ""column"", ""color"": ""#21eda8"", ""yAxis"": 0, ""zIndex"": 0}, ""short_oi"": {""name"": ""SHORT"", ""type"": ""column"", ""color"": ""#f70f0f"", ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-10-05T03:30:21.71869+00:00"", ""__typename"": ""visualizations""}]","SELECT date_trunc('day', main_time) as week, SUM(long_oi) as long_oi, SUM(short_oi) as short_oi,
SUM(long_oi)/1e3 as long_oi_format,
SUM(short_oi)/1e3 as short_oi_format
FROM (
    select main_time, o_i.pool_id, SUM(CASE when total_volume > 0 then total_volume * pricing.avg_price else 0 END) as long_oi, 
    SUM(CASE when total_volume < 0 then total_volume * pricing.avg_price else 0 END) * -1 as short_oi
    FROM (
        SELECT date_series.main_time, accountId, pool_id, SUM(total_volume) as total_volume
        FROM (
            select
            time,
            accountId,
            pool_id,
            SUM(volume) OVER (PARTITION BY accountId, pool_id ORDER BY time) as total_volume,
            lead(time, 1, now()) OVER (PARTITION BY accountId, pool_id ORDER BY time) AS next_day -- the day after a day with a transfer
        
            FROM (
                SELECT date_trunc('day', evt_block_time) as time, 
                accountId,
                (vTokenAmountOut/1e18) as volume,
                
                (vQuoteAmountOut/1e6) as usd_volume, -- Valued in USD, although includes excludes PnL
                
                poolId as pool_id
                FROM rage_trade_arbitrum.ClearingHouse_evt_TokenPositionChanged
            ) as trades
            -- GROUP BY 1, 2
            ORDER BY 1 DESC
        ) as open_interest inner join
        (
          SELECT explode(sequence(
                DATE'2022-07-01' - INTERVAL '7 days', 
                date_trunc('day', NOW()),
                INTERVAL '1 day')
            ) as main_time
        ) as date_series on open_interest.time <= date_series.main_time
        and date_series.main_time < open_interest.next_day
        GROUP BY 1, 2, 3
        ORDER BY 1 DESC
    ) as o_i JOIN (
        SELECT time,  pool_id, AVG(price) as avg_price
        FROM (
            SELECT date_trunc('day', evt_block_time) as time,  poolId as pool_id,
                ABS((vQuoteAmountOut/1e6)/(vTokenAmountOut/1e18)) as price
            FROM rage_trade_arbitrum.ClearingHouse_evt_TokenPositionChanged
        ) as position_pricing
        GROUP BY 1, 2
    ) as pricing on o_i.main_time = pricing.time and o_i.pool_id = pricing.pool_id
    GROUP BY 1, 2
    ORDER BY 1 DESC
) as token_open_interest
GROUP BY 1
ORDER BY 1 DESC"
1278348,MYC Market Cap and Circulating Supply,,"[{""id"": 2190562, ""type"": ""counter"", ""name"": ""$MYC Total Supply"", ""options"": {""rowNumber"": 1, ""counterColName"": ""total_supply""}, ""created_at"": ""2022-09-17T02:33:41.050162+00:00"", ""__typename"": ""visualizations""}, {""id"": 2190532, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-09-17T02:20:05.686844+00:00"", ""__typename"": ""visualizations""}, {""id"": 2190533, ""type"": ""counter"", ""name"": ""$MYC Circulating Supply"", ""options"": {""rowNumber"": 1, ""stringSuffix"": """", ""stringDecimal"": 0, ""counterColName"": ""cir_supply""}, ""created_at"": ""2022-09-17T02:20:05.686844+00:00"", ""__typename"": ""visualizations""}, {""id"": 2190534, ""type"": ""counter"", ""name"": ""$MYC Market Capitalisation \ud83d\udcb0"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""stringSuffix"": ""M"", ""stringDecimal"": 2, ""counterColName"": ""market_cap""}, ""created_at"": ""2022-09-17T02:20:05.686844+00:00"", ""__typename"": ""visualizations""}, {""id"": 2190561, ""type"": ""counter"", ""name"": ""$MYC Fully Diluted Value \ud83d\udcb0"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""stringSuffix"": ""M"", ""stringDecimal"": 2, ""counterColName"": ""fdv""}, ""created_at"": ""2022-09-17T02:33:08.738135+00:00"", ""__typename"": ""visualizations""}]","-- Thank you Ray Mogg https://twitter.com/ray_mogg for the changes here https://dune.com/queries/1497949 
With 
myc_price as (
    SELECT date_trunc('day', minute) as time, AVG(price) as avg_price
    FROM prices.usd
    WHERE symbol = 'MYC'
    group by 1
    ORDER BY 1 DESC
    limit 1
), mint_burnt_supply as 
(
    SELECT SUM(tokens) as tokens
    FROM (
        SELECT value/1e18  as tokens
        FROM erc20_ethereum.evt_Transfer
        where contract_address = '0x4b13006980acb09645131b91d259eaa111eaf5ba' 
        AND `from` = '0x0000000000000000000000000000000000000000'
        union all
        
        SELECT -value/1e18 as tokens
        FROM erc20_ethereum.evt_Transfer
        where contract_address = '0x4b13006980acb09645131b91d259eaa111eaf5ba' 
        AND `to` = '0x0000000000000000000000000000000000000000'
    ) as total_supply
), excluded_arbitrum_supply as (
    SELECT SUM(tokens) as tokens
    FROM (
        SELECT (value/1e18) as tokens
        FROM erc20_arbitrum.evt_Transfer
        where contract_address = LOWER('0xC74fE4c715510Ec2F8C61d70D397B32043F55Abe')
        AND `to` in (
            LOWER('0x9b225ff56c48671d4d04786de068ed8b88b672d6'), LOWER('0xa18c96947c651b038bc8ef80a43e32f74838bb42')
        )
    
        UNION ALL

        SELECT -(value/1e18) as tokens
        FROM erc20_arbitrum.evt_Transfer
        where contract_address = LOWER('0xC74fE4c715510Ec2F8C61d70D397B32043F55Abe')
        AND `from` in (
            LOWER('0x9b225ff56c48671d4d04786de068ed8b88b672d6'), LOWER('0xa18c96947c651b038bc8ef80a43e32f74838bb42')
        )
    ) AS arbitrum_excluded_coins
), excluded_mainnet_supply as (
    SELECT SUM(tokens) as tokens
    FROM (
        SELECT (value/1e18) as tokens
        FROM erc20_ethereum.evt_Transfer
        where contract_address = LOWER('0x4b13006980aCB09645131b91D259eaA111eaF5Ba')
        AND `from` in (
            LOWER('0xa3a7b6f88361f48403514059f1f16c8e78d60eec')
        )
        
        UNION ALL
        
        SELECT (value/1e18) as tokens
        FROM erc20_ethereum.evt_Transfer
        where contract_address = LOWER('0x4b13006980aCB09645131b91D259eaA111eaF5Ba')
        AND `to` in (
            LOWER('0xa3a7b6f88361f48403514059f1f16c8e78d60eec')
        )
    ) AS mainnet_excluded_coins
)



SELECT (cir_supply * myc_price.avg_price)/1e6  as market_cap, cir_supply, 10e8 as total_supply, (10e8 * myc_price.avg_price)/1e6 as fdv
FROM ( 
    SELECT SUM(tokens) as cir_supply
    FROM (
        select tokens  
        FROM mint_burnt_supply
        UNION ALL
        select -tokens
        FROM excluded_arbitrum_supply
        UNION ALL
        select -tokens
        FROM excluded_mainnet_supply
    ) as token_supply
    
) AS mcb_supply JOIN myc_price on 1=1;"
1278458,PERP Market Cap and Circulating Supply,,"[{""id"": 2190751, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-09-17T03:41:14.378329+00:00"", ""__typename"": ""visualizations""}, {""id"": 2190752, ""type"": ""counter"", ""name"": ""$PERP Circulating Supply"", ""options"": {""rowNumber"": 1, ""stringSuffix"": """", ""stringDecimal"": 0, ""counterColName"": ""cir_supply""}, ""created_at"": ""2022-09-17T03:41:14.378329+00:00"", ""__typename"": ""visualizations""}, {""id"": 2190755, ""type"": ""counter"", ""name"": ""$PERP Total Supply"", ""options"": {""rowNumber"": 1, ""counterColName"": ""total_supply""}, ""created_at"": ""2022-09-17T03:41:14.378329+00:00"", ""__typename"": ""visualizations""}, {""id"": 2190753, ""type"": ""counter"", ""name"": ""$PERP Market Capitalisation \ud83d\udcb0"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""stringSuffix"": ""M"", ""stringDecimal"": 2, ""counterColName"": ""market_cap""}, ""created_at"": ""2022-09-17T03:41:14.378329+00:00"", ""__typename"": ""visualizations""}, {""id"": 2190754, ""type"": ""counter"", ""name"": ""$PERP Fully Diluted Value \ud83d\udcb0"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""stringSuffix"": ""M"", ""stringDecimal"": 2, ""counterColName"": ""fdv""}, ""created_at"": ""2022-09-17T03:41:14.378329+00:00"", ""__typename"": ""visualizations""}]","With 
perp_price as (
    SELECT date_trunc('day', minute) as time, AVG(price) as avg_price
    FROM prices.usd
    WHERE contract_address = '0xbc396689893d065f41bc2c6ecbee5e0085233447'
    group by 1
    ORDER BY 1 DESC
    limit 1
), token_supply as 
(
    SELECT SUM(tokens) as tokens
    FROM (
        SELECT value/1e18  as tokens
        FROM erc20_ethereum.evt_Transfer
        where contract_address = '0xbc396689893d065f41bc2c6ecbee5e0085233447' 
        AND `from` = '0x0000000000000000000000000000000000000000'
        union all
        
        SELECT -value/1e18 as tokens
        FROM erc20_ethereum.evt_Transfer
        where contract_address = '0xbc396689893d065f41bc2c6ecbee5e0085233447' 
        AND `to` = '0x0000000000000000000000000000000000000000'
        

    ) as total_supply
    
    UNION ALL 
    
    SELECT -SUM(tokens) as tokens
    FROM (
        SELECT -value/1e18  as tokens
        FROM erc20_ethereum.evt_Transfer
        where contract_address = '0xbc396689893d065f41bc2c6ecbee5e0085233447' 
        AND `from` = '0xd374225abb84dca94e121f0b8a06b93e39ad7a99'
        union all
        
        SELECT value/1e18 as tokens
        FROM erc20_ethereum.evt_Transfer
        where contract_address = '0xbc396689893d065f41bc2c6ecbee5e0085233447' 
        AND `to` = '0xd374225abb84dca94e121f0b8a06b93e39ad7a99'
    ) as dao_treasury

    UNION ALL 
    
    SELECT -SUM(tokens) as tokens
    FROM (
        SELECT -value/1e18  as tokens
        FROM erc20_ethereum.evt_Transfer
        where contract_address = '0xbc396689893d065f41bc2c6ecbee5e0085233447' 
        AND `from` = '0xc49f76a596d6200e4f08f8931d15b69dd1f8033e'
        union all
        
        SELECT value/1e18 as tokens
        FROM erc20_ethereum.evt_Transfer
        where contract_address = '0xbc396689893d065f41bc2c6ecbee5e0085233447' 
        AND `to` = '0xc49f76a596d6200e4f08f8931d15b69dd1f8033e'
    ) as foundation
)


SELECT (cir_supply * perp_price.avg_price)/1e6  as market_cap, cir_supply, 15e7 as total_supply, (15e7 * perp_price.avg_price)/1e6 as fdv
FROM ( 
    select SUM(tokens) as cir_supply
    FROM token_supply
) AS mcb_supply JOIN perp_price on 1=1;"
1290415,Margin Trading GMX Open Interest (Arbitrum and Avalanche),,"[{""id"": 2212545, ""type"": ""chart"", ""name"": ""Open Interest"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""tickFormat"": ""$0[]a""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""numberFormat"": ""$0[].00a"", ""columnMapping"": {""time"": ""x"", ""total_size"": ""y"", ""position_side"": ""series""}, ""seriesOptions"": {""LONG"": {""type"": ""column"", ""color"": ""#21eda8"", ""yAxis"": 0, ""zIndex"": 0}, ""SHORT"": {""type"": ""column"", ""color"": ""#f70f0f"", ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-09-21T08:45:50.910081+00:00"", ""__typename"": ""visualizations""}, {""id"": 2211213, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-09-21T03:49:29.989917+00:00"", ""__typename"": ""visualizations""}, {""id"": 2211221, ""type"": ""counter"", ""name"": ""\ud83d\udfe2 Long Open Interest "", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""stringSuffix"": ""M"", ""stringDecimal"": 2, ""counterColName"": ""converted_size""}, ""created_at"": ""2022-09-21T03:49:29.989917+00:00"", ""__typename"": ""visualizations""}, {""id"": 2211215, ""type"": ""counter"", ""name"": ""\ud83d\udd34 Short Open Interest"", ""options"": {""rowNumber"": 2, ""stringPrefix"": ""$"", ""stringSuffix"": ""M"", ""stringDecimal"": 2, ""counterColName"": ""converted_size""}, ""created_at"": ""2022-09-21T03:49:29.989917+00:00"", ""__typename"": ""visualizations""}]","
select time, position_side, SUM(SUM(size)) OVER (PARTITION BY position_side ORDER BY time) as total_size,
SUM(SUM(size)/1e6) OVER (PARTITION BY position_side ORDER BY time) as converted_size
from (
    select date_trunc('day', evt_block_time) as time, sizeDelta/1e30 as size, if(`isLong`, 'LONG', 'SHORT') as position_side
    FROM gmx_arbitrum.Vault_evt_IncreasePosition
    UNION ALL
    select date_trunc('day', evt_block_time) as time, -size/1e30 as size, if(`isLong`, 'LONG', 'SHORT')  as position_side
    FROM gmx_arbitrum.Vault_evt_LiquidatePosition
    UNION ALL
    select date_trunc('day', evt_block_time) as time, -sizeDelta/1e30 as size, if(`isLong`, 'LONG', 'SHORT')  as position_side
    FROM gmx_arbitrum.Vault_evt_DecreasePosition
    UNION ALL
    select date_trunc('day', evt_block_time) as time,  -size/1e30 as size, if(`isLong`, 'LONG', 'SHORT')  as position_side
    FROM gmx_avalanche_c.Vault_evt_LiquidatePosition
    UNION ALL
    select date_trunc('day', evt_block_time) as time, sizeDelta/1e30 as size, if(`isLong`, 'LONG', 'SHORT')  as position_side
    FROM gmx_avalanche_c.Vault_evt_IncreasePosition
    UNION ALL
    select date_trunc('day', evt_block_time) as time, -sizeDelta/1e30 as size, if(`isLong`, 'LONG', 'SHORT')  as position_side
    FROM gmx_avalanche_c.Vault_evt_DecreasePosition
) as open_interest
GROUP BY time, 2
ORDER BY time DESC, 2"
1275891,Margin Trading Mycelium,,"[{""id"": 2186565, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-09-16T07:08:34.547098+00:00"", ""__typename"": ""visualizations""}, {""id"": 2186571, ""type"": ""counter"", ""name"": ""\ud83d\udcb5 1 Week Volume"", ""options"": {""rowNumber"": 1, ""counterColName"": ""weekly_volume""}, ""created_at"": ""2022-09-16T07:08:34.547098+00:00"", ""__typename"": ""visualizations""}, {""id"": 2186648, ""type"": ""counter"", ""name"": ""\ud83d\udcb8 1 Month Volume"", ""options"": {""rowNumber"": 1, ""counterColName"": ""monthly_volume""}, ""created_at"": ""2022-09-16T07:26:35.14863+00:00"", ""__typename"": ""visualizations""}, {""id"": 2186653, ""type"": ""counter"", ""name"": ""\ud83d\udc9a 24 Hour Traders"", ""options"": {""rowNumber"": 1, ""counterColName"": ""daily_traders""}, ""created_at"": ""2022-09-16T07:29:11.751918+00:00"", ""__typename"": ""visualizations""}, {""id"": 2210925, ""type"": ""counter"", ""name"": ""\ud83d\udc9a Weekly Traders"", ""options"": {""rowNumber"": 1, ""counterColName"": ""weekly_traders""}, ""created_at"": ""2022-09-21T03:09:36.240861+00:00"", ""__typename"": ""visualizations""}, {""id"": 2186569, ""type"": ""counter"", ""name"": ""\ud83d\udcb0 Total Margin Volume"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""counterColName"": ""total_notional_value""}, ""created_at"": ""2022-09-16T07:08:34.547098+00:00"", ""__typename"": ""visualizations""}, {""id"": 2186649, ""type"": ""counter"", ""name"": ""\ud83d\udcbc 24 Hour AVG Trade Size"", ""options"": {""rowNumber"": 1, ""counterColName"": ""avg_trade_volume""}, ""created_at"": ""2022-09-16T07:26:37.079436+00:00"", ""__typename"": ""visualizations""}, {""id"": 2186650, ""type"": ""counter"", ""name"": ""\ud83e\udd16 Total Unique Traders"", ""options"": {""rowNumber"": 1, ""counterColName"": ""total_traders""}, ""created_at"": ""2022-09-16T07:26:39.433019+00:00"", ""__typename"": ""visualizations""}, {""id"": 2186570, ""type"": ""counter"", ""name"": ""\ud83d\udc5b 24 Hour Volume"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""counterColName"": ""daily_volume""}, ""created_at"": ""2022-09-16T07:08:34.547098+00:00"", ""__typename"": ""visualizations""}, {""id"": 2398353, ""type"": ""counter"", ""name"": ""\ud83d\udcb3 Total Weekly Fees"", ""options"": {""rowNumber"": 1, ""counterColName"": ""weekly_fees""}, ""created_at"": ""2022-10-16T12:18:13.02903+00:00"", ""__typename"": ""visualizations""}, {""id"": 2398354, ""type"": ""counter"", ""name"": ""\ud83d\udcb3 Total Daily Fees"", ""options"": {""rowNumber"": 1, ""counterColName"": ""daily_fees""}, ""created_at"": ""2022-10-16T12:18:16.652471+00:00"", ""__typename"": ""visualizations""}, {""id"": 2398355, ""type"": ""counter"", ""name"": ""\ud83d\udcb3 Total Margin Fees"", ""options"": {""rowNumber"": 1, ""counterColName"": ""total_fees""}, ""created_at"": ""2022-10-16T12:18:18.562276+00:00"", ""__typename"": ""visualizations""}]","-- From @Saulius Margin Trading https://dune.com/queries/1189613
SELECT CONCAT('$', 
        ROUND(
            (CASE 
            WHEN total_notional_value/1e3 < 1 THEN total_notional_value
            WHEN total_notional_value/1e6 < 1 THEN total_notional_value/1e3
            WHEN total_notional_value/1e9 < 1 THEN total_notional_value/1e6
            WHEN total_notional_value/1e12 < 1 THEN total_notional_value/1e9
            WHEN total_notional_value/1e15 < 1 THEN total_notional_value/1e12
            END)
        , 2),
        (
            CASE 
            WHEN total_notional_value/1e3 < 1 THEN ''
            WHEN total_notional_value/1e6 < 1 THEN 'K'
            WHEN total_notional_value/1e9 < 1 THEN 'M'
            WHEN total_notional_value/1e12 < 1 THEN 'B'
            WHEN total_notional_value/1e15 < 1 THEN 'T'
            END)
        ) as total_notional_value, 
        CONCAT('$', 
        ROUND(
            (CASE 
            WHEN total_fees/1e3 < 1 THEN total_fees
            WHEN total_fees/1e6 < 1 THEN total_fees/1e3
            WHEN total_fees/1e9 < 1 THEN total_fees/1e6
            WHEN total_fees/1e12 < 1 THEN total_fees/1e9
            WHEN total_fees/1e15 < 1 THEN total_fees/1e12
            END)
        , 2),
        (
            CASE 
            WHEN total_fees/1e3 < 1 THEN ''
            WHEN total_fees/1e6 < 1 THEN 'K'
            WHEN total_fees/1e9 < 1 THEN 'M'
            WHEN total_fees/1e12 < 1 THEN 'B'
            WHEN total_fees/1e15 < 1 THEN 'T'
            END)
        ) as total_fees,
        CONCAT('$', 
        ROUND(
            (CASE 
            WHEN daily_fees/1e3 < 1 THEN daily_fees
            WHEN daily_fees/1e6 < 1 THEN daily_fees/1e3
            WHEN daily_fees/1e9 < 1 THEN daily_fees/1e6
            WHEN daily_fees/1e12 < 1 THEN daily_fees/1e9
            WHEN daily_fees/1e15 < 1 THEN daily_fees/1e12
            END)
        , 2),
        (
            CASE 
            WHEN daily_fees/1e3 < 1 THEN ''
            WHEN daily_fees/1e6 < 1 THEN 'K'
            WHEN daily_fees/1e9 < 1 THEN 'M'
            WHEN daily_fees/1e12 < 1 THEN 'B'
            WHEN daily_fees/1e15 < 1 THEN 'T'
            END)
        ) as daily_fees,
        CONCAT('$', 
        ROUND(
            (CASE 
            WHEN weekly_fees/1e3 < 1 THEN weekly_fees
            WHEN weekly_fees/1e6 < 1 THEN weekly_fees/1e3
            WHEN weekly_fees/1e9 < 1 THEN weekly_fees/1e6
            WHEN weekly_fees/1e12 < 1 THEN weekly_fees/1e9
            WHEN weekly_fees/1e15 < 1 THEN weekly_fees/1e12
            END)
        , 2),
        (
            CASE 
            WHEN weekly_fees/1e3 < 1 THEN ''
            WHEN weekly_fees/1e6 < 1 THEN 'K'
            WHEN weekly_fees/1e9 < 1 THEN 'M'
            WHEN weekly_fees/1e12 < 1 THEN 'B'
            WHEN weekly_fees/1e15 < 1 THEN 'T'
            END)
        ) as weekly_fees,
        CONCAT('$', 
        ROUND(
            (CASE 
            WHEN daily_volume/1e3 < 1 THEN daily_volume
            WHEN daily_volume/1e6 < 1 THEN daily_volume/1e3
            WHEN daily_volume/1e9 < 1 THEN daily_volume/1e6
            WHEN daily_volume/1e12 < 1 THEN daily_volume/1e9
            WHEN daily_volume/1e15 < 1 THEN daily_volume/1e12
            END)
        , 2),
        (
            CASE 
            WHEN daily_volume/1e3 < 1 THEN ''
            WHEN daily_volume/1e6 < 1 THEN 'K'
            WHEN daily_volume/1e9 < 1 THEN 'M'
            WHEN daily_volume/1e12 < 1 THEN 'B'
            WHEN daily_volume/1e15 < 1 THEN 'T'
            END)
        ) as daily_volume, 
        CONCAT('$', 
        ROUND(
            (CASE 
            WHEN weekly_volume/1e3 < 1 THEN weekly_volume
            WHEN weekly_volume/1e6 < 1 THEN weekly_volume/1e3
            WHEN weekly_volume/1e9 < 1 THEN weekly_volume/1e6
            WHEN weekly_volume/1e12 < 1 THEN weekly_volume/1e9
            WHEN weekly_volume/1e15 < 1 THEN weekly_volume/1e12
            END)
        , 2),
        (
            CASE 
            WHEN weekly_volume/1e3 < 1 THEN ''
            WHEN weekly_volume/1e6 < 1 THEN 'K'
            WHEN weekly_volume/1e9 < 1 THEN 'M'
            WHEN weekly_volume/1e12 < 1 THEN 'B'
            WHEN weekly_volume/1e15 < 1 THEN 'T'
            END)
        ) as weekly_volume,
        CONCAT('$', 
        ROUND(
            (CASE 
            WHEN monthly_volume/1e3 < 1 THEN monthly_volume
            WHEN monthly_volume/1e6 < 1 THEN monthly_volume/1e3
            WHEN monthly_volume/1e9 < 1 THEN monthly_volume/1e6
            WHEN monthly_volume/1e12 < 1 THEN monthly_volume/1e9
            WHEN monthly_volume/1e15 < 1 THEN monthly_volume/1e12
            END)
        , 2),
        (
            CASE 
            WHEN monthly_volume/1e3 < 1 THEN ''
            WHEN monthly_volume/1e6 < 1 THEN 'K'
            WHEN monthly_volume/1e9 < 1 THEN 'M'
            WHEN monthly_volume/1e12 < 1 THEN 'B'
            WHEN monthly_volume/1e15 < 1 THEN 'T'
            END)
        ) as monthly_volume, 
        CONCAT('$', 
        ROUND(
            (CASE 
            WHEN avg_trade_volume/1e3 < 1 THEN avg_trade_volume
            WHEN avg_trade_volume/1e6 < 1 THEN avg_trade_volume/1e3
            WHEN avg_trade_volume/1e9 < 1 THEN avg_trade_volume/1e6
            WHEN avg_trade_volume/1e12 < 1 THEN avg_trade_volume/1e9
            WHEN avg_trade_volume/1e15 < 1 THEN avg_trade_volume/1e12
            END)
        , 2),
        (
            CASE 
            WHEN avg_trade_volume/1e3 < 1 THEN ''
            WHEN avg_trade_volume/1e6 < 1 THEN 'K'
            WHEN avg_trade_volume/1e9 < 1 THEN 'M'
            WHEN avg_trade_volume/1e12 < 1 THEN 'B'
            WHEN avg_trade_volume/1e15 < 1 THEN 'T'
            END)
        ) as avg_trade_volume,
        total_traders as total_traders,
        daily_traders as daily_traders,
        weekly_traders as weekly_traders
FROM 
(
    SELECT SUM(volume) as total_notional_value, 
        COUNT(distinct trader) as total_traders,
        SUM(fees) as total_fees,
        SUM(fees) filter (WHERE time >= NOW() - INTERVAL '1 DAY') as daily_fees,
        SUM(fees) filter (WHERE time >= NOW() - INTERVAL '1 WEEK') as weekly_fees,
        COUNT(distinct trader)  filter (WHERE time >= NOW() - INTERVAL '1 DAY') as daily_traders,
        COUNT(distinct trader)  filter (WHERE time >= NOW() - INTERVAL '1 WEEK') as weekly_traders,
        SUM(volume) filter (WHERE time >= NOW() - INTERVAL '1 DAY') as daily_volume,
        SUM(volume) filter (WHERE time >= NOW() - INTERVAL '1 WEEK') as weekly_volume,
        SUM(volume) filter (WHERE time >= NOW() - INTERVAL '1 MONTH')  as monthly_volume,
        AVG(volume) filter (WHERE time >= NOW() - INTERVAL '1 DAY') as avg_trade_volume
        
    FROM (
        SELECT 
              date_trunc('day', block_time) as time,    
              (substring(data, 24+3+64*1, 40))  as trader,
              tx_hash,
              (IF(bytea2numeric_v2(substring(data, 3+64*6, 64))=1, 1, 0)) as longs,
              (IF(bytea2numeric_v2(substring(data, 3+64*6, 64))=1, 0, 1)) as shorts,
            --   SUM(IF(bytea2numeric_v2(substring(data, 3+64*6, 64))=1, (bytea2numeric_v2(substring(data, 3+64*5, 64)))/1e30, 0)) as longs_volume,
            --   SUM(IF(bytea2numeric_v2(substring(data, 3+64*6, 64))=1, 0, (bytea2numeric_v2(substring(data, 3+64*5, 64)))/1e30)) as shorts_volume,
              (bytea2numeric_v2(substring(data, 3+64*5, 64)))/1e30  as volume,
              (bytea2numeric_v2(substring(data, 3+64*8, 64)))/1e30  as fees
              
            FROM arbitrum.logs
            WHERE 
              (contract_address = '0xdfba8ad57d2c62f61f0a60b2c508bcdeb182f855')
              AND
              (topic1 = '0x2fe68525253654c21998f35787a8d0f361905ef647c854092430ab65f2f15022'
              OR topic1 = '0x93d75d64d1f84fc6f430a64fc578bdd4c1e090e90ea2d51773e626d19de56d30')
        ORDER BY 1
    ) as mycelium_trades
) as trades"
1275946,Margin Trading Metavault Trade,,"[{""id"": 2186663, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-09-16T07:31:36.73174+00:00"", ""__typename"": ""visualizations""}, {""id"": 2186665, ""type"": ""counter"", ""name"": ""\ud83d\udcb8 1 Month Volume"", ""options"": {""rowNumber"": 1, ""counterColName"": ""monthly_volume""}, ""created_at"": ""2022-09-16T07:31:36.73174+00:00"", ""__typename"": ""visualizations""}, {""id"": 2186660, ""type"": ""counter"", ""name"": ""\ud83d\udcb0 Total Margin Volume"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""counterColName"": ""total_notional_value""}, ""created_at"": ""2022-09-16T07:31:36.73174+00:00"", ""__typename"": ""visualizations""}, {""id"": 2186661, ""type"": ""counter"", ""name"": ""\ud83d\udc5b 24 Hour Volume"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""counterColName"": ""daily_volume""}, ""created_at"": ""2022-09-16T07:31:36.73174+00:00"", ""__typename"": ""visualizations""}, {""id"": 2398380, ""type"": ""counter"", ""name"": ""\ud83d\udcb3 Total Daily Fees"", ""options"": {""rowNumber"": 1, ""counterColName"": ""daily_fees""}, ""created_at"": ""2022-10-16T12:26:53.623712+00:00"", ""__typename"": ""visualizations""}, {""id"": 2398379, ""type"": ""counter"", ""name"": ""\ud83d\udcb3 Total Margin Fees"", ""options"": {""rowNumber"": 1, ""counterColName"": ""total_fees""}, ""created_at"": ""2022-10-16T12:26:33.588428+00:00"", ""__typename"": ""visualizations""}, {""id"": 2398382, ""type"": ""counter"", ""name"": ""\ud83d\udcb3 Total Weekly Fees"", ""options"": {""rowNumber"": 1, ""counterColName"": ""weekly_fees""}, ""created_at"": ""2022-10-16T12:27:02.678566+00:00"", ""__typename"": ""visualizations""}, {""id"": 2186666, ""type"": ""counter"", ""name"": ""\ud83e\udde1 24 Hour Traders"", ""options"": {""rowNumber"": 1, ""counterColName"": ""daily_traders""}, ""created_at"": ""2022-09-16T07:31:36.73174+00:00"", ""__typename"": ""visualizations""}, {""id"": 2186667, ""type"": ""counter"", ""name"": ""\ud83e\udd16 Total Unique Traders"", ""options"": {""rowNumber"": 1, ""counterColName"": ""total_traders""}, ""created_at"": ""2022-09-16T07:31:36.73174+00:00"", ""__typename"": ""visualizations""}, {""id"": 2186662, ""type"": ""counter"", ""name"": ""\ud83d\udcb5 1 Week Volume"", ""options"": {""rowNumber"": 1, ""counterColName"": ""weekly_volume""}, ""created_at"": ""2022-09-16T07:31:36.73174+00:00"", ""__typename"": ""visualizations""}, {""id"": 2186664, ""type"": ""counter"", ""name"": ""\ud83d\udcbc 24 Hour AVG Trade Size"", ""options"": {""rowNumber"": 1, ""counterColName"": ""avg_trade_volume""}, ""created_at"": ""2022-09-16T07:31:36.73174+00:00"", ""__typename"": ""visualizations""}, {""id"": 2210902, ""type"": ""counter"", ""name"": ""\ud83e\udde1 Weekly Traders"", ""options"": {""rowNumber"": 1, ""counterColName"": ""weekly_traders""}, ""created_at"": ""2022-09-21T03:05:24.347318+00:00"", ""__typename"": ""visualizations""}]","SELECT CONCAT('$', 
        ROUND(
            (CASE 
            WHEN total_notional_value/1e3 < 1 THEN total_notional_value
            WHEN total_notional_value/1e6 < 1 THEN total_notional_value/1e3
            WHEN total_notional_value/1e9 < 1 THEN total_notional_value/1e6
            WHEN total_notional_value/1e12 < 1 THEN total_notional_value/1e9
            WHEN total_notional_value/1e15 < 1 THEN total_notional_value/1e12
            END)
        , 2),
        (
            CASE 
            WHEN total_notional_value/1e3 < 1 THEN ''
            WHEN total_notional_value/1e6 < 1 THEN 'K'
            WHEN total_notional_value/1e9 < 1 THEN 'M'
            WHEN total_notional_value/1e12 < 1 THEN 'B'
            WHEN total_notional_value/1e15 < 1 THEN 'T'
            END)
        ) as total_notional_value, 
        CONCAT('$', 
        ROUND(
            (CASE 
            WHEN daily_volume/1e3 < 1 THEN daily_volume
            WHEN daily_volume/1e6 < 1 THEN daily_volume/1e3
            WHEN daily_volume/1e9 < 1 THEN daily_volume/1e6
            WHEN daily_volume/1e12 < 1 THEN daily_volume/1e9
            WHEN daily_volume/1e15 < 1 THEN daily_volume/1e12
            END)
        , 2),
        (
            CASE 
            WHEN daily_volume/1e3 < 1 THEN ''
            WHEN daily_volume/1e6 < 1 THEN 'K'
            WHEN daily_volume/1e9 < 1 THEN 'M'
            WHEN daily_volume/1e12 < 1 THEN 'B'
            WHEN daily_volume/1e15 < 1 THEN 'T'
            END)
        ) as daily_volume, 
        CONCAT('$', 
        ROUND(
            (CASE 
            WHEN total_fees/1e3 < 1 THEN total_fees
            WHEN total_fees/1e6 < 1 THEN total_fees/1e3
            WHEN total_fees/1e9 < 1 THEN total_fees/1e6
            WHEN total_fees/1e12 < 1 THEN total_fees/1e9
            WHEN total_fees/1e15 < 1 THEN total_fees/1e12
            END)
        , 2),
        (
            CASE 
            WHEN total_fees/1e3 < 1 THEN ''
            WHEN total_fees/1e6 < 1 THEN 'K'
            WHEN total_fees/1e9 < 1 THEN 'M'
            WHEN total_fees/1e12 < 1 THEN 'B'
            WHEN total_fees/1e15 < 1 THEN 'T'
            END)
        ) as total_fees,
        CONCAT('$', 
        ROUND(
            (CASE 
            WHEN daily_fees/1e3 < 1 THEN daily_fees
            WHEN daily_fees/1e6 < 1 THEN daily_fees/1e3
            WHEN daily_fees/1e9 < 1 THEN daily_fees/1e6
            WHEN daily_fees/1e12 < 1 THEN daily_fees/1e9
            WHEN daily_fees/1e15 < 1 THEN daily_fees/1e12
            END)
        , 2),
        (
            CASE 
            WHEN daily_fees/1e3 < 1 THEN ''
            WHEN daily_fees/1e6 < 1 THEN 'K'
            WHEN daily_fees/1e9 < 1 THEN 'M'
            WHEN daily_fees/1e12 < 1 THEN 'B'
            WHEN daily_fees/1e15 < 1 THEN 'T'
            END)
        ) as daily_fees,
        CONCAT('$', 
        ROUND(
            (CASE 
            WHEN weekly_fees/1e3 < 1 THEN weekly_fees
            WHEN weekly_fees/1e6 < 1 THEN weekly_fees/1e3
            WHEN weekly_fees/1e9 < 1 THEN weekly_fees/1e6
            WHEN weekly_fees/1e12 < 1 THEN weekly_fees/1e9
            WHEN weekly_fees/1e15 < 1 THEN weekly_fees/1e12
            END)
        , 2),
        (
            CASE 
            WHEN weekly_fees/1e3 < 1 THEN ''
            WHEN weekly_fees/1e6 < 1 THEN 'K'
            WHEN weekly_fees/1e9 < 1 THEN 'M'
            WHEN weekly_fees/1e12 < 1 THEN 'B'
            WHEN weekly_fees/1e15 < 1 THEN 'T'
            END)
        ) as weekly_fees,
        
        CONCAT('$', 
        ROUND(
            (CASE 
            WHEN weekly_volume/1e3 < 1 THEN weekly_volume
            WHEN weekly_volume/1e6 < 1 THEN weekly_volume/1e3
            WHEN weekly_volume/1e9 < 1 THEN weekly_volume/1e6
            WHEN weekly_volume/1e12 < 1 THEN weekly_volume/1e9
            WHEN weekly_volume/1e15 < 1 THEN weekly_volume/1e12
            END)
        , 2),
        (
            CASE 
            WHEN weekly_volume/1e3 < 1 THEN ''
            WHEN weekly_volume/1e6 < 1 THEN 'K'
            WHEN weekly_volume/1e9 < 1 THEN 'M'
            WHEN weekly_volume/1e12 < 1 THEN 'B'
            WHEN weekly_volume/1e15 < 1 THEN 'T'
            END)
        ) as weekly_volume,
        CONCAT('$', 
        ROUND(
            (CASE 
            WHEN monthly_volume/1e3 < 1 THEN monthly_volume
            WHEN monthly_volume/1e6 < 1 THEN monthly_volume/1e3
            WHEN monthly_volume/1e9 < 1 THEN monthly_volume/1e6
            WHEN monthly_volume/1e12 < 1 THEN monthly_volume/1e9
            WHEN monthly_volume/1e15 < 1 THEN monthly_volume/1e12
            END)
        , 2),
        (
            CASE 
            WHEN monthly_volume/1e3 < 1 THEN ''
            WHEN monthly_volume/1e6 < 1 THEN 'K'
            WHEN monthly_volume/1e9 < 1 THEN 'M'
            WHEN monthly_volume/1e12 < 1 THEN 'B'
            WHEN monthly_volume/1e15 < 1 THEN 'T'
            END)
        ) as monthly_volume, 
        CONCAT('$', 
        ROUND(
            (CASE 
            WHEN avg_trade_volume/1e3 < 1 THEN avg_trade_volume
            WHEN avg_trade_volume/1e6 < 1 THEN avg_trade_volume/1e3
            WHEN avg_trade_volume/1e9 < 1 THEN avg_trade_volume/1e6
            WHEN avg_trade_volume/1e12 < 1 THEN avg_trade_volume/1e9
            WHEN avg_trade_volume/1e15 < 1 THEN avg_trade_volume/1e12
            END)
        , 2),
        (
            CASE 
            WHEN avg_trade_volume/1e3 < 1 THEN ''
            WHEN avg_trade_volume/1e6 < 1 THEN 'K'
            WHEN avg_trade_volume/1e9 < 1 THEN 'M'
            WHEN avg_trade_volume/1e12 < 1 THEN 'B'
            WHEN avg_trade_volume/1e15 < 1 THEN 'T'
            END)
        ) as avg_trade_volume,
        (total_traders) as total_traders,
        (daily_traders) as daily_traders,
        (weekly_traders) as weekly_traders

FROM 
(
    SELECT SUM(volume) as total_notional_value, SUM(fees) as total_fees,
        SUM(fees) FILTER (where time >= NOW() - INTERVAL '1 DAY') as daily_fees,
        SUM(fees) FILTER (where time >= NOW() - INTERVAL '1 WEEK') as weekly_fees,
        COUNT(distinct trader) as total_traders,
        COUNT(distinct trader)  filter (WHERE time >= NOW() - INTERVAL '1 DAY') as daily_traders,
        COUNT(distinct trader)  filter (WHERE time >= NOW() - INTERVAL '1 WEEK') as weekly_traders,

        SUM(volume) filter (WHERE time >= NOW() - INTERVAL '1 DAY') as daily_volume,
        SUM(volume) filter (WHERE time >= NOW() - INTERVAL '1 WEEK') as weekly_volume,
        SUM(volume) filter (WHERE time >= NOW() - INTERVAL '1 MONTH')  as monthly_volume,
        AVG(volume) filter (WHERE time >= NOW() - INTERVAL '1 DAY') as avg_trade_volume
        
    FROM (
        SELECT 
              date_trunc('day', ""evt_block_time"") as time,    
              ""account""  as trader,
              ""sizeDelta""/1e30  as volume
              ,
              ""fee""/1e30  as fees
              
            FROM metavault_trade.""Vault_evt_IncreasePosition""
        UNION ALL
        SELECT 
              date_trunc('day', ""evt_block_time"") as time,    
              ""account""  as trader,
              ""sizeDelta""/1e30  as volume
              ,
              ""fee""/1e30  as fees
        FROM metavault_trade.""Vault_evt_DecreasePosition""
        UNION ALL
        SELECT 
              date_trunc('day', ""evt_block_time"") as time,    
              ""account""  as trader,
              ""size""/1e30  as volume,
              0 as fees
        FROM metavault_trade.""Vault_evt_LiquidatePosition""
    ) as metavault_trades
) as trades"
1290341,Margin Trading Kwenta,,"[{""id"": 2211089, ""type"": ""counter"", ""name"": ""\ud83d\udcbc 24 Hour AVG Trade Size"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""stringDecimal"": 0, ""counterColName"": ""avg_trade_volume""}, ""created_at"": ""2022-09-21T03:29:19.794531+00:00"", ""__typename"": ""visualizations""}, {""id"": 2212140, ""type"": ""counter"", ""name"": ""\ud83e\udd16 Total Unique Traders"", ""options"": {""rowNumber"": 1, ""counterColName"": ""total_traders""}, ""created_at"": ""2022-09-21T07:30:05.612769+00:00"", ""__typename"": ""visualizations""}, {""id"": 2212142, ""type"": ""counter"", ""name"": ""\ud83d\udc9b 24 Hour Traders"", ""options"": {""rowNumber"": 1, ""counterColName"": ""daily_traders""}, ""created_at"": ""2022-09-21T07:30:08.268482+00:00"", ""__typename"": ""visualizations""}, {""id"": 2211093, ""type"": ""counter"", ""name"": ""\ud83d\udc5b 24 Hour Volume"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""stringSuffix"": """", ""stringDecimal"": 0, ""counterColName"": ""daily_volume""}, ""created_at"": ""2022-09-21T03:29:19.794531+00:00"", ""__typename"": ""visualizations""}, {""id"": 2396823, ""type"": ""counter"", ""name"": ""\ud83d\udcb3 Total Margin Fees"", ""options"": {""rowNumber"": 1, ""counterColName"": ""total_fees""}, ""created_at"": ""2022-10-16T05:52:49.574328+00:00"", ""__typename"": ""visualizations""}, {""id"": 2211088, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-09-21T03:29:19.794531+00:00"", ""__typename"": ""visualizations""}, {""id"": 2211092, ""type"": ""counter"", ""name"": ""\ud83d\udcb0 Total Margin Volume"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""stringSuffix"": """", ""stringDecimal"": 0, ""counterColName"": ""total_notional_value""}, ""created_at"": ""2022-09-21T03:29:19.794531+00:00"", ""__typename"": ""visualizations""}, {""id"": 2211094, ""type"": ""counter"", ""name"": ""\ud83d\udcb5 1 Week Volume"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""stringSuffix"": """", ""stringDecimal"": 0, ""counterColName"": ""weekly_volume""}, ""created_at"": ""2022-09-21T03:29:19.794531+00:00"", ""__typename"": ""visualizations""}, {""id"": 2211095, ""type"": ""counter"", ""name"": ""\ud83d\udcb8 1 Month Volume"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""stringSuffix"": """", ""stringDecimal"": 0, ""counterColName"": ""monthly_volume""}, ""created_at"": ""2022-09-21T03:29:19.794531+00:00"", ""__typename"": ""visualizations""}, {""id"": 2212147, ""type"": ""counter"", ""name"": ""\ud83d\udc9b Weekly Traders"", ""options"": {""rowNumber"": 1, ""counterColName"": ""weekly_traders""}, ""created_at"": ""2022-09-21T07:30:32.904301+00:00"", ""__typename"": ""visualizations""}, {""id"": 2396829, ""type"": ""counter"", ""name"": ""\ud83d\udcb3 Weekly Fees"", ""options"": {""rowNumber"": 1, ""counterColName"": ""weekly_fees""}, ""created_at"": ""2022-10-16T05:53:27.062591+00:00"", ""__typename"": ""visualizations""}, {""id"": 2396831, ""type"": ""counter"", ""name"": ""\ud83d\udcb3 Daily Fees"", ""options"": {""rowNumber"": 1, ""counterColName"": ""daily_fees""}, ""created_at"": ""2022-10-16T05:54:23.023683+00:00"", ""__typename"": ""visualizations""}]","-- Credits to @Msilb7: https://dune.com/queries/474394/898543
CREATE OR REPLACE FUNCTION pg_temp.format_number(d numeric) RETURNS text AS $$
DECLARE
    result  text;
BEGIN
    IF d/1e3 < 1 THEN 
        EXECUTE 'SELECT CONCAT(''$'', ROUND(''' || d || ''', 2))  ' into result;
        RETURN result;
    ELSIF d / 1e6 < 1 THEN
        EXECUTE 'SELECT CONCAT(''$'', ROUND(''' || d/1e3 || ''', 2), ''K'')  ' into result;
        RETURN result;
    ELSIF d / 1e9 < 1 THEN
        EXECUTE 'SELECT CONCAT(''$'', ROUND(''' || d/1e6 || ''', 2), ''M'')  ' into result;
        RETURN result;
    ELSIF d / 1e12 < 1 THEN
        EXECUTE 'SELECT CONCAT(''$'', ROUND(''' || d/1e9 || ''', 2), ''B'')  ' into result;
        RETURN result;
    ELSIF d / 1e15 < 1 THEN
        EXECUTE 'SELECT CONCAT(''$'', ROUND(''' || d/1e12 || ''', 2), ''T'')  ' into result;
        RETURN result;
    END IF;
    RETURN '';
END;
$$ LANGUAGE plpgsql IMMUTABLE STRICT;


SELECT pg_temp.format_number(total_notional_value) as total_notional_value, 
        pg_temp.format_number(total_fees) as total_fees,
        pg_temp.format_number(daily_volume) as daily_volume, 
        pg_temp.format_number(weekly_volume) as weekly_volume,
        pg_temp.format_number(monthly_volume) as monthly_volume, 
        pg_temp.format_number(avg_trade_volume) as avg_trade_volume,
        total_traders as total_traders,
        daily_traders as daily_traders,
        weekly_traders as weekly_traders,
        pg_temp.format_number(daily_fees) as daily_fees,
        pg_temp.format_number(weekly_fees) as weekly_fees
        
        
FROM (
    select SUM(volume) as total_notional_value,
    SUM(fees) as total_fees,
    SUM(fees) FILTER (WHERE block_time >= NOW() - INTERVAL '1 Day') as daily_fees,
    SUM(fees) FILTER (WHERE block_time >= NOW() - INTERVAL '1 WEEK') as weekly_fees,
    
    COUNT(DISTINCT trader) as total_traders,
    COUNT(DISTINCT trader)  filter (WHERE block_time >= NOW() - INTERVAL '1 DAY') as daily_traders,
    COUNT(DISTINCT trader)  filter (WHERE block_time >= NOW() - INTERVAL '1 WEEK') as weekly_traders,

    SUM(volume) filter (WHERE block_time >= NOW() - INTERVAL '1 DAY') as daily_volume,
    SUM(volume) filter (WHERE block_time >= NOW() - INTERVAL '1 WEEK') as weekly_volume,
    SUM(volume) filter (WHERE block_time >= NOW() - INTERVAL '1 MONTH')  as monthly_volume,
    AVG(volume) filter (WHERE block_time >= NOW() - INTERVAL '1 DAY') as avg_trade_volume
    from (

        SELECT evt_block_time as block_time, 
        account as trader,
        (""lastPrice""/1e18) * ABS(""tradeSize""/1e18) as volume,
        contract_address,
        fee/1e18 as fees
        FROM synthetix.""FuturesMarket_evt_PositionModified""
    ) as kwenta_trades
) as trades"
1283215,Cap Finance Open Interest ,,"[{""id"": 2204787, ""type"": ""chart"", ""name"": ""LONGs vs SHORTs"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack"", ""percentValues"": true}, ""reverseX"": false, ""columnMapping"": {""time"": ""x"", ""total_size"": ""y"", ""position_side"": ""series""}, ""seriesOptions"": {""LONG"": {""type"": ""column"", ""color"": ""#21eda8"", ""yAxis"": 0, ""zIndex"": 0}, ""SHORT"": {""type"": ""column"", ""color"": ""#f70f0f"", ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-09-20T05:03:46.944407+00:00"", ""__typename"": ""visualizations""}, {""id"": 2198925, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-09-19T08:29:37.137259+00:00"", ""__typename"": ""visualizations""}, {""id"": 2198926, ""type"": ""counter"", ""name"": ""\ud83d\udfe2 Long Open Interest "", ""options"": {""rowNumber"": 1, ""counterLabel"": """", ""stringPrefix"": ""$"", ""stringSuffix"": ""M "", ""stringDecimal"": 2, ""counterColName"": ""converted_size""}, ""created_at"": ""2022-09-19T08:29:37.137259+00:00"", ""__typename"": ""visualizations""}, {""id"": 2198927, ""type"": ""counter"", ""name"": ""\ud83d\udd34 Short Open Interest"", ""options"": {""rowNumber"": 2, ""counterLabel"": """", ""stringPrefix"": ""$"", ""stringSuffix"": ""M"", ""stringDecimal"": 2, ""counterColName"": ""converted_size""}, ""created_at"": ""2022-09-19T08:29:37.137259+00:00"", ""__typename"": ""visualizations""}, {""id"": 2198928, ""type"": ""chart"", ""name"": ""Open Interest"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""tickFormat"": ""$0[].00a""}, {""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""numberFormat"": ""$0[].00a"", ""columnMapping"": {"""": ""y"", ""time"": ""x"", ""long_oi"": ""y"", ""short_oi"": ""y"", ""main_time"": ""x"", ""uni_total"": ""y"", ""link_total"": ""y"", ""total_size"": ""y"", ""wbtc_total"": ""y"", ""weth_total"": ""y"", ""position_side"": ""series""}, ""seriesOptions"": {""LONG"": {""type"": ""column"", ""color"": ""#21eda8"", ""yAxis"": 0, ""zIndex"": 0}, ""SHORT"": {""type"": ""column"", ""color"": ""#f70f0f"", ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-09-19T08:29:37.137259+00:00"", ""__typename"": ""visualizations""}]","        -- select *
        -- FROM cap_arbitrum.Trading_evt_PositionUpdated as u JOIN
        -- cap_arbitrum.Trading_evt_ClosePosition as c on u.evt_tx_hash = c.evt_tx_hash and u.size = c.size
        -- SELECT evt_block_time, `key`, size - LAG(size, 1, 0) OVER (order by evt_block_time) as size FROM
        -- -- cap_arbitrum.Trading_evt_NewOrder
        -- cap_arbitrum.Trading_evt_PositionUpdated as pos_changed
        -- -- JOIN (
        -- --     SELECT 
        -- --     FROM cap_arbitrum.Trading_evt_PositionUpdated
            
        
        -- -- )
        -- where  pos_changed.user = '0x6e5c169ad8106f19889151ed22a6e532aba8c1a7'
        -- -- GROUP BY 1, 2
        -- LIMIT 1000;
-- 0x4554482d55534400000000000000000000000000000000000000000000000000

-- - eth

-- 0x4254432d55534400000000000000000000000000000000000000000000000000

-- - btc
WITH eth_price as (
    SELECT date_trunc('day', minute) as time, AVG(price) as avg_price
    FROM prices.usd
    WHERE symbol = 'WETH' and blockchain = 'ethereum'
    GROUP BY 1
    ORDER BY 1 DESC
    LIMIT 1
)
        select time, 
        position_side, 
        SUM(SUM(size)) OVER (PARTITION BY position_side ORDER BY time) as total_size,
        SUM(SUM(size)/1e6) OVER (PARTITION BY position_side ORDER BY time) as converted_size
        from (
                SELECT date_trunc('day', evt_block_time) as time, 
                user as account,
                currency,
                -- IF(currency = '0xff970a61a04b1ca14834a43f5de4533ebddb5cc8',
                -- (size - LAG(size, 1, 0) OVER (PARTITION BY `key` order by evt_block_time))/1e8,
                --  (size - LAG(size, 1, 0) OVER (PARTITION BY `key` order by evt_block_time))/1e8) 
                IF(currency = '0x0000000000000000000000000000000000000000', eth_price.avg_price * size/1e8, size/1e8) as size,
                if(`isLong`, 'LONG', 'SHORT') as position_side,
                evt_tx_hash
                -- FROM cap_arbitrum.Trading_evt_PositionUpdated as pos_changed
                FROM cap_arbitrum.Trading_evt_NewOrder as new_order join eth_price
                    on 1=1
                where not `isClose`

                UNION ALL
                
                SELECT date_trunc('day', evt_block_time) as time, 
                user as account,
                currency,
                -IF(currency = '0x0000000000000000000000000000000000000000', eth_price.avg_price * size/1e8, size/1e8) as size,

                -- -IF(currency = '0xff970a61a04b1ca14834a43f5de4533ebddb5cc8', size/1e8, size/1e8) as size,
                if(`isLong`, 'LONG', 'SHORT') as position_side,
                evt_tx_hash
                FROM cap_arbitrum.Trading_evt_ClosePosition as closed join eth_price
                    on 1=1
        
        ) as trades
        GROUP BY 1, 2
        ORDER BY 1 DESC, 2

-- select main_time, SUM(CASE when total_volume > 0 then total_volume else 0 END) as long_oi, 
--     SUM(CASE when total_volume < 0 then total_volume else 0 END) * -1 as short_oi
-- FROM (
--     SELECT date_series.main_time, account, SUM(total_volume) as total_volume
--     FROM (
--         select time, account, SUM(size) OVER (partition by account ORDER BY time) as total_volume,
--         lead(time, 1, now()) OVER (Partition by account ORDER BY time) as next_day
--         -- position_side, 
--         -- SUM(SUM(size)) OVER (PARTITION BY position_side ORDER BY time) as total_size,
--         -- SUM(SUM(size)/1e6) OVER (PARTITION BY position_side ORDER BY time) as converted_size
--         from (
--                 SELECT date_trunc('day', evt_block_time) as time, 
--                 user as account,
--                 currency,
--                 IF(currency = '0xff970a61a04b1ca14834a43f5de4533ebddb5cc8',
--                 (size - LAG(size, 1, 0) OVER (PARTITION BY `key` order by evt_block_time))/1e8,
--                  (size - LAG(size, 1, 0) OVER (PARTITION BY `key` order by evt_block_time))/1e8) as size,
--                 if(`isLong`, 'LONG', 'SHORT') as position_side,
--                 evt_tx_hash
--                 FROM cap_arbitrum.Trading_evt_PositionUpdated as pos_changed
--                 UNION ALL
                
--                 SELECT date_trunc('day', evt_block_time) as time, 
--                 user as account,
--                 currency,
--                 -IF(currency = '0xff970a61a04b1ca14834a43f5de4533ebddb5cc8', size/1e8, size/1e8) as size,
--                 if(`isLong`, 'LONG', 'SHORT') as position_side,
--                 evt_tx_hash
--                 FROM cap_arbitrum.Trading_evt_ClosePosition as closed
        
--         ) as trades
--         WHERE currency = '0xff970a61a04b1ca14834a43f5de4533ebddb5cc8'
--         -- GROUP BY 1, 2
--         ORDER BY 1 DESC, 2
--     ) as open_interest inner join
--         (
--           SELECT explode(sequence(
--                 DATE'2022-01-01' - INTERVAL '7 days'
--                 , 
--                 date_trunc('day', NOW()),
--                 INTERVAL '1 day')
--             ) as main_time
--         ) as date_series on open_interest.time <= date_series.main_time
--         and date_series.main_time < open_interest.next_day
--     GROUP BY 1, 2
-- ) as open_interest_volume
-- GROUP BY 1
-- ORDER BY 1 DESC"
1257775,Margin Trading GNS ,,"[{""id"": 2155514, ""type"": ""counter"", ""name"": ""\ud83d\udc5b 24 Hour Volume"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""stringSuffix"": """", ""stringDecimal"": 0, ""counterColName"": ""daily_volume""}, ""created_at"": ""2022-09-11T01:58:58.952333+00:00"", ""__typename"": ""visualizations""}, {""id"": 2155535, ""type"": ""counter"", ""name"": ""\ud83d\udcb8 1 Month Volume"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""stringSuffix"": """", ""stringDecimal"": 0, ""counterColName"": ""monthly_volume""}, ""created_at"": ""2022-09-11T02:05:32.881311+00:00"", ""__typename"": ""visualizations""}, {""id"": 2155598, ""type"": ""counter"", ""name"": ""\ud83e\udd16 Total Unique Traders"", ""options"": {""rowNumber"": 1, ""counterColName"": ""total_traders""}, ""created_at"": ""2022-09-11T03:02:27.032159+00:00"", ""__typename"": ""visualizations""}, {""id"": 2211023, ""type"": ""counter"", ""name"": ""\ud83d\udc99 Weekly Traders"", ""options"": {""rowNumber"": 1, ""counterColName"": ""weekly_traders""}, ""created_at"": ""2022-09-21T03:21:25.171494+00:00"", ""__typename"": ""visualizations""}, {""id"": 2155419, ""type"": ""counter"", ""name"": ""\ud83d\udcb0 Total Margin Volume"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""stringSuffix"": """", ""stringDecimal"": 0, ""counterColName"": ""total_notional_value""}, ""created_at"": ""2022-09-11T00:24:30.340607+00:00"", ""__typename"": ""visualizations""}, {""id"": 2155530, ""type"": ""counter"", ""name"": ""\ud83d\udcb5 1 Week Volume"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""stringSuffix"": """", ""stringDecimal"": 0, ""counterColName"": ""weekly_volume""}, ""created_at"": ""2022-09-11T02:04:32.409878+00:00"", ""__typename"": ""visualizations""}, {""id"": 2397635, ""type"": ""counter"", ""name"": ""\ud83d\udcb3 Daily Fees"", ""options"": {""rowNumber"": 1, ""counterColName"": ""daily_fees""}, ""created_at"": ""2022-10-16T08:49:02.352516+00:00"", ""__typename"": ""visualizations""}, {""id"": 2397636, ""type"": ""counter"", ""name"": ""\ud83d\udcb3 Weekly Fees"", ""options"": {""rowNumber"": 1, ""counterColName"": ""weekly_fees""}, ""created_at"": ""2022-10-16T08:49:04.385211+00:00"", ""__typename"": ""visualizations""}, {""id"": 2155315, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-09-10T23:05:40.215575+00:00"", ""__typename"": ""visualizations""}, {""id"": 2155543, ""type"": ""counter"", ""name"": ""\ud83d\udcbc 24 Hour AVG Trade Size"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""stringDecimal"": 0, ""counterColName"": ""avg_trade_volume""}, ""created_at"": ""2022-09-11T02:08:27.152712+00:00"", ""__typename"": ""visualizations""}, {""id"": 2155599, ""type"": ""counter"", ""name"": ""\ud83d\udc99 24 Hour Traders"", ""options"": {""rowNumber"": 1, ""counterColName"": ""daily_traders""}, ""created_at"": ""2022-09-11T03:03:28.099952+00:00"", ""__typename"": ""visualizations""}, {""id"": 2397633, ""type"": ""counter"", ""name"": ""\ud83d\udcb3 Total Margin Fees"", ""options"": {""rowNumber"": 1, ""counterColName"": ""total_fees""}, ""created_at"": ""2022-10-16T08:48:59.960103+00:00"", ""__typename"": ""visualizations""}]","-- Credits to for creating the view: https://dune.com/unionepro
-- SELECT date_trunc('day', block_time) as time, 
--     SUM(position_size_dai * leverage) as notional_value
-- FROM dune_user_generated.gains_view_order
-- GROUP BY 1
-- ORDER BY 1 DESC


-- SELECT * FROM dune_user_generated.gains_view_order
-- -- -- GROUP BY 1
-- ORDER BY 1 DESC
-- limit 100;
CREATE OR REPLACE FUNCTION pg_temp.format_number(d numeric) RETURNS text AS $$
DECLARE
    result  text;
BEGIN
    IF d/1e3 < 1 THEN 
        EXECUTE 'SELECT CONCAT(''$'', ROUND(''' || d || ''', 2))  ' into result;
        RETURN result;
    ELSIF d / 1e6 < 1 THEN
        EXECUTE 'SELECT CONCAT(''$'', ROUND(''' || d/1e3 || ''', 2), ''K'')  ' into result;
        RETURN result;
    ELSIF d / 1e9 < 1 THEN
        EXECUTE 'SELECT CONCAT(''$'', ROUND(''' || d/1e6 || ''', 2), ''M'')  ' into result;
        RETURN result;
    ELSIF d / 1e12 < 1 THEN
        EXECUTE 'SELECT CONCAT(''$'', ROUND(''' || d/1e9 || ''', 2), ''B'')  ' into result;
        RETURN result;
    ELSIF d / 1e15 < 1 THEN
        EXECUTE 'SELECT CONCAT(''$'', ROUND(''' || d/1e12 || ''', 2), ''T'')  ' into result;
        RETURN result;
    END IF;
    RETURN '';
END;
$$ LANGUAGE plpgsql IMMUTABLE STRICT;


SELECT pg_temp.format_number(total_notional_value) as total_notional_value, 
        pg_temp.format_number(total_fees) as total_fees, 
        pg_temp.format_number(daily_fees) as daily_fees, 
        pg_temp.format_number(weekly_fees) as weekly_fees, 

        pg_temp.format_number(daily_volume) as daily_volume, 
        pg_temp.format_number(weekly_volume) as weekly_volume,
        pg_temp.format_number(monthly_volume) as monthly_volume, 
        pg_temp.format_number(avg_trade_volume) as avg_trade_volume,
        (total_traders) as total_traders,
        (daily_traders) as daily_traders,
        (weekly_traders) as weekly_traders
        
        
FROM (
    select SUM(position_size_dai * leverage)   filter (where ""type"" <> 'LIQ') as total_notional_value,
    COUNT(DISTINCT trader)  filter (where ""type"" <> 'LIQ') as total_traders,
    COUNT(DISTINCT trader)  filter (WHERE block_time >= NOW() - INTERVAL '1 DAY'and ""type"" <> 'LIQ') as daily_traders,
    COUNT(DISTINCT trader)  filter (WHERE block_time >= NOW() - INTERVAL '1 WEEK'and ""type"" <> 'LIQ') as weekly_traders,
    sum(""project_fund"" + ""dev_fund"" + ""referral"" + ""nft_bots"" + ""dai_stakers"" + ""lp_stakers"" + ""gns_stakers"" + coalesce(""rollover_fee"", 0)) as total_fees,
    sum(""project_fund"" + ""dev_fund"" + ""referral"" + ""nft_bots"" + ""dai_stakers"" + ""lp_stakers"" + ""gns_stakers"" + coalesce(""rollover_fee"", 0)) filter (where block_time >= NOW() -INTERVAL '1 DAY') as daily_fees,
    sum(""project_fund"" + ""dev_fund"" + ""referral"" + ""nft_bots"" + ""dai_stakers"" + ""lp_stakers"" + ""gns_stakers"" + coalesce(""rollover_fee"", 0)) filter (where block_time >= NOW() -INTERVAL '1 WEEK')  as weekly_fees,
    
    SUM(position_size_dai * leverage) filter (WHERE block_time >= NOW() - INTERVAL '1 DAY' and ""type"" <> 'LIQ') as daily_volume,
    SUM(position_size_dai * leverage) filter (WHERE block_time >= NOW() - INTERVAL '1 WEEK'and ""type"" <> 'LIQ') as weekly_volume,
    SUM(position_size_dai * leverage) filter (WHERE block_time >= NOW() - INTERVAL '1 MONTH'and ""type"" <> 'LIQ')  as monthly_volume,
    AVG(position_size_dai * leverage) filter (WHERE block_time >= NOW() - INTERVAL '1 DAY'and ""type"" <> 'LIQ') as avg_trade_volume
    from dune_user_generated.gains_view_order
) as trades"
1278471,GNS Market Cap and Circulating Supply,,"[{""id"": 2190780, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-09-17T04:04:18.622857+00:00"", ""__typename"": ""visualizations""}, {""id"": 2190781, ""type"": ""counter"", ""name"": ""$GNS Circulating Supply"", ""options"": {""rowNumber"": 1, ""stringSuffix"": """", ""stringDecimal"": 0, ""counterColName"": ""cir_supply""}, ""created_at"": ""2022-09-17T04:04:18.622857+00:00"", ""__typename"": ""visualizations""}, {""id"": 2190782, ""type"": ""counter"", ""name"": ""$GNS Total Supply"", ""options"": {""rowNumber"": 1, ""counterColName"": ""total_supply""}, ""created_at"": ""2022-09-17T04:04:18.622857+00:00"", ""__typename"": ""visualizations""}, {""id"": 2190783, ""type"": ""counter"", ""name"": ""$GNS Market Capitalisation \ud83d\udcb0"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""stringSuffix"": ""M"", ""stringDecimal"": 2, ""counterColName"": ""market_cap""}, ""created_at"": ""2022-09-17T04:04:18.622857+00:00"", ""__typename"": ""visualizations""}, {""id"": 2190784, ""type"": ""counter"", ""name"": ""$GNS Fully Diluted Value \ud83d\udcb0"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""stringSuffix"": ""M"", ""stringDecimal"": 2, ""counterColName"": ""fdv""}, ""created_at"": ""2022-09-17T04:04:18.622857+00:00"", ""__typename"": ""visualizations""}]","With 
gns_price as (
    SELECT date_trunc('day', block_time) as time, AVG(usd_amount/(token_a_amount_raw/1e18)) as avg_price
    FROM dex.trades
    WHERE token_a_address = '\xe5417af564e4bfda1c483642db72007871397896'
    group by 1
    ORDER BY 1 DESC
    limit 1
), token_supply as 
(
    SELECT SUM(tokens) as tokens
    FROM (
        SELECT value/1e18  as tokens
        FROM erc20.""ERC20_evt_Transfer""
        where contract_address = '\xe5417af564e4bfda1c483642db72007871397896' 
        AND ""from"" = '\x0000000000000000000000000000000000000000'
        union all
        
        SELECT -value/1e18 as tokens
        FROM erc20.""ERC20_evt_Transfer""
        where contract_address = '\xe5417af564e4bfda1c483642db72007871397896' 
        AND ""to"" = '\x0000000000000000000000000000000000000000'
    ) as total_supply
)


SELECT (cir_supply * gns_price.avg_price)/1e6  as market_cap, cir_supply, 1e8 as total_supply, (1e8 * gns_price.avg_price)/1e6 as fdv
FROM ( 
    select SUM(tokens) as cir_supply
    FROM token_supply
) AS gns_supply JOIN gns_price on 1=1;"
1280293,CAP Market Cap and Circulating Supply,,"[{""id"": 2193741, ""type"": ""counter"", ""name"": ""$CAP Fully Diluted Value \ud83d\udcb0"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""stringSuffix"": ""M"", ""stringDecimal"": 2, ""counterColName"": ""fdv""}, ""created_at"": ""2022-09-18T02:13:55.895273+00:00"", ""__typename"": ""visualizations""}, {""id"": 2193737, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-09-18T02:13:55.895273+00:00"", ""__typename"": ""visualizations""}, {""id"": 2193740, ""type"": ""counter"", ""name"": ""$CAP Market Capitalisation \ud83d\udcb0"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""stringSuffix"": ""M"", ""stringDecimal"": 2, ""counterColName"": ""market_cap""}, ""created_at"": ""2022-09-18T02:13:55.895273+00:00"", ""__typename"": ""visualizations""}, {""id"": 2193739, ""type"": ""counter"", ""name"": ""$CAP Total Supply"", ""options"": {""rowNumber"": 1, ""counterColName"": ""total_supply""}, ""created_at"": ""2022-09-18T02:13:55.895273+00:00"", ""__typename"": ""visualizations""}, {""id"": 2193738, ""type"": ""counter"", ""name"": ""$CAP Circulating Supply"", ""options"": {""rowNumber"": 1, ""stringSuffix"": """", ""stringDecimal"": 0, ""counterColName"": ""cir_supply""}, ""created_at"": ""2022-09-18T02:13:55.895273+00:00"", ""__typename"": ""visualizations""}]","With 
gmx_txs as (
    SELECT date_trunc('day', block_time) as time, data, tx_hash, topic2, topic3
    FROM arbitrum.logs as a_l

    WHERE contract_address = '0x031d35296154279dc1984dcd93e392b1f946737b' and
    `topic1` = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef' AND
    `topic2` != '0x000000000000000000000000bbd51d8fc750de753e183bdbf019adad39c189cc'
),
lp_txs as ( 
    SELECT tx_hash
    FROM arbitrum.logs
    WHERE contract_address IN ('0x3be3ebc2c4c0e65d444d6254ae9b1486f0d801ee') and
    `topic1` = '0xc42079f94a6350d7e6235f29174924f928cc2ac818eb64fed8004e115fbcca67'
),
weth_txs as (
    SELECT date_trunc('day', block_time) as time, data, tx_hash, topic2, topic3
    FROM arbitrum.logs as a_l
    WHERE contract_address = '0x82af49447d8a07e3bd95bd0d56f35241523fbab1' AND
    -- TRANSFER
    `topic1` = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef' 
),
weth_price as (
    SELECT date_trunc('day', minute) as time, avg(price) as avg_price
    FROM prices.usd
    WHERE symbol IN ('WETH')
    GROUP BY 1
    ORDER BY 1 DESC
)
,
cap_price as (
    SELECT w_t.time, 
    -- SUM(weth_price.avg_price * bytea2numeric_v2(SUBSTRING(w_t.data, 35, 32))/1e18) as eth_volume,
    AVG((weth_price.avg_price * bytea2numeric_v2(SUBSTRING(w_t.data, 35, 32)))/bytea2numeric_v2(SUBSTRING(g_t.data, 35, 32))) as avg_price
    FROM weth_txs as w_t inner join gmx_txs as g_t ON w_t.tx_hash = g_t.tx_hash
    and (( w_t.topic3 = g_t.topic2 
    and (CONCAT('0x',substring(w_t.topic3 FROM 27 FOR 40)) IN ('0x3be3ebc2c4c0e65d444d6254ae9b1486f0d801ee')))
    OR (w_t.topic2 = g_t.topic3 AND 
    (w_t.topic2 = '0x00000000000000000000000068b3465833fb72a70ecdf485e0e4c7bd8665fc45')))

    inner join lp_txs as l_t on l_t.tx_hash = g_t.tx_hash join weth_price on w_t.time=weth_price.time
    WHERE  w_t.topic2 != g_t.topic3
    GROUP BY 1

    ORDER BY w_t.time DESC
    LIMIT 1
), token_supply as 
(
    SELECT SUM(tokens) as tokens
    FROM (
        SELECT value/1e18  as tokens
        FROM erc20_ethereum.evt_Transfer
        where contract_address = '0x43044f861ec040db59a7e324c40507addb673142' 
        AND `from` = '0x0000000000000000000000000000000000000000'
        union all
        
        SELECT -value/1e18 as tokens
        FROM erc20_ethereum.evt_Transfer
        where contract_address = '0x43044f861ec040db59a7e324c40507addb673142' 
        AND `to` = '0x0000000000000000000000000000000000000000'
    ) as total_supply
)


SELECT (cir_supply * cap_price.avg_price)/1e6  as market_cap, cir_supply, 12e4 as total_supply, (12e4 * cap_price.avg_price)/1e6 as fdv
FROM ( 
    select SUM(tokens) as cir_supply
    FROM token_supply
) AS cap_supply JOIN cap_price on 1=1;"
1300339,"Margin Trading MUX Stats (AVAX, BNB, ARBITRUM) Daily",Excludes Fantom,"[{""id"": 2227789, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-09-23T04:25:12.600216+00:00"", ""__typename"": ""visualizations""}, {""id"": 2227806, ""type"": ""chart"", ""name"": ""MUX Margin Trading Volume"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""tickFormat"": ""$0[].00a""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""numberFormat"": ""$0[].00a"", ""columnMapping"": {""time"": ""x"", ""token"": ""series"", ""total_volume"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-09-23T04:30:59.728116+00:00"", ""__typename"": ""visualizations""}]","
    select date_trunc('day', block_time) as time, token,
    SUM(token_amount * token_price) as total_volume
    from (
        -- open position
        SELECT block_time, concat('0x', SUBSTRING(topic2 FROM 27 FOR 40)) AS trader,
        -- IF(bytea2numeric_v2(SUBSTRING(data, 3+64*3 - 1, 1)) = 1, 'LONG', 'SHORT') as position_side,
        (CASE bytea2numeric_v2(SUBSTRING(topic3 FROM 27 FOR 40))
        WHEN 3 THEN 'ETH'
        when 4 THEN 'BTC'
        when 5 THEN 'AVAX'
        WHEN 6 THEN 'BNB'
        WHEN 7 THEN 'FTM'
        ELSE bytea2numeric_v2(SUBSTRING(topic3 FROM 27 FOR 40))
        END) as token,
        bytea2numeric_v2(SUBSTRING(data FROM 3+64*3, 64))/1e18 as token_amount,
        bytea2numeric_v2(SUBSTRING(data FROM 3+64*4, 64))/1e18 as token_price,
        bytea2numeric_v2(SUBSTRING(data from 3+64*7, 64))/1e18 as fees --usd fees

        FROM arbitrum.logs
        WHERE block_time >= TIMESTAMP '2022-07-01' and
        topic1 = '0xdb27855d3e94a6c985e1e59c77870a73484ef3c40d29fbfe14bb3e686da86efb' and
        contract_address = '0x3e0199792ce69dc29a0a36146bfa68bd7c8d6633'
        UNION ALL

        -- closing position
        SELECT block_time, concat('0x', SUBSTRING(topic2 FROM 27 FOR 40)) AS trader,
        (CASE bytea2numeric_v2(SUBSTRING(topic3 FROM 27 FOR 40))
        WHEN 3 THEN 'ETH'
        when 4 THEN 'BTC'
        when 5 THEN 'AVAX'
        WHEN 6 THEN 'BNB'
        WHEN 7 THEN 'FTM'
        ELSE bytea2numeric_v2(SUBSTRING(topic3 FROM 27 FOR 40))
        END) as token,
        -- IF(bytea2numeric_v2(SUBSTRING(data, 3+64*4 - 1, 1)) = 1, 'LONG', 'SHORT') as position_side,
        bytea2numeric_v2(SUBSTRING(data FROM 3+64*4, 64))/1e18 as token_amount,
        bytea2numeric_v2(SUBSTRING(data FROM 3+64*5, 64))/1e18 as token_price,
        bytea2numeric_v2(SUBSTRING(data from 3+64*8, 64))/1e18 as fees --usd fees

        FROM arbitrum.logs
        WHERE block_time >= TIMESTAMP '2022-07-01' and
        topic1 = '0x645156066afee3ede009256908a9e96538cc1ad681c46b10114f6ce98ebd0600' and 
        contract_address = '0x3e0199792ce69dc29a0a36146bfa68bd7c8d6633'


        UNION ALL
        -- liquidate
        SELECT block_time, concat('0x', SUBSTRING(topic2 FROM 27 FOR 40)) AS trader,
        (CASE bytea2numeric_v2(SUBSTRING(topic3 FROM 27 FOR 40))
        WHEN 3 THEN 'ETH'
        when 4 THEN 'BTC'
        when 5 THEN 'AVAX'
        WHEN 6 THEN 'BNB'
        WHEN 7 THEN 'FTM'
        ELSE bytea2numeric_v2(SUBSTRING(topic3 FROM 27 FOR 40))
        END) as token,
        -- IF(bytea2numeric_v2(SUBSTRING(data, 3+64*4 - 1, 1)) = 1, 'LONG', 'SHORT') as position_side,
        bytea2numeric_v2(SUBSTRING(data FROM 3+64*4, 64))/1e18 as token_amount,
        bytea2numeric_v2(SUBSTRING(data FROM 3+64*5, 64))/1e18 as token_price,
        bytea2numeric_v2(SUBSTRING(data from 3+64*8, 64))/1e18 as fees --usd fees
        FROM arbitrum.logs
        WHERE block_time >= TIMESTAMP '2022-07-01' and
        topic1 = '0xd63e21d9ddaf46f8d28d121f06e7ed33fcc0300af1f8c794e69056dbf37e2d6a' and 
        contract_address = '0x3e0199792ce69dc29a0a36146bfa68bd7c8d6633'


        UNION ALL

        SELECT block_time, concat('0x', SUBSTRING(topic2 FROM 27 FOR 40)) AS trader,
        (CASE bytea2numeric_v2(SUBSTRING(topic3 FROM 27 FOR 40))
        WHEN 3 THEN 'ETH'
        when 4 THEN 'BTC'
        when 5 THEN 'AVAX'
        WHEN 6 THEN 'BNB'
        WHEN 7 THEN 'FTM'
        ELSE bytea2numeric_v2(SUBSTRING(topic3 FROM 27 FOR 40))
        END) as token,
        -- IF(bytea2numeric_v2(SUBSTRING(data, 3+64*3 - 1, 1)) = 1, 'LONG', 'SHORT') as position_side,
        bytea2numeric_v2(SUBSTRING(data FROM 3+64*3, 64))/1e18 as token_amount,
        bytea2numeric_v2(SUBSTRING(data FROM 3+64*4, 64))/1e18 as token_price,
        bytea2numeric_v2(SUBSTRING(data from 3+64*7, 64))/1e18 as fees --usd fees

        FROM avalanche_c.logs
        WHERE block_time >= TIMESTAMP '2022-07-01' and 
        contract_address = '0x0ba2e492e8427fad51692ee8958ebf936bee1d84' and
        topic1 = '0xdb27855d3e94a6c985e1e59c77870a73484ef3c40d29fbfe14bb3e686da86efb'  
        

        UNION ALL

        SELECT block_time, concat('0x', SUBSTRING(topic2 FROM 27 FOR 40)) AS trader,
        (CASE bytea2numeric_v2(SUBSTRING(topic3 FROM 27 FOR 40))
        WHEN 3 THEN 'ETH'
        when 4 THEN 'BTC'
        when 5 THEN 'AVAX'
        WHEN 6 THEN 'BNB'
        WHEN 7 THEN 'FTM'
        ELSE bytea2numeric_v2(SUBSTRING(topic3 FROM 27 FOR 40))
        END) as token,
        -- IF(bytea2numeric_v2(SUBSTRING(data, 3+64*4 - 1, 1)) = 1, 'LONG', 'SHORT') as position_side,
        bytea2numeric_v2(SUBSTRING(data FROM 3+64*4, 64))/1e18 as token_amount,
        bytea2numeric_v2(SUBSTRING(data FROM 3+64*5, 64))/1e18 as token_price,
        bytea2numeric_v2(SUBSTRING(data from 3+64*8, 64))/1e18 as fees --usd fees

        FROM avalanche_c.logs
        WHERE block_time >= TIMESTAMP '2022-07-01' and 
        topic1 = '0x645156066afee3ede009256908a9e96538cc1ad681c46b10114f6ce98ebd0600' and
        contract_address = '0x0ba2e492e8427fad51692ee8958ebf936bee1d84'
        

        UNION ALL
        -- liquidate
        SELECT block_time, concat('0x', SUBSTRING(topic2 FROM 27 FOR 40)) AS trader,
        (CASE bytea2numeric_v2(SUBSTRING(topic3 FROM 27 FOR 40))
        WHEN 3 THEN 'ETH'
        when 4 THEN 'BTC'
        when 5 THEN 'AVAX'
        WHEN 6 THEN 'BNB'
        WHEN 7 THEN 'FTM'
        ELSE bytea2numeric_v2(SUBSTRING(topic3 FROM 27 FOR 40))
        END) as token,
        -- IF(bytea2numeric_v2(SUBSTRING(data, 3+64*4 - 1, 1)) = 1, 'LONG', 'SHORT') as position_side,
        bytea2numeric_v2(SUBSTRING(data FROM 3+64*4, 64))/1e18 as token_amount,
        bytea2numeric_v2(SUBSTRING(data FROM 3+64*5, 64))/1e18 as token_price,
        bytea2numeric_v2(SUBSTRING(data from 3+64*8, 64))/1e18 as fees --usd fees
        FROM avalanche_c.logs
        WHERE  block_time >= TIMESTAMP '2022-07-01' and 
        topic1 = '0xd63e21d9ddaf46f8d28d121f06e7ed33fcc0300af1f8c794e69056dbf37e2d6a' and 
        contract_address = '0x0ba2e492e8427fad51692ee8958ebf936bee1d84' 

        UNION ALL

        SELECT block_time, concat('0x', SUBSTRING(topic2 FROM 27 FOR 40)) AS trader,
        (CASE bytea2numeric_v2(SUBSTRING(topic3 FROM 27 FOR 40))
        WHEN 3 THEN 'ETH'
        when 4 THEN 'BTC'
        when 5 THEN 'AVAX'
        WHEN 6 THEN 'BNB'
        WHEN 7 THEN 'FTM'
        ELSE bytea2numeric_v2(SUBSTRING(topic3 FROM 27 FOR 40))
        END) as token,
        -- IF(bytea2numeric_v2(SUBSTRING(data, 3+64*3 - 1, 1)) = 1, 'LONG', 'SHORT') as position_side,
        bytea2numeric_v2(SUBSTRING(data FROM 3+64*3, 64))/1e18 as token_amount,
        bytea2numeric_v2(SUBSTRING(data FROM 3+64*4, 64))/1e18 as token_price,
        bytea2numeric_v2(SUBSTRING(data from 3+64*7, 64))/1e18 as fees --usd fees

        FROM bnb.logs
        WHERE block_time >= TIMESTAMP '2022-07-01' and 
        topic1 = '0xdb27855d3e94a6c985e1e59c77870a73484ef3c40d29fbfe14bb3e686da86efb' and
        contract_address = '0x855e99f768fad76dd0d3eb7c446c0b759c96d520'
        UNION ALL

        SELECT block_time, concat('0x', SUBSTRING(topic2 FROM 27 FOR 40)) AS trader,
        (CASE bytea2numeric_v2(SUBSTRING(topic3 FROM 27 FOR 40))
        WHEN 3 THEN 'ETH'
        when 4 THEN 'BTC'
        when 5 THEN 'AVAX'
        WHEN 6 THEN 'BNB'
        WHEN 7 THEN 'FTM'
        ELSE bytea2numeric_v2(SUBSTRING(topic3 FROM 27 FOR 40))
        END) as token,
        -- IF(bytea2numeric_v2(SUBSTRING(data, 3+64*4 - 1, 1)) = 1, 'LONG', 'SHORT') as position_side,
        bytea2numeric_v2(SUBSTRING(data FROM 3+64*4, 64))/1e18 as token_amount,
        bytea2numeric_v2(SUBSTRING(data FROM 3+64*5, 64))/1e18 as token_price,
        bytea2numeric_v2(SUBSTRING(data from 3+64*8, 64))/1e18 as fees --usd fees

        FROM bnb.logs
        WHERE block_time >= TIMESTAMP '2022-07-01' and 
        topic1 = '0x645156066afee3ede009256908a9e96538cc1ad681c46b10114f6ce98ebd0600' and 
        contract_address = '0x855e99f768fad76dd0d3eb7c446c0b759c96d520'
        
        UNION ALL
        -- liquidate
        SELECT block_time, concat('0x', SUBSTRING(topic2 FROM 27 FOR 40)) AS trader,
        (CASE bytea2numeric_v2(SUBSTRING(topic3 FROM 27 FOR 40))
        WHEN 3 THEN 'ETH'
        when 4 THEN 'BTC'
        when 5 THEN 'AVAX'
        WHEN 6 THEN 'BNB'
        WHEN 7 THEN 'FTM'
        ELSE bytea2numeric_v2(SUBSTRING(topic3 FROM 27 FOR 40))
        END) as token,
        -- IF(bytea2numeric_v2(SUBSTRING(data, 3+64*4 - 1, 1)) = 1, 'LONG', 'SHORT') as position_side,
        bytea2numeric_v2(SUBSTRING(data FROM 3+64*4, 64))/1e18 as token_amount,
        bytea2numeric_v2(SUBSTRING(data FROM 3+64*5, 64))/1e18 as token_price,
        bytea2numeric_v2(SUBSTRING(data from 3+64*8, 64))/1e18 as fees --usd fees
        FROM bnb.logs
        WHERE block_time >= TIMESTAMP '2022-07-01'  and
        topic1 = '0xd63e21d9ddaf46f8d28d121f06e7ed33fcc0300af1f8c794e69056dbf37e2d6a' and
        contract_address = '0x855e99f768fad76dd0d3eb7c446c0b759c96d520'
        
    ) as mcb_trades
    WHERE block_time >= NOW() - INTERVAL '4 months'
    GROUP BY 1, 2
    ORDER BY 1;"
1295927,Margin Trading Metavault Trade Daily,,"[{""id"": 2219823, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-09-22T04:47:07.870998+00:00"", ""__typename"": ""visualizations""}, {""id"": 2219887, ""type"": ""chart"", ""name"": ""Metavault Margin Trading Volume "", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""tickFormat"": ""$0[.]a""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""numberFormat"": ""$0[,]00"", ""columnMapping"": {""time"": ""x"", ""token"": ""series"", ""total_volume"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-09-22T04:58:28.412391+00:00"", ""__typename"": ""visualizations""}, {""id"": 2219824, ""type"": ""counter"", ""name"": ""\ud83d\udcb8 1 Month Volume"", ""options"": {""rowNumber"": 1, ""counterColName"": ""monthly_volume""}, ""created_at"": ""2022-09-22T04:47:07.870998+00:00"", ""__typename"": ""visualizations""}]","with tokens (contract_address, name, decimals) as (
    values 
    ('\x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270', 'WMATIC', 1e18),
    ('\xb33eaad8d922b1083446dc23f610c2567fb5180f', 'UNI', 1e18),
    ('\x7ceb23fd6bc0add59e62ac25578270cff1b9f619', 'WETH', 1e18),
    ('\x1bfd67037b42cf73acf2047067bd4f2c47d9bfd6', 'WBTC', 1e8),
    ('\xd6df932a45c0f255f85145f286ea0b292b21c90b', 'AAVE', 1e18),
    ('\xb0897686c545045afc77cf20ec7a532e3120e0f1', 'LINK', 1e18),
    ('\xb0897686c545045afc77cf20ec7a532e3120e0f1', 'LINK', 1e18),
    ('\xb0897686c545045afc77cf20ec7a532e3120e0f1', 'LINK', 1e18)

)
    SELECT 
        time,
        (CASE
            When tokens.contract_address IS NOT NULL THEN tokens.name
            ELSE CONCAT('0x', SUBSTRING(metavault_trades.token:: text, 3))
        END) AS token,
        SUM(volume) as total_volume
    FROM (
        SELECT 
              date_trunc('day', ""evt_block_time"") as time,    
              ""account""  as trader,
              ""sizeDelta""/1e30  as volume,
              ""fee""/1e30  as fees,
              ""indexToken"" as token
              
            FROM metavault_trade.""Vault_evt_IncreasePosition""
        UNION ALL
        SELECT 
              date_trunc('day', ""evt_block_time"") as time,    
              ""account""  as trader,
              ""sizeDelta""/1e30  as volume,
              ""fee""/1e30  as fees,
              ""indexToken"" as token
        FROM metavault_trade.""Vault_evt_DecreasePosition""
    ) as metavault_trades LEFT JOIN tokens on
    metavault_trades.token = tokens.contract_address::bytea
    WHERE time >= NOW() - INTERVAL '4 months'
    group by 1, 2
    ORDER BY 1"
1276537,MCB Market Cap and Circulating Supply,,"[{""id"": 2187655, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-09-16T11:20:12.431487+00:00"", ""__typename"": ""visualizations""}, {""id"": 2187656, ""type"": ""counter"", ""name"": ""$MCB Circulating Supply"", ""options"": {""rowNumber"": 1, ""stringSuffix"": """", ""stringDecimal"": 0, ""counterColName"": ""cir_supply""}, ""created_at"": ""2022-09-16T11:20:12.431487+00:00"", ""__typename"": ""visualizations""}, {""id"": 2187657, ""type"": ""counter"", ""name"": ""$MCB Market Capitalisation \ud83d\udcb0"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""stringSuffix"": ""M"", ""stringDecimal"": 2, ""counterColName"": ""market_cap""}, ""created_at"": ""2022-09-16T11:20:12.431487+00:00"", ""__typename"": ""visualizations""}, {""id"": 2190605, ""type"": ""counter"", ""name"": ""$MCB Total Supply"", ""options"": {""rowNumber"": 1, ""counterColName"": ""total_supply""}, ""created_at"": ""2022-09-17T02:46:36.169843+00:00"", ""__typename"": ""visualizations""}, {""id"": 2190606, ""type"": ""counter"", ""name"": ""$MCB Fully Diluted Value \ud83d\udcb0 "", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""stringSuffix"": ""M"", ""stringDecimal"": 2, ""counterColName"": ""fdv""}, ""created_at"": ""2022-09-17T02:46:39.244404+00:00"", ""__typename"": ""visualizations""}]","With 
mcb_price as (
    SELECT date_trunc('day', minute) as time, AVG(price) as avg_price
    FROM prices.usd
    WHERE contract_address = '0x4e352cf164e64adcbad318c3a1e222e9eba4ce42'
    group by 1
    ORDER BY 1 DESC
    limit 1
), mint_burnt_supply as 
(
    SELECT SUM(tokens) as tokens
    FROM (
        SELECT value/1e18  as tokens
        FROM erc20_ethereum.evt_Transfer
        where contract_address = '0x4e352cf164e64adcbad318c3a1e222e9eba4ce42' 
        AND `from` = '0x0000000000000000000000000000000000000000'
        union all
        
        SELECT -value/1e18 as tokens
        FROM erc20_ethereum.evt_Transfer
        where contract_address = '0x4e352cf164e64adcbad318c3a1e222e9eba4ce42' 
        AND `to` = '0x0000000000000000000000000000000000000000'
    ) as total_supply
)


SELECT (cir_supply * mcb_price.avg_price)/1e6  as market_cap, cir_supply, 10e6 as total_supply, (10e6 * mcb_price.avg_price)/1e6 as fdv
FROM ( 
    select SUM(tokens) as cir_supply
    FROM mint_burnt_supply
) AS mcb_supply JOIN mcb_price on 1=1;"
1272287,Kwenta Open Interest,,"[{""id"": 2185702, ""type"": ""counter"", ""name"": ""\ud83d\udd34 Short Open Interest"", ""options"": {""rowNumber"": 1, ""stringDecimal"": 2, ""counterColName"": ""short_oi_format""}, ""created_at"": ""2022-09-16T01:45:24.113554+00:00"", ""__typename"": ""visualizations""}, {""id"": 2185703, ""type"": ""counter"", ""name"": ""\ud83d\udfe2 Long Open Interest "", ""options"": {""rowNumber"": 1, ""stringDecimal"": 2, ""counterColName"": ""long_oi_format""}, ""created_at"": ""2022-09-16T01:45:53.853191+00:00"", ""__typename"": ""visualizations""}, {""id"": 2179278, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-09-15T02:39:32.302208+00:00"", ""__typename"": ""visualizations""}, {""id"": 2179329, ""type"": ""chart"", ""name"": ""Longs vs Shorts"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack"", ""percentValues"": true}, ""reverseX"": false, ""columnMapping"": {"""": ""y"", ""day"": ""x"", ""time"": ""x"", ""week"": ""x"", ""long_oi"": ""y"", ""short_oi"": ""y"", ""total_volume"": ""y"", ""short_open_interest"": ""y""}, ""seriesOptions"": {""long_oi"": {""name"": ""LONG"", ""type"": ""column"", ""color"": ""#21eda8"", ""yAxis"": 0, ""zIndex"": 0}, ""short_oi"": {""name"": ""SHORT"", ""type"": ""column"", ""color"": ""#f70f0f"", ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-09-15T03:06:22.618471+00:00"", ""__typename"": ""visualizations""}, {""id"": 2199006, ""type"": ""chart"", ""name"": ""Kwenta Open Interest"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""tickFormat"": ""$0[].00a""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""numberFormat"": ""$0[].00a"", ""columnMapping"": {""week"": ""x"", ""long_oi"": ""y"", ""short_oi"": ""y""}, ""seriesOptions"": {""long_oi"": {""name"": ""LONG"", ""type"": ""column"", ""color"": ""#21eda8"", ""yAxis"": 0, ""zIndex"": 0}, ""short_oi"": {""name"": ""SHORT"", ""type"": ""column"", ""color"": ""#f70f0f"", ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-09-19T09:02:27.038004+00:00"", ""__typename"": ""visualizations""}]","CREATE OR REPLACE FUNCTION pg_temp.format_number(d numeric) RETURNS text AS $$
DECLARE
    result  text;
BEGIN
    IF d/1e3 < 1 THEN 
        EXECUTE 'SELECT CONCAT(''$'', ROUND(''' || d || ''', 2))  ' into result;
        RETURN result;
    ELSIF d / 1e6 < 1 THEN
        EXECUTE 'SELECT CONCAT(''$'', ROUND(''' || d/1e3 || ''', 2), ''K'')  ' into result;
        RETURN result;
    ELSIF d / 1e9 < 1 THEN
        EXECUTE 'SELECT CONCAT(''$'', ROUND(''' || d/1e6 || ''', 2), ''M'')  ' into result;
        RETURN result;
    ELSIF d / 1e12 < 1 THEN
        EXECUTE 'SELECT CONCAT(''$'', ROUND(''' || d/1e9 || ''', 2), ''B'')  ' into result;
        RETURN result;
    ELSIF d / 1e15 < 1 THEN
        EXECUTE 'SELECT CONCAT(''$'', ROUND(''' || d/1e12 || ''', 2), ''T'')  ' into result;
        RETURN result;
    END IF;
    RETURN '';
END;
$$ LANGUAGE plpgsql IMMUTABLE STRICT;

with days AS ( 
    SELECT generate_series('2022-03-10'::TIMESTAMP, date_trunc('day', NOW()), '1 day') AS DAY -- Generate all days since the month of Kwenta Creation
)
SELECT date_trunc('day', day) as week, SUM(long_oi) as long_oi, SUM(short_oi) as short_oi, 
pg_temp.format_number(SUM(long_oi)) as long_oi_format, pg_temp.format_number(SUM(short_oi)) as short_oi_format
FROM (
    select day, o_i.contract_address, SUM(CASE when total_volume > 0 then total_volume * pricing.avg_price else 0 END) as long_oi, 
    SUM(CASE when total_volume < 0 then total_volume * pricing.avg_price else 0 END) * -1 as short_oi
    FROM (
        SELECT d.day, account, contract_address, SUM(total_volume) as total_volume
        -- SUM(CASE when total_volume > 0 then total_volume else 0 END) as long_oi, 
        -- SUM(CASE when total_volume < 0 then total_volume else 0 END) as short_oi 
        FROM (
            select
            time,
            account,
            contract_address,
            SUM(volume) OVER (PARTITION BY account, contract_address ORDER BY time) as total_volume,
            lead(time, 1, now()) OVER (PARTITION BY account, contract_address ORDER BY time) AS next_day -- the day after a day with a transfer
        
            -- ,
            -- sum(SUM(CASE position_side WHEN 'LONG' then volume else 0 end)) Over (ORDER BY time) as long_open_interest, 
            -- sum(SUM(CASE position_side WHEN 'SHORT' then volume else 0 end)) Over (ORDER BY time) as short_open_interest,
            -- SUM(SUM(volume)) Over (ORDER BY time) as open_interest
            FROM (
                SELECT date_trunc('day', evt_block_time) as time, 
                account,
                (""tradeSize""/1e18) as volume,
                contract_address
                FROM synthetix.""FuturesMarket_evt_PositionModified""
                -- WHERE 
                -- contract_address = '\xf86048dff23cf130107dfb4e6386f574231a5c65'
            
            UNION ALL 
                select date_trunc('day', evt_block_time) as time,
                account,
                -(size/1e18) as volume,
                contract_address
                FROM synthetix.""FuturesMarket_evt_PositionLiquidated"" as l
                -- WHERE 
                -- contract_address = '\xf86048dff23cf130107dfb4e6386f574231a5c65'
            ) as trades
            -- GROUP BY 1, 2
            ORDER BY 1 DESC
        ) as open_interest inner join
        days as d on open_interest.time <= d.day
        and d.day < open_interest.next_day
        GROUP BY 1, 2, 3
        ORDER BY 1 DESC
    ) as o_i JOIN (
        SELECT time,  contract_address, AVG(price) as avg_price
        FROM (
        SELECT date_trunc('day', evt_block_time) as time,  contract_address,
            (""lastPrice""/1e18) as price
            FROM synthetix.""FuturesMarket_evt_PositionModified""
            -- WHERE 
            -- contract_address = '\xf86048dff23cf130107dfb4e6386f574231a5c65'
        
        UNION ALL 
            select date_trunc('day', evt_block_time) as time, contract_address,
            (price/1e18) as price
            FROM synthetix.""FuturesMarket_evt_PositionLiquidated"" as l
            -- WHERE 
            -- contract_address = '\xf86048dff23cf130107dfb4e6386f574231a5c65'
        ) as position_pricing
        GROUP BY 1, 2
    ) as pricing on o_i.day = pricing.time and o_i.contract_address = pricing.contract_address
    GROUP BY 1, 2
    ORDER BY 1 DESC
) as token_open_interest
GROUP BY 1
ORDER BY 1 DESC"
1257846,GNS Open Interest ,,"[{""id"": 2155447, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-09-11T00:58:38.722728+00:00"", ""__typename"": ""visualizations""}, {""id"": 2155448, ""type"": ""counter"", ""name"": ""\ud83d\udd34 Short Open Interest"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""stringSuffix"": ""M"", ""stringDecimal"": 2, ""counterColName"": ""short_format""}, ""created_at"": ""2022-09-11T00:58:38.722728+00:00"", ""__typename"": ""visualizations""}, {""id"": 2155477, ""type"": ""counter"", ""name"": ""\ud83d\udfe2 Long Open Interest"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""stringSuffix"": ""M"", ""stringDecimal"": 2, ""counterColName"": ""long_format""}, ""created_at"": ""2022-09-11T01:32:10.98314+00:00"", ""__typename"": ""visualizations""}, {""id"": 2155451, ""type"": ""chart"", ""name"": ""Longs vs Shorts"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack"", ""percentValues"": true}, ""reverseX"": false, ""columnMapping"": {""long"": ""series"", ""time"": ""x"", ""volume"": ""y"", ""long_volume"": ""y"", ""short_volume"": ""y""}, ""seriesOptions"": {""long_volume"": {""name"": ""LONGS"", ""type"": ""column"", ""color"": ""#21eda8"", ""yAxis"": 0, ""zIndex"": 0}, ""short_volume"": {""name"": ""SHORTS"", ""type"": ""column"", ""color"": ""#f70f0f"", ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-09-11T01:06:43.70339+00:00"", ""__typename"": ""visualizations""}, {""id"": 2210371, ""type"": ""chart"", ""name"": ""Open Interest"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""tickFormat"": ""$0[].00a""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""numberFormat"": ""$0[].00a"", ""columnMapping"": {""time"": ""x"", ""long_volume"": ""y"", ""short_volume"": ""y""}, ""seriesOptions"": {""long_volume"": {""name"": ""LONGS"", ""type"": ""column"", ""color"": ""#21eda8"", ""yAxis"": 0, ""zIndex"": 0}, ""short_volume"": {""name"": ""SHORTS"", ""type"": ""column"", ""color"": ""#f70f0f"", ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-09-21T00:39:21.347873+00:00"", ""__typename"": ""visualizations""}]","-- Credits to for creating the view: https://dune.com/unionepro

SELECT time, long_volume, long_format, short_volume, short_format, delta_volume
FROM (
    SELECT time, 
        SUM(SUM(CASE long WHEN true then volume else 0 end)) OVER (ORDER BY time) as long_volume,
        SUM(SUM(CASE long WHEN true then volume else 0 end)/1e6) OVER (ORDER BY time) as long_format,
        SUM(SUM(CASE long WHEN false then volume else 0 end)) OVER (ORDER BY time) as short_volume,
        SUM(SUM(CASE long WHEN false then volume else 0 end)/1e6) OVER (ORDER BY time) as short_format,

        SUM(SUM(volume)) OVER (ORDER BY time) as delta_volume
    FROM (
        SELECT DATE_TRUNC('day', block_time) as time, 
        (CASE
                WHEN ""type"" in ('OPEN', 'LIMIT') THEN position_size_dai * leverage
                ELSE -position_size_dai * leverage
        END) as volume, long
        FROM dune_user_generated.gains_view_order
    ) as trades
    GROUP BY time
) as formatted_trades
ORDER BY 1 DESC

"
1295757,Margin Trading GNS Daily,,"[{""id"": 2219486, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-09-22T03:29:11.394921+00:00"", ""__typename"": ""visualizations""}, {""id"": 2219503, ""type"": ""chart"", ""name"": ""GNS Margin Trading Volume "", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""tickFormat"": ""$0[.]a""}, {""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""numberFormat"": ""$0[,]00"", ""columnMapping"": {""time"": ""x"", ""pair_name"": ""series"", ""total_volume"": ""y"", ""cumulative_volume"": ""y""}, ""seriesOptions"": {""total_volume"": {""type"": ""column"", ""yAxis"": 1, ""zIndex"": 0}, ""cumulative_volume"": {""type"": ""line"", ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-09-22T03:32:16.165193+00:00"", ""__typename"": ""visualizations""}]","-- Credits to for creating the view: https://dune.com/unionepro
-- SELECT date_trunc('day', block_time) as time, 
--     SUM(position_size_dai * leverage) as notional_value
-- FROM dune_user_generated.gains_view_order
-- GROUP BY 1
-- ORDER BY 1 DESC


-- SELECT * FROM dune_user_generated.gains_view_order
-- -- -- GROUP BY 1
-- ORDER BY 1 DESC
-- limit 100;
CREATE OR REPLACE FUNCTION pg_temp.format_number(d numeric) RETURNS text AS $$
DECLARE
    result  text;
BEGIN
    IF d/1e3 < 1 THEN 
        EXECUTE 'SELECT CONCAT(''$'', ROUND(''' || d || ''', 2))  ' into result;
        RETURN result;
    ELSIF d / 1e6 < 1 THEN
        EXECUTE 'SELECT CONCAT(''$'', ROUND(''' || d/1e3 || ''', 2), ''K'')  ' into result;
        RETURN result;
    ELSIF d / 1e9 < 1 THEN
        EXECUTE 'SELECT CONCAT(''$'', ROUND(''' || d/1e6 || ''', 2), ''M'')  ' into result;
        RETURN result;
    ELSIF d / 1e12 < 1 THEN
        EXECUTE 'SELECT CONCAT(''$'', ROUND(''' || d/1e9 || ''', 2), ''B'')  ' into result;
        RETURN result;
    ELSIF d / 1e15 < 1 THEN
        EXECUTE 'SELECT CONCAT(''$'', ROUND(''' || d/1e12 || ''', 2), ''T'')  ' into result;
        RETURN result;
    END IF;
    RETURN '';
END;
$$ LANGUAGE plpgsql IMMUTABLE STRICT;



    -- select SUM(position_size_dai * leverage) as total_notional_value,
    -- COUNT(DISTINCT trader) as total_traders,
    -- COUNT(DISTINCT trader)  filter (WHERE block_time >= NOW() - INTERVAL '1 DAY') as daily_traders,
    -- COUNT(DISTINCT trader)  filter (WHERE block_time >= NOW() - INTERVAL '1 WEEK') as weekly_traders,

    -- SUM(position_size_dai * leverage) filter (WHERE block_time >= NOW() - INTERVAL '1 DAY') as daily_volume,
    -- SUM(position_size_dai * leverage) filter (WHERE block_time >= NOW() - INTERVAL '1 WEEK') as weekly_volume,
    -- SUM(position_size_dai * leverage) filter (WHERE block_time >= NOW() - INTERVAL '1 MONTH')  as monthly_volume,
    -- AVG(position_size_dai * leverage) filter (WHERE block_time >= NOW() - INTERVAL '1 DAY') as avg_trade_volume
    SELECT date_trunc('day', block_time) as time,
    pair_name,
    SUM(position_size_dai * leverage) as total_volume
    -- ,
    -- SUM(SUM(position_size_dai * leverage)) OVER (ORDER BY date_trunc('day', block_time)) as cumulative_volume
    -- ,
    -- SUM(SUM(position_size_dai * leverage)) OVER (ORDER BY date_trunc('day', block_time)) as cumulative_volume,
    
    from dune_user_generated.gains_view_order
    where BLOCK_TIME >= now() - interval '4 months'
    GROUP BY 1, 2"
1295653,Margin Trading PERP v2 Daily,,"[{""id"": 2219308, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-09-22T02:34:46.892259+00:00"", ""__typename"": ""visualizations""}, {""id"": 2219323, ""type"": ""chart"", ""name"": ""PERP Margin Trading Volume "", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""tickFormat"": ""$0[.]a""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""numberFormat"": ""$0[,]00"", ""columnMapping"": {""time"": ""x"", ""token"": ""series"", ""daily_volume"": ""y"", ""total_volume"": ""y"", ""total_notional_value"": ""x""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-09-22T02:36:12.238648+00:00"", ""__typename"": ""visualizations""}]","-- Credits to @Msilb7: https://dune.com/queries/474394/898543
CREATE OR REPLACE FUNCTION pg_temp.format_number(d numeric) RETURNS text AS $$
DECLARE
    result  text;
BEGIN
    IF d/1e3 < 1 THEN 
        EXECUTE 'SELECT CONCAT(''$'', ROUND(''' || d || ''', 2))  ' into result;
        RETURN result;
    ELSIF d / 1e6 < 1 THEN
        EXECUTE 'SELECT CONCAT(''$'', ROUND(''' || d/1e3 || ''', 2), ''K'')  ' into result;
        RETURN result;
    ELSIF d / 1e9 < 1 THEN
        EXECUTE 'SELECT CONCAT(''$'', ROUND(''' || d/1e6 || ''', 2), ''M'')  ' into result;
        RETURN result;
    ELSIF d / 1e12 < 1 THEN
        EXECUTE 'SELECT CONCAT(''$'', ROUND(''' || d/1e9 || ''', 2), ''B'')  ' into result;
        RETURN result;
    ELSIF d / 1e15 < 1 THEN
        EXECUTE 'SELECT CONCAT(''$'', ROUND(''' || d/1e12 || ''', 2), ''T'')  ' into result;
        RETURN result;
    END IF;
    RETURN '';
END;
$$ LANGUAGE plpgsql IMMUTABLE STRICT;


    select date_trunc('day', block_time) as time,
        (CASE
            When tokens.token_address IS NOT NULL THEN tokens.symbol
            ELSE CONCAT('0x', SUBSTRING(token_contract:: text, 3))
        END) as  token, SUM(volume) as total_volume

    from (
        SELECT  evt_block_time as block_time, ABS(""exchangedPositionNotional"")/1e18 as volume,
        ""baseToken"" as token_contract,
        trader
        FROM perp_v2.""ClearingHouse_evt_PositionChanged""
    ) as perp_trades right join dune_user_generated.""shogun_perpv2_tokens"" as tokens
    ON perp_trades.token_contract = tokens.token_address
    WHERE block_time >= NOW() - INTERVAL '4 months'
    group by 1, 2
"
1295704,Margin Trading Kwenta Daily,,"[{""id"": 2219432, ""type"": ""chart"", ""name"": ""Kwenta Margin Trading Volume"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""tickFormat"": ""$0[.]a""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""numberFormat"": ""$0[,]00"", ""columnMapping"": {""time"": ""x"", ""token"": ""series"", ""total_volume"": ""y"", ""contract_address"": ""series""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-09-22T03:10:02.043531+00:00"", ""__typename"": ""visualizations""}, {""id"": 2219412, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-09-22T03:08:18.844519+00:00"", ""__typename"": ""visualizations""}]","-- Credits to @Vie: https://dune.com/queries/549903/1032541



    select 
    date_trunc('day', block_time) as time,
    encode(btrim(markets.asset, '\x00'), 'escape') as token,
    SUM(volume) as total_volume
    from (

        SELECT evt_block_time as block_time, 
        account as trader,
        (""lastPrice""/1e18) * ABS(""tradeSize""/1e18) as volume,
        contract_address
        FROM synthetix.""FuturesMarket_evt_PositionModified""
    ) as kwenta_trades left join
    synthetix.""FuturesMarketManager_evt_MarketAdded"" as markets
    on kwenta_trades.contract_address = markets.market
    WHERE block_time >= NOW() - INTERVAL '4 months'
    group by 1, 2
"
1347021,Margin Trading GMX Daily (Avalanche and Arbitrum),,"[{""id"": 2298365, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-10-04T03:32:56.179021+00:00"", ""__typename"": ""visualizations""}, {""id"": 2298366, ""type"": ""chart"", ""name"": ""Margin Trading Volume by Users"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""-""}, {""type"": ""-""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack"", ""percentValues"": false}, ""reverseX"": false, ""numberFormat"": ""0[,]"", ""columnMapping"": {"""": ""y"", ""token"": ""series"", ""users"": ""y"", ""time_day"": ""x""}, ""seriesOptions"": {""users"": {""name"": ""Users"", ""type"": ""line"", ""yAxis"": 1, ""zIndex"": 1}, ""trades"": {""name"": ""Trades"", ""type"": ""column"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column"", ""numberFormatRightYAxisSeries"": ""0[,]""}, ""created_at"": ""2022-10-04T03:32:56.179021+00:00"", ""__typename"": ""visualizations""}, {""id"": 2298368, ""type"": ""chart"", ""name"": ""GMX Margin Trading Volume "", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""tickFormat"": ""$0[.]a""}, {""type"": ""linear"", ""tickFormat"": ""$0[.]a""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""numberFormat"": ""$0[,]00"", ""columnMapping"": {"""": ""y"", ""token"": ""series"", ""volume"": ""y"", ""time_day"": ""x"", ""20ma_volume"": ""y""}, ""seriesOptions"": {""UNI"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 3}, ""AVAX"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 4}, ""LINK"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 1}, ""WBTC"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 2}, ""WETH"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 0}, ""BTC.b"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 5}}, ""valuesOptions"": {}, ""globalSeriesType"": ""area"", ""numberFormatRightYAxisSeries"": ""$0[,]00""}, ""created_at"": ""2022-10-04T03:32:56.179021+00:00"", ""__typename"": ""visualizations""}, {""id"": 2298367, ""type"": ""chart"", ""name"": ""GMX Margin Trading Fees"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""tickFormat"": ""$0[.]a""}, {""type"": ""linear"", ""tickFormat"": ""$0[.]a""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""numberFormat"": ""$0[,]00"", ""columnMapping"": {""fees"": ""y"", ""token"": ""series"", ""time_day"": ""x"", ""20ma_fees"": ""y"", ""total_fees"": ""y""}, ""seriesOptions"": {""UNI"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 3}, ""AVAX"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 4}, ""LINK"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 2}, ""WBTC"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 0}, ""WETH"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 1}, ""BTC.b"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 5}}, ""valuesOptions"": {}, ""globalSeriesType"": ""area"", ""numberFormatRightYAxisSeries"": ""$0[,]00""}, ""created_at"": ""2022-10-04T03:32:56.179021+00:00"", ""__typename"": ""visualizations""}]","-- From @Saulius Margin Trading https://dune.com/queries/1188618
WITH
trading_stats as
(
SELECT 

    time_day, token, COUNT(users) as users, COUNT(trades) as trades,
    SUM(longs) AS longs, SUM(shorts) as shorts, SUM(volume) as volume, SUM(fees) as fees,
    SUM(trade_size) as trade_size
  
FROM 
(
    select  
        date_trunc('day', block_time) as time_day,    
    ( 
        CASE CONCAT('0x',substring(`data` FROM 219 FOR 40))
        WHEN '0x82af49447d8a07e3bd95bd0d56f35241523fbab1' THEN 'WETH'
        WHEN '0x2f2a2543b76a4166549f7aab2e75bef0aefc5b0f' THEN 'WBTC'
        WHEN '0xf97f4df75117a78c1a5a0dbb814af92458539fb4' THEN 'LINK'
        WHEN '0xfa7f8980b0f1e64a2062791cc3b0871572f1f7f0' THEN 'UNI'
        -- ELSE CONCAT('0x',substring(`data` FROM 91 FOR 40))
        END
    ) as token, COUNT(DISTINCT substring(data, 3+64*1, 64))  as users,
    COUNT(DISTINCT tx_hash)  as trades,
    SUM(IF(bytea2numeric_v2(substring(data, 3+64*6, 64))=1, 1, 0)) as longs,
    SUM(IF(bytea2numeric_v2(substring(data, 3+64*6, 64))=1, 0, 1)) as shorts,
    --   SUM(IF(bytea2numeric_v2(substring(data, 3+64*6, 64))=1, (bytea2numeric_v2(substring(data, 3+64*5, 64)))/1e30, 0)) as longs_volume,
    --   SUM(IF(bytea2numeric_v2(substring(data, 3+64*6, 64))=1, 0, (bytea2numeric_v2(substring(data, 3+64*5, 64)))/1e30)) as shorts_volume,
    SUM(bytea2numeric_v2(substring(data, 3+64*5, 64)))/1e30  as volume,
    SUM(bytea2numeric_v2(substring(data, 3+64*8, 64)))/1e30  as fees,
    AVG(bytea2numeric_v2(substring(data, 3+64*5, 64)))/1e30  as trade_size
    from arbitrum.logs
    WHERE 
      (contract_address = '0x489ee077994b6658eafa855c308275ead8097c4a')
      AND
      (topic1 = '0x2fe68525253654c21998f35787a8d0f361905ef647c854092430ab65f2f15022'
      OR topic1 = '0x93d75d64d1f84fc6f430a64fc578bdd4c1e090e90ea2d51773e626d19de56d30')
      and block_time >= NOW() - INTERVAL '6 months'
    GROUP BY 1, 2
    
    union ALL
    
    select  
        date_trunc('day', block_time) as time_day,    
    ( 
        CASE CONCAT('0x',substring(`data` FROM 219 FOR 40))
        WHEN '0x49d5c2bdffac6ce2bfdb6640f4f80f226bc10bab' THEN 'WETH'
        WHEN '0x50b7545627a5162f82a992c33b87adc75187b218' THEN 'WBTC' -- WBTC.e
        WHEN '0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7' THEN 'AVAX'
        WHEN '0x152b9d0fdc40c096757f570a51e494bd4b943e50' THEN 'BTC.b'
        -- ELSE CONCAT('0x',substring(`data` FROM 91 FOR 40))
        END
    ) as token, COUNT(DISTINCT substring(data, 3+64*1, 64))  as users,
    COUNT(DISTINCT tx_hash)  as trades,
    SUM(IF(bytea2numeric_v2(substring(data, 3+64*6, 64))=1, 1, 0)) as longs,
    SUM(IF(bytea2numeric_v2(substring(data, 3+64*6, 64))=1, 0, 1)) as shorts,
    --   SUM(IF(bytea2numeric_v2(substring(data, 3+64*6, 64))=1, (bytea2numeric_v2(substring(data, 3+64*5, 64)))/1e30, 0)) as longs_volume,
    --   SUM(IF(bytea2numeric_v2(substring(data, 3+64*6, 64))=1, 0, (bytea2numeric_v2(substring(data, 3+64*5, 64)))/1e30)) as shorts_volume,
    SUM(bytea2numeric_v2(substring(data, 3+64*5, 64)))/1e30  as volume,
    SUM(bytea2numeric_v2(substring(data, 3+64*8, 64)))/1e30  as fees,
    AVG(bytea2numeric_v2(substring(data, 3+64*5, 64)))/1e30  as trade_size
    from avalanche_c.logs
    WHERE 
      (contract_address = '0x9ab2de34a33fb459b538c43f251eb825645e8595')
      AND
      (topic1 = '0x2fe68525253654c21998f35787a8d0f361905ef647c854092430ab65f2f15022'
      OR topic1 = '0x93d75d64d1f84fc6f430a64fc578bdd4c1e090e90ea2d51773e626d19de56d30')
      and block_time >= NOW() - INTERVAL '6 months'
    GROUP BY 1, 2

) as trades
GROUP BY 1, 2
ORDER BY 1
)

SELECT *
FROM
(
    SELECT *,
    SUM(volume) OVER (ORDER BY time_day) AS total_volume,
    SUM(fees) OVER (ORDER BY time_day) AS total_fees,
    SUM(users) OVER (ORDER BY time_day) as total_users
    FROM trading_stats
)
ORDER BY time_day DESC"
393612,NFT Transactions per program [Solana],,"[{""id"": 751045, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-02-02T20:30:27.850496+00:00"", ""__typename"": ""visualizations""}, {""id"": 751758, ""type"": ""chart"", ""name"": ""Solsea Transactions"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""tickFormat"": ""0.[.]0a""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""0.[.]0a"", ""columnMapping"": {""Solsea"": ""y"", ""date_trunc(hour, block_time)"": ""x""}, ""seriesOptions"": {""Solsea"": {""type"": ""line"", ""color"": ""#3700FF"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""line""}, ""created_at"": ""2022-02-02T23:15:08.199342+00:00"", ""__typename"": ""visualizations""}, {""id"": 751761, ""type"": ""chart"", ""name"": ""MagicEden Transactions"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""tickFormat"": ""0.[.]0a""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""0.[.]0a"", ""columnMapping"": {""MagicEden"": ""y"", ""date_trunc(hour, block_time)"": ""x""}, ""seriesOptions"": {""MagicEden"": {""type"": ""line"", ""color"": ""#0000FF"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""line""}, ""created_at"": ""2022-02-02T23:15:34.23306+00:00"", ""__typename"": ""visualizations""}, {""id"": 751763, ""type"": ""chart"", ""name"": ""Digital Eyez Transactions"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""tickFormat"": ""0.[.]0a""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""0.[.]0a"", ""columnMapping"": {""DigitalEyez"": ""y"", ""date_trunc(hour, block_time)"": ""x""}, ""seriesOptions"": {""DigitalEyez"": {""type"": ""line"", ""color"": ""#0000FF"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""line""}, ""created_at"": ""2022-02-02T23:15:59.55708+00:00"", ""__typename"": ""visualizations""}, {""id"": 751764, ""type"": ""chart"", ""name"": ""Alpha Transactions"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""tickFormat"": ""0.[.]0a""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""0.[.]0a"", ""columnMapping"": {""Alpha"": ""y"", ""date_trunc(hour, block_time)"": ""x""}, ""seriesOptions"": {""Alpha"": {""type"": ""line"", ""color"": ""#0500FF"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""line""}, ""created_at"": ""2022-02-02T23:16:32.689384+00:00"", ""__typename"": ""visualizations""}, {""id"": 751765, ""type"": ""chart"", ""name"": ""Exchange Art Transactions"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""tickFormat"": ""0.[.]0a""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""0.[.]0a"", ""columnMapping"": {""Exchange_Art"": ""y"", ""date_trunc(hour, block_time)"": ""x""}, ""seriesOptions"": {""Exchange_Art"": {""type"": ""line"", ""color"": ""#0500FF"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""line""}, ""created_at"": ""2022-02-02T23:16:50.048884+00:00"", ""__typename"": ""visualizations""}, {""id"": 753792, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack"", ""percentValues"": true}, ""reverseX"": false, ""columnMapping"": {""Alpha"": ""y"", ""Solsea"": ""y"", ""Metaplex"": ""y"", ""Solanart"": ""y"", ""MagicEden"": ""y"", ""DigitalEyez"": ""y"", ""Exchange_Art"": ""y"", ""date_trunc(hour, block_time)"": ""x""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""area""}, ""created_at"": ""2022-02-03T10:35:39.076241+00:00"", ""__typename"": ""visualizations""}, {""id"": 751142, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""tickFormat"": ""0.[.]0a""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""numberFormat"": ""0.[.]0a"", ""columnMapping"": {""Solsea"": ""y"", ""Metaplex"": ""y"", ""Solanart"": ""y"", ""MagicEden"": ""y"", ""DigitalEyez"": ""y"", ""Exchange_Art"": ""y"", ""date_trunc(hour, block_time)"": ""x""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""area""}, ""created_at"": ""2022-02-02T20:56:52.376713+00:00"", ""__typename"": ""visualizations""}, {""id"": 751753, ""type"": ""chart"", ""name"": ""Metaplex Transactions"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""tickFormat"": ""0.[.]0a""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""0.[.]0a"", ""columnMapping"": {""Metaplex"": ""y"", ""date_trunc(hour, block_time)"": ""x""}, ""seriesOptions"": {""Metaplex"": {""type"": ""line"", ""color"": ""#0000FF"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""line""}, ""created_at"": ""2022-02-02T23:14:09.069313+00:00"", ""__typename"": ""visualizations""}, {""id"": 751754, ""type"": ""chart"", ""name"": ""Solanart Transactions"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""tickFormat"": ""0.[.]0a""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""0.[.]0a"", ""columnMapping"": {""Solanart"": ""y"", ""date_trunc(hour, block_time)"": ""x""}, ""seriesOptions"": {""Solanart"": {""type"": ""line"", ""color"": ""#0000FF"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""line""}, ""created_at"": ""2022-02-02T23:14:37.226044+00:00"", ""__typename"": ""visualizations""}]","select
    date_trunc('hour', block_time),
    count(case when array_contains(account_keys, 'cndyAnrLdpjq1Ssp1z8xxDsB8dxe7u4HL5Nxi2K5WXZ') then id else null end) Metaplex,
    count(case when array_contains(account_keys, 'CJsLwbP1iu5DuUikHEJnLfANgKy6stB2uFgvBBHoyxwz') then id else null end) Solanart,
    count(case when array_contains(account_keys, '617jbWo616ggkDxvW1Le8pV38XLbVSyWY8ae6QUmGBAU') then id else null end) Solsea,
    count(case when (array_contains(account_keys, 'MEisE1HzehtrDpAAT8PnLHjpSSkRYakotTuJRPjTpo8') or array_contains(account_keys, 'M2mx93ekt1fmXSVkTrUL9xVFHkmME8HTUi5Cyc5aF7K')) then id else null end) MagicEden,
    count(case when array_contains(account_keys, 'A7p8451ktDCHq5yYaHczeLMYsjRsAkzc3hCXcSrwYHU7') then id else null end) DigitalEyez,
    count(case when array_contains(account_keys, 'HZaWndaNWHFDd9Dhk5pqUUtsmoBCqzb1MLu3NAh1VX6B') then id else null end) Alpha,
    count(case when array_contains(account_keys, 'AmK5g2XcyptVLCFESBCJqoSfwV3znGoVYQnqEnaAZKWn') then id else null end) Exchange_Art
from solana.transactions
where block_time > (NOW() - interval '30 days') and array_contains(account_keys, 'Vote111111111111111111111111111111111111111') = false
group by 1"
494327,"Solana DEX DAU, last 30d",,"[{""id"": 936286, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-03-11T18:31:00.473966+00:00"", ""__typename"": ""visualizations""}, {""id"": 936287, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": """"}}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""columnMapping"": {"""": ""x"", ""DAU"": ""y"", ""DEX"": ""series"", ""dau"": ""y"", ""day"": ""x"", ""block_hour"": ""x"", ""defi_user_dau"": ""y"", ""user_authority"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""line""}, ""created_at"": ""2022-03-11T18:31:00.473966+00:00"", ""__typename"": ""visualizations""}, {""id"": 936288, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Daily Active Users""}}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""numberFormat"": ""0[.]0a"", ""columnMapping"": {""DAU"": ""y"", ""DEX"": ""series"", ""dau"": ""y"", ""day"": ""x"", ""block_hour"": ""x"", ""defi_user_dau"": ""y""}, ""seriesOptions"": {""Orca"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 1}, ""Serum"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 4}, ""Aldrin"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 5}, ""Raydium"": {""type"": ""column"", ""color"": ""#D92EEF"", ""yAxis"": 0, ""zIndex"": 0}, ""Swap Program"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 8}, ""Mango Markets"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 6}, ""Saber Stable Swap"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 7}, ""Step Finance Swap"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 3}, ""Mercurial Stable Swap"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 2}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-03-11T18:31:00.473966+00:00"", ""__typename"": ""visualizations""}, {""id"": 936289, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}}, ""yAxis"": [{""type"": ""-"", ""title"": {""text"": ""Daily Active Users (%)""}}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack"", ""percentValues"": true}, ""reverseX"": false, ""columnMapping"": {""DEX"": ""series"", ""dau"": ""y"", ""day"": ""x""}, ""seriesOptions"": {""Orca"": {""type"": ""area"", ""yAxis"": 0, ""zIndex"": 4}, ""Serum"": {""type"": ""area"", ""yAxis"": 0, ""zIndex"": 6}, ""Aldrin"": {""type"": ""area"", ""yAxis"": 0, ""zIndex"": 5}, ""Raydium"": {""type"": ""area"", ""color"": ""#D92EEF"", ""yAxis"": 0, ""zIndex"": 0}, ""Swap Program"": {""type"": ""area"", ""yAxis"": 0, ""zIndex"": 8}, ""Mango Markets"": {""type"": ""area"", ""yAxis"": 0, ""zIndex"": 1}, ""Saber Stable Swap"": {""type"": ""area"", ""yAxis"": 0, ""zIndex"": 7}, ""Step Finance Swap"": {""type"": ""area"", ""yAxis"": 0, ""zIndex"": 3}, ""Mercurial Stable Swap"": {""type"": ""area"", ""yAxis"": 0, ""zIndex"": 2}}, ""valuesOptions"": {}, ""globalSeriesType"": ""area""}, ""created_at"": ""2022-03-11T18:31:13.69274+00:00"", ""__typename"": ""visualizations""}]","select     
    date_trunc('day', block_time) as day, 
    case when (array_contains(account_keys, 'mv3ekLzLbnVPNxjSKvqBpU3ZeZXPQdEC3bp5MDEBG68')
                or array_contains(account_keys, '5fNfvyp5czQVX77yoACa3JJVEhdRaWjPuazuWgjhTqEH')
                or array_contains(account_keys, 'JD3bq9hGdy38PuWQ4h2YJpELmHVGPPfFSuFkpzAd9zfu')) then 'Mango Markets' 
        when (array_contains(account_keys, '9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin') 
                or array_contains(account_keys, '22Y43yTVxuUkoRKdm9thyRhQ3SdgQS7c7kB6UNCiaczD')
                or array_contains(account_keys, 'EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o') 
                or array_contains(account_keys, 'BJ3jrUzddfuSrZHXSCxMUUQsjKEyLmuuyZebkcaFp2fg')
                or array_contains(account_keys, '4ckmDgGdxQoPDLUkDT3vHgSAkzA3QRdNq5ywwY4sUSJn')) then 'Serum'
        when (array_contains(account_keys, 'AMM55ShdkoGRB5jVYPjWziwk8m5MpwyDgsMWHaMSQWH6')
                or array_contains(account_keys, 'CURVGoZn8zycx6FXwwevgBTB2gVvdbGTEpvMJDbgs2t4')) then 'Aldrin'
        when (array_contains(account_keys, 'RVKd61ztZW9GUwhRbbLoYVRE5Xf1B2tVscKqwZqXgEr')
                or array_contains(account_keys, '27haf8L6oxUeXrHrgEgsexjSY5hbVUWEmvv9Nyxg8vQv')
                or array_contains(account_keys, '675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8')
                or array_contains(account_keys, 'EhhTKczWMGQt46ynNeRX1WfeagwwJd7ufHvCDjRxjo5Q')
                or array_contains(account_keys, 'CBuCnLe26faBpcBP2fktp4rp8abpcAnTWft6ZrP5Q4T')
                or array_contains(account_keys, '9KEPoZmtHUrBbhWN1v1KWLMkkvwY6WLtAVUCPRtRjP4z')) then 'Raydium'
        when array_contains(account_keys, 'SSwpkEEcbUqx4vtoEByFjSkhKdCT862DNVb52nZg1UZ') then 'Saber Stable Swap'
        when array_contains(account_keys, 'MERLuDFBMmsHnsBPZw2sDQZHvXFMwp8EdjudcU2HKky') then 'Mercurial Stable Swap'
        when (array_contains(account_keys, '82yxjeMsvaURa4MbZZ7WZZHfobirZYkH1zF8fmeGtyaQ')
                or array_contains(account_keys, 'DjVE6JNiYqPL2QXyCUUh8rNjHrbz9hXHNYt99MQ59qw1')
                or array_contains(account_keys, '9W959DqEETiGZocYWCQPaJ6sBmUzgfxXfqGeTEdp3aQP')) then 'Orca'
        when array_contains(account_keys, 'SSwpMgqNDsyV7mAgN9ady4bDVu5ySjmmXejXvy2vLt1') then 'Step Finance Swap'
        when array_contains(account_keys, 'SwaPpA9LAaLfeLi3a68M4DjnLqgtticKg6CnyNwgAC8') then 'Swap Program'
        else null end as DEX,
    count(distinct account_keys[0]) as dau
from solana.transactions
where (

        -- perpetual trading
        array_contains(account_keys, 'mv3ekLzLbnVPNxjSKvqBpU3ZeZXPQdEC3bp5MDEBG68') -- Mango Markets V3
        or array_contains(account_keys, '5fNfvyp5czQVX77yoACa3JJVEhdRaWjPuazuWgjhTqEH') -- Mango Markets V2
        or array_contains(account_keys, 'JD3bq9hGdy38PuWQ4h2YJpELmHVGPPfFSuFkpzAd9zfu') -- Mango Markets V1
    
        -- DEX
        or array_contains(account_keys, '9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin') -- Serum DEX V3
        or array_contains(account_keys, 'EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o') -- Serum DEX V2
        or array_contains(account_keys, 'BJ3jrUzddfuSrZHXSCxMUUQsjKEyLmuuyZebkcaFp2fg') -- Serum DEX V1
        or array_contains(account_keys, '4ckmDgGdxQoPDLUkDT3vHgSAkzA3QRdNq5ywwY4sUSJn') -- Serum DEX V1
        or array_contains(account_keys, '22Y43yTVxuUkoRKdm9thyRhQ3SdgQS7c7kB6UNCiaczD') -- Serum Swap
    
        or array_contains(account_keys, 'AMM55ShdkoGRB5jVYPjWziwk8m5MpwyDgsMWHaMSQWH6') -- Aldrin AMM
        or array_contains(account_keys, 'CURVGoZn8zycx6FXwwevgBTB2gVvdbGTEpvMJDbgs2t4') -- Aldrin AMM V2
        

        or array_contains(account_keys, 'RVKd61ztZW9GUwhRbbLoYVRE5Xf1B2tVscKqwZqXgEr') -- Raydium Liquidity Pool V2
        or array_contains(account_keys, '27haf8L6oxUeXrHrgEgsexjSY5hbVUWEmvv9Nyxg8vQv') -- Raydium Liquidity Pool V3
        or array_contains(account_keys, '675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8') -- Raydium Liquidity Pool V4
        or array_contains(account_keys, 'EhhTKczWMGQt46ynNeRX1WfeagwwJd7ufHvCDjRxjo5Q') -- Raydium Stake
        or array_contains(account_keys, 'CBuCnLe26faBpcBP2fktp4rp8abpcAnTWft6ZrP5Q4T') -- Raydium Stake V4
        or array_contains(account_keys, '9KEPoZmtHUrBbhWN1v1KWLMkkvwY6WLtAVUCPRtRjP4z') -- Raydium Stake V5

        or array_contains(account_keys, 'SSwpkEEcbUqx4vtoEByFjSkhKdCT862DNVb52nZg1UZ') -- Saber Stable Swap
        or array_contains(account_keys, 'MERLuDFBMmsHnsBPZw2sDQZHvXFMwp8EdjudcU2HKky') -- Mercurial Stable Swap
        
        or array_contains(account_keys, '82yxjeMsvaURa4MbZZ7WZZHfobirZYkH1zF8fmeGtyaQ') -- Orca Aquafarm
        or array_contains(account_keys, 'DjVE6JNiYqPL2QXyCUUh8rNjHrbz9hXHNYt99MQ59qw1') -- Orca Token Swap
        or array_contains(account_keys, '9W959DqEETiGZocYWCQPaJ6sBmUzgfxXfqGeTEdp3aQP') -- Orca Token Swap V2
        
        or array_contains(account_keys, 'SSwpMgqNDsyV7mAgN9ady4bDVu5ySjmmXejXvy2vLt1') -- Step Finance Swap Program
        
        or array_contains(account_keys, 'SwaPpA9LAaLfeLi3a68M4DjnLqgtticKg6CnyNwgAC8') -- Swap Program ??


        )
        and block_time >= date_trunc('day', now() - interval '30 days') 
        and block_time < date_trunc('day', now())
group by 1,2
"
393762,DeFi Transactions per program [Solana],,"[{""id"": 751318, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-02-02T21:37:29.002054+00:00"", ""__typename"": ""visualizations""}, {""id"": 753794, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack"", ""percentValues"": true}, ""reverseX"": false, ""columnMapping"": {""Drift_Trade"": ""y"", ""Serum_DEX_V3"": ""y"", ""Raydium_LP_V4"": ""y"", ""Mango_Markets_V3"": ""y"", ""Orca_TokenSwap_V2"": ""y"", ""date_trunc(hour, block_time)"": ""x""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""area""}, ""created_at"": ""2022-02-03T10:37:20.47285+00:00"", ""__typename"": ""visualizations""}, {""id"": 751721, ""type"": ""chart"", ""name"": ""Orca Transactions"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""tickFormat"": ""0.[.]0a""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""0.[.]0a"", ""columnMapping"": {""Orca_TokenSwap_V2"": ""y"", ""date_trunc(hour, block_time)"": ""x""}, ""seriesOptions"": {""Orca_TokenSwap_V2"": {""type"": ""line"", ""color"": ""#0000FF"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""line""}, ""created_at"": ""2022-02-02T23:04:24.760594+00:00"", ""__typename"": ""visualizations""}, {""id"": 751725, ""type"": ""chart"", ""name"": ""Serum Transactions"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""tickFormat"": ""0.[.]0a""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""0.[.]0a"", ""columnMapping"": {""Serum_DEX_V3"": ""y"", ""date_trunc(hour, block_time)"": ""x""}, ""seriesOptions"": {""Serum_DEX_V3"": {""type"": ""line"", ""color"": ""#0000FF"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""line""}, ""created_at"": ""2022-02-02T23:05:12.286601+00:00"", ""__typename"": ""visualizations""}, {""id"": 751723, ""type"": ""chart"", ""name"": ""Raydium Transactions"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""tickFormat"": ""0.[.]0a""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""0.[.]0a"", ""columnMapping"": {""Raydium_LP_V4"": ""y"", ""date_trunc(hour, block_time)"": ""x""}, ""seriesOptions"": {""Raydium_LP_V4"": {""type"": ""line"", ""color"": ""#0000FF"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""line""}, ""created_at"": ""2022-02-02T23:04:56.733682+00:00"", ""__typename"": ""visualizations""}, {""id"": 751726, ""type"": ""chart"", ""name"": ""Drift Transactions"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""tickFormat"": ""0.[.]0a""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""0.[.]0a"", ""columnMapping"": {""Drift_Trade"": ""y"", ""date_trunc(hour, block_time)"": ""x""}, ""seriesOptions"": {""Drift_Trade"": {""type"": ""line"", ""color"": ""#0000FF"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""line""}, ""created_at"": ""2022-02-02T23:05:25.997695+00:00"", ""__typename"": ""visualizations""}, {""id"": 751727, ""type"": ""chart"", ""name"": ""Mango Markets"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""tickFormat"": ""0.[.]0a""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""0.[.]0a"", ""columnMapping"": {""Mango_Markets_V3"": ""y"", ""date_trunc(hour, block_time)"": ""x""}, ""seriesOptions"": {""Mango_Markets_V3"": {""type"": ""line"", ""color"": ""#0000FF"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""line""}, ""created_at"": ""2022-02-02T23:05:42.924915+00:00"", ""__typename"": ""visualizations""}, {""id"": 751319, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack"", ""percentValues"": false}, ""reverseX"": false, ""columnMapping"": {""Solsea"": ""y"", ""Metaplex"": ""y"", ""Solanart"": ""y"", ""MagicEden"": ""y"", ""DigitalEyez"": ""y"", ""Drift_Trade"": ""y"", ""Serum_DEX_V3"": ""y"", ""Raydium_LP_V4"": ""y"", ""Mango_Markets_V3"": ""y"", ""Orca_TokenSwap_V2"": ""y"", ""date_trunc(hour, block_time)"": ""x""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""area""}, ""created_at"": ""2022-02-02T21:37:29.002054+00:00"", ""__typename"": ""visualizations""}, {""id"": 1149040, ""type"": ""chart"", ""name"": ""Raydium Vs Serum"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Transactions""}}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack"", ""percentValues"": true}, ""reverseX"": false, ""columnMapping"": {"""": ""y"", ""Serum_DEX_V3"": ""y"", ""Raydium_LP_V4"": ""y"", ""date_trunc(hour, block_time)"": ""x""}, ""seriesOptions"": {""Serum_DEX_V3"": {""type"": ""area"", ""color"": ""#34B3C8"", ""yAxis"": 0, ""zIndex"": 2}, ""Raydium_LP_V4"": {""type"": ""area"", ""color"": ""#D92EEF"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""area""}, ""created_at"": ""2022-04-18T20:05:14.791118+00:00"", ""__typename"": ""visualizations""}]","select
    date_trunc('hour', block_time),
    count(case when array_contains(account_keys, '675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8') then id else null end) Raydium_LP_V4,
    count(case when array_contains(account_keys, '9W959DqEETiGZocYWCQPaJ6sBmUzgfxXfqGeTEdp3aQP') then id else null end) Orca_TokenSwap_V2,
    count(case when array_contains(account_keys, '9wFFyRfZBsuAha4YcuxcXLKwMxJR43S7fPfQLusDBzvT') then id else null end) Serum_DEX_V3,
    count(case when array_contains(account_keys, 'dammHkt7jmytvbS3nHTxQNEcP59aE57nxwV21YdqEDN') then id else null end) Drift_Trade,
    count(case when array_contains(account_keys, 'mv3ekLzLbnVPNxjSKvqBpU3ZeZXPQdEC3bp5MDEBG68') then id else null end) Mango_Markets_V3
from solana.transactions
where block_time > (NOW() - interval '30 days') and array_contains(account_keys, 'Vote111111111111111111111111111111111111111') = false
group by 1"
482956,Solana NFT Marketplaces DAU (Last 30D),,"[{""id"": 914932, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-03-08T15:28:41.938867+00:00"", ""__typename"": ""visualizations""}, {""id"": 914933, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": """"}}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""columnMapping"": {"""": ""x"", ""DAU"": ""y"", ""day"": ""x"", ""block_hour"": ""x"", ""defi_user_dau"": ""y"", ""user_authority"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""line""}, ""created_at"": ""2022-03-08T15:28:41.938867+00:00"", ""__typename"": ""visualizations""}, {""id"": 914934, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""columnMapping"": {""DAU"": ""y"", ""day"": ""x"", ""block_hour"": ""x"", ""nft_project"": ""series"", ""defi_user_dau"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-03-08T15:28:41.938867+00:00"", ""__typename"": ""visualizations""}]","select     
    date_trunc('day', block_time) as day, 
    case when (array_contains(account_keys, 'MEisE1HzehtrDpAAT8PnLHjpSSkRYakotTuJRPjTpo8') or array_contains(account_keys, 'M2mx93ekt1fmXSVkTrUL9xVFHkmME8HTUi5Cyc5aF7K'))  then 'Magic Eden'
        when array_contains(account_keys, 'cndyAnrLdpjq1Ssp1z8xxDsB8dxe7u4HL5Nxi2K5WXZ') then 'Metaplex NFT Candy Machine'
        when array_contains(account_keys, 'CJsLwbP1iu5DuUikHEJnLfANgKy6stB2uFgvBBHoyxwz') then 'Solanart'
        when array_contains(account_keys, 'A7p8451ktDCHq5yYaHczeLMYsjRsAkzc3hCXcSrwYHU7') then 'DigitalEyes'
        when array_contains(account_keys, 'CJsLwbP1iu5DuUikHEJnLfANgKy6stB2uFgvBBHoyxwz') then 'Solanart'
        when array_contains(account_keys, '617jbWo616ggkDxvW1Le8pV38XLbVSyWY8ae6QUmGBAU') then 'Solsea'
        else null end as nft_project,
    count(distinct account_keys[0]) as defi_user_dau
from solana.transactions
where (

        
        array_contains(account_keys, 'MEisE1HzehtrDpAAT8PnLHjpSSkRYakotTuJRPjTpo8') -- Magic Eden NFT Marketplace
        or array_contains(account_keys, 'M2mx93ekt1fmXSVkTrUL9xVFHkmME8HTUi5Cyc5aF7K') -- Magic Eden NFT Marketplace v2
        or array_contains(account_keys, 'cndyAnrLdpjq1Ssp1z8xxDsB8dxe7u4HL5Nxi2K5WXZ') -- Metaplex NFT Candy Machine v1
        or array_contains(account_keys, 'CJsLwbP1iu5DuUikHEJnLfANgKy6stB2uFgvBBHoyxwz') -- Solanart NFT Marketplace
        or array_contains(account_keys, 'A7p8451ktDCHq5yYaHczeLMYsjRsAkzc3hCXcSrwYHU7') -- DigitalEyes NFT Marketplace
        or array_contains(account_keys, 'CJsLwbP1iu5DuUikHEJnLfANgKy6stB2uFgvBBHoyxwz') -- Solanart NFT Marketplace
        or array_contains(account_keys, '617jbWo616ggkDxvW1Le8pV38XLbVSyWY8ae6QUmGBAU') -- Solsea NFT Marketplace

        )
        and block_time between date_trunc('day', now() - interval '30 days') and date_trunc('day', now() - interval '1 days')
group by 1, 2
"
494334,Solana DEX MAU (3M),,"[{""id"": 936299, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": """"}}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""columnMapping"": {"""": ""x"", ""DAU"": ""y"", ""DEX"": ""series"", ""dau"": ""y"", ""day"": ""x"", ""mau"": ""y"", ""month"": ""x"", ""block_hour"": ""x"", ""defi_user_dau"": ""y"", ""user_authority"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""line""}, ""created_at"": ""2022-03-11T18:33:56.125887+00:00"", ""__typename"": ""visualizations""}, {""id"": 936298, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-03-11T18:33:56.125887+00:00"", ""__typename"": ""visualizations""}, {""id"": 936300, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": null, ""percentValues"": false}, ""reverseX"": false, ""numberFormat"": "","", ""columnMapping"": {""DAU"": ""y"", ""DEX"": ""series"", ""dau"": ""y"", ""day"": ""x"", ""mau"": ""y"", ""month"": ""x"", ""block_hour"": ""x"", ""defi_user_dau"": ""y""}, ""seriesOptions"": {""mau"": {""type"": ""column"", ""color"": ""#0000FF"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-03-11T18:33:56.125887+00:00"", ""__typename"": ""visualizations""}]","select     
    date_trunc('month', block_time) as month,
    count(distinct account_keys[0]) as mau
from solana.transactions
where (

        -- perpetual trading
        array_contains(account_keys, 'mv3ekLzLbnVPNxjSKvqBpU3ZeZXPQdEC3bp5MDEBG68') -- Mango Markets V3
        or array_contains(account_keys, '5fNfvyp5czQVX77yoACa3JJVEhdRaWjPuazuWgjhTqEH') -- Mango Markets V2
        or array_contains(account_keys, 'JD3bq9hGdy38PuWQ4h2YJpELmHVGPPfFSuFkpzAd9zfu') -- Mango Markets V1
    
        -- DEX
        or array_contains(account_keys, '9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin') -- Serum DEX V3
        or array_contains(account_keys, 'EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o') -- Serum DEX V2
        or array_contains(account_keys, 'BJ3jrUzddfuSrZHXSCxMUUQsjKEyLmuuyZebkcaFp2fg') -- Serum DEX V1
        or array_contains(account_keys, '4ckmDgGdxQoPDLUkDT3vHgSAkzA3QRdNq5ywwY4sUSJn') -- Serum DEX V1
        or array_contains(account_keys, '22Y43yTVxuUkoRKdm9thyRhQ3SdgQS7c7kB6UNCiaczD') -- Serum Swap
    
        or array_contains(account_keys, 'AMM55ShdkoGRB5jVYPjWziwk8m5MpwyDgsMWHaMSQWH6') -- Aldrin AMM
        or array_contains(account_keys, 'CURVGoZn8zycx6FXwwevgBTB2gVvdbGTEpvMJDbgs2t4') -- Aldrin AMM V2
        

        or array_contains(account_keys, 'RVKd61ztZW9GUwhRbbLoYVRE5Xf1B2tVscKqwZqXgEr') -- Raydium Liquidity Pool V2
        or array_contains(account_keys, '27haf8L6oxUeXrHrgEgsexjSY5hbVUWEmvv9Nyxg8vQv') -- Raydium Liquidity Pool V3
        or array_contains(account_keys, '675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8') -- Raydium Liquidity Pool V4
        or array_contains(account_keys, 'EhhTKczWMGQt46ynNeRX1WfeagwwJd7ufHvCDjRxjo5Q') -- Raydium Stake
        or array_contains(account_keys, 'CBuCnLe26faBpcBP2fktp4rp8abpcAnTWft6ZrP5Q4T') -- Raydium Stake V4
        or array_contains(account_keys, '9KEPoZmtHUrBbhWN1v1KWLMkkvwY6WLtAVUCPRtRjP4z') -- Raydium Stake V5

        or array_contains(account_keys, 'SSwpkEEcbUqx4vtoEByFjSkhKdCT862DNVb52nZg1UZ') -- Saber Stable Swap
        or array_contains(account_keys, 'MERLuDFBMmsHnsBPZw2sDQZHvXFMwp8EdjudcU2HKky') -- Mercurial Stable Swap
        
        or array_contains(account_keys, '82yxjeMsvaURa4MbZZ7WZZHfobirZYkH1zF8fmeGtyaQ') -- Orca Aquafarm
        or array_contains(account_keys, 'DjVE6JNiYqPL2QXyCUUh8rNjHrbz9hXHNYt99MQ59qw1') -- Orca Token Swap
        or array_contains(account_keys, '9W959DqEETiGZocYWCQPaJ6sBmUzgfxXfqGeTEdp3aQP') -- Orca Token Swap V2
        
        or array_contains(account_keys, 'SSwpMgqNDsyV7mAgN9ady4bDVu5ySjmmXejXvy2vLt1') -- Step Finance Swap Program
        
        or array_contains(account_keys, 'SwaPpA9LAaLfeLi3a68M4DjnLqgtticKg6CnyNwgAC8') -- Swap Program ??


        )
        and block_time >= date_trunc('month', now() - interval '3 months') 
        and block_time < date_trunc('month', now())
group by 1
"
635842,Blue chip index,,"[{""id"": 1184754, ""type"": ""table"", ""name"": ""Query results table"", ""options"": {""columns"": [{""name"": ""floor_price"", ""numberFormat"": ""0.0""}, {""name"": ""floor_price_mei"", ""numberFormat"": ""0.0""}, {""name"": ""floor_price_dollar"", ""numberFormat"": ""0.0""}]}, ""created_at"": ""2022-04-25T05:32:42.628685+00:00"", ""__typename"": ""visualizations""}, {""id"": 1184811, ""type"": ""chart"", ""name"": ""NFT"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""0.0"", ""columnMapping"": {""day"": ""x"", ""floor_price_dollar"": ""y""}, ""seriesOptions"": {""floor_price_dollar"": {""type"": ""line"", ""color"": ""#F40606"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""line""}, ""created_at"": ""2022-04-25T05:54:31.476651+00:00"", ""__typename"": ""visualizations""}, {""id"": 1184825, ""type"": ""chart"", ""name"": ""2022$"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""0.0"", ""columnMapping"": {""day"": ""x"", ""floor_price_dollar"": ""y""}, ""seriesOptions"": {""floor_price_dollar"": {""type"": ""column"", ""color"": ""#E517E8"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-04-25T06:01:40.370519+00:00"", ""__typename"": ""visualizations""}]","
with t1 as (
SELECT  nft_contract_address
       ,date_trunc('day',block_time )                               AS day
       ,percentile_cont(.1) within GROUP (ORDER BY original_amount) AS bayc_median
FROM nft.trades
WHERE nft_token_id IS NOT NULL
AND original_currency IN ('ETH', 'WETH')
AND date_trunc('day', block_time ) > date_trunc('day', now()) - interval '31 days'
AND date_trunc('day', block_time ) < date_trunc('day', now())

and nft_contract_address in (
'\xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D',
'\xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB',
'\x60E4d786628Fea6478F785A6d7e704777c86a7c6',
'\xED5AF388653567Af2F388E6224dC7C4b3241C544',
'\x49cF6f5d44E70224e2E23fDcdd2C053F30aDA28B',
'\x8a90CAb2b38dba80c64b7734e58Ee1dB38B8992e',
'\x23581767a106ae21c074b2276D25e5C3e136a68b',
'\xe785E82358879F061BC3dcAC6f0444462D4b5330',
'\xa3AEe8BcE55BEeA1951EF834b99f3Ac60d1ABeeB',
'\xb668beB1Fa440F6cF2Da0399f8C28caB993Bdd65',
'\x1A92f7381B9F03921564a437210bB9396471050C',
'\xBD4455dA5929D5639EE098ABFaa3241e9ae111Af',
'\xEDc3AD89f7b0963fe23D714B34185713706B815b',
'\xba30E5F9Bb24caa003E9f2f0497Ad287FDF95623',
'\x341A1c534248966c4b6AFaD165B98DAED4B964ef',
'\x57a204AA1042f6E66DD7730813f4024114d74f37',
'\x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7',
'\xEdB61f74B0d09B2558F1eeb79B247c1F363Ae452',
'\x59468516a8259058baD1cA5F8f4BFF190d30E066',
'\x892848074ddeA461A15f337250Da3ce55580CA85',
'\x1CB1A5e65610AEFF2551A50f76a87a7d3fB649C6',
'\x6dc6001535e15b9def7b0f6A20a2111dFA9454E2'
)
group by 1,2
) 
, t2 as (
SELECT  date_trunc('day', minute)  as day,
        AVG(price) as average,
        MAX(price) as maximum,
        MIN(price)
FROM prices.""layer1_usd""
WHERE ""symbol"" = 'ETH' AND  date_trunc('day', minute) > date_trunc('day', now()) - interval '31 days'
and date_trunc('day', minute) < date_trunc('day', now()) 

GROUP BY 1 
)
SELECT  to_char(t1.day,'MM/DD')           AS day
       ,SUM(t1.bayc_median)                    AS floor_price
       ,SUM(t1.bayc_median * t2.average)/10000 AS floor_price_dollar
FROM t1
LEFT JOIN t2
ON t1.day = t2.day
GROUP BY  1
order by 1 
"
652608,GameFi Index(USD/10k),,"[{""id"": 1212754, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-04-29T07:40:02.101749+00:00"", ""__typename"": ""visualizations""}, {""id"": 1212767, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""0.0"", ""columnMapping"": {""day"": ""x"", ""floor_price_dollar"": ""y""}, ""seriesOptions"": {""floor_price_dollar"": {""type"": ""line"", ""color"": ""#F50505"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""line""}, ""created_at"": ""2022-04-29T07:42:47.351368+00:00"", ""__typename"": ""visualizations""}, {""id"": 1212770, ""type"": ""chart"", ""name"": ""Volume"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""0,0"", ""columnMapping"": {""day"": ""x"", ""original_amount"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""showDataLabels"": false, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-04-29T07:43:13.235567+00:00"", ""__typename"": ""visualizations""}]","
with t1 as (
SELECT  nft_contract_address
       ,date_trunc('day',block_time )                               AS day
       ,percentile_cont(.1) within GROUP (ORDER BY original_amount) AS bayc_median
       ,sum(original_amount) as original_amount
FROM nft.trades
WHERE nft_token_id IS NOT NULL
AND original_currency IN ('ETH', 'WETH')
AND date_trunc('day', block_time ) > date_trunc('day', now()) - interval '31 days'
AND date_trunc('day', block_time ) < date_trunc('day', now())

and nft_contract_address in (


'\xb668beB1Fa440F6cF2Da0399f8C28caB993Bdd65',
'\x9df8Aa7C681f33E442A0d57B838555da863504f3',
'\x57a204AA1042f6E66DD7730813f4024114d74f37',
'\xfE8C6d19365453D26af321D0e8c910428c23873F',
'\xFF9C1b15B16263C61d017ee9F65C50e4AE0113D7',
'\x3110EF5f612208724CA51F5761A69081809F03B7',
'\x0c2E57EFddbA8c768147D1fdF9176a0A6EBd5d83',
'\xad9Fd7cB4fC7A0fBCE08d64068f60CbDE22Ed34C',
'\xf76179bb0924BA7da8E7b7Fc2779495D7A7939d8',
'\x338BE3d8D0209815601e72F7A04Ac7F37d61564b',
'\x5CC5B05a8A13E3fBDB0BB9FcCd98D38e50F90c38',
'\xF87E31492Faf9A91B02Ee0dEAAd50d51d56D5d4d',
'\x4a8C9D751EEAbc5521A68FB080DD7E72E46462aF',
'\x7F36182DeE28c45dE6072a34D29855BaE76DBe2f',
'\xA1D4657e0E6507D5a94d06DA93E94dC7C8c44b51',
'\xBD4455dA5929D5639EE098ABFaa3241e9ae111Af',
'\xba30E5F9Bb24caa003E9f2f0497Ad287FDF95623',
'\x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7'


)
group by 1,2
) 
, t2 as (
SELECT  date_trunc('day', minute)  as day,
        AVG(price) as average,
        MAX(price) as maximum,
        MIN(price)
FROM prices.""layer1_usd""
WHERE ""symbol"" = 'ETH' AND  date_trunc('day', minute) > date_trunc('day', now()) - interval '31 days'
and date_trunc('day', minute) < date_trunc('day', now()) 

GROUP BY 1 
)
SELECT  to_char(t1.day,'MM/DD')                   AS day
       ,SUM(t1.original_amount * t2.average)/10000 AS original_amount
       ,SUM(t1.bayc_median * t2.average)/10000    AS floor_price_dollar
FROM t1
LEFT JOIN t2
ON t1.day = t2.day
GROUP BY  1
ORDER BY 1
"
652638,Arts Index(USD/10k),,"[{""id"": 1212805, ""type"": ""chart"", ""name"": ""Volume"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""0,0"", ""columnMapping"": {""day"": ""x"", ""original_amount"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""showDataLabels"": false, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-04-29T07:49:21.55175+00:00"", ""__typename"": ""visualizations""}, {""id"": 1212799, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""0.0"", ""columnMapping"": {""day"": ""x"", ""floor_price_dollar"": ""y""}, ""seriesOptions"": {""floor_price_dollar"": {""type"": ""line"", ""color"": ""#F50505"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""line""}, ""created_at"": ""2022-04-29T07:48:56.508975+00:00"", ""__typename"": ""visualizations""}, {""id"": 1212795, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-04-29T07:48:16.685256+00:00"", ""__typename"": ""visualizations""}]","
with t1 as (
SELECT  nft_contract_address
       ,date_trunc('day',block_time )                               AS day
       ,percentile_cont(.1) within GROUP (ORDER BY original_amount) AS bayc_median
       ,sum(original_amount) as original_amount
FROM nft.trades
WHERE nft_token_id IS NOT NULL
AND original_currency IN ('ETH', 'WETH')
AND date_trunc('day', block_time ) > date_trunc('day', now()) - interval '31 days'
AND date_trunc('day', block_time ) < date_trunc('day', now())
and nft_contract_address in (
'\xeB3a9A839dFeEaf71db1B4eD6a8ae0cCB171b227',
'\x496A2D17a89CBC4248e9B52C8003A50C648fBCA0',
'\xC9677Cd8e9652F1b1aaDd3429769b0Ef8D7A0425',
'\x8A939fd297FAb7388d6e6C634eEe3C863626bE57',
'\x0Cfb5d82BE2b949e8fa73A656dF91821E2aD99FD',
'\x341A1c534248966c4b6AFaD165B98DAED4B964ef',
'\x5bd815Fd6c096bAB38B4C6553cfce3585194dff9',
'\x0825F050E9B021A0E9de8CB1fb10b6C9F41e834C',
'\x58519EA95cdfad3622c4c574E61A58Fa257D9E77',
'\x7828c811636CCf051993C1EC3157b0B732e55B23',
'\xE3234e57ac38890a9136247EAdFE1860316Ff6ab',
'\x490571E17D12334eb61EAc154251de2ea16F9213',
'\x4570340e5C091F020FF31bC6012Ba3b2eB83Ad82',
'\x614917F589593189ac27aC8B81064CBe450C35e3'
)
group by 1,2
) 
, t2 as (
SELECT  date_trunc('day',minute) AS day
       ,AVG(price)               AS average
       ,MAX(price)               AS maximum
       ,MIN(price)
FROM prices.""layer1_usd""
WHERE ""symbol"" = 'ETH'
AND date_trunc('day', minute) > date_trunc('day', now()) - interval '31 days'
and date_trunc('day', minute) < date_trunc('day', now()) 
GROUP BY  1
)
SELECT  to_char(t1.day,'MM/DD')                    AS day
       ,SUM(t1.original_amount * t2.average)/10000 AS original_amount
       ,SUM(t1.bayc_median * t2.average)/10000     AS floor_price_dollar
FROM t1
LEFT JOIN t2
ON t1.day = t2.day
GROUP BY  1
ORDER BY 1

"
652631,Utility&membership Index(USD/10k),,"[{""id"": 1212785, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-04-29T07:45:14.982187+00:00"", ""__typename"": ""visualizations""}, {""id"": 1212787, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""0.0"", ""columnMapping"": {""day"": ""x"", ""floor_price_dollar"": ""y""}, ""seriesOptions"": {""floor_price_dollar"": {""type"": ""line"", ""color"": ""#F00A0A"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""line""}, ""created_at"": ""2022-04-29T07:45:47.671948+00:00"", ""__typename"": ""visualizations""}, {""id"": 1212788, ""type"": ""chart"", ""name"": ""Volume"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""0,0"", ""columnMapping"": {""day"": ""x"", ""original_amount"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""showDataLabels"": false, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-04-29T07:46:19.754766+00:00"", ""__typename"": ""visualizations""}]","
with t1 as (
SELECT  nft_contract_address
       ,date_trunc('day',block_time )                               AS day
       ,percentile_cont(.1) within GROUP (ORDER BY original_amount) AS bayc_median
       ,sum(original_amount) as original_amount
FROM nft.trades
WHERE nft_token_id IS NOT NULL
AND original_currency IN ('ETH', 'WETH')
AND date_trunc('day', block_time ) > date_trunc('day', now()) - interval '31 days'
AND date_trunc('day', block_time ) < date_trunc('day', now())
and nft_contract_address in (
'\xEDc3AD89f7b0963fe23D714B34185713706B815b',
'\xf54cC94f1F2f5De012B6Aa51F1E7eBdc43Ef5afC',
'\x0b4B2bA334f476C8F41bFe52A428D6891755554d',
'\x03ef30e1aee25aBd320AD961B8CD31Aa1a011c97',
'\xe0176bA60efddb29Cac5b15338C9962dAee9de0c',
'\x28472a58A490c5e09A238847F66A68a47cC76f0f',
'\xa3AEe8BcE55BEeA1951EF834b99f3Ac60d1ABeeB',
'\x9378368ba6b85c1FbA5b131b530f5F5bEdf21A18',
'\x08BA8CBbefa64Aaf9DF25e57fE3f15eCC277Af74',
'\xbcE6D2aa86934AF4317AB8615F89E3F9430914Cb',
'\x78a5E2B8c280FA5580fBE1e1ed546183f959d305',
'\x696115768BBEf67Be8bd408d760332A7EfbEE92D',
'\x5b7622DED96511639DdC12C86eb2703331cA2c78'
)
group by 1,2
) 
, t2 as (
SELECT  date_trunc('day', minute)  as day,
        AVG(price) as average,
        MAX(price) as maximum,
        MIN(price)
FROM prices.""layer1_usd""
WHERE ""symbol"" = 'ETH' AND  date_trunc('day', minute) > date_trunc('day', now()) - interval '31 days'
and date_trunc('day', minute) < date_trunc('day', now()) 

GROUP BY 1 
)
SELECT  to_char(t1.day,'MM/DD')                    AS day
       ,SUM(t1.original_amount * t2.average)/10000 AS original_amount
       ,SUM(t1.bayc_median * t2.average)/10000     AS floor_price_dollar
FROM t1
LEFT JOIN t2
ON t1.day = t2.day
GROUP BY  1
ORDER BY 1

"
639893,OpenSea monthly volume (ETH) ,,"[{""id"": 1191785, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-04-26T08:08:23.8016+00:00"", ""__typename"": ""visualizations""}, {""id"": 1196711, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""0,0"", ""columnMapping"": {""day"": ""x"", ""usd"": ""y"", ""month"": ""x""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-04-27T02:54:45.362083+00:00"", ""__typename"": ""visualizations""}]","
WITH to_exclude AS (
SELECT  date_trunc('month',block_time) AS time
       ,SUM(usd_amount)              AS volume
FROM nft.trades
WHERE tx_hash IN (      
  SELECT  call_tx_hash AS txs
FROM opensea.""WyvernExchange_call_atomicMatch_""
WHERE (addrs[4] = '\x5b3256965e7c3cf26e11fcaf296dfc8807c01073' OR addrs[11] = '\x5b3256965e7c3cf26e11fcaf296dfc8807c01073')
AND call_success
AND call_block_time > '2022-01-21'
AND date_trunc('month', call_block_time) >= '2021-02-01'
GROUP BY  1
HAVING COUNT(DISTINCT CASE WHEN addrs[7] = '\x0000000000000000000000000000000000000000' THEN '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' ELSE addrs[7] END) > 1
)
    GROUP BY time
    )

, raw_volume AS (
SELECT  date_trunc('month',block_time) AS time
       ,SUM(usd_amount)              AS volume
FROM nft.trades
WHERE platform IN ( 'OpenSea' )
AND date_trunc('month', block_time) >= '2021-02-01'
GROUP BY  time
)

SELECT   rv.time             AS day
       ,SUM(rv.volume)-COALESCE(SUM(te.volume),0) AS usd
FROM raw_volume rv
LEFT JOIN to_exclude te
ON rv.time=te.time 
GROUP BY  rv.time"
644582,OpenSea daily active traders (ETH/10k),,"[{""id"": 1199193, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""0.0"", ""columnMapping"": {""date"": ""x"", ""users"": ""y""}, ""seriesOptions"": {""users"": {""type"": ""line"", ""color"": ""#F10404"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""line""}, ""created_at"": ""2022-04-27T10:22:38.039697+00:00"", ""__typename"": ""visualizations""}, {""id"": 1199123, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-04-27T10:02:10.174158+00:00"", ""__typename"": ""visualizations""}, {""id"": 1199180, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""columnMapping"": {""date"": ""x"", ""users"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-04-27T10:20:36.173357+00:00"", ""__typename"": ""visualizations""}]","
SELECT  date
       ,cast(COUNT(account) as decimal(38,10))/10000 AS users
FROM
(
    SELECT  to_char(evt_block_time,'MM/DD') AS date
           ,maker                           AS account
    FROM opensea.""WyvernExchange_evt_OrdersMatched""
    WHERE date_trunc('day', evt_block_time) >= date_trunc('day', now()) - interval '31 days'
    AND date_trunc('day', evt_block_time) < date_trunc('day', now()) UNION
    SELECT  to_char(evt_block_time,'MM/DD') AS date
           ,taker                           AS account
    FROM opensea.""WyvernExchange_evt_OrdersMatched""
    WHERE date_trunc('day', evt_block_time) >= date_trunc('day', now()) - interval '31 days'
    AND date_trunc('day', evt_block_time) < date_trunc('day', now()) 
) a
GROUP BY  1
ORDER BY 1"
644618,OpenSea monthly active traders (ETH),,"[{""id"": 1199182, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-04-27T10:21:16.890262+00:00"", ""__typename"": ""visualizations""}, {""id"": 1199199, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""0,0"", ""columnMapping"": {""date"": ""x"", ""users"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-04-27T10:23:23.199357+00:00"", ""__typename"": ""visualizations""}]","
SELECT  date
       ,COUNT(account) AS users
FROM
(
    SELECT  date_trunc('month',evt_block_time) AS date
           ,maker                              AS account
    FROM opensea.""WyvernExchange_evt_OrdersMatched"" 
    UNION
    SELECT  date_trunc('month',evt_block_time) AS date
           ,taker                              AS account
    FROM opensea.""WyvernExchange_evt_OrdersMatched""
) a
GROUP BY  1
ORDER BY 1"
644633,Potential NFT Index(新兴指数),,"[{""id"": 1199212, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-04-27T10:26:20.204292+00:00"", ""__typename"": ""visualizations""}, {""id"": 1199253, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""0.0"", ""columnMapping"": {""day"": ""x"", ""floor_price_dollar"": ""y""}, ""seriesOptions"": {""floor_price_dollar"": {""type"": ""line"", ""color"": ""#F70202"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""line""}, ""created_at"": ""2022-04-27T10:30:53.58963+00:00"", ""__typename"": ""visualizations""}]","
with t1 as (
SELECT  nft_contract_address
       ,date_trunc('day',block_time )                               AS day
       ,percentile_cont(.1) within GROUP (ORDER BY original_amount) AS bayc_median
FROM nft.trades
WHERE nft_token_id IS NOT NULL
AND original_currency IN ('ETH', 'WETH')
AND date_trunc('day', block_time ) > date_trunc('day', now()) - interval '31 days'
AND date_trunc('day', block_time ) < date_trunc('day', now())

and nft_contract_address in (

'\xf54cC94f1F2f5De012B6Aa51F1E7eBdc43Ef5afC',
'\x1CB1A5e65610AEFF2551A50f76a87a7d3fB649C6',
'\xd2F668a8461D6761115dAF8Aeb3cDf5F40C532C6',
'\x79FCDEF22feeD20eDDacbB2587640e45491b757f',
'\x3110EF5f612208724CA51F5761A69081809F03B7',
'\x75E95ba5997Eb235F40eCF8347cDb11F18ff640B',
'\x28472a58A490c5e09A238847F66A68a47cC76f0f',
'\x521f9C7505005CFA19A8E5786a9c3c9c9F5e6f42',
'\xBd3531dA5CF5857e7CfAA92426877b022e612cf8',
'\x9c80777CAe192E5031c38A0d951C55730eCC3f5e',
'\x2acAb3DEa77832C09420663b0E1cB386031bA17B',
'\x3903d4fFaAa700b62578a66e7a67Ba4cb67787f9',
'\x03ef30e1aee25aBd320AD961B8CD31Aa1a011c97',
'\x6E9DA81ce622fB65ABf6a8d8040e460fF2543Add',
'\xb4d06d46A8285F4EC79Fd294F78a881799d8cEd9',
'\x5bd815Fd6c096bAB38B4C6553cfce3585194dff9',
'\x950b9476a4de757BB134483029AC4Ec17E739e3A',
'\xfE8C6d19365453D26af321D0e8c910428c23873F',
'\x5be99338289909d6dbBC57bb791140Ef85cCbCAB',
'\x0c2E57EFddbA8c768147D1fdF9176a0A6EBd5d83',
'\x09233d553058c2F42ba751C87816a8E9FaE7Ef10',
'\x86C10D10ECa1Fca9DAF87a279ABCcabe0063F247',
'\x7EA3Cca10668B8346aeC0bf1844A49e995527c8B',
'\x123b30E25973FeCd8354dd5f41Cc45A3065eF88C',
'\x0b4B2bA334f476C8F41bFe52A428D6891755554d',
'\x4B61413D4392c806E6d0fF5Ee91E6073C21d6430',
'\xB5C747561a185A146f83cFff25BdfD2455b31fF4',
'\x35471f47c3C0BC5FC75025b97A19ECDDe00F78f8',
'\xf61F24c2d93bF2dE187546B14425BF631F28d6dC',
'\xfcB1315C4273954F74Cb16D5b663DBF479EEC62e',
'\x9a38DEC0590aBC8c883d72E52391090e948DdF12',
'\xc1Caf0C19A8AC28c41Fe59bA6c754e4b9bd54dE9',
'\x892848074ddeA461A15f337250Da3ce55580CA85',
'\xA1D4657e0E6507D5a94d06DA93E94dC7C8c44b51',
'\x28472a58A490c5e09A238847F66A68a47cC76f0f',
'\x9378368ba6b85c1FbA5b131b530f5F5bEdf21A18'

)
group by 1,2
) 
, t2 as (
SELECT  date_trunc('day', minute)  as day,
        AVG(price) as average,
        MAX(price) as maximum,
        MIN(price)
FROM prices.""layer1_usd""
WHERE ""symbol"" = 'ETH' AND  date_trunc('day', minute) > date_trunc('day', now()) - interval '31 days'
and date_trunc('day', minute) < date_trunc('day', now()) 

GROUP BY 1 
)
SELECT  to_char(t1.day,'MM/DD')           AS day
       ,SUM(t1.bayc_median)                    AS floor_price
       ,SUM(t1.bayc_median * t2.average)/10000 AS floor_price_dollar
FROM t1
LEFT JOIN t2
ON t1.day = t2.day
GROUP BY  1
order by 1 




"
644669,PFP Index(USD/10k),,"[{""id"": 1199383, ""type"": ""chart"", ""name"": ""Volume"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""0,0"", ""columnMapping"": {""day"": ""x"", ""original_amount"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-04-27T10:51:41.920875+00:00"", ""__typename"": ""visualizations""}, {""id"": 1199283, ""type"": ""table"", ""name"": ""Query results"", ""options"": {""columns"": [{""name"": ""floor_price_dollar"", ""numberFormat"": ""0.0""}, {""name"": ""original_amount"", ""numberFormat"": ""0,0.0""}]}, ""created_at"": ""2022-04-27T10:34:23.299602+00:00"", ""__typename"": ""visualizations""}, {""id"": 1199380, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""series"": {""percentValues"": false}, ""reverseX"": false, ""numberFormat"": ""0.0"", ""columnMapping"": {""day"": ""x"", ""floor_price_dollar"": ""y""}, ""seriesOptions"": {""floor_price_dollar"": {""type"": ""line"", ""color"": ""#F20707"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""line""}, ""created_at"": ""2022-04-27T10:51:04.003295+00:00"", ""__typename"": ""visualizations""}]","
with t1 as (
SELECT  nft_contract_address
       ,date_trunc('day',block_time )                               AS day
       ,percentile_cont(.1) within GROUP (ORDER BY original_amount) AS bayc_median
       ,sum(original_amount) as original_amount
FROM nft.trades
WHERE nft_token_id IS NOT NULL
AND original_currency IN ('ETH', 'WETH')
AND date_trunc('day', block_time ) > date_trunc('day', now()) - interval '31 days'
AND date_trunc('day', block_time ) < date_trunc('day', now())

and nft_contract_address in (

'\xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D',
'\x60E4d786628Fea6478F785A6d7e704777c86a7c6',
'\xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB',
'\x49cF6f5d44E70224e2E23fDcdd2C053F30aDA28B',
'\xED5AF388653567Af2F388E6224dC7C4b3241C544',
'\x8a90CAb2b38dba80c64b7734e58Ee1dB38B8992e',
'\xe785E82358879F061BC3dcAC6f0444462D4b5330',
'\x1A92f7381B9F03921564a437210bB9396471050C',
'\x79FCDEF22feeD20eDDacbB2587640e45491b757f',
'\x1CB1A5e65610AEFF2551A50f76a87a7d3fB649C6',
'\xBd3531dA5CF5857e7CfAA92426877b022e612cf8',
'\xEdB61f74B0d09B2558F1eeb79B247c1F363Ae452',
'\x2acAb3DEa77832C09420663b0E1cB386031bA17B',
'\x9c80777CAe192E5031c38A0d951C55730eCC3f5e',
'\xb4d06d46A8285F4EC79Fd294F78a881799d8cEd9',
'\xd2F668a8461D6761115dAF8Aeb3cDf5F40C532C6',
'\x59468516a8259058baD1cA5F8f4BFF190d30E066',
'\x23581767a106ae21c074b2276D25e5C3e136a68b'

)
group by 1,2
) 
, t2 as (
SELECT  date_trunc('day', minute)  as day,
        AVG(price) as average,
        MAX(price) as maximum,
        MIN(price)
FROM prices.""layer1_usd""
WHERE ""symbol"" = 'ETH' AND  date_trunc('day', minute) > date_trunc('day', now()) - interval '31 days'
and date_trunc('day', minute) < date_trunc('day', now()) 

GROUP BY 1 
)
SELECT  to_char(t1.day,'MM/DD')                    AS day
       ,SUM(t1.original_amount * t2.average)/10000 AS original_amount
       ,SUM(t1.bayc_median * t2.average)/10000     AS floor_price_dollar
FROM t1
LEFT JOIN t2
ON t1.day = t2.day
GROUP BY  1
ORDER BY 1

"
642886,OpenSea daily volume  (ETH),,"[{""id"": 1196738, ""type"": ""table"", ""name"": ""Query results"", ""options"": {""columns"": [{""name"": ""usd"", ""numberFormat"": "",""}]}, ""created_at"": ""2022-04-27T02:59:45.534327+00:00"", ""__typename"": ""visualizations""}, {""id"": 1196847, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""0,0"", ""columnMapping"": {""day"": ""x"", ""usd"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-04-27T03:19:44.138164+00:00"", ""__typename"": ""visualizations""}]","WITH to_exclude AS (
SELECT  date_trunc('day',block_time) AS time
       ,SUM(usd_amount)              AS volume
FROM nft.trades
WHERE tx_hash IN (      
  SELECT  call_tx_hash AS txs
FROM opensea.""WyvernExchange_call_atomicMatch_""
WHERE (addrs[4] = '\x5b3256965e7c3cf26e11fcaf296dfc8807c01073' OR addrs[11] = '\x5b3256965e7c3cf26e11fcaf296dfc8807c01073')
AND call_success
AND call_block_time > '2022-01-21'
AND call_block_time > (date_trunc('day', now()) - interval '2 months')
GROUP BY  1
HAVING COUNT(DISTINCT CASE WHEN addrs[7] = '\x0000000000000000000000000000000000000000' THEN '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' ELSE addrs[7] END) > 1
)
    GROUP BY time
    )

, raw_volume AS (
SELECT  date_trunc('day',block_time) AS time
       ,SUM(usd_amount)              AS volume
FROM nft.trades
WHERE platform IN ( 'OpenSea' )
AND block_time >= (date_trunc('day', now()) - interval '2 months')
GROUP BY  time
)

SELECT   to_char(rv.time,'MM/DD')             AS day
       ,SUM(rv.volume)-COALESCE(SUM(te.volume),0) AS usd
FROM raw_volume rv
LEFT JOIN to_exclude te
ON rv.time=te.time 
GROUP BY  rv.time
order by 1"
1321106,op-quests-02-tx-and-users,,"[{""id"": 2261568, ""type"": ""chart"", ""name"": ""Optimism Daily Transactions Change"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Transactions Count Change""}}, {""type"": ""linear"", ""title"": {""text"": ""Transactions Count""}}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""0.00a"", ""columnMapping"": {""block_date"": ""x"", ""transaction_count"": ""y"", ""transaction_count_change"": ""y""}, ""seriesOptions"": {""transaction_count"": {""name"": ""Transactions Count"", ""type"": ""line"", ""yAxis"": 1, ""zIndex"": 0}, ""transaction_count_change"": {""name"": ""Transactions Change"", ""type"": ""column"", ""color"": ""#ff0420"", ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-09-28T04:27:01.380344+00:00"", ""__typename"": ""visualizations""}, {""id"": 2257797, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-09-27T13:48:51.576677+00:00"", ""__typename"": ""visualizations""}, {""id"": 2258778, ""type"": ""chart"", ""name"": ""Optimism Transactions And Active Users Daily"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Transactions Count""}}, {""type"": ""linear"", ""title"": {""text"": ""Unique Users Count""}}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""0.00a"", ""columnMapping"": {""block_date"": ""x"", ""user_count"": ""y"", ""transaction_count"": ""y""}, ""seriesOptions"": {""user_count"": {""name"": ""Active Users Count"", ""type"": ""area"", ""color"": ""#6883d7"", ""yAxis"": 1, ""zIndex"": 1}, ""transaction_count"": {""name"": ""Transactions Count"", ""type"": ""column"", ""color"": ""#ff0420"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-09-27T16:27:53.188026+00:00"", ""__typename"": ""visualizations""}, {""id"": 2261578, ""type"": ""chart"", ""name"": ""Optimism Daily Users Change"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Users Count Change""}}, {""type"": ""linear"", ""title"": {""text"": ""Users Count""}}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""0.00a"", ""columnMapping"": {""block_date"": ""x"", ""user_count"": ""y"", ""user_count_change"": ""y""}, ""seriesOptions"": {""user_count"": {""name"": ""Users Count"", ""type"": ""line"", ""yAxis"": 1, ""zIndex"": 0}, ""user_count_change"": {""name"": ""Users Change"", ""type"": ""column"", ""color"": ""#ff0420"", ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-09-28T04:29:12.608274+00:00"", ""__typename"": ""visualizations""}, {""id"": 2261586, ""type"": ""table"", ""name"": ""Optimism Transactions And Users"", ""options"": {""columns"": [{""name"": ""block_date"", ""title"": ""Date""}, {""name"": ""transaction_count"", ""title"": ""Transactions Count"", ""alignContent"": ""right"", ""numberFormat"": ""000,000""}, {""name"": ""user_count"", ""title"": ""Users Count"", ""alignContent"": ""right"", ""numberFormat"": ""000,000""}, {""name"": ""transaction_count_change"", ""title"": ""Transactions Change"", ""alignContent"": ""right"", ""numberFormat"": ""000,000"", ""coloredNegativeValues"": true, ""coloredPositiveValues"": true}, {""name"": ""user_count_change"", ""title"": ""Users Change"", ""alignContent"": ""right"", ""numberFormat"": ""000,000"", ""coloredNegativeValues"": true, ""coloredPositiveValues"": true}]}, ""created_at"": ""2022-09-28T04:31:33.796808+00:00"", ""__typename"": ""visualizations""}]","with daily_transactions_summary as (
    select date_trunc('day', block_time) as block_date,
        count(*) as transaction_count,
        count(distinct `from`) as user_count
    from optimism.transactions
    where block_time >= '2022-07-13'
        and success = true
    group by 1
)

select block_date,
    transaction_count,
    user_count,
    (transaction_count - lag(transaction_count, 1, 0) over (order by block_date asc)) as transaction_count_change,
    (user_count - lag(user_count, 1, 0) over (order by block_date asc)) as user_count_change
from daily_transactions_summary
order by block_date"
1321680,op-quests-03-new-users,,"[{""id"": 2258933, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-09-27T16:53:01.858764+00:00"", ""__typename"": ""visualizations""}, {""id"": 2261455, ""type"": ""table"", ""name"": ""Optimism Users Statistics"", ""options"": {""columns"": [{""name"": ""block_date"", ""title"": ""Date""}, {""name"": ""active_users_count"", ""title"": ""Active Users"", ""alignContent"": ""right"", ""numberFormat"": ""000,000""}, {""name"": ""new_users_count"", ""title"": ""New Users"", ""alignContent"": ""right"", ""numberFormat"": ""000,000""}, {""name"": ""existing_user_count"", ""title"": ""Existing Users"", ""alignContent"": ""right"", ""numberFormat"": ""000,000""}, {""name"": ""new_users_count_change"", ""title"": ""New Users Change"", ""alignContent"": ""right"", ""numberFormat"": ""000,000"", ""coloredNegativeValues"": true, ""coloredPositiveValues"": true}, {""name"": ""active_users_count_change"", ""title"": ""Active Users Change"", ""alignContent"": ""right"", ""numberFormat"": ""000,000"", ""coloredNegativeValues"": true, ""coloredPositiveValues"": true}, {""name"": ""accumulate_new_users_count"", ""title"": ""Accumulate New Users"", ""alignContent"": ""right"", ""numberFormat"": ""000,000""}, {""name"": ""accumulate_active_users_count"", ""title"": ""Accumulate Active Users"", ""alignContent"": ""right"", ""numberFormat"": ""000,000""}]}, ""created_at"": ""2022-09-28T04:05:38.870811+00:00"", ""__typename"": ""visualizations""}, {""id"": 2258950, ""type"": ""chart"", ""name"": ""Optimism New Users Daily"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""New User Count""}}, {""type"": ""linear"", ""title"": {""text"": ""Active User Count""}}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""0.00a"", ""columnMapping"": {"""": ""y"", ""block_date"": ""x"", ""new_users_count"": ""y"", ""active_users_count"": ""y"", ""existing_user_count"": ""y""}, ""seriesOptions"": {""new_users_count"": {""name"": ""New Users Count"", ""type"": ""column"", ""color"": ""#ff0420"", ""yAxis"": 0, ""zIndex"": 0}, ""active_users_count"": {""name"": ""Active Users Count"", ""type"": ""line"", ""yAxis"": 1, ""zIndex"": 1}, ""existing_user_count"": {""name"": ""Existing Users Count"", ""type"": ""line"", ""yAxis"": 1, ""zIndex"": 2}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-09-27T16:56:27.005779+00:00"", ""__typename"": ""visualizations""}, {""id"": 2261421, ""type"": ""chart"", ""name"": ""Optimism Daily New Users Change"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear""}], ""legend"": {""enabled"": false}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""numberFormat"": ""0.00a"", ""columnMapping"": {""block_date"": ""x"", ""new_users_count"": ""y"", ""new_users_count_change"": ""y""}, ""seriesOptions"": {""new_users_count"": {""name"": ""New Users Count"", ""type"": ""line"", ""color"": ""#252576"", ""yAxis"": 1, ""zIndex"": 1}, ""new_users_count_change"": {""name"": ""New Users Change"", ""type"": ""column"", ""color"": ""#ff0420"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-09-28T03:55:04.916307+00:00"", ""__typename"": ""visualizations""}, {""id"": 2261413, ""type"": ""chart"", ""name"": ""Optimism Daily Users Count"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}}, ""yAxis"": [{""type"": ""-"", ""title"": {""text"": ""Users Count""}}, {""type"": ""logarithmic"", ""title"": {""text"": ""Users Count""}}], ""legend"": {""enabled"": false}, ""series"": {""stacking"": ""stack"", ""percentValues"": false}, ""reverseX"": false, ""numberFormat"": ""0.00a"", ""columnMapping"": {""block_date"": ""x"", ""new_users_count"": ""y"", ""existing_user_count"": ""y"", ""accumulate_new_users_count"": ""y"", ""accumulate_active_users_count"": ""y""}, ""seriesOptions"": {""new_users_count"": {""name"": ""New Users Count"", ""type"": ""column"", ""color"": ""#ff0420"", ""yAxis"": 0, ""zIndex"": 1}, ""existing_user_count"": {""name"": ""Existing Users Count"", ""type"": ""column"", ""yAxis"": 0, ""zIndex"": 0}, ""accumulate_new_users_count"": {""name"": ""Accumulate New Users"", ""type"": ""line"", ""yAxis"": 1, ""zIndex"": 2}, ""accumulate_active_users_count"": {""name"": ""Accumulate Active Users"", ""type"": ""line"", ""yAxis"": 1, ""zIndex"": 3}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-09-28T03:50:51.063273+00:00"", ""__typename"": ""visualizations""}, {""id"": 2261415, ""type"": ""chart"", ""name"": ""Optimism Daily New User Percentage"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""series"": {""stacking"": ""stack"", ""percentValues"": true}, ""reverseX"": false, ""columnMapping"": {""block_date"": ""x"", ""new_users_count"": ""y"", ""existing_user_count"": ""y""}, ""seriesOptions"": {""new_users_count"": {""name"": ""New Users"", ""type"": ""area"", ""color"": ""#ff0420"", ""yAxis"": 0, ""zIndex"": 1}, ""existing_user_count"": {""name"": ""Existing Users"", ""type"": ""area"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""area""}, ""created_at"": ""2022-09-28T03:53:34.682937+00:00"", ""__typename"": ""visualizations""}, {""id"": 2261426, ""type"": ""chart"", ""name"": ""Optimism Daily Active Users Change"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""0.00a"", ""columnMapping"": {""block_date"": ""x"", ""active_users_count"": ""y"", ""active_users_count_change"": ""y""}, ""seriesOptions"": {""active_users_count"": {""name"": ""Active Users Count"", ""type"": ""line"", ""color"": ""#252576"", ""yAxis"": 1, ""zIndex"": 1}, ""active_users_count_change"": {""name"": ""Active Users Change"", ""type"": ""column"", ""color"": ""#ff0420"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-09-28T03:58:11.178132+00:00"", ""__typename"": ""visualizations""}]","with optimism_daily_active_users as (
    SELECT date_trunc('day', block_time) as block_date,
        count(distinct `from`) as active_users_count
    FROM optimism.transactions
    WHERE block_time >= '2022-07-13'
    GROUP BY 1
),

optimism_new_users as (
    SELECT `from` as account, min(block_time) as start_time
    FROM optimism.transactions
    GROUP BY 1
),

optimism_daily_new_users as (
    SELECT date_trunc('day', start_time) as block_date,
        count(account) as new_users_count
    FROM optimism_new_users
    WHERE start_time >= '2022-07-13'
    GROUP BY 1
)

SELECT a.block_date,
    active_users_count,
    new_users_count,
    (active_users_count - new_users_count) as existing_user_count,
    new_users_count - LAG (new_users_count, 1, 0) OVER ( ORDER BY a.block_date ) AS new_users_count_change,
    active_users_count - LAG (active_users_count, 1, 0) OVER ( ORDER BY a.block_date ) AS active_users_count_change,
    sum(new_users_count) OVER ( ORDER BY a.block_date ) AS accumulate_new_users_count,
    sum(active_users_count) OVER ( ORDER BY a.block_date ) AS accumulate_active_users_count
FROM optimism_daily_active_users a
left join optimism_daily_new_users n on a.block_date = n.block_date
ORDER BY 1 DESC

"
1321875,op-quests-06-user-count-by-mint,,"[{""id"": 2259255, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-09-27T18:02:13.212934+00:00"", ""__typename"": ""visualizations""}, {""id"": 2259257, ""type"": ""chart"", ""name"": ""Users Count By Minted NFTs"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Minted NFTs Count""}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Users Count""}}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""columnMapping"": {""user_count"": ""y"", ""mint_token_count"": ""x""}, ""seriesOptions"": {""user_count"": {""name"": ""Users Count"", ""type"": ""column"", ""color"": ""#ff0420"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-09-27T18:02:35.230375+00:00"", ""__typename"": ""visualizations""}, {""id"": 2259261, ""type"": ""chart"", ""name"": ""Users Percentage By Minted NFTs Count"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": """", ""columnMapping"": {""user_count"": ""y"", ""mint_token_count"": ""x""}, ""seriesOptions"": {""user_count"": {""name"": ""Users Count"", ""type"": ""pie"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {""1"": {""color"": ""#ff0420""}}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2022-09-27T18:04:00.458543+00:00"", ""__typename"": ""visualizations""}]","with nft_mint_detail as (
    select evt_block_time,
        evt_tx_hash,
        `to` as address,
        tokenId as token_id
    from optimism_quest_optimism.StarNFTV4_evt_Transfer
    where contract_address = '0xfa14e1157f35e1dad95dc3f822a9d18c40e360e2'   -- Optimism quest SBT
        and `from` = '0x0000000000000000000000000000000000000000'   -- Mint
        and evt_block_time >= '2022-09-13'  -- First date minted
),

user_mint_summary as (
    select address,
        count(distinct token_id) as mint_token_count
    from nft_mint_detail
    group by 1
)

select mint_token_count,
    count(address) as user_count
from user_mint_summary
group by 1
order by 1
"
1321746,op-quests-04-daily-mint-per-project,,"[{""id"": 2259204, ""type"": ""chart"", ""name"": ""Accumulate Minted NFTs By Project"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""columnMapping"": {""block_date"": ""x"", ""nft_project_name"": ""series"", ""accumulate_user_count"": ""y""}, ""seriesOptions"": {""Lyra"": {""type"": ""area"", ""yAxis"": 0, ""zIndex"": 11}, ""Pika"": {""type"": ""area"", ""yAxis"": 0, ""zIndex"": 12}, ""Quix"": {""type"": ""area"", ""yAxis"": 0, ""zIndex"": 4}, ""Kwenta"": {""type"": ""area"", ""yAxis"": 0, ""zIndex"": 3}, ""Clipper"": {""type"": ""area"", ""yAxis"": 0, ""zIndex"": 10}, ""Granary"": {""type"": ""area"", ""yAxis"": 0, ""zIndex"": 13}, ""Rubicon"": {""type"": ""area"", ""yAxis"": 0, ""zIndex"": 15}, ""Synapse"": {""type"": ""area"", ""yAxis"": 0, ""zIndex"": 17}, ""Uniswap"": {""type"": ""area"", ""color"": ""#ff0420"", ""yAxis"": 0, ""zIndex"": 6}, ""Stargate"": {""type"": ""area"", ""yAxis"": 0, ""zIndex"": 5}, ""Beethoven"": {""type"": ""area"", ""yAxis"": 0, ""zIndex"": 0}, ""Synthetix"": {""type"": ""area"", ""yAxis"": 0, ""zIndex"": 2}, ""Velodrome"": {""type"": ""area"", ""yAxis"": 0, ""zIndex"": 7}, ""Polynomial"": {""type"": ""area"", ""yAxis"": 0, ""zIndex"": 8}, ""Hop Protocol"": {""type"": ""area"", ""yAxis"": 0, ""zIndex"": 16}, ""Pooltogether"": {""type"": ""area"", ""yAxis"": 0, ""zIndex"": 9}, ""QiDao/Mai Finance"": {""type"": ""area"", ""yAxis"": 0, ""zIndex"": 1}, ""Perpetual Protocol"": {""type"": ""area"", ""yAxis"": 0, ""zIndex"": 14}}, ""valuesOptions"": {}, ""globalSeriesType"": ""area""}, ""created_at"": ""2022-09-27T17:54:10.586433+00:00"", ""__typename"": ""visualizations""}, {""id"": 2259029, ""type"": ""chart"", ""name"": ""Daily Minted NFTs By Project"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""columnMapping"": {"""": ""y"", ""block_date"": ""x"", ""user_count"": ""y"", ""nft_project_name"": ""series""}, ""seriesOptions"": {""Lyra"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 11}, ""Pika"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 12}, ""Quix"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 4}, ""Kwenta"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 3}, ""Clipper"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 10}, ""Granary"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 13}, ""Rubicon"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 15}, ""Synapse"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 17}, ""Uniswap"": {""type"": ""column"", ""color"": ""#ff0420"", ""yAxis"": 0, ""zIndex"": 6}, ""Stargate"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 5}, ""Beethoven"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 0}, ""Synthetix"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 2}, ""Velodrome"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 7}, ""Polynomial"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 8}, ""Hop Protocol"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 16}, ""Pooltogether"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 9}, ""QiDao/Mai Finance"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 1}, ""Perpetual Protocol"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 14}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-09-27T17:13:01.48401+00:00"", ""__typename"": ""visualizations""}, {""id"": 2261362, ""type"": ""chart"", ""name"": ""Daily Mint User Count Change By Project"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": null}, ""reverseX"": false, ""columnMapping"": {""block_date"": ""x"", ""nft_project_name"": ""series"", ""daily_user_count_change"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-09-28T03:34:28.987481+00:00"", ""__typename"": ""visualizations""}, {""id"": 2261364, ""type"": ""table"", ""name"": ""Daily Mint Statistics"", ""options"": {""columns"": [{""name"": ""block_date"", ""title"": ""Date""}, {""name"": ""nft_project_name"", ""title"": ""Project Name""}, {""name"": ""nft_project_id"", ""isHidden"": true}, {""name"": ""user_count"", ""title"": ""Users Count""}, {""name"": ""token_count"", ""isHidden"": true}, {""name"": ""avg_token_per_user"", ""title"": ""Avg NFTs Per User"", ""isHidden"": true}, {""name"": ""accumulate_user_count"", ""title"": ""Accumulate Users Count""}, {""name"": ""accumulate_token_count"", ""isHidden"": true}, {""name"": ""accumulate_total_user_count"", ""isHidden"": true}, {""name"": ""accumulate_total_token_count"", ""isHidden"": true}, {""name"": ""daily_user_count_change"", ""title"": ""Daily New Mint Users Change""}]}, ""created_at"": ""2022-09-28T03:36:43.204525+00:00"", ""__typename"": ""visualizations""}, {""id"": 2259021, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-09-27T17:09:39.347021+00:00"", ""__typename"": ""visualizations""}, {""id"": 2261355, ""type"": ""chart"", ""name"": ""Daily Minted NFT Percentage"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack"", ""percentValues"": true}, ""reverseX"": false, ""columnMapping"": {""block_date"": ""x"", ""user_count"": ""y"", ""nft_project_name"": ""series""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""area""}, ""created_at"": ""2022-09-28T03:28:11.037947+00:00"", ""__typename"": ""visualizations""}]","with quest_nft_list(nft_project_id, nft_project_name) as (
    values 
    ('6340', 'Stargate'),
    ('6343', 'Uniswap'),
    ('6344', 'Velodrome'),
    ('6346', 'Polynomial'),
    ('6347', 'Synapse'),
    ('6349', 'Perpetual Protocol'),
    ('6351', 'Pooltogether'),
    ('6357', 'Clipper'),
    ('6358', 'Lyra'),
    ('6359', 'Hop Protocol'),
    ('6360', 'Rubicon'),
    ('6361', 'Pika'),
    ('6362', 'Synthetix'),
    ('6363', 'QiDao/Mai Finance'),
    ('6364', 'Kwenta'),
    ('6367', 'Granary'),
    ('6369', 'Quix'),
    ('6366', 'Beethoven')
),

nft_mint_detail as (
    select e.evt_block_time,
        e.evt_tx_hash,
        e.`to` as address,
        e.tokenId as token_id,
        m.cid as nft_project_id
    from optimism_quest_optimism.StarNFTV4_evt_Transfer e
    inner join optimism_quest_optimism.StarNFTV4_call_mint m on e.evt_tx_hash = m.call_tx_hash
    where e.contract_address = '0xfa14e1157f35e1dad95dc3f822a9d18c40e360e2'   -- Optimism quest SBT
        and e.`from` = '0x0000000000000000000000000000000000000000'   -- Mint
        and e.evt_block_time >= '2022-09-13'  -- First date minted
        and m.call_block_time >= '2022-09-13'  -- First date minted
),

daily_mint_summary as (
    select date_trunc('day', evt_block_time) as block_date,
        nft_project_id,
        count(distinct address) as user_count,
        count(distinct token_id) as token_count,
        count(distinct token_id) / count(distinct address) as avg_token_per_user
    from nft_mint_detail
    group by 1, 2
    order by 1, 2
)

select block_date,
    coalesce(nft_project_name, d.nft_project_id) as nft_project_name,
    d.nft_project_id,
    user_count,
    token_count,
    avg_token_per_user,
    sum(user_count) over (partition by d.nft_project_id order by block_date asc) as accumulate_user_count,
    sum(token_count) over (partition by d.nft_project_id order by block_date asc) as accumulate_token_count,
    sum(user_count) over (order by block_date asc) as accumulate_total_user_count,
    sum(token_count) over (order by block_date asc) as accumulate_total_token_count,
    (user_count - lag(user_count, 1, 0) over (partition by d.nft_project_id order by block_date asc) ) as daily_user_count_change 
from daily_mint_summary d
left join quest_nft_list q on d.nft_project_id = q.nft_project_id
order by block_date, d.nft_project_id

"
1334302,op-quests-10-quests-new_users,,"[{""id"": 2280093, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-10-01T07:05:56.629604+00:00"", ""__typename"": ""visualizations""}, {""id"": 2280117, ""type"": ""chart"", ""name"": ""New Users Brought By Quests Percentage"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""series"": {""stacking"": ""stack"", ""percentValues"": true}, ""reverseX"": false, ""numberFormat"": ""0.00a"", ""columnMapping"": {""block_date"": ""x"", ""other_new_user_count"": ""y"", ""quest_new_users_count"": ""y""}, ""seriesOptions"": {""other_new_user_count"": {""name"": ""Other Source New Users"", ""type"": ""area"", ""yAxis"": 0, ""zIndex"": 0}, ""quest_new_users_count"": {""name"": ""New Users From Quests"", ""type"": ""area"", ""color"": ""#ff0420"", ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""area""}, ""created_at"": ""2022-10-01T07:13:54.761766+00:00"", ""__typename"": ""visualizations""}, {""id"": 2280096, ""type"": ""chart"", ""name"": ""New Users Brought By Quests Comparison"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Users Count""}}, {""type"": ""linear""}], ""legend"": {""enabled"": false}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""numberFormat"": ""0.00a"", ""columnMapping"": {""block_date"": ""x"", ""other_new_user_count"": ""y"", ""quest_new_users_count"": ""y"", ""accumulate_new_users_count"": ""y"", ""accumulate_quest_new_users_count"": ""y""}, ""seriesOptions"": {""other_new_user_count"": {""name"": ""Other Source New Users"", ""type"": ""column"", ""yAxis"": 0, ""zIndex"": 0}, ""quest_new_users_count"": {""name"": ""New Users From Quests"", ""type"": ""column"", ""color"": ""#ff0420"", ""yAxis"": 0, ""zIndex"": 1}, ""accumulate_new_users_count"": {""name"": ""Accumulate New Users"", ""type"": ""line"", ""yAxis"": 1, ""zIndex"": 2}, ""accumulate_quest_new_users_count"": {""name"": ""Accumulate Quests New Users"", ""type"": ""line"", ""yAxis"": 1, ""zIndex"": 3}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-10-01T07:08:38.661368+00:00"", ""__typename"": ""visualizations""}]","with quest_nft_user as (
    select distinct `to` as address
    from optimism_quest_optimism.StarNFTV4_evt_Transfer
    where contract_address = '0xfa14e1157f35e1dad95dc3f822a9d18c40e360e2'   -- Optimism quest SBT
        and `from` = '0x0000000000000000000000000000000000000000'   -- Mint
        and evt_block_time >= '2022-09-13'  -- First date minted
),

optimism_new_users as (
    SELECT `from` as address,
        min(block_time) as start_time
    FROM optimism.transactions
    GROUP BY 1
),

optimism_daily_new_users as (
    SELECT date_trunc('day', start_time) as block_date,
        count(n.address) as new_users_count,
        sum(case when q.address is null then 0 else 1 end) as quest_new_users_count
    FROM optimism_new_users n
    left join quest_nft_user q on n.address = q.address
    WHERE start_time >= '2022-09-13' -- From quest start date
    GROUP BY 1
)

SELECT block_date,
    new_users_count,
    quest_new_users_count,
    (new_users_count - quest_new_users_count) as other_new_user_count,
    sum(new_users_count) OVER ( ORDER BY block_date ) AS accumulate_new_users_count,
    sum(quest_new_users_count) OVER ( ORDER BY block_date ) AS accumulate_quest_new_users_count
FROM optimism_daily_new_users
ORDER BY 1 DESC"
1321480,op-quests-00-counter,,"[{""id"": 2258573, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-09-27T15:52:36.206921+00:00"", ""__typename"": ""visualizations""}, {""id"": 2258600, ""type"": ""counter"", ""name"": ""Unique NFTs Count"", ""options"": {""rowNumber"": 1, ""counterLabel"": ""NFT Count"", ""counterColName"": ""quests_count""}, ""created_at"": ""2022-09-27T15:57:25.017505+00:00"", ""__typename"": ""visualizations""}, {""id"": 2258607, ""type"": ""counter"", ""name"": ""Total Users Count"", ""options"": {""rowNumber"": 1, ""counterLabel"": ""User Count"", ""counterColName"": ""user_count""}, ""created_at"": ""2022-09-27T15:57:40.501463+00:00"", ""__typename"": ""visualizations""}, {""id"": 2258609, ""type"": ""counter"", ""name"": ""Total Minted NFTs Count"", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Minted NFT Count"", ""counterColName"": ""token_count""}, ""created_at"": ""2022-09-27T15:57:55.666266+00:00"", ""__typename"": ""visualizations""}, {""id"": 2258611, ""type"": ""counter"", ""name"": ""Avg Token Minted Per User"", ""options"": {""rowNumber"": 1, ""counterLabel"": ""AVG Token Minted"", ""stringDecimal"": 2, ""counterColName"": ""avg_token_per_user""}, ""created_at"": ""2022-09-27T15:58:20.519376+00:00"", ""__typename"": ""visualizations""}, {""id"": 2258615, ""type"": ""counter"", ""name"": ""Average Quests Progress"", ""options"": {""rowNumber"": 1, ""counterLabel"": ""AVG Progress %"", ""stringSuffix"": ""%"", ""stringDecimal"": 2, ""counterColName"": ""avg_progress_percentage""}, ""created_at"": ""2022-09-27T15:58:48.341689+00:00"", ""__typename"": ""visualizations""}]","with nft_mint_detail as (
    select evt_block_time,
        evt_tx_hash,
        `to` as address,
        tokenId as token_id
    from optimism_quest_optimism.StarNFTV4_evt_Transfer
    where contract_address = '0xfa14e1157f35e1dad95dc3f822a9d18c40e360e2'   -- Optimism quest SBT
        and `from` = '0x0000000000000000000000000000000000000000'   -- Mint
        and evt_block_time >= '2022-09-13'  -- First date minted
),

nft_mint_summary as (
    select 18 as quests_count,
        count(distinct address) as user_count,
        count(distinct token_id) as token_count
    from nft_mint_detail
)

select quests_count,
    user_count,
    token_count,
    token_count / user_count as avg_token_per_user,
    token_count / user_count / quests_count * 100.0 as avg_progress_percentage
from nft_mint_summary
"
1321147,op-quests-01-daily-mint,,"[{""id"": 2258857, ""type"": ""counter"", ""name"": ""Max User Token Count"", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Max NFTs One User"", ""counterColName"": ""max_token_count""}, ""created_at"": ""2022-09-27T16:37:56.503322+00:00"", ""__typename"": ""visualizations""}, {""id"": 2257851, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-09-27T14:01:18.934547+00:00"", ""__typename"": ""visualizations""}, {""id"": 2258748, ""type"": ""chart"", ""name"": ""Daily Users And NFTs Minted"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Count""}}, {""type"": ""linear"", ""title"": {""text"": ""Avg Token Count Minted""}}], ""legend"": {""enabled"": false}, ""series"": {""stacking"": null}, ""reverseX"": false, ""numberFormat"": ""0.00a"", ""columnMapping"": {""block_date"": ""x"", ""user_count"": ""y"", ""token_count"": ""y"", ""transaction_count"": ""y"", ""avg_token_per_user"": ""y""}, ""seriesOptions"": {""user_count"": {""name"": ""Users Count"", ""type"": ""column"", ""yAxis"": 0, ""zIndex"": 0}, ""token_count"": {""name"": ""Minted Tokens Count"", ""type"": ""column"", ""color"": ""#ff0420"", ""yAxis"": 0, ""zIndex"": 1}, ""avg_token_per_user"": {""name"": ""Avg Token Count Per User"", ""type"": ""line"", ""yAxis"": 1, ""zIndex"": 2}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-09-27T16:20:58.539898+00:00"", ""__typename"": ""visualizations""}, {""id"": 2258874, ""type"": ""chart"", ""name"": ""Accumulate Users And NFTs Minted"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear""}], ""legend"": {""enabled"": false}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""columnMapping"": {""block_date"": ""x"", ""avg_token_per_user"": ""y"", ""accumulate_user_count"": ""y"", ""accumulate_token_count"": ""y""}, ""seriesOptions"": {""avg_token_per_user"": {""name"": ""Average Token Per User"", ""type"": ""line"", ""yAxis"": 1, ""zIndex"": 2}, ""accumulate_user_count"": {""name"": ""Accumulate Users Count"", ""type"": ""area"", ""yAxis"": 0, ""zIndex"": 0}, ""accumulate_token_count"": {""name"": ""Accumulate Minted Tokens Count"", ""type"": ""area"", ""color"": ""#ff0420"", ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""area"", ""numberFormatRightYAxisSeries"": ""0.00""}, ""created_at"": ""2022-09-27T16:42:07.847764+00:00"", ""__typename"": ""visualizations""}]","with nft_mint_detail as (
    select evt_block_time,
        evt_tx_hash,
        `to` as address,
        tokenId as token_id
    from optimism_quest_optimism.StarNFTV4_evt_Transfer
    where contract_address = '0xfa14e1157f35e1dad95dc3f822a9d18c40e360e2'   -- Optimism quest SBT
        and `from` = '0x0000000000000000000000000000000000000000'   -- Mint
        and evt_block_time >= '2022-09-13'  -- First date minted
),

max_mint_count_user as (
    select address,
        count(distinct token_id) as user_token_count
    from nft_mint_detail
    group by 1
    order by 2 desc
    limit 1
),

daily_mint_summary as (
    select date_trunc('day', evt_block_time) as block_date,
        count(distinct address) as user_count,
        count(distinct token_id) as token_count,
        count(distinct token_id) / count(distinct address) as avg_token_per_user
    from nft_mint_detail
    group by 1
    order by 1
)

select block_date,
    user_count,
    token_count,
    avg_token_per_user,
    user_token_count as max_token_count,
    sum(user_count) over (order by block_date asc) as accumulate_user_count,
    sum(token_count) over (order by block_date asc) as accumulate_token_count
from daily_mint_summary
inner join max_mint_count_user on true
order by block_date

"
1331535,op-quests-08-address-rank,,"[{""id"": 2275588, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-09-30T08:06:53.695787+00:00"", ""__typename"": ""visualizations""}, {""id"": 2275592, ""type"": ""table"", ""name"": ""Quest User Leaderboard"", ""options"": {""columns"": [{""name"": ""rank_id"", ""title"": ""Rank""}, {""name"": ""address"", ""title"": ""Address""}, {""name"": ""mint_token_count"", ""title"": ""NFT Count""}, {""name"": ""link"", ""title"": ""Link""}]}, ""created_at"": ""2022-09-30T08:08:30.654388+00:00"", ""__typename"": ""visualizations""}]","with nft_mint_detail as (
    select evt_block_time,
        evt_tx_hash,
        `to` as address,
        tokenId as token_id
    from optimism_quest_optimism.StarNFTV4_evt_Transfer
    where contract_address = '0xfa14e1157f35e1dad95dc3f822a9d18c40e360e2'   -- Optimism quest SBT
        and `from` = '0x0000000000000000000000000000000000000000'   -- Mint
        and evt_block_time >= '2022-09-13'  -- First date minted
),

user_mint_summary as (
    select address,
        count(distinct token_id) as mint_token_count
    from nft_mint_detail
    group by 1
)

select row_number() over (order by mint_token_count desc, address) as rank_id,
    address,
    mint_token_count,
    '<a href=https://optimistic.etherscan.io/address/' || address || ' target=_blank>Optimism Explorer</a>' as link
from user_mint_summary
order by 1"
1321758,op-quests-05-nft-minted,,"[{""id"": 2259037, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-09-27T17:14:38.07111+00:00"", ""__typename"": ""visualizations""}, {""id"": 2261327, ""type"": ""chart"", ""name"": ""Quests NFT Minted By Project"", ""options"": {""sortX"": false, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""0.00a"", ""columnMapping"": {""user_count"": ""y"", ""nft_project_name"": ""x""}, ""seriesOptions"": {""user_count"": {""name"": ""Minted Users Count"", ""type"": ""column"", ""color"": ""#ff0420"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-09-28T03:16:02.000416+00:00"", ""__typename"": ""visualizations""}, {""id"": 2259142, ""type"": ""chart"", ""name"": ""NFT Minted By Project"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""0.00a"", ""columnMapping"": {""user_count"": ""y"", ""nft_project_name"": ""x""}, ""seriesOptions"": {""user_count"": {""name"": ""Minted Users Count"", ""type"": ""pie"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {""Uniswap"": {""color"": ""#ff0420""}}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2022-09-27T17:38:59.394246+00:00"", ""__typename"": ""visualizations""}, {""id"": 2259151, ""type"": ""table"", ""name"": ""Optimism Quests NFT Minted Statistics"", ""options"": {""columns"": [{""name"": ""nft_project_name"", ""title"": ""Project Name""}, {""name"": ""nft_project_id"", ""title"": ""Project ID""}, {""name"": ""user_count"", ""title"": ""Minted Users"", ""alignContent"": ""right""}, {""name"": ""token_count"", ""title"": ""Tokens Count"", ""isHidden"": true, ""alignContent"": ""right""}]}, ""created_at"": ""2022-09-27T17:40:49.819447+00:00"", ""__typename"": ""visualizations""}]","with quest_nft_list(nft_project_id, nft_project_name) as (
    values 
    ('6340', 'Stargate'),
    ('6343', 'Uniswap'),
    ('6344', 'Velodrome'),
    ('6346', 'Polynomial'),
    ('6347', 'Synapse'),
    ('6349', 'Perpetual Protocol'),
    ('6351', 'Pooltogether'),
    ('6357', 'Clipper'),
    ('6358', 'Lyra'),
    ('6359', 'Hop Protocol'),
    ('6360', 'Rubicon'),
    ('6361', 'Pika'),
    ('6362', 'Synthetix'),
    ('6363', 'QiDao/Mai Finance'),
    ('6364', 'Kwenta'),
    ('6367', 'Granary'),
    ('6369', 'Quix'),
    ('6366', 'Beethoven')
),

nft_mint_detail as (
    select e.evt_block_time,
        e.evt_tx_hash,
        e.`to` as address,
        e.tokenId as token_id,
        m.cid as nft_project_id
    from optimism_quest_optimism.StarNFTV4_evt_Transfer e
    inner join optimism_quest_optimism.StarNFTV4_call_mint m on e.evt_tx_hash = m.call_tx_hash
    where e.contract_address = '0xfa14e1157f35e1dad95dc3f822a9d18c40e360e2'   -- SBT
        and e.`from` = '0x0000000000000000000000000000000000000000'   -- Mint
        and e.evt_block_time >= '2022-09-13'  -- First date minted
),

nft_mint_summary as (
    select nft_project_id,
        count(distinct address) as user_count,
        count(distinct token_id) as token_count
    from nft_mint_detail
    group by 1
)

select coalesce(nft_project_name, s.nft_project_id) as nft_project_name,
    s.nft_project_id,
    user_count,
    token_count
from nft_mint_summary s
left join quest_nft_list q on s.nft_project_id = q.nft_project_id
order by user_count desc
"
1334328,op-quests-11-new-users-active-projects,,"[{""id"": 2280140, ""type"": ""table"", ""name"": ""Top Projects Quests Brought New Users Active In"", ""options"": {""columns"": [{""name"": ""contract_address"", ""title"": ""Contract Address""}, {""name"": ""link"", ""title"": ""Link""}, {""name"": ""transaction_count"", ""title"": ""Transactions Count"", ""alignContent"": ""right"", ""numberFormat"": ""000,000""}]}, ""created_at"": ""2022-10-01T07:39:44.668973+00:00"", ""__typename"": ""visualizations""}, {""id"": 2280174, ""type"": ""chart"", ""name"": ""Top Projects Quests Brought New Users Active In"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""columnMapping"": {""project_name"": ""x"", ""transaction_count"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2022-10-01T08:12:07.896882+00:00"", ""__typename"": ""visualizations""}, {""id"": 2280133, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-10-01T07:30:11.464273+00:00"", ""__typename"": ""visualizations""}, {""id"": 2280137, ""type"": ""chart"", ""name"": ""Top Projects Quests Brought New Users Active In"", ""options"": {""sortX"": false, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""-""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""0.00a"", ""columnMapping"": {""contract_address"": ""x"", ""transaction_count"": ""y""}, ""seriesOptions"": {""transaction_count"": {""name"": ""Transactions Count"", ""type"": ""column"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-10-01T07:36:23.988192+00:00"", ""__typename"": ""visualizations""}]","with quest_nft_user as (
    select distinct `to` as address
    from optimism_quest_optimism.StarNFTV4_evt_Transfer
    where contract_address = '0xfa14e1157f35e1dad95dc3f822a9d18c40e360e2'   -- Optimism quest SBT
        and `from` = '0x0000000000000000000000000000000000000000'   -- Mint
        and evt_block_time >= '2022-09-13'  -- First date minted
),

active_projects as (
    select `to` as contract_address,
       count(hash) as transaction_count
    from optimism.transactions t
    inner join quest_nft_user q on q.address = t.`from`
    where block_time >= '2022-09-13'  -- First date minted
        and t.`to` not in (
            '0x2e42f214467f647fe687fd9a2bf3baddfa737465' -- Galaxe
            ,'0x7f5c764cbc14f9669b88837ca1490cca17c31607' -- USDC
            ,'0xda10009cbd5d07dd0cecc66161fc93d7c9000da1' -- DAI
            ,'0x4200000000000000000000000000000000000042' -- OP
            ,'0x4200000000000000000000000000000000000006' -- WETH
        )
    group by 1
    order by 2 desc
    limit 100
),

known_projects(contract_address, project_name) as (
    values
    ('0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45', 'Uniswap'),
    ('0x9c12939390052919af3155f41bf4160fd3666a6f', 'Poker'),
    ('0x8fd4af47e4e63d1d2d45582c3286b4bd9bb95dfe', 'Granary'),
    ('0x8c6f28f2f1a3c87f0f938b96d27520d9751ec8d9', 'Synthetix: sUSD Token'),
    ('0x998ef16ea4111094eb5ee72fc2c6f4e6e8647666', ' Seaport'),
    ('0x79bc8bd53244bc8a9c8c27509a2d573650a83373', 'PoolTogether'),
    ('0xf86048dff23cf130107dfb4e6386f574231a5c65', 'Synthetix: Futures Market ETH'),
    ('0x5130f6ce257b8f9bf7fac0a0b519bd588120ed40', 'Clipper'),
    ('0xd5a8f233cbddb40368d55c3320644fb36e597002', 'PikaPerpV3'),
    ('0x794a61358d6845594f94dc1db02a252b5b4814ad', 'Aave: Pool V3'),
    ('0x1111111254760f7ab3f16433eea9304126dcd199', '1inch.exchange: Aggregation Router V4 '),
    ('0x7af14adc8aea70f063c7ea3b2c1ad0d7a59c4bff', 'Rubicon: Rubicon Router')
    -- TODO
)

select coalesce(k.project_name, a.contract_address) as project_name,
    '<a href=https://optimistic.etherscan.io/address/' || a.contract_address || ' target=_blank>Optimistic Explorer</a>' as link,
    transaction_count,
    a.contract_address
from active_projects a
left join known_projects k on a.contract_address = k.contract_address
order by transaction_count desc
"
1323141,op-quests-07-tx-success,,"[{""id"": 2261519, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-09-28T04:17:33.519217+00:00"", ""__typename"": ""visualizations""}, {""id"": 2261606, ""type"": ""chart"", ""name"": ""Optimism Transactions Success Ratio"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack"", ""percentValues"": true}, ""reverseX"": false, ""columnMapping"": {"""": ""y"", ""block_date"": ""x"", ""transaction_type"": ""series"", ""transaction_count"": ""y""}, ""seriesOptions"": {""Failed"": {""type"": ""area"", ""yAxis"": 0, ""zIndex"": 0}, ""Success"": {""type"": ""area"", ""color"": ""#ff0420"", ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""area""}, ""created_at"": ""2022-09-28T04:38:54.098762+00:00"", ""__typename"": ""visualizations""}, {""id"": 2261600, ""type"": ""chart"", ""name"": ""Optimism Transactions Success Count"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Transactions Count""}}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""numberFormat"": ""0.00a"", ""columnMapping"": {""block_date"": ""x"", ""transaction_type"": ""series"", ""transaction_count"": ""y""}, ""seriesOptions"": {""Failed"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 0}, ""Success"": {""type"": ""column"", ""color"": ""#ff0420"", ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-09-28T04:36:59.925794+00:00"", ""__typename"": ""visualizations""}]","    select date_trunc('day', block_time) as block_date,
        (case when success then 'Success' else 'Failed' end) as transaction_type,
        count(*) as transaction_count,
        count(distinct `from`) as user_count
    from optimism.transactions
    where block_time >= '2022-07-13'
    group by 1, 2
    order by 1"
1349411,op-quests-12-user-hold-nft-count,"Count current total holdings NFTs, include transferred","[{""id"": 2302180, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-10-04T13:59:09.918702+00:00"", ""__typename"": ""visualizations""}, {""id"": 2302181, ""type"": ""chart"", ""name"": ""Count of Users by Total Number of NFTs Currently Held"", ""options"": {""sortX"": false, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Minted NFTs Count""}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Users Count""}}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": """", ""columnMapping"": {""user_count"": ""y"", ""mint_token_type"": ""x"", ""total_user_count"": ""y""}, ""seriesOptions"": {""total_user_count"": {""name"": ""Users Count"", ""type"": ""column"", ""color"": ""#ff0420"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-10-04T13:59:09.918702+00:00"", ""__typename"": ""visualizations""}, {""id"": 2302182, ""type"": ""chart"", ""name"": ""Users Percentage By Minted NFTs Count (Accumulated)"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""0.00a"", ""columnMapping"": {""user_count"": ""y"", ""mint_token_type"": ""x"", ""total_user_count"": ""y""}, ""seriesOptions"": {""total_user_count"": {""name"": ""Users Count"", ""type"": ""pie"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {""1"": {""color"": ""#ff0420""}}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2022-10-04T13:59:09.918702+00:00"", ""__typename"": ""visualizations""}]","with nft_transfer_detail as (
    select evt_block_time,
        evt_tx_hash,
        `to` as address,
        tokenId as token_id,
        1 as token_count
    from optimism_quest_optimism.StarNFTV4_evt_Transfer
    where contract_address = '0xfa14e1157f35e1dad95dc3f822a9d18c40e360e2'   -- Optimism quest SBT
        and evt_block_time >= '2022-09-13'  -- First date minted
    
    union all
    
    select evt_block_time,
        evt_tx_hash,
        `from` as address,
        tokenId as token_id,
        -1 as token_count
    from optimism_quest_optimism.StarNFTV4_evt_Transfer
    where contract_address = '0xfa14e1157f35e1dad95dc3f822a9d18c40e360e2'   -- Optimism quest SBT
        and evt_block_time >= '2022-09-13'  -- First date minted
        and `from` <> '0x0000000000000000000000000000000000000000'   -- Mint
),

nft_transfer_token_summary as (
    select address,
        token_id,
        sum(token_count) as token_count
    from nft_transfer_detail
    group by 1, 2
    having sum(token_count) > 0
),

user_hold_nft_summary as (
    select address,
        count(distinct token_id) as hold_token_count
    from nft_transfer_token_summary
    group by 1
),

nft_user_summary as (
    select hold_token_count,
        count(address) as user_count
    from user_hold_nft_summary
    group by 1
)

select (case when a.hold_token_count > 18 then 18 else a.hold_token_count end) as hold_token_count,
    (case a.hold_token_count
            when 1 then '1+ NFTs'
            when 2 then '2+ NFTs'
            when 3 then '3+ NFTs'
            when 4 then '4+ NFTs'
            when 5 then '5+ NFTs'
            when 6 then '6+ NFTs'
            when 7 then '7+ NFTs'
            when 8 then '8+ NFTs'
            when 9 then '9+ NFTs'
            when 10 then '10+ NFTs'
            when 11 then '11+ NFTs'
            when 12 then '12+ NFTs'
            when 13 then '13+ NFTs'
            when 14 then '14+ NFTs'
            when 15 then '15+ NFTs'
            when 16 then '16+ NFTs'
            when 17 then '17+ NFTs'
            else '18+ NFTs' end) as mint_token_type,
    sum(b.user_count) as total_user_count
from nft_user_summary a
inner join nft_user_summary b on b.hold_token_count >= a.hold_token_count
group by 1, 2
order by 1


"
1332016,op-quests-09-user-minted-at-least-n-nft,,"[{""id"": 2276389, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-09-30T10:20:04.107253+00:00"", ""__typename"": ""visualizations""}, {""id"": 2276390, ""type"": ""chart"", ""name"": ""Users Count By Minted NFTs Count (Accumulated)"", ""options"": {""sortX"": false, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Minted NFTs Count""}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Users Count""}}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": """", ""columnMapping"": {""user_count"": ""y"", ""mint_token_type"": ""x"", ""total_user_count"": ""y""}, ""seriesOptions"": {""total_user_count"": {""name"": ""Users Count"", ""type"": ""column"", ""color"": ""#ff0420"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-09-30T10:20:04.107253+00:00"", ""__typename"": ""visualizations""}, {""id"": 2276391, ""type"": ""chart"", ""name"": ""Users Percentage By Minted NFTs Count (Accumulated)"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""0.00a"", ""columnMapping"": {""user_count"": ""y"", ""mint_token_type"": ""x"", ""total_user_count"": ""y""}, ""seriesOptions"": {""total_user_count"": {""name"": ""Users Count"", ""type"": ""pie"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {""1"": {""color"": ""#ff0420""}}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2022-09-30T10:20:04.107253+00:00"", ""__typename"": ""visualizations""}]","with nft_mint_detail as (
    select evt_block_time,
        evt_tx_hash,
        `to` as address,
        tokenId as token_id
    from optimism_quest_optimism.StarNFTV4_evt_Transfer
    where contract_address = '0xfa14e1157f35e1dad95dc3f822a9d18c40e360e2'   -- Optimism quest SBT
        and `from` = '0x0000000000000000000000000000000000000000'   -- Mint
        and evt_block_time >= '2022-09-13'  -- First date minted
),

user_mint_summary as (
    select address,
        count(distinct token_id) as mint_token_count
    from nft_mint_detail
    group by 1
),

mint_user_summary as (
    select mint_token_count,
        count(address) as user_count
    from user_mint_summary
    group by 1
)

select a.mint_token_count,
    (case a.mint_token_count
            when 1 then '1+ NFTs'
            when 2 then '2+ NFTs'
            when 3 then '3+ NFTs'
            when 4 then '4+ NFTs'
            when 5 then '5+ NFTs'
            when 6 then '6+ NFTs'
            when 7 then '7+ NFTs'
            when 8 then '8+ NFTs'
            when 9 then '9+ NFTs'
            when 10 then '10+ NFTs'
            when 11 then '11+ NFTs'
            when 12 then '12+ NFTs'
            when 13 then '13+ NFTs'
            when 14 then '14+ NFTs'
            when 15 then '15+ NFTs'
            when 16 then '16+ NFTs'
            when 17 then '17+ NFTs'
            else '18 NFTs' end) as mint_token_type,
    sum(b.user_count) as total_user_count
from mint_user_summary a
inner join mint_user_summary b on b.mint_token_count >= a.mint_token_count
group by 1, 2
order by 1


"
1349558,op-quests-13-user-hold-nft-count-by-project,"Count unique project NFTs, include transferred","[{""id"": 2302388, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-10-04T14:22:02.041764+00:00"", ""__typename"": ""visualizations""}, {""id"": 2302389, ""type"": ""chart"", ""name"": ""Count of Users by Number of Unique NFTs Currently Held"", ""options"": {""sortX"": false, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Minted NFTs Count""}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Users Count""}}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": """", ""columnMapping"": {""user_count"": ""y"", ""mint_token_type"": ""x"", ""total_user_count"": ""y""}, ""seriesOptions"": {""total_user_count"": {""name"": ""Users Count"", ""type"": ""column"", ""color"": ""#ff0420"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-10-04T14:22:02.041764+00:00"", ""__typename"": ""visualizations""}, {""id"": 2302390, ""type"": ""chart"", ""name"": ""Users Percentage By Minted NFTs Count (Accumulated)"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""0.00a"", ""columnMapping"": {""user_count"": ""y"", ""mint_token_type"": ""x"", ""total_user_count"": ""y""}, ""seriesOptions"": {""total_user_count"": {""name"": ""Users Count"", ""type"": ""pie"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {""1"": {""color"": ""#ff0420""}}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2022-10-04T14:22:02.041764+00:00"", ""__typename"": ""visualizations""}]","with quest_nft_list(nft_project_id, nft_project_name) as (
    values 
    ('6340', 'Stargate'),
    ('6343', 'Uniswap'),
    ('6344', 'Velodrome'),
    ('6346', 'Polynomial'),
    ('6347', 'Synapse'),
    ('6349', 'Perpetual Protocol'),
    ('6351', 'Pooltogether'),
    ('6357', 'Clipper'),
    ('6358', 'Lyra'),
    ('6359', 'Hop Protocol'),
    ('6360', 'Rubicon'),
    ('6361', 'Pika'),
    ('6362', 'Synthetix'),
    ('6363', 'QiDao/Mai Finance'),
    ('6364', 'Kwenta'),
    ('6367', 'Granary'),
    ('6369', 'Quix'),
    ('6366', 'Beethoven')
),

nft_token_project as (
    select e.tokenId as token_id,
        m.cid as nft_project_id
    from optimism_quest_optimism.StarNFTV4_evt_Transfer e
    inner join optimism_quest_optimism.StarNFTV4_call_mint m on e.evt_tx_hash = m.call_tx_hash
    where e.contract_address = '0xfa14e1157f35e1dad95dc3f822a9d18c40e360e2'   -- SBT
        and e.`from` = '0x0000000000000000000000000000000000000000'   -- Mint
        and e.evt_block_time >= '2022-09-13'  -- First date minted
),

nft_transfer_detail as (
    select evt_block_time,
        evt_tx_hash,
        `to` as address,
        tokenId as token_id,
        1 as token_count
    from optimism_quest_optimism.StarNFTV4_evt_Transfer
    where contract_address = '0xfa14e1157f35e1dad95dc3f822a9d18c40e360e2'   -- Optimism quest SBT
        and evt_block_time >= '2022-09-13'  -- First date minted
    
    union all
    
    select evt_block_time,
        evt_tx_hash,
        `from` as address,
        tokenId as token_id,
        -1 as token_count
    from optimism_quest_optimism.StarNFTV4_evt_Transfer
    where contract_address = '0xfa14e1157f35e1dad95dc3f822a9d18c40e360e2'   -- Optimism quest SBT
        and evt_block_time >= '2022-09-13'  -- First date minted
        and `from` <> '0x0000000000000000000000000000000000000000'   -- Mint
),

nft_transfer_token_summary as (
    select address,
        nft_project_id,
        t.token_id,
        sum(token_count) as token_count
    from nft_transfer_detail t
    inner join nft_token_project p on t.token_id = p.token_id
    group by 1, 2, 3
    having sum(token_count) > 0
),

user_hold_nft_summary as (
    select address,
        count(distinct nft_project_id) as hold_project_token_count
    from nft_transfer_token_summary
    group by 1
),

nft_user_summary as (
    select hold_project_token_count,
        count(address) as user_count
    from user_hold_nft_summary
    group by 1
)

select a.hold_project_token_count,
    (case a.hold_project_token_count
            when 1 then '1+ NFTs'
            when 2 then '2+ NFTs'
            when 3 then '3+ NFTs'
            when 4 then '4+ NFTs'
            when 5 then '5+ NFTs'
            when 6 then '6+ NFTs'
            when 7 then '7+ NFTs'
            when 8 then '8+ NFTs'
            when 9 then '9+ NFTs'
            when 10 then '10+ NFTs'
            when 11 then '11+ NFTs'
            when 12 then '12+ NFTs'
            when 13 then '13+ NFTs'
            when 14 then '14+ NFTs'
            when 15 then '15+ NFTs'
            when 16 then '16+ NFTs'
            when 17 then '17+ NFTs'
            else '18 NFTs' end) as mint_token_type,
    sum(b.user_count) as total_user_count
from nft_user_summary a
inner join nft_user_summary b on b.hold_project_token_count >= a.hold_project_token_count
group by 1, 2
order by 1


"
364051,NFT Wash Traders,,"[{""id"": 698616, ""type"": ""counter"", ""name"": ""Wash Trades"", ""options"": {""rowNumber"": 1, ""counterColName"": ""cumulative trades""}, ""created_at"": ""2022-01-21T15:21:56.734344+00:00"", ""__typename"": ""visualizations""}, {""id"": 695112, ""type"": ""counter"", ""name"": ""Wash Trading Volume"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""counterColName"": ""cumulative volume""}, ""created_at"": ""2022-01-20T20:39:39.878715+00:00"", ""__typename"": ""visualizations""}, {""id"": 750793, ""type"": ""counter"", ""name"": ""Trading Rewards claimed by Wash Traders"", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Looks"", ""stringSuffix"": """", ""stringDecimal"": 0, ""counterColName"": ""(cumulative)""}, ""created_at"": ""2022-02-02T19:49:56.112479+00:00"", ""__typename"": ""visualizations""}, {""id"": 693476, ""type"": ""table"", ""name"": ""Wash Traders List"", ""options"": {""columns"": [{""name"": ""volume"", ""alignContent"": ""right"", ""numberFormat"": ""$0,0""}, {""name"": ""cumulative volume"", ""title"": ""(cumulative)"", ""alignContent"": ""left"", ""numberFormat"": ""$0.00a""}, {""name"": ""looks_claimed"", ""numberFormat"": ""0""}, {""name"": ""looks claimed"", ""numberFormat"": ""0""}, {""name"": ""looks trading"", ""numberFormat"": ""0""}, {""name"": ""looks rewards"", ""numberFormat"": ""0.0a""}, {""name"": ""looks airdrop"", ""numberFormat"": ""0""}, {""name"": ""LR reward"", ""alignContent"": ""right"", ""numberFormat"": ""0.00a""}, {""name"": ""cumulative LR reward"", ""numberFormat"": ""0.0a""}, {""name"": ""LR airdrop"", ""numberFormat"": ""0""}, {""name"": ""weth harvest"", ""numberFormat"": ""0.00""}, {""name"": ""(cumulative)"", ""numberFormat"": ""0.00a""}, {""name"": ""trades"", ""alignContent"": ""center""}, {""name"": ""pairs"", ""alignContent"": ""center""}, {""name"": ""cumulative trades"", ""title"": ""(t)""}, {""name"": ""risk"", ""numberFormat"": ""0.0a""}]}, ""created_at"": ""2022-01-20T14:08:02.05767+00:00"", ""__typename"": ""visualizations""}, {""id"": 693491, ""type"": ""chart"", ""name"": ""Wash Traders"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": """", ""columnMapping"": {""volume"": ""y"", ""address"": ""x""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""pie""}, ""created_at"": ""2022-01-20T14:11:49.45856+00:00"", ""__typename"": ""visualizations""}]","WITH wtrades AS (SELECT * FROM dune_user_generated.filtered_wt),
r AS (SELECT * FROM dune_user_generated.looksrare_rewards_wt),
c AS (SELECT * FROM dune_user_generated.looksrare_claim),
w AS (SELECT * FROM dune_user_generated.looksrare_fee_wt)

SELECT address, trades, pairs, volume, ""cumulative volume"", rewards as ""LR reward"", 
    sum(rewards) over (order by volume asc rows between unbounded preceding and current row) as ""(cumulative)"",
    looks as ""LR airdrop"", weth as ""weth harvest"", ""cumulative trades""
FROM (SELECT 
    CONCAT('<a href=""https://zapper.fi/account/', CONCAT('0x', ENCODE(f.address, 'hex')), '"" target=""_blank"">', 
        substring(concat(f.address),2,6),  '</a>') as address, trades, pairs, ""Volume A"" as volume, 
    sum(""Volume A"") over (order by ""Volume A"" asc rows between unbounded preceding and current row) as ""cumulative volume"",
    sum(trades) over (order by ""Volume A"" asc rows between unbounded preceding and current row) as ""cumulative trades"", r.rewards, c.looks, w.weth
    FROM wtrades as f
    LEFT JOIN r ON r.address=f.address
    LEFT JOIN c ON c.address=f.address
    LEFT JOIN w ON w.address=f.address) as res
ORDER BY volume DESC"
386531,NFT Adjusted Volume VS Wash Trading,,"[{""id"": 736750, ""type"": ""table"", ""name"": ""Query results"", ""options"": {""columns"": [{""name"": ""wash_trading_1"", ""numberFormat"": ""$0,0""}, {""name"": ""wash_trading_2"", ""numberFormat"": ""$0,0""}, {""name"": ""volume"", ""numberFormat"": ""$0,0""}]}, ""created_at"": ""2022-01-30T18:54:27.102024+00:00"", ""__typename"": ""visualizations""}, {""id"": 736752, ""type"": ""chart"", ""name"": """", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""tickFormat"": """"}, ""yAxis"": [{""type"": ""-"", ""tickFormat"": """"}], ""legend"": {""enabled"": false}, ""series"": {""stacking"": ""stack"", ""percentValues"": true}, ""reverseX"": false, ""columnMapping"": {"""": ""y"", ""Date"": ""x"", ""time"": ""x"", ""Others"": ""y"", ""volume"": ""y"", ""OpenSea"": ""y"", ""LR Buyers"": ""y"", ""LooksRare"": ""y"", ""OS Buyers"": ""y"", ""NFT Buyers"": ""y"", ""wash_trading"": ""y"", ""wash_trading_2"": ""y""}, ""seriesOptions"": {""volume"": {""name"": ""Adjusted Volume"", ""type"": ""column"", ""color"": ""#00FF40"", ""yAxis"": 0, ""zIndex"": 2}, ""wash_trading"": {""name"": ""Wash Trading"", ""type"": ""column"", ""color"": ""#FF0000"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-01-30T18:54:27.102024+00:00"", ""__typename"": ""visualizations""}, {""id"": 740960, ""type"": ""chart"", ""name"": ""Adjusted Volume"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""tickFormat"": """"}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""$0,0"", ""columnMapping"": {""time"": ""x"", ""volume"": ""y""}, ""seriesOptions"": {""volume"": {""type"": ""column"", ""color"": ""#8000FF"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-01-31T23:20:49.214492+00:00"", ""__typename"": ""visualizations""}, {""id"": 736839, ""type"": ""chart"", ""name"": """", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""series"": {""stacking"": null}, ""reverseX"": false, ""numberFormat"": ""$0.0a"", ""columnMapping"": {""time"": ""x"", ""volume"": ""y"", ""wash_trading"": ""y"", ""wash_trading_2"": ""y""}, ""seriesOptions"": {""volume"": {""name"": ""Adjusted Volume"", ""type"": ""line"", ""color"": ""#00FF00"", ""yAxis"": 0, ""zIndex"": 1}, ""wash_trading"": {""name"": ""Wash Trading"", ""type"": ""line"", ""color"": ""#FF0000"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-01-30T19:21:30.772967+00:00"", ""__typename"": ""visualizations""}]","WITH wtrades AS (SELECT * FROM dune_user_generated.filtered_wt),
wtokens AS (SELECT * FROM dune_user_generated.filtered_wtt),
qtrades AS (SELECT * FROM nft.trades_v2_beta WHERE usd_amount<100000000 AND block_time >= '2022-05-20' 
    AND original_currency = ANY(ARRAY['ETH','WETH']) -- <= ignore USDC and more to avoid bugs
    -- ignore gem and genie to avoid more bugs =>
    AND buyer != '\x0000000035634b55f3d99b071b5a354f48e10bef' AND buyer != '\x83c8f28c26bf6aaca652df1dbbe0e1b56f8baba2' AND buyer != '\x2af4b707e1dce8fc345f38cfeeaa2421e54976d5' 
    )

SELECT date_trunc('{{Time interval}}', block_time) AS time, SUM(usd_amount[2]) as wash_trading, SUM(usd_amount[1]-usd_amount[2]) as volume
FROM (SELECT block_time, ARRAY[usd_amount, CASE WHEN platform='LooksRare' 
            AND ((buyer IN (SELECT address from wtrades) AND seller IN (SELECT address from wtrades))
                OR CONCAT(nft_contract_address,'_',nft_token_id) IN (SELECT CONCAT(contract_address,'_',token_id) from wtokens))
        THEN usd_amount ELSE 0 END] AS usd_amount
    FROM qtrades) res
GROUP BY 1
ORDER BY 1 DESC"
368852,Suspicious Trades,not filtered,"[{""id"": 702321, ""type"": ""table"", ""name"": """", ""options"": {""columns"": [{""name"": ""usd_amount"", ""numberFormat"": ""$0,0""}, {""name"": ""cumulative volume"", ""numberFormat"": ""$0,0""}]}, ""created_at"": ""2022-01-22T16:41:41.861394+00:00"", ""__typename"": ""visualizations""}]","WITH qtrades AS (SELECT * FROM nft.trades WHERE platform='LooksRare'),
wtrades AS (SELECT * FROM dune_user_generated.filtered_wt),
rtrades AS (SELECT * FROM dune_user_generated.filtered_wt2),
wtokens AS (SELECT * FROM dune_user_generated.filtered_wtt)

/*  This List includes trades involving Wash Traders, 
    Buyer or Seller previously involved in Simple Wash Trading. */
SELECT 
    CONCAT('<a href=""', replace(concat(tx_hash), '\', 'https://etherscan.io/tx/0'), '"" target=""_blank"">', 
        block_time,  '</a>') as time, 
    CONCAT('<a href=""', concat('https://looksrare.org/collections/',replace(concat(nft_contract_address),'\','0'),'/',nft_token_ids_array[1],'#activity'), '"" target=""_blank"">', 
        concat ((SELECT name FROM nft.tokens WHERE contract_address=nft_contract_address),' #',substring(nft_token_ids_array[1],1,12)),  '</a>') as asset,
    CONCAT(CONCAT(CASE 
            WHEN (buyer IN (SELECT address from wtrades)) THEN '(X) ' 
            WHEN (buyer IN (SELECT address from rtrades)) THEN '(R) ' END, 
        '<a href=""', replace(concat(buyer,'#activity'), '\', 'https://looksrare.org/accounts/0'), '"" target=""_blank"">', 
        substring(concat(buyer),2,6),  '</a>')) as buyer,
    CONCAT(CASE 
            WHEN (seller IN (SELECT address from wtrades)) THEN '(X) ' 
            WHEN (seller IN (SELECT address from rtrades)) THEN '(R) ' END,
        CONCAT('<a href=""', replace(concat(seller,'#activity'), '\', 'https://looksrare.org/accounts/0'), '"" target=""_blank"">', 
        substring(concat(seller),2,6),  '</a>')) as seller,
    usd_amount, sum(usd_amount) over (order by block_time asc rows between unbounded preceding and current row) as ""cumulative volume""
FROM qtrades
WHERE 
    (buyer IN (SELECT address from wtrades) OR seller IN (SELECT address from wtrades))
    AND NOT(
        (buyer IN (SELECT address from wtrades) AND seller IN (SELECT address from wtrades))
        OR CONCAT(nft_contract_addresses_array[1],'_',nft_token_ids_array[1]) IN (SELECT CONCAT(contract_address,'_',token_id) from wtokens))
    AND usd_amount>10000
ORDER BY block_time DESC"
382810,NFT Relayers,,"[{""id"": 730147, ""type"": ""table"", ""name"": ""Traders List #2 (by multiple contacts)"", ""options"": {""columns"": [{""name"": ""volume"", ""numberFormat"": ""$0,0""}, {""name"": ""cumulative volume"", ""numberFormat"": ""$0,0""}, {""name"": ""looks claimed"", ""numberFormat"": ""0""}]}, ""created_at"": ""2022-01-28T17:31:33.775538+00:00"", ""__typename"": ""visualizations""}]","-- Relayers List - LooksRare traders involved with Wash Traders
SELECT 
    CONCAT('<a href=""https://zapper.fi/account/', CONCAT('0x', ENCODE(f.address, 'hex')), '"" target=""_blank"">', 
        substring(concat(f.address),2,6),  '</a>') as address, trades, pairs, volume,c.looks as ""looks claimed"",
        sum(volume) over (order by volume asc rows between unbounded preceding and current row) as ""cumulative volume"", type
    FROM dune_user_generated.filtered_wt2 as f
    LEFT JOIN dune_user_generated.looksrare_claim c ON c.address=f.address
ORDER BY volume DESC"
362587,NFT Adjusted Volume,,"[{""id"": 690452, ""type"": ""table"", ""name"": ""Query results"", ""options"": {""columns"": [{""name"": ""OpenSea"", ""numberFormat"": ""$0,0""}, {""name"": ""LooksRare"", ""numberFormat"": ""$0,0""}, {""name"": ""Others"", ""numberFormat"": ""$0,0""}]}, ""created_at"": ""2022-01-19T22:23:15.268818+00:00"", ""__typename"": ""visualizations""}, {""id"": 698126, ""type"": ""chart"", ""name"": ""Market Share"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""series"": {""stacking"": ""stack"", ""percentValues"": true}, ""reverseX"": false, ""columnMapping"": {""time"": ""x"", ""Others"": ""y"", ""OpenSea"": ""y"", ""LooksRare"": ""y""}, ""seriesOptions"": {""Others"": {""type"": ""column"", ""color"": ""#00FFFF"", ""yAxis"": 0, ""zIndex"": 2}, ""OpenSea"": {""type"": ""column"", ""color"": ""#8000FF"", ""yAxis"": 0, ""zIndex"": 0}, ""LooksRare"": {""type"": ""column"", ""color"": ""#FF00FF"", ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-01-21T13:08:13.855435+00:00"", ""__typename"": ""visualizations""}, {""id"": 698130, ""type"": ""chart"", ""name"": ""Adjusted Volume (!OS)"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""numberFormat"": ""$0.0a"", ""columnMapping"": {""time"": ""x"", ""Others"": ""y"", ""LooksRare"": ""y""}, ""seriesOptions"": {""Others"": {""type"": ""column"", ""color"": ""#A100FF"", ""yAxis"": 0, ""zIndex"": 1}, ""LooksRare"": {""type"": ""column"", ""color"": ""#FF00FF"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-01-21T13:10:50.232254+00:00"", ""__typename"": ""visualizations""}, {""id"": 690453, ""type"": ""chart"", ""name"": ""Adjusted Volume"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""-""}, {""type"": ""-""}], ""legend"": {""enabled"": false}, ""series"": {""stacking"": ""stack"", ""percentValues"": false}, ""reverseX"": false, ""numberFormat"": ""$0.0a"", ""columnMapping"": {"""": ""y"", ""Date"": ""x"", ""time"": ""x"", ""Others"": ""y"", ""ma_vol"": ""y"", ""OpenSea"": ""y"", ""LR Buyers"": ""y"", ""LooksRare"": ""y"", ""OS Buyers"": ""y"", ""NFT Buyers"": ""y""}, ""seriesOptions"": {""Others"": {""type"": ""column"", ""color"": ""#00fffe"", ""yAxis"": 0, ""zIndex"": 3}, ""ma_vol"": {""name"": ""Volume (7ma)"", ""type"": ""line"", ""color"": ""#19ff00"", ""yAxis"": 1, ""zIndex"": 0}, ""OpenSea"": {""type"": ""column"", ""color"": ""#0076ff"", ""yAxis"": 0, ""zIndex"": 1}, ""LooksRare"": {""name"": ""LooksRare Adjusted"", ""type"": ""column"", ""color"": ""#da00ff"", ""yAxis"": 0, ""zIndex"": 2}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-01-19T22:23:15.268818+00:00"", ""__typename"": ""visualizations""}]","WITH wtrades AS (SELECT * FROM dune_user_generated.filtered_wt),
wtokens AS (SELECT * FROM dune_user_generated.filtered_wtt),
qtrades AS (SELECT * FROM nft.trades_v2_beta
    WHERE usd_amount<100000000 and block_time >= '2022-05-20' AND original_currency = ANY(ARRAY['ETH','WETH']) -- <= ignore USDC and more to avoid bugs
    -- ignore gem and genie to avoid more bugs =>
    AND buyer != '\x0000000035634b55f3d99b071b5a354f48e10bef' AND buyer != '\x83c8f28c26bf6aaca652df1dbbe0e1b56f8baba2' AND buyer != '\x2af4b707e1dce8fc345f38cfeeaa2421e54976d5' 
    AND NOT ((buyer IN (SELECT address from wtrades) AND seller IN (SELECT address from wtrades))
        OR CONCAT(nft_contract_address,'_',nft_token_id) IN (SELECT CONCAT(contract_address,'_',token_id) from wtokens)))

SELECT date_trunc('{{Time interval}}', block_time) AS time, 
    SUM(usd_amount[2]) as ""OpenSea"", SUM(usd_amount[3]) as ""LooksRare"", SUM(usd_amount[1]-usd_amount[2]-usd_amount[3]) as ""Others"",
    SUM(usd_amount[1]) as vol, AVG(SUM(usd_amount[1])) OVER(ORDER BY date_trunc('{{Time interval}}', block_time) ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) AS ma_vol
FROM (SELECT block_time, ARRAY[usd_amount,
        CASE WHEN platform='OpenSea' THEN usd_amount ELSE 0 END, 
        CASE WHEN platform='LooksRare' THEN  usd_amount ELSE 0 END] AS usd_amount
    FROM qtrades) res
GROUP BY 1
ORDER BY 1 DESC"
393563,LooksRare Legit Trading Rewards,,"[{""id"": 750929, ""type"": ""table"", ""name"": ""Query results"", ""options"": {""columns"": [{""name"": ""rewards"", ""numberFormat"": ""0.00a""}]}, ""created_at"": ""2022-02-02T20:10:17.671724+00:00"", ""__typename"": ""visualizations""}, {""id"": 750946, ""type"": ""counter"", ""name"": ""Trading Rewards claimed by everyone else"", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Looks"", ""stringSuffix"": """", ""stringDecimal"": 0, ""counterColName"": ""rewards""}, ""created_at"": ""2022-02-02T20:12:50.453457+00:00"", ""__typename"": ""visualizations""}]","SELECT ""from"" as address, sum(value/1e18) as rewards, count(evt_tx_hash) as claims
FROM erc20.""ERC20_evt_Transfer""
WHERE ""from""='\x453c1208B400fE47aCF275315F14E8F9F9fbC3cD' -- LooksRare: Trading Rewards Distributor
    AND ""to"" NOT IN (SELECT address from dune_user_generated.filtered_wt)
GROUP BY ""from""
ORDER BY rewards DESC"
403814,Filtered Wash Trades,,"[{""id"": 771368, ""type"": ""table"", ""name"": """", ""options"": {""columns"": [{""name"": ""usd_amount"", ""numberFormat"": ""$0,0""}, {""name"": ""cumulative volume"", ""numberFormat"": ""$0,0""}]}, ""created_at"": ""2022-02-07T16:34:41.216132+00:00"", ""__typename"": ""visualizations""}]","WITH qtrades AS (SELECT * FROM nft.trades WHERE platform='LooksRare' AND usd_amount>10000),
wtrades AS (SELECT * FROM dune_user_generated.filtered_wt),
rtrades AS (SELECT * FROM dune_user_generated.filtered_wt2),
wtokens AS (SELECT * FROM dune_user_generated.filtered_wtt)

SELECT 
    CONCAT('<a href=""', replace(concat(tx_hash), '\', 'https://etherscan.io/tx/0'), '"" target=""_blank"">', 
        block_time,  '</a>') as time, 
    CONCAT('<a href=""', concat('https://looksrare.org/collections/',replace(concat(nft_contract_address),'\','0'),'/',nft_token_ids_array[1],'#activity'), '"" target=""_blank"">', 
        concat ((SELECT name FROM nft.tokens WHERE contract_address=nft_contract_address),' #',substring(nft_token_ids_array[1],1,12)),  '</a>') as asset,
    CONCAT(CONCAT(CASE 
            WHEN (buyer IN (SELECT address from wtrades)) THEN '(X) ' 
            WHEN (buyer IN (SELECT address from rtrades)) THEN '(R) ' END, 
        '<a href=""', replace(concat(buyer,'#activity'), '\', 'https://looksrare.org/accounts/0'), '"" target=""_blank"">', 
        substring(concat(buyer),2,6),  '</a>')) as buyer,
    CONCAT(CASE 
            WHEN (seller IN (SELECT address from wtrades)) THEN '(X) ' 
            WHEN (seller IN (SELECT address from rtrades)) THEN '(R) ' END,
        CONCAT('<a href=""', replace(concat(seller,'#activity'), '\', 'https://looksrare.org/accounts/0'), '"" target=""_blank"">', 
        substring(concat(seller),2,6),  '</a>')) as seller, usd_amount
FROM qtrades
WHERE ((buyer IN (SELECT address from wtrades) AND seller IN (SELECT address from wtrades))
    OR (CONCAT(nft_contract_addresses_array[1],'_',nft_token_ids_array[1]) IN (SELECT CONCAT(contract_address,'_',token_id) from wtokens)))
ORDER BY block_time DESC"
369986,Wash Traders Activity,,"[{""id"": 704430, ""type"": ""table"", ""name"": ""Assets traded by Wash Traders (Buying OR Selling)"", ""options"": {""columns"": [{""name"": ""volume"", ""numberFormat"": ""$0,0""}, {""name"": ""cumulative volume"", ""numberFormat"": ""$0,0""}]}, ""created_at"": ""2022-01-23T14:11:18.944364+00:00"", ""__typename"": ""visualizations""}]","/*  All assets traded by Wash Traders (Buying OR Selling). 
    This may include some legit trades but hard to know how far they may go with their Wash Trading activity. 
    This list may be useful to detect more complex Wash Trading. */
SELECT trades, asset, volume, sum(volume) over (order by volume asc rows between unbounded preceding and current row) as ""cumulative volume""
FROM (
    SELECT count(asset) as trades, 
        CONCAT('<a href=""', concat('https://looksrare.org/collections/',replace(concat(nft_contract_address),'\','0'),'/',nft_token_id,'#activity'), '"" target=""_blank"">', 
            concat ((SELECT name FROM nft.tokens WHERE contract_address=nft_contract_address),' #',substring(nft_token_id,1,12)),  '</a>') as asset,
        sum(usd_amount) as volume
        FROM (SELECT block_time, buyer, seller, usd_amount, nft_project_name, nft_token_id, 
                nft_contract_address, concat (nft_contract_address,' #',nft_token_id) as asset
            FROM nft.trades
            WHERE platform='LooksRare' 
            AND (buyer IN (SELECT address from dune_user_generated.filtered_wt) OR seller IN (SELECT address from dune_user_generated.filtered_wt))) as res
    GROUP BY nft_token_id, nft_contract_address, nft_project_name) as final
WHERE volume>10000
ORDER BY volume DESC"
369073,Wash Traded NFTs,,"[{""id"": 702772, ""type"": ""table"", ""name"": ""Assets traded between Wash Traders (Buyer AND Seller)"", ""options"": {""columns"": [{""name"": ""volume"", ""numberFormat"": ""$0,0""}, {""name"": ""cumulative volume"", ""numberFormat"": ""$0,0""}]}, ""created_at"": ""2022-01-22T19:29:46.063289+00:00"", ""__typename"": ""visualizations""}]","/*  This List only includes assets traded between Wash Traders, 
    meaning Seller AND Buyer must be filtered as Wash Traders. 
    Assets only used in more complex Wash Trading aren’t included. */
SELECT trades, asset, volume, sum(volume) over (order by trades asc rows between unbounded preceding and current row) as ""cumulative volume""
FROM (
    SELECT count(asset) as trades, 
    
        CONCAT('<a href=""', concat('https://looksrare.org/collections/',replace(concat(nft_contract_address),'\','0'),'/',nft_token_id,'#activity'), '"" target=""_blank"">', 
            concat ((SELECT name FROM nft.tokens WHERE contract_address=nft_contract_address),' #',substring(nft_token_id,1,12)),  '</a>') as asset,
        sum(usd_amount) as volume
    FROM (SELECT block_time, buyer, seller, usd_amount, nft_project_name, nft_token_ids_array[1] as nft_token_id, 
                nft_contract_addresses_array[1] as nft_contract_address, concat (nft_contract_address,' #',nft_token_id) as asset
        FROM nft.trades
        WHERE platform='LooksRare' 
        AND buyer IN (SELECT address from dune_user_generated.filtered_wt) AND seller IN (SELECT address from dune_user_generated.filtered_wt)) as res
    GROUP BY nft_token_id, nft_contract_address, nft_project_name) as final
where volume>10000
ORDER BY trades DESC"
1410903,NFT Sales,,"[{""id"": 2395245, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""Price (ETH)"", ""numberFormat"": ""0.00""}, {""name"": ""Price [ETH]"", ""numberFormat"": ""0.00""}, {""name"": ""ETH Price"", ""alignContent"": ""center"", ""numberFormat"": ""0.00""}, {""name"": ""Token ID Opensea"", ""alignContent"": ""center""}, {""name"": ""Sale Time"", ""title"": ""UTC Sale Time"", ""alignContent"": ""left"", ""numberFormat"": """"}, {""name"": ""Sale #"", ""alignContent"": ""left"", ""numberFormat"": ""0,""}, {""name"": ""Seller"", ""alignContent"": ""center""}, {""name"": ""TX [Etherscan]"", ""alignContent"": ""center""}, {""name"": ""Buyer"", ""title"": ""\ud83c\udf0a Buyer"", ""alignContent"": ""left""}, {""name"": ""ID [Opensea]"", ""alignContent"": ""center""}, {""name"": ""Seller [OS]"", ""alignContent"": ""center""}, {""name"": ""Buyer [OS]"", ""title"": ""Buyer"", ""alignContent"": ""left""}, {""name"": ""Price"", ""title"": ""ETH"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""Token [OS]"", ""title"": ""Token"", ""alignContent"": ""center""}, {""name"": ""Transaction"", ""title"": "" "", ""alignContent"": ""center""}, {""name"": ""Wallet"", ""alignContent"": ""center""}, {""name"": ""$USD"", ""title"": ""USD"", ""alignContent"": ""right"", ""numberFormat"": ""$0,""}, {""name"": ""[Token]"", ""title"": ""Token"", ""alignContent"": ""center""}, {""name"": ""Sales"", ""title"": "" ""}, {""name"": ""sale_time"", ""title"": ""Time of Sale""}, {""name"": ""sale_num"", ""title"": ""Sale #"", ""alignContent"": ""center"", ""numberFormat"": ""0,""}, {""name"": ""token"", ""title"": ""TOKEN"", ""alignContent"": ""left""}, {""name"": ""price_eth"", ""title"": ""\u2666 ETH"", ""alignContent"": ""right"", ""numberFormat"": ""0.0""}, {""name"": ""usd"", ""title"": ""$USD"", ""alignContent"": ""right"", ""numberFormat"": ""$0,""}, {""name"": ""details"", ""title"": ""DATA"", ""alignContent"": ""center""}, {""name"": ""tx"", ""title"": ""Etherscan \ud83d\udd17 ""}, {""name"": ""time_since"", ""title"": ""AGE"", ""alignContent"": ""right""}, {""name"": ""buyer_os"", ""title"": ""BUYER ""}, {""name"": ""Market"", ""title"": ""MARKET"", ""alignContent"": ""center""}, {""name"": ""pst_etherscan"", ""title"": ""PST / ETHERSCAN ""}, {""name"": ""seller_os"", ""title"": ""SELLER""}, {""name"": ""etherscan"", ""title"": "" TX"", ""alignContent"": ""center""}, {""name"": ""time"", ""title"": ""SALE TIME""}, {""name"": ""sales"", ""title"": ""SALES"", ""alignContent"": ""right"", ""numberFormat"": ""0,""}, {""name"": ""volume"", ""title"": ""\u2666 VOLUME"", ""alignContent"": ""right"", ""numberFormat"": ""0,0""}, {""name"": ""collection"", ""title"": ""COLLECTION""}, {""name"": ""floor"", ""title"": ""FLOOR"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""Rank"", ""title"": ""RANK"", ""alignContent"": ""center""}, {""name"": ""total_volume"", ""title"": ""\u2666 TOTAL"", ""alignContent"": ""right"", ""numberFormat"": ""0,0""}, {""name"": ""opensea_volume"", ""title"": ""\u2666 OPENSEA"", ""alignContent"": ""right"", ""numberFormat"": ""0,0""}, {""name"": ""looksrare_volume"", ""title"": ""\u2666 LOOKS"", ""alignContent"": ""right"", ""numberFormat"": ""0,0""}, {""name"": ""x2y2_volume"", ""title"": ""\u2666 X2Y2"", ""alignContent"": ""right"", ""numberFormat"": ""0,0""}, {""name"": ""links"", ""title"": ""LINKS "", ""alignContent"": ""right""}, {""name"": ""lowest_sale"", ""title"": ""\u2666 LOWEST"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""median"", ""title"": ""\u2666 MEDIAN"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""highest_sale"", ""title"": ""\u2666 HIGH"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""opensea_total"", ""numberFormat"": ""0,0""}, {""name"": ""looksrare_total"", ""numberFormat"": ""0,""}, {""name"": ""x2y2_total"", ""numberFormat"": ""0,""}]}, ""created_at"": ""2022-10-15T23:27:22.550827+00:00"", ""__typename"": ""visualizations""}, {""id"": 2395382, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Total Sales Past 24 Hours"", ""counterColName"": ""count""}, ""created_at"": ""2022-10-16T00:21:08.766488+00:00"", ""__typename"": ""visualizations""}]","SELECT COUNT(*) 
FROM  dune_user_generated.cryptuschrist_allexchange3
WHERE block_time > NOW() - INTERVAL '24 hour' 




"
559215,TOP FLOOR LOSERS,Floor Price here means 'lowest sale price' from previous 24 hours (today) and the 24 period prior (yesterday).,"[{""id"": 1048558, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""Dune Link"", ""alignContent"": ""center""}, {""name"": ""Total Volume (ETH)"", ""title"": ""Total"", ""alignContent"": ""right"", ""numberFormat"": ""0,000""}, {""name"": ""1 day Volume (ETH)"", ""title"": """", ""alignContent"": ""right"", ""numberFormat"": ""0,""}, {""name"": ""1W Volume (ETH)"", ""title"": """", ""alignContent"": ""right"", ""numberFormat"": ""0,000""}, {""name"": ""Floor Price"", ""title"": ""FLOOR \u2666"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""Today's Median Sale"", ""title"": ""Median"", ""alignContent"": ""right"", ""numberFormat"": ""0.0""}, {""name"": ""Ranking"", ""title"": ""Rank"", ""alignContent"": ""center""}, {""name"": ""Project / Address"", ""alignContent"": ""left""}, {""name"": ""Rank"", ""title"": ""RANK"", ""alignContent"": ""center""}, {""name"": ""Day Rank"", ""title"": ""Rank"", ""alignContent"": ""center""}, {""name"": ""Median"", ""title"": ""MEDIAN \u2666"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""Owners"", ""title"": ""OWNERS"", ""alignContent"": ""right"", ""numberFormat"": ""0,""}, {""name"": ""Items"", ""title"": ""ITEMS"", ""alignContent"": ""right"", ""numberFormat"": ""0,""}, {""name"": ""Volume ETH"", ""title"": ""\u2666 VOLUME"", ""alignContent"": ""right"", ""numberFormat"": ""0,0.""}, {""name"": ""Sales"", ""title"": ""SALES COUNT"", ""alignContent"": ""right"", ""numberFormat"": ""0,""}, {""name"": ""Dashboard Link"", ""title"": ""PROJECT DASHBOARD""}, {""name"": ""dune_link"", ""title"": ""DUNE"", ""alignContent"": ""center""}, {""name"": ""OPENSEA"", ""title"": ""COLLECTION - OPENSEA""}, {""name"": ""floor"", ""title"": ""1 DAY FLOOR"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""floor_4h"", ""title"": ""4 HR FLOOR"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""diff"", ""title"": "" CHANGE \u2666"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""change"", ""title"": ""CHANGE"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""floor_24h"", ""title"": ""FLOOR TODAY"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""floor_48h"", ""title"": ""FLOOR YESTERDAY"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""volume_yesterday"", ""alignContent"": ""right"", ""numberFormat"": ""0,""}, {""name"": ""volume_today"", ""alignContent"": ""right"", ""numberFormat"": ""0,""}, {""name"": ""floor_today"", ""title"": ""TODAY"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""floor_yesterday"", ""title"": ""YESTERDAY"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""collection"", ""title"": ""COLLECTION ""}]}, ""created_at"": ""2022-04-01T15:46:53.269227+00:00"", ""__typename"": ""visualizations""}]","SELECT 
    COALESCE(collection_opensea_dune,CONCAT('<a href=""https://dune.xyz/cryptuschrist/CUSTOM-NFT-Dashboard?NFT%20Contract=0',SUBSTRING(""nft_contract_address""::text,2,42),'""> 🟠 </a>','  ','<a href=""https://etherscan.io/token/0',SUBSTRING(""nft_contract_address""::text, 2),'"" target=""_blank"">',CONCAT('📶 CONTRACT: 0x..',UPPER(SUBSTRING(""nft_contract_address""::text, 38,42))),'</a>')) AS collection,
    floor_today, 
    floor_yesterday, 
    CASE WHEN diff > 0 THEN CONCAT('⬆ 🟩 ' ::text , ROUND(diff::numeric, 2)) WHEN diff < 0 THEN CONCAT('⬇ 🟥 '   ::text , ROUND(diff::numeric, 2) )END AS change 
FROM 
    (
    SELECT 
     -- SUM(price) AS volume_yesterday, MAX(today.volume) AS volume_today,
       today.nft_contract_address AS nft_contract_address, 
        MIN(price) AS floor_yesterday,  
        today.floor AS floor_today, 
        ( today.floor - (MIN(price))) AS diff 
    FROM dune_user_generated.cryptuschrist_allexchange3 yesterday 
    LEFT JOIN 
        ( 
        SELECT MIN(price) AS floor, nft_contract_address --, SUM(price) AS volume 
        FROM dune_user_generated.cryptuschrist_allexchange3
        WHERE block_time > NOW() - interval  '1 day'
        GROUP BY 2
        ) today on yesterday.nft_contract_address = today.nft_contract_address
    WHERE block_time > NOW() - interval  '2 day' AND block_time < NOW() - interval '1 day'
    AND today.floor IS NOT NULL 
    --AND yesterday.nft_contract_address NOT IN ('\x1dfe7ca09e99d10835bf73044a23b73fc20623df', '\xc36cf0cfcb5d905b8b513860db0cfe63f6cf9f5c', '\x4e1f41613c9084fdb9e34e11fae9412427480e56', '\x7bd29408f11d2bfc23c34f18275bbf23bb716bc7', '\xce25e60a89f200b1fa40f6c313047ffe386992c3','\xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb' ,'\xfb3765e0e7ac73e736566af913fa58c3cfd686b7','\x495f947276749ce646f68ac8c248420045cb7b5e','\xc99f70bfd82fb7c8f8191fdfbfb735606b15e5c5','\xb932a70a57673d89f4acffbe830e8ed7f75fb9e0', '\xa7d8d9ef8d8ce8992df33d8b8cf4aebabd5bd270')
    GROUP BY 1, today.floor 
    HAVING SUM(price) > 0 
    ORDER BY 2 DESC
    LIMIT 100  )  sub_1   
LEFT JOIN dune_user_generated.""cryptuschrist_nft_projects5"" on ""nft_contract"" = nft_contract_address        
WHERE diff < 0 
    ORDER By diff 
    
    -- volume_today - volume_yesterday AS vol_change, 
-- comments / feedback @CryptusChrist on Twitter"
989951,NFT VOLUME ♦ by Exchange - Past MONTH,,"[{""id"": 1714577, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""Price (ETH)"", ""numberFormat"": ""0.00""}, {""name"": ""Price [ETH]"", ""numberFormat"": ""0.00""}, {""name"": ""ETH Price"", ""alignContent"": ""center"", ""numberFormat"": ""0.00""}, {""name"": ""Token ID Opensea"", ""alignContent"": ""center""}, {""name"": ""Sale Time"", ""title"": ""UTC Sale Time"", ""alignContent"": ""left"", ""numberFormat"": """"}, {""name"": ""Sale #"", ""alignContent"": ""left"", ""numberFormat"": ""0,""}, {""name"": ""Seller"", ""alignContent"": ""center""}, {""name"": ""TX [Etherscan]"", ""alignContent"": ""center""}, {""name"": ""Buyer"", ""title"": ""\ud83c\udf0a Buyer"", ""alignContent"": ""left""}, {""name"": ""ID [Opensea]"", ""alignContent"": ""center""}, {""name"": ""Seller [OS]"", ""alignContent"": ""center""}, {""name"": ""Buyer [OS]"", ""title"": ""Buyer"", ""alignContent"": ""left""}, {""name"": ""Price"", ""title"": ""ETH"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""Token [OS]"", ""title"": ""Token"", ""alignContent"": ""center""}, {""name"": ""Transaction"", ""title"": "" "", ""alignContent"": ""center""}, {""name"": ""Wallet"", ""alignContent"": ""center""}, {""name"": ""$USD"", ""title"": ""USD"", ""alignContent"": ""right"", ""numberFormat"": ""$0,""}, {""name"": ""[Token]"", ""title"": ""Token"", ""alignContent"": ""center""}, {""name"": ""Sales"", ""title"": "" ""}, {""name"": ""sale_time"", ""title"": ""Time of Sale""}, {""name"": ""sale_num"", ""title"": ""Sale #"", ""alignContent"": ""center"", ""numberFormat"": ""0,""}, {""name"": ""token"", ""title"": ""TOKEN"", ""alignContent"": ""left""}, {""name"": ""price_eth"", ""title"": ""\u2666 ETH"", ""alignContent"": ""right"", ""numberFormat"": ""0.0""}, {""name"": ""usd"", ""title"": ""$USD"", ""alignContent"": ""right"", ""numberFormat"": ""$0,""}, {""name"": ""details"", ""title"": ""DATA"", ""alignContent"": ""center""}, {""name"": ""tx"", ""title"": ""Etherscan \ud83d\udd17 ""}, {""name"": ""time_since"", ""title"": ""AGE"", ""alignContent"": ""right""}, {""name"": ""buyer_os"", ""title"": ""BUYER ""}, {""name"": ""Market"", ""title"": ""MARKET"", ""alignContent"": ""center""}, {""name"": ""pst_etherscan"", ""title"": ""PST / ETHERSCAN ""}, {""name"": ""seller_os"", ""title"": ""SELLER""}, {""name"": ""etherscan"", ""title"": "" TX"", ""alignContent"": ""center""}, {""name"": ""time"", ""title"": ""SALE TIME""}, {""name"": ""sales"", ""title"": ""SALES"", ""alignContent"": ""right"", ""numberFormat"": ""0,""}, {""name"": ""volume"", ""title"": ""\u2666 VOLUME"", ""alignContent"": ""right"", ""numberFormat"": ""0,0""}, {""name"": ""collection"", ""title"": ""COLLECTION""}, {""name"": ""floor"", ""title"": ""FLOOR"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""Rank"", ""title"": ""RANK"", ""alignContent"": ""center""}, {""name"": ""total_volume"", ""title"": ""\u2666 TOTAL"", ""alignContent"": ""right"", ""numberFormat"": ""0,0""}, {""name"": ""opensea_volume"", ""title"": ""\u2666 OPENSEA"", ""alignContent"": ""right"", ""numberFormat"": ""0,0""}, {""name"": ""looksrare_volume"", ""title"": ""\u2666 LOOKS"", ""alignContent"": ""right"", ""numberFormat"": ""0,0""}, {""name"": ""x2y2_volume"", ""title"": ""\u2666 X2Y2"", ""alignContent"": ""right"", ""numberFormat"": ""0,0""}, {""name"": ""links"", ""title"": ""LINKS "", ""alignContent"": ""right""}, {""name"": ""lowest_sale"", ""title"": ""\u2666 LOWEST"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""median"", ""title"": ""\u2666 MEDIAN"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""highest_sale"", ""title"": ""\u2666 HIGH"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""opensea_total"", ""numberFormat"": ""0,0""}, {""name"": ""looksrare_total"", ""numberFormat"": ""0,""}, {""name"": ""x2y2_total"", ""numberFormat"": ""0,""}]}, ""created_at"": ""2022-07-01T23:39:46.588013+00:00"", ""__typename"": ""visualizations""}, {""id"": 1714750, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""VOLUME""}, ""tickFormat"": ""0,""}, {""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""numberFormat"": ""0,"", ""columnMapping"": {""Day"": ""x"", ""BLUR.io"": ""y"", ""x2y2_total"": ""y"", ""Archipelago"": ""y"", ""punks_total"": ""y"", ""opensea_total"": ""y"", ""coinbase_total"": ""y"", ""sudoswap_total"": ""y"", ""looksrare_total"": ""y""}, ""seriesOptions"": {""BLUR.io"": {""type"": ""column"", ""color"": ""#ffaa00"", ""yAxis"": 0, ""zIndex"": 7}, ""x2y2_total"": {""name"": ""X2Y2"", ""type"": ""column"", ""color"": ""#6958A6"", ""yAxis"": 0, ""zIndex"": 1}, ""Archipelago"": {""type"": ""column"", ""color"": ""#e900ff"", ""yAxis"": 0, ""zIndex"": 5}, ""punks_total"": {""name"": ""CryptoPunks"", ""type"": ""column"", ""color"": ""#F24B4B"", ""yAxis"": 0, ""zIndex"": 4}, ""opensea_total"": {""name"": ""OpenSea"", ""type"": ""column"", ""color"": ""#042940"", ""yAxis"": 0, ""zIndex"": 0}, ""coinbase_total"": {""name"": ""Coinbase"", ""type"": ""column"", ""color"": ""#00a1ff"", ""yAxis"": 0, ""zIndex"": 3}, ""sudoswap_total"": {""name"": ""sudoswap"", ""type"": ""column"", ""color"": ""#fffc00"", ""yAxis"": 0, ""zIndex"": 6}, ""looksrare_total"": {""name"": ""LooksRare"", ""type"": ""column"", ""color"": ""#32A69A"", ""yAxis"": 0, ""zIndex"": 2}}, ""valuesOptions"": {}, ""showDataLabels"": false, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-07-02T01:14:37.704846+00:00"", ""__typename"": ""visualizations""}, {""id"": 2362044, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""columnMapping"": {""Day"": ""x"", ""usd_total"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-10-11T17:36:56.427665+00:00"", ""__typename"": ""visualizations""}]","SELECT 
    date_trunc('day', block_time) AS ""Day"",  
    'Exchange' AS exchange, 
    SUM(eth) AS eth_total,
    SUM(usd) AS usd_total, 
    SUM(opensea_volume) AS opensea_total, 
    SUM(looksrare_volume) AS looksrare_total, 
    SUM(x2y2_volume) AS x2y2_total ,
    SUM(punk_volume) AS punks_total ,
    SUM(coinbase_volume) AS coinbase_total ,
    SUM(sudoswap_volume) AS sudoswap_total,
    SUM(blur_volume) AS ""BLUR.io"",
    SUM(arch_volume) AS ""Archipelago""
FROM (

SELECT 
    block_time, 
    price AS eth, 
    price_usd AS usd, 
    CASE WHEN platform = 'OpenSea' THEN price ELSE NULL END  AS opensea_volume, 
    CASE WHEN platform = 'LooksRare' THEN price ELSE NULL END  AS looksrare_volume, 
    CASE WHEN platform = 'X2Y2' THEN price ELSE NULL END  AS x2y2_volume,
    CASE WHEN platform = 'CryptoPunks' THEN price ELSE NULL END  AS punk_volume,
    CASE WHEN platform = 'Coinbase' THEN price ELSE NULL END  AS coinbase_volume,
    CASE WHEN platform = 'sudoswap' THEN price ELSE NULL END  AS sudoswap_volume,
    CASE WHEN platform = 'Archipelago' THEN price ELSE NULL END  AS arch_volume,
    CASE WHEN platform = 'BLUR.io' THEN price ELSE NULL END AS blur_volume 
FROM  dune_user_generated.cryptuschrist_allexchange3
WHERE block_time > NOW() - INTERVAL '33 day' 
) b 
GROUP BY 1, 2 
ORDER by 1 DESC 
OFFSET 1 -- removes partial day 
LIMIT 30 



"
1322250,NFT VOLUME ,,"[{""id"": 2260013, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""Price (ETH)"", ""numberFormat"": ""0.00""}, {""name"": ""Price [ETH]"", ""numberFormat"": ""0.00""}, {""name"": ""ETH Price"", ""alignContent"": ""center"", ""numberFormat"": ""0.00""}, {""name"": ""Token ID Opensea"", ""alignContent"": ""center""}, {""name"": ""Sale Time"", ""title"": ""UTC Sale Time"", ""alignContent"": ""left"", ""numberFormat"": """"}, {""name"": ""Sale #"", ""alignContent"": ""left"", ""numberFormat"": ""0,""}, {""name"": ""Seller"", ""alignContent"": ""center""}, {""name"": ""TX [Etherscan]"", ""alignContent"": ""center""}, {""name"": ""Buyer"", ""title"": ""\ud83c\udf0a Buyer"", ""alignContent"": ""left""}, {""name"": ""ID [Opensea]"", ""alignContent"": ""center""}, {""name"": ""Seller [OS]"", ""alignContent"": ""center""}, {""name"": ""Buyer [OS]"", ""title"": ""Buyer"", ""alignContent"": ""left""}, {""name"": ""Price"", ""title"": ""ETH"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""Token [OS]"", ""title"": ""Token"", ""alignContent"": ""center""}, {""name"": ""Transaction"", ""title"": "" "", ""alignContent"": ""center""}, {""name"": ""Wallet"", ""alignContent"": ""center""}, {""name"": ""$USD"", ""title"": ""USD"", ""alignContent"": ""right"", ""numberFormat"": ""$0,""}, {""name"": ""[Token]"", ""title"": ""Token"", ""alignContent"": ""center""}, {""name"": ""Sales"", ""title"": "" ""}, {""name"": ""sale_time"", ""title"": ""Time of Sale""}, {""name"": ""sale_num"", ""title"": ""Sale #"", ""alignContent"": ""center"", ""numberFormat"": ""0,""}, {""name"": ""token"", ""title"": ""TOKEN"", ""alignContent"": ""left""}, {""name"": ""price_eth"", ""title"": ""\u2666 ETH"", ""alignContent"": ""right"", ""numberFormat"": ""0.0""}, {""name"": ""usd"", ""title"": ""$USD"", ""alignContent"": ""right"", ""numberFormat"": ""$0,""}, {""name"": ""details"", ""title"": ""DATA"", ""alignContent"": ""center""}, {""name"": ""tx"", ""title"": ""Etherscan \ud83d\udd17 ""}, {""name"": ""time_since"", ""title"": ""AGE"", ""alignContent"": ""right""}, {""name"": ""buyer_os"", ""title"": ""BUYER ""}, {""name"": ""Market"", ""title"": ""MARKET"", ""alignContent"": ""center""}, {""name"": ""pst_etherscan"", ""title"": ""PST / ETHERSCAN ""}, {""name"": ""seller_os"", ""title"": ""SELLER""}, {""name"": ""etherscan"", ""title"": "" TX"", ""alignContent"": ""center""}, {""name"": ""time"", ""title"": ""SALE TIME""}, {""name"": ""sales"", ""title"": ""SALES"", ""alignContent"": ""right"", ""numberFormat"": ""0,""}, {""name"": ""volume"", ""title"": ""\u2666 VOLUME"", ""alignContent"": ""right"", ""numberFormat"": ""0,0""}, {""name"": ""collection"", ""title"": ""COLLECTION""}, {""name"": ""floor"", ""title"": ""FLOOR"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""Rank"", ""title"": ""RANK"", ""alignContent"": ""center""}, {""name"": ""total_volume"", ""title"": ""\u2666 TOTAL"", ""alignContent"": ""right"", ""numberFormat"": ""0,0""}, {""name"": ""opensea_volume"", ""title"": ""\u2666 OPENSEA"", ""alignContent"": ""right"", ""numberFormat"": ""0,0""}, {""name"": ""looksrare_volume"", ""title"": ""\u2666 LOOKS"", ""alignContent"": ""right"", ""numberFormat"": ""0,0""}, {""name"": ""x2y2_volume"", ""title"": ""\u2666 X2Y2"", ""alignContent"": ""right"", ""numberFormat"": ""0,0""}, {""name"": ""links"", ""title"": ""LINKS "", ""alignContent"": ""right""}, {""name"": ""lowest_sale"", ""title"": ""\u2666 LOWEST"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""median"", ""title"": ""\u2666 MEDIAN"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""highest_sale"", ""title"": ""\u2666 HIGH"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""opensea_total"", ""numberFormat"": ""0,0""}, {""name"": ""looksrare_total"", ""numberFormat"": ""0,""}, {""name"": ""x2y2_total"", ""numberFormat"": ""0,""}]}, ""created_at"": ""2022-09-27T20:29:08.412788+00:00"", ""__typename"": ""visualizations""}, {""id"": 2260012, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""VOLUME""}, ""tickFormat"": ""0,""}, {""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": null}, ""reverseX"": false, ""numberFormat"": ""0,"", ""columnMapping"": {""Day"": ""x"", ""exchange"": ""x"", ""x2y2_total"": ""y"", ""punks_total"": ""y"", ""opensea_total"": ""y"", ""looksrare_total"": ""y""}, ""seriesOptions"": {""x2y2_total"": {""name"": ""X2Y2"", ""type"": ""column"", ""color"": ""#540a78"", ""yAxis"": 0, ""zIndex"": 2}, ""punks_total"": {""name"": ""CryptoPunks"", ""type"": ""column"", ""color"": ""#ffd000"", ""yAxis"": 0, ""zIndex"": 3}, ""opensea_total"": {""name"": ""OpenSea"", ""type"": ""column"", ""color"": ""#006ed0"", ""yAxis"": 0, ""zIndex"": 0}, ""looksrare_total"": {""name"": ""LooksRare"", ""type"": ""column"", ""color"": ""#3be52f"", ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-09-27T20:29:08.412788+00:00"", ""__typename"": ""visualizations""}, {""id"": 2260325, ""type"": ""counter"", ""name"": ""$USD - 24 Hour"", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Total USD Volume - Past Day"", ""stringPrefix"": ""$"", ""counterColName"": ""usd_total""}, ""created_at"": ""2022-09-27T21:15:33.931921+00:00"", ""__typename"": ""visualizations""}, {""id"": 2260332, ""type"": ""counter"", ""name"": ""\u2666 ETH - 24 Hour"", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Total ETH Volume - Past Day"", ""stringPrefix"": ""\u2666 "", ""counterColName"": ""eth_total""}, ""created_at"": ""2022-09-27T21:17:56.063017+00:00"", ""__typename"": ""visualizations""}]","SELECT 
    -- date_trunc('day', block_time) AS ""Day"",  
    'Exchange' AS exchange, 
    SUM(eth) AS eth_total,
    SUM(usd) AS usd_total, 
    SUM(opensea_volume) AS opensea_total, 
    SUM(looksrare_volume) AS looksrare_total, 
    SUM(x2y2_volume) AS x2y2_total ,
    SUM(punk_volume) AS punks_total ,
    SUM(coinbase_volume) AS coinbase_total ,
    SUM(rarible_volume) AS rarible_total 
FROM (

SELECT 
    block_time, 
    price AS eth, 
    price_usd AS usd, 
    CASE WHEN platform = 'OpenSea' THEN price ELSE NULL END  AS opensea_volume, 
    CASE WHEN platform = 'LooksRare' THEN price ELSE NULL END  AS looksrare_volume, 
    CASE WHEN platform = 'X2Y2' THEN price ELSE NULL END  AS x2y2_volume,
    CASE WHEN platform = 'CryptoPunks' THEN price ELSE NULL END  AS punk_volume,
    CASE WHEN platform = 'Coinbase' THEN price ELSE NULL END  AS coinbase_volume,
    CASE WHEN platform = 'Rarible' THEN price ELSE NULL END  AS rarible_volume,
    CASE WHEN platform = 'sudoswap' THEN price ELSE NULL END  AS sudoswap_volume
FROM  dune_user_generated.cryptuschrist_allexchange3
WHERE block_time > NOW() - INTERVAL '24 hour' 
) b 
GROUP BY 1 




"
1169807,Top OpenSea Shared Storefront Collections by Volume,Over selected time period. ,"[{""id"": 2000192, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""Dune Link"", ""alignContent"": ""center""}, {""name"": ""Total Volume (ETH)"", ""title"": ""Total"", ""alignContent"": ""right"", ""numberFormat"": ""0,000""}, {""name"": ""1 day Volume (ETH)"", ""title"": ""\u039e 1 Day"", ""alignContent"": ""right"", ""numberFormat"": ""0,0.0""}, {""name"": ""1W Volume (ETH)"", ""title"": ""\u039e 1 Week"", ""alignContent"": ""right"", ""numberFormat"": ""0,000.0""}, {""name"": ""Floor Price"", ""title"": ""\u2666 FLOOR"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""Today's Median Sale"", ""title"": ""Median"", ""alignContent"": ""right"", ""numberFormat"": ""0.0""}, {""name"": ""Ranking"", ""title"": ""Rank"", ""alignContent"": ""center""}, {""name"": ""Project / Address"", ""alignContent"": ""left""}, {""name"": ""Rank"", ""title"": ""#"", ""alignContent"": ""left""}, {""name"": ""Day Rank"", ""alignContent"": ""right""}, {""name"": ""1 Week"", ""alignContent"": ""right"", ""numberFormat"": ""0,0""}, {""name"": ""1 Day Sales"", ""alignContent"": ""right""}, {""name"": ""1 Week (ETH)"", ""alignContent"": ""right"", ""numberFormat"": ""0,0.0""}, {""name"": ""1 Day (ETH)"", ""alignContent"": ""right"", ""numberFormat"": ""0,0.0""}, {""name"": ""Sale Count Rank"", ""alignContent"": ""right""}, {""name"": ""1 Day"", ""alignContent"": ""right"", ""numberFormat"": ""0,0""}, {""name"": ""Sales Count"", ""alignContent"": ""right"", ""numberFormat"": ""0,""}, {""name"": ""Volume ETH"", ""title"": ""\u2666 VOLUME"", ""alignContent"": ""right"", ""numberFormat"": ""0,0""}, {""name"": ""Sales"", ""title"": ""SALES"", ""alignContent"": ""right"", ""numberFormat"": ""0,""}, {""name"": ""Median"", ""title"": ""\u2666 MEDIAN"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""Owners"", ""title"": ""OWNERS"", ""alignContent"": ""right"", ""numberFormat"": ""0,""}, {""name"": ""Items"", ""title"": ""ITEMS"", ""alignContent"": ""right"", ""numberFormat"": ""0,""}, {""name"": ""Dashboard Link"", ""title"": ""PROJECT DASHBOARD""}, {""name"": ""dune_link"", ""title"": ""DUNE LINK"", ""alignContent"": ""center""}, {""name"": ""collection"", ""title"": ""COLLECTION""}, {""name"": ""USD"", ""title"": ""USD VOLUME"", ""alignContent"": ""right"", ""numberFormat"": ""$0,""}, {""name"": ""sales"", ""title"": ""SALES"", ""alignContent"": ""right"", ""numberFormat"": ""0,""}, {""name"": ""median"", ""title"": ""MEDIAN"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""eth"", ""title"": ""ETH VOLUME"", ""alignContent"": ""right"", ""numberFormat"": ""0,.00""}, {""name"": ""usd"", ""title"": ""USD VOLUME"", ""alignContent"": ""right"", ""numberFormat"": ""$,""}, {""name"": ""highest"", ""title"": ""HIGHEST"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""lowest"", ""title"": ""LOWEST"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}]}, ""created_at"": ""2022-08-15T08:12:31.071592+00:00"", ""__typename"": ""visualizations""}]","SELECT 
    collection, 
    COUNT(*) AS sales ,
    SUM(price) AS eth, 
    SUM(price_usd) AS usd,
    CASE WHEN COUNT(*) > 1 THEN MIN(price) ELSE NULL END AS lowest,
    percentile_cont(.5) within GROUP (ORDER BY price) AS median,
    CASE WHEN COUNT(*) > 1 THEN Max(price) ELSE NULL END AS highest
FROM (
SELECT 
   --  CONCAT('<a href=""',shared_url,'"" target=""_blank"">', CONCAT('⛵ ',SUBSTRING(shared_collection,0,35)),' </a>')  AS collection,
    CONCAT('<a href=""https://dune.xyz/cryptuschrist/opensea-openstore-contract?Collection+Slug=',slug, '"">🟠 </a>',' ', '<a href=""',shared_url,'"" target=""_blank"">',CONCAT('⛵ ',SUBSTRING(shared_collection,0,35)),' </a>')  AS collection,
    '<a href=""https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/' || token_id::text ||  '"" target=""_blank"">⛵ ' ||   COALESCE((ROUND(item_id,0))::text,token_id::text) || '</a>' AS token_id_link,
    price, 
    price_usd
FROM dune_user_generated.cryptuschrist_allexchange3 
LEFT JOIN (SELECT collection AS shared_collection, CONCAT('https://opensea.io/collection/', slug) AS shared_url, slug, token_id AS token, item_id,  nft_contract_address AS nft FROM dune_user_generated.storefront_ids2) i ON i.nft = nft_contract_address AND token = token_id  
WHERE CASE WHEN '{{Time}}' = '5 Year' THEN '5 Year' = '5 Year' ELSE block_time > (NOW() - INTERVAL '{{Time}}') END 
AND shared_collection IS NOT NULL 
AND nft_contract_address = '\x495f947276749ce646f68ac8c248420045cb7b5e'
) a  
GROUP BY 1 
HAVING SUM(price) > 0.01 
ORDER BY 3 DESC NULLS LAST "
1238464,ENS Top Sales,Over selected time period. ,"[{""id"": 2122564, ""type"": ""table"", ""name"": """", ""options"": {""columns"": [{""name"": ""price"", ""title"": ""\u2666 ETH"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""market_link"", ""title"": ""MARKET LINK"", ""alignContent"": ""right""}, {""name"": ""age"", ""title"": ""AGE"", ""alignContent"": ""right""}, {""name"": ""usd_price"", ""title"": ""USD"", ""alignContent"": ""right"", ""numberFormat"": ""$0,""}, {""name"": ""token_id"", ""title"": ""TOKEN""}, {""name"": ""seller_link"", ""title"": ""SELLER""}, {""name"": ""buyer_link"", ""title"": ""BUYER""}, {""name"": ""block_time"", ""title"": ""TIME""}, {""name"": ""tx"", ""title"": ""TX"", ""alignContent"": ""right""}, {""name"": ""token_xfers"", ""title"": "" ""}, {""name"": ""token"", ""title"": ""TOKEN""}, {""name"": ""token_link"", ""title"": ""ENS TOKEN""}]}, ""created_at"": ""2022-09-05T06:01:56.25056+00:00"", ""__typename"": ""visualizations""}]","SELECT 
    -- block_time,        
    CONCAT('<a href=""https://dune.xyz/cryptuschrist/Wallet-Stats-Dash?Wallet%20Address=0', substring(buyer::text from 2), '"">🟡  ',COALESCE(SUBSTRING(b.""name""::text, 0, 23) , CONCAT(UPPER(SUBSTRING(buyer::text, 39, 42)))), '</a>') as buyer_link,
    CONCAT('<a href=""https://dune.xyz/cryptuschrist/Wallet-Stats-Dash?Wallet%20Address=0', substring(seller::text from 2), '"">🟡  ',COALESCE(SUBSTRING(s.""name""::text, 0, 23) , CONCAT(UPPER(SUBSTRING(seller::text, 39, 42)))), '</a>') as seller_link,
    '<a href=""https://etherscan.io/nft/0x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85/'  || ens.""token_id""::text || '"" target=""_blank"">📶 ' ||  SUBSTRING(ens_name::text,0,24) || '.eth</a>'  AS token_link ,
    price,    
    price_usd AS usd_price,  
    CASE 
        WHEN (NOW() - block_time) < '1 hour' THEN TO_CHAR((NOW() - block_time), 'FMMI ""minutes"" ago') 
        WHEN (NOW() - block_time) < '2 hour' THEN TO_CHAR((NOW() - block_time), 'FMhh24 ""hour ago""') 
        WHEN (NOW() - block_time) < '24 hour' THEN TO_CHAR((NOW() - block_time), 'FMhh24 ""hours ago""') 
        WHEN (NOW() - block_time) < '48 hour' THEN TO_CHAR((NOW() - block_time), 'FMdd ""day ago""')  
        WHEN (NOW() - block_time) < '60 day' THEN TO_CHAR((NOW() - block_time), 'FMdd ""days ago""') 
        WHEN (NOW() - block_time) < '2 months' THEN TO_CHAR((NOW() - block_time), 'FMww ""weeks ago""')
        WHEN (NOW() - block_time) < '365 day' THEN to_char(age(NOW()::timestamp, block_time),'FMMM ""months"" ago')
        WHEN (NOW() - block_time) < '2 year' THEN to_char(age(NOW()::timestamp, block_time),'FMYY ""year"" ago')
    ELSE to_char(age(NOW()::timestamp, block_time),'FMYY ""years"" ago')
    END AS age,  
    tx
FROM dune_user_generated.cryptuschrist_allexchange3 a   
LEFT JOIN dune_user_generated.cryptus_ens_token_ids_view ens on ens.token_id = a.token_id 
LEFT JOIN dune_user_generated.""cryptuschrist_ens_opensea2"" b ON b.address = buyer 
LEFT JOIN dune_user_generated.""cryptuschrist_ens_opensea2"" s ON s.address = seller  
WHERE nft_contract_address = '\x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85'
AND CASE WHEN '{{Time}}' = '5 Year' THEN '5 Year' = '5 Year' ELSE block_time > (NOW() - INTERVAL '{{Time}}') END
AND price > 0.001 
ORDER BY price  DESC 
LIMIT 500
"
422075,Search by Collection ,"🟠=Changes this Page,  Search for Collection Dashboards from Box at the Bottom ","[{""id"": 804434, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""Dune Link"", ""title"": ""DUNE"", ""alignContent"": ""center""}, {""name"": ""collection"", ""title"": ""COLLECTION""}, {""name"": ""volume"", ""title"": ""OPENSEA VOLUME"", ""alignContent"": ""right"", ""numberFormat"": ""0,""}]}, ""created_at"": ""2022-02-14T19:17:24.120502+00:00"", ""__typename"": ""visualizations""}]","SELECT 
    CONCAT('<a href=""https://dune.xyz/cryptuschrist/CUSTOM-NFT-Dashboard?NFT%20Contract=0',SUBSTRING(nft_contract::text,2,42),'"" > 🟠 </a>','  ','<a href=""',url,'"" target=""_blank"">',CONCAT('⛵ ',nft_collection),'</a>')  AS collection, 
    SUM(COALESCE(price,0)) AS volume

FROM dune_user_generated.""cryptuschrist_nft_projects5""
LEFT JOIN dune_user_generated.cryptuschrist_opensea_usd ON nft_contract = nft_contract_address 
WHERE nft_collection is NOT NULL   --  block_time > NOW() - INTERVAL '1 month' and 

GROUP BY 1 
ORDER BY 2 DESC NULLS LAST  



 "
559016,TOP FLOOR GAINERS ,Floor Price here means 'lowest sale price' from previous 24 hours (today) and the 24 period prior (yesterday).,"[{""id"": 1048272, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""Dune Link"", ""alignContent"": ""center""}, {""name"": ""Total Volume (ETH)"", ""title"": ""Total"", ""alignContent"": ""right"", ""numberFormat"": ""0,000""}, {""name"": ""1 day Volume (ETH)"", ""title"": """", ""alignContent"": ""right"", ""numberFormat"": ""0,""}, {""name"": ""1W Volume (ETH)"", ""title"": """", ""alignContent"": ""right"", ""numberFormat"": ""0,000""}, {""name"": ""Floor Price"", ""title"": ""FLOOR \u2666"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""Today's Median Sale"", ""title"": ""Median"", ""alignContent"": ""right"", ""numberFormat"": ""0.0""}, {""name"": ""Ranking"", ""title"": ""Rank"", ""alignContent"": ""center""}, {""name"": ""Project / Address"", ""alignContent"": ""left""}, {""name"": ""Rank"", ""title"": ""RANK"", ""alignContent"": ""center""}, {""name"": ""Day Rank"", ""title"": ""Rank"", ""alignContent"": ""center""}, {""name"": ""Median"", ""title"": ""MEDIAN \u2666"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""Owners"", ""title"": ""OWNERS"", ""alignContent"": ""right"", ""numberFormat"": ""0,""}, {""name"": ""Items"", ""title"": ""ITEMS"", ""alignContent"": ""right"", ""numberFormat"": ""0,""}, {""name"": ""Volume ETH"", ""title"": ""\u2666 VOLUME"", ""alignContent"": ""right"", ""numberFormat"": ""0,0.""}, {""name"": ""Sales"", ""title"": ""SALES COUNT"", ""alignContent"": ""right"", ""numberFormat"": ""0,""}, {""name"": ""Dashboard Link"", ""title"": ""PROJECT DASHBOARD""}, {""name"": ""dune_link"", ""title"": ""DUNE"", ""alignContent"": ""center""}, {""name"": ""OPENSEA"", ""title"": ""COLLECTION - OPENSEA""}, {""name"": ""floor"", ""title"": ""1 DAY FLOOR"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""floor_4h"", ""title"": ""4 HR FLOOR"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""diff"", ""title"": "" CHANGE \u2666"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""change"", ""title"": "" CHANGE"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""floor_24h"", ""title"": ""FLOOR TODAY"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""floor_48h"", ""title"": ""FLOOR YESTERDAY"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""volume_yesterday"", ""alignContent"": ""right"", ""numberFormat"": ""0,""}, {""name"": ""volume_today"", ""alignContent"": ""right"", ""numberFormat"": ""0,""}, {""name"": ""floor_today"", ""title"": ""TODAY"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""floor_yesterday"", ""title"": ""YESTERDAY"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""collection"", ""title"": ""COLLECTION ""}]}, ""created_at"": ""2022-04-01T15:04:35.263784+00:00"", ""__typename"": ""visualizations""}]","SELECT 
    COALESCE(collection_opensea_dune,CONCAT('<a href=""https://dune.xyz/cryptuschrist/CUSTOM-NFT-Dashboard?NFT%20Contract=0',SUBSTRING(""nft_contract_address""::text,2,42),'""> 🟠 </a>','  ','<a href=""https://etherscan.io/token/0',SUBSTRING(""nft_contract_address""::text, 2),'"" target=""_blank"">',CONCAT('📶 CONTRACT: 0x..',UPPER(SUBSTRING(""nft_contract_address""::text, 38,42))),'</a>')) AS collection,
    floor_today, 
    floor_yesterday, 
    CASE WHEN diff > 0 THEN CONCAT('⬆ 🟩 ' ::text , ROUND(diff::numeric, 2)) WHEN diff < 0 THEN CONCAT('⬇ 🟥 '   ::text , ROUND(diff::numeric, 2) )END AS change 
FROM 
    (
    SELECT 
     -- SUM(price) AS volume_yesterday, MAX(today.volume) AS volume_today,
       today.nft_contract_address AS nft_contract_address, 
        MIN(price) AS floor_yesterday,  
        today.floor AS floor_today, 
        ( today.floor - (MIN(price))) AS diff
    FROM dune_user_generated.cryptuschrist_allexchange3 yesterday 
    LEFT JOIN  
        (
        SELECT MIN(price) AS floor, nft_contract_address --, SUM(price) AS volume 
        FROM dune_user_generated.cryptuschrist_allexchange3 
        WHERE block_time > NOW() - interval  '1 day'
        GROUP BY 2
        ) today on yesterday.nft_contract_address = today.nft_contract_address
    WHERE block_time > NOW() - interval  '2 day' AND block_time < NOW() - interval '1 day'
    AND today.floor IS NOT NULL 
    --AND yesterday.nft_contract_address NOT IN ('\x1dfe7ca09e99d10835bf73044a23b73fc20623df', '\xc36cf0cfcb5d905b8b513860db0cfe63f6cf9f5c', '\x4e1f41613c9084fdb9e34e11fae9412427480e56', '\x7bd29408f11d2bfc23c34f18275bbf23bb716bc7', '\xce25e60a89f200b1fa40f6c313047ffe386992c3','\xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb' ,'\xfb3765e0e7ac73e736566af913fa58c3cfd686b7','\x495f947276749ce646f68ac8c248420045cb7b5e','\xc99f70bfd82fb7c8f8191fdfbfb735606b15e5c5','\xb932a70a57673d89f4acffbe830e8ed7f75fb9e0', '\xa7d8d9ef8d8ce8992df33d8b8cf4aebabd5bd270')
    GROUP BY 1, today.floor 
    HAVING SUM(price) > 0 
    ORDER BY 2 DESC
    LIMIT 100  )  sub_1   
LEFT JOIN dune_user_generated.""cryptuschrist_nft_projects5"" on ""nft_contract"" = nft_contract_address        
WHERE diff > 0 
    ORDER By diff DESC 
    
    -- volume_today - volume_yesterday AS vol_change, 
-- comments / feedback @CryptusChrist on Twitter"
299235,Top NFT Collections By Volume,🟠 Collection Dashboard 🔲 Art Blocks ⛵ OpenSea 💎 Gem.xyz 📶 Etherscan,"[{""id"": 567937, ""type"": ""table"", ""name"": """", ""options"": {""columns"": [{""name"": ""Dashboard Link"", ""title"": ""PROJECT DASHBOARD""}, {""name"": ""Items"", ""title"": ""ITEMS"", ""alignContent"": ""right"", ""numberFormat"": ""0,""}, {""name"": ""Owners"", ""title"": ""OWNERS"", ""alignContent"": ""right"", ""numberFormat"": ""0,""}, {""name"": ""Median"", ""title"": ""MEDIAN"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""Sales"", ""title"": ""SALES"", ""alignContent"": ""right"", ""numberFormat"": ""0,""}, {""name"": ""Floor Price"", ""title"": ""FLOOR"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""Volume ETH"", ""title"": ""\u2666 VOLUME"", ""alignContent"": ""right"", ""numberFormat"": ""0,""}, {""name"": ""SELL FEE %"", ""title"": ""FEE"", ""isHidden"": false, ""alignContent"": ""right"", ""numberFormat"": ""%""}, {""name"": ""dune_link"", ""title"": ""DUNE"", ""alignContent"": ""center""}, {""name"": ""Rank"", ""title"": ""#"", ""isHidden"": false, ""alignContent"": ""center""}, {""name"": ""collection"", ""title"": ""COLLECTION""}, {""name"": ""sales"", ""title"": ""SALES"", ""alignContent"": ""right"", ""numberFormat"": ""0,""}, {""name"": ""total_volume"", ""type"": ""progressbar"", ""title"": ""\u2666 TOTAL ETH"", ""alignContent"": ""right"", ""numberFormat"": ""0,0.0"", ""coloredNegativeValues"": false, ""coloredPositiveValues"": false}, {""name"": ""opensea_volume"", ""title"": ""\u2666 OPENSEA"", ""alignContent"": ""right"", ""numberFormat"": ""0,""}, {""name"": ""looksrare_volume"", ""title"": ""\u2666 LOOKS"", ""alignContent"": ""right"", ""numberFormat"": ""0,""}, {""name"": ""x2y2_volume"", ""title"": ""\u2666 X2Y2"", ""alignContent"": ""right"", ""numberFormat"": ""0,""}, {""name"": ""lowest_sale"", ""title"": ""\u2666 LOW"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""median"", ""title"": ""\u2666 MEDIAN"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""links"", ""title"": ""LINKS"", ""alignContent"": ""right""}, {""name"": ""high_sale"", ""title"": ""\u2666 HIGH"", ""alignContent"": ""right"", ""numberFormat"": ""0,0.00""}]}, ""created_at"": ""2021-12-16T08:50:06.405578+00:00"", ""__typename"": ""visualizations""}, {""id"": 567950, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""Dune Link"", ""alignContent"": ""center""}, {""name"": ""Total Volume (ETH)"", ""title"": ""Total"", ""alignContent"": ""right"", ""numberFormat"": ""0,000""}, {""name"": ""1 day Volume (ETH)"", ""title"": """", ""alignContent"": ""right"", ""numberFormat"": ""0,""}, {""name"": ""1W Volume (ETH)"", ""title"": """", ""alignContent"": ""right"", ""numberFormat"": ""0,000""}, {""name"": ""Floor Price"", ""title"": ""FLOOR \u2666"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""Today's Median Sale"", ""title"": ""Median"", ""alignContent"": ""right"", ""numberFormat"": ""0.0""}, {""name"": ""Ranking"", ""title"": ""Rank"", ""alignContent"": ""center""}, {""name"": ""Project / Address"", ""alignContent"": ""left""}, {""name"": ""Rank"", ""title"": ""RANK"", ""alignContent"": ""center""}, {""name"": ""Day Rank"", ""title"": ""Rank"", ""alignContent"": ""center""}, {""name"": ""Median"", ""title"": ""MEDIAN \u2666"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""Owners"", ""title"": ""OWNERS"", ""alignContent"": ""right"", ""numberFormat"": ""0,""}, {""name"": ""Items"", ""title"": ""ITEMS"", ""alignContent"": ""right"", ""numberFormat"": ""0,""}, {""name"": ""Volume ETH"", ""title"": ""ETH \u2666 VOLUME"", ""alignContent"": ""right"", ""numberFormat"": ""0,0.""}, {""name"": ""Sales"", ""title"": ""SALES COUNT"", ""alignContent"": ""right"", ""numberFormat"": ""0,""}, {""name"": ""Dashboard Link"", ""title"": ""PROJECT DASHBOARD""}, {""name"": ""dune_link"", ""title"": ""DUNE \ud83d\udd17"", ""alignContent"": ""center""}, {""name"": ""OPENSEA"", ""title"": ""COLLECTION - OPENSEA""}, {""name"": ""SELL FEE %"", ""title"": ""FEE"", ""alignContent"": ""right"", ""numberFormat"": ""0.0""}, {""name"": ""collection"", ""title"": ""COLLECTION""}, {""name"": ""sales"", ""title"": ""SALES"", ""alignContent"": ""right"", ""numberFormat"": ""0,""}, {""name"": ""total_volume"", ""title"": ""\u2666 TOTAL"", ""alignContent"": ""right"", ""numberFormat"": ""0,0""}, {""name"": ""opensea_volume"", ""title"": ""\u2666 OPENSEA"", ""alignContent"": ""right"", ""numberFormat"": ""0,0""}, {""name"": ""looksrare_volume"", ""title"": ""\u2666 LOOKS"", ""alignContent"": ""right"", ""numberFormat"": ""0,""}, {""name"": ""x2y2_volume"", ""title"": ""\u2666 X2Y2"", ""alignContent"": ""right"", ""numberFormat"": ""0,""}, {""name"": ""lowest_sale"", ""title"": ""\u2666 FLOOR"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""median"", ""title"": ""\u2666 MEDIAN"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""links"", ""title"": ""LINKS"", ""alignContent"": ""right""}]}, ""created_at"": ""2021-12-16T08:51:59.287793+00:00"", ""__typename"": ""visualizations""}]","SELECT   
    ROW_NUMBER() OVER (ORDER BY SUM(price) DESC) AS ""Rank"", 
    CASE 
        WHEN art_slug IS NOT NULL THEN CONCAT('<a href=""https://dune.com/cryptuschrist/art-blocks-custom-dashboard?Project+ID=',ROUND(art.project_id,0)::text,'""> 🟠 </a>','  ', '<a href=""',art_url,'"" target=""_blank"">',CONCAT('🔲 ',SUBSTRING(art_collection,0,35)),' </a>')  
        ELSE COALESCE(collection_opensea_dune,CONCAT('<a href=""https://dune.xyz/cryptuschrist/CUSTOM-NFT-Dashboard?NFT%20Contract=0',SUBSTRING(""nft_contract_address""::text,2,42),'""> 🟠 </a>','  ','<a href=""https://opensea.io/assets/ethereum/0',SUBSTRING(""nft_contract_address""::text, 2),'/1"" target=""_blank"">',CONCAT('⛵  CONTRACT: 0x..',UPPER(SUBSTRING(""nft_contract_address""::text, 38,42))),'</a>')) 
    END AS collection,
    COUNT(*) AS sales,
    SUM(price) AS total_volume,  
    ROUND(MIN(price::numeric),2) AS lowest_sale, 
    percentile_cont(.5) within GROUP (ORDER BY price) AS median, 
    MAX(price) AS high_sale, 
    COALESCE(MAX(o.owners),MAX(s.owners)) AS ""Owners"",
    COALESCE(MAX(o.items),MAX(s.items)) AS ""Items"",
    fee/10000 AS ""SELL FEE %"",
    CONCAT('<a href=""https://www.gem.xyz/collection/0',SUBSTRING(""nft_contract_address""::text, 2),'"" target=""_blank"">💎 </a>' , ' ','<a href=""https://etherscan.io/token/0',SUBSTRING(""nft_contract_address""::text, 2),'"" target=""_blank"">📶 </a>') as links
FROM dune_user_generated.""cryptuschrist_allexchange3"" a 
LEFT JOIN (SELECT collection AS art_collection, CONCAT('https://opensea.io/collection/', slug) AS art_url, slug as art_slug, token_id AS art_token, nft_contract_address AS art_contract , project_id  FROM  dune_user_generated.cryptus_art_blocks_tokens) art ON art_contract = nft_contract_address AND art_token::text  = token_id 
LEFT JOIN (SELECT project_id, owners, items FROM dune_user_generated.cryptus_art_blocks_owners_items) o on o.project_id  = art.project_id 
LEFT JOIN dune_user_generated.""cryptuschrist_nft_projects5"" on ""nft_contract"" = nft_contract_address
LEFT JOIN dune_user_generated.cryptus_holders s ON nft_contract_address = s.contract_address 
WHERE CASE WHEN '{{Platform}}' = 'All' THEN 'All'='All' ELSE platform = '{{Platform}}' END 
AND CASE WHEN '{{Time}}' = '5 Year' THEN '5 Year' = '5 Year' ELSE block_time > (NOW() - INTERVAL '{{Time}}') END
AND nft_contract_address NOT IN ('\xc36cf0cfcb5d905b8b513860db0cfe63f6cf9f5c', '\x76be3b62873462d2142405439777e971754e8e77', '\x495f947276749ce646f68ac8c248420045cb7b5e' )
GROUP BY 2, 10,11, nft_contract_address 
ORDER BY 4 DESC NULLS LAST  
LIMIT 500

/* 
--CONCAT(collection_opensea, collection_looksrare, collection_x2y2, '<a href=""https://etherscan.io/token/0',SUBSTRING(""nft_contract_address""::text, 2),'"" target=""_blank"">📶 </a>') AS links 
--WHEN i.slug IS NOT NULL THEN CONCAT('<a href=""https://dune.xyz/cryptuschrist/opensea-openstore-contract?Collection+Slug=',i.slug, '"">🟠 </a>',' ', '<a href=""',shared_url,'"" target=""_blank"">',CONCAT('⛵ ',SUBSTRING(shared_collection,0,35)),' </a>')  
AND nft_contract_address NOT IN ( 
            '\xA604060890923Ff400e8c6f5290461A83AEDACec',  --Shared Storefront LazyMinter  
            '\x81ae0be3a8044772d04f32398bac1e1b4b215aa8',  --Dreadfull X2Y2 Wash Trades
            '\x4E1f41613c9084FdB9E34E11fAE9412427480e56',  --Terraformas LooksRare Wash Trade
            '\xa5D37c0364b9E6D96EE37E03964E7aD2b33a93F4',  --Catgirl Academia LooksRare  
            '\xbC578eCcA2115dAC0c93C08674edC0C7D01Fe09C',  --Invisible Society 
            '\x495f947276749ce646f68ac8c248420045cb7b5e',  --OpenSea Shared 1155 
            '\x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7',  --Meebits 
            '\x1dfe7ca09e99d10835bf73044a23b73fc20623df',  --More Loot X2Y2 Wash Trades 
            '\xccb893eFB3ECE7816EABE0ce73Fb4767d69CD036',  --Stereograms LooksRare 1 owner 
            '\x7a376C1F8eDF7BA7Eb94A7438a8313a17D830FF8',  --Project Kevin's LooksRare Wash Trades 
            '\xfF36cA1396d2a9016869274F1017d6C2139f495E',  --Dementors Town X2Y2 Wash 
            '\xC36442b4a4522E871399CD717aBDD847Ab11FE88', -- UNISWAP LP - being used to washtrade LooksRare 
            '\x7a48E016122B4786E3b96414598Fc608c8DC3aD4', -- HypePass - more wash trading 
            '\x25FA24d856270Aa008249672b35EBc37383a8759', -- LooksRare more trash 
            '\x5CFeeEfCC47f72BD04FCe2f54bcd4C1C62a4E0AA', -- More LooksRare trash 
            '\x76be3b62873462d2142405439777e971754e8e77', -- Parallel Alpha slows down query too much 
            '\xc36cf0cfcb5d905b8b513860db0cfe63f6cf9f5c', -- Town Star slows down query no thanks 
            '\x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85', -- ENS too many items query crashes
            '\x2e6758F3f54a5CEFC090B7ABCf7dAb2F72c0119D',  -- More Trash from LooksRare 
            '\xeCf9b0Dfd160f070c924C3d9f797a6B44dE8fa26', -- More Trash from LooksRare 
            '\x076Ffeb1F1D398cf6DaaeA7c3C719c8ad009aF24', 
            '\xa0bae4c0410d79398703cbd9a30d010d414ab0da' -- X2Y2 ASCII 
            )  

*/

    -- SUM(opensea_vol) AS opensea_volume, 
    -- SUM(looksrare_vol) AS looksrare_volume, 
    -- SUM(x2y2_vol) AS x2y2_volume, 
    -- CONCAT('<a href=""https://twitter.com/',twitter,'"" target=""_blank"">',twitter,'</a>') AS ""@TWITTER"",
    -- CONCAT('<a href=""',discord,'"" target=""_blank"">',SUBSTRING(""discord""::text FROM 20),'</a>') AS ""DISCORD"",
    
-- comments / feedback @CryptusChrist on Twitter

    "
1194601,Top Art Blocks Collections by Volume,Over selected time period. Total Sales includes mints.,"[{""id"": 2045147, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""Dune Link"", ""alignContent"": ""center""}, {""name"": ""Total Volume (ETH)"", ""title"": ""Total"", ""alignContent"": ""right"", ""numberFormat"": ""0,000""}, {""name"": ""1 day Volume (ETH)"", ""title"": ""\u039e 1 Day"", ""alignContent"": ""right"", ""numberFormat"": ""0,0.0""}, {""name"": ""1W Volume (ETH)"", ""title"": ""\u039e 1 Week"", ""alignContent"": ""right"", ""numberFormat"": ""0,000.0""}, {""name"": ""Floor Price"", ""title"": ""\u2666 FLOOR"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""Today's Median Sale"", ""title"": ""Median"", ""alignContent"": ""right"", ""numberFormat"": ""0.0""}, {""name"": ""Ranking"", ""title"": ""Rank"", ""alignContent"": ""center""}, {""name"": ""Project / Address"", ""alignContent"": ""left""}, {""name"": ""Rank"", ""title"": ""#"", ""alignContent"": ""left""}, {""name"": ""Day Rank"", ""alignContent"": ""right""}, {""name"": ""1 Week"", ""alignContent"": ""right"", ""numberFormat"": ""0,0""}, {""name"": ""1 Day Sales"", ""alignContent"": ""right""}, {""name"": ""1 Week (ETH)"", ""alignContent"": ""right"", ""numberFormat"": ""0,0.0""}, {""name"": ""1 Day (ETH)"", ""alignContent"": ""right"", ""numberFormat"": ""0,0.0""}, {""name"": ""Sale Count Rank"", ""alignContent"": ""right""}, {""name"": ""1 Day"", ""alignContent"": ""right"", ""numberFormat"": ""0,0""}, {""name"": ""Sales Count"", ""alignContent"": ""right"", ""numberFormat"": ""0,""}, {""name"": ""Volume ETH"", ""title"": ""\u2666 VOLUME"", ""alignContent"": ""right"", ""numberFormat"": ""0,0""}, {""name"": ""Sales"", ""title"": ""SALES"", ""alignContent"": ""right"", ""numberFormat"": ""0,""}, {""name"": ""Median"", ""title"": ""\u2666 MEDIAN"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""Owners"", ""title"": ""OWNERS"", ""alignContent"": ""right"", ""numberFormat"": ""0,""}, {""name"": ""Items"", ""title"": ""ITEMS"", ""alignContent"": ""right"", ""numberFormat"": ""0,""}, {""name"": ""Dashboard Link"", ""title"": ""PROJECT DASHBOARD""}, {""name"": ""dune_link"", ""title"": ""DUNE LINK"", ""alignContent"": ""center""}, {""name"": ""collection"", ""title"": ""COLLECTION""}, {""name"": ""USD"", ""title"": ""USD VOLUME"", ""alignContent"": ""right"", ""numberFormat"": ""$0,""}, {""name"": ""sales"", ""title"": ""SALES"", ""alignContent"": ""right"", ""numberFormat"": ""0,""}, {""name"": ""median"", ""title"": ""MEDIAN"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""eth"", ""title"": ""ETH VOLUME"", ""alignContent"": ""right"", ""numberFormat"": ""0,.00""}, {""name"": ""usd"", ""title"": ""USD VOLUME"", ""alignContent"": ""right"", ""numberFormat"": ""$,""}, {""name"": ""floor"", ""title"": ""LOWEST"", ""alignContent"": ""right"", ""numberFormat"": ""0,0.00""}, {""name"": ""high"", ""title"": ""HIGHEST"", ""alignContent"": ""right"", ""numberFormat"": ""0,0.00""}, {""name"": ""collection_link"", ""title"": ""COLLECTION""}, {""name"": ""mints"", ""title"": ""\ud83c\udf3f MINTS"", ""alignContent"": ""right"", ""numberFormat"": ""0,""}]}, ""created_at"": ""2022-08-23T09:51:11.518073+00:00"", ""__typename"": ""visualizations""}]","SELECT 
     '<a href=""https://dune.com/cryptuschrist/art-blocks-custom-dashboard?Project+ID=' || ROUND(project_id,0)::text || '""> 🟠  </a>' || collection_link AS collection , 
    COUNT(*) AS sales, 
    SUM(mint) AS mints, 
    SUM(price) AS eth, 
    SUM(price_usd) AS usd,
    CASE WHEN COUNT(*) > 1 THEN MIN(price) ELSE NULL END AS floor, 
    percentile_cont(.5) within GROUP (ORDER BY price) AS median, 
    CASE WHEN COUNT(*) > 1 THEN MAX(price) ELSE NULL END  AS high  
FROM (
    SELECT 
        project_id, 
        collection_link, 
        price, 
        price_usd, 
        1 as mint 
    FROM  dune_user_generated.cryptuschrist_artblocks_mints_view 
    WHERE CASE WHEN '{{Time}}' = '5 Year' THEN '5 Year' = '5 Year' ELSE block_time > (NOW() - INTERVAL '{{Time}}') END 
    
    UNION ALL 
    
    SELECT
        project_id, 
        collection_link, 
        price, 
        price_usd,
        Null as mint 
    FROM dune_user_generated.cryptuschrist_allexchange3 a 
    LEFT JOIN  dune_user_generated.cryptus_art_blocks_tokens blo ON blo.nft_contract_address = a.nft_contract_address AND a.token_id = blo.token_id::text   
    WHERE CASE WHEN '{{Time}}' = '5 Year' THEN '5 Year' = '5 Year' ELSE block_time > (NOW() - INTERVAL '{{Time}}') END 
    AND a.nft_contract_address IN ('\xa7d8d9ef8d8ce8992df33d8b8cf4aebabd5bd270', '\x059edd72cd353df5106d2b9cc5ab83a52287ac3a') 
    ) a 
GROUP BY 1
ORDER BY 5 DESC NULLS LAST 
"
1330803,Art Blocks ,Summary,"[{""id"": 2274401, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Total USD Volume"", ""stringPrefix"": ""$"", ""counterColName"": ""usd""}, ""created_at"": ""2022-09-30T02:35:04.551466+00:00"", ""__typename"": ""visualizations""}, {""id"": 2274398, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Total Sales"", ""counterColName"": ""sales""}, ""created_at"": ""2022-09-30T02:34:41.046494+00:00"", ""__typename"": ""visualizations""}, {""id"": 2274395, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Total ETH Volume"", ""stringPrefix"": ""\u2666 "", ""counterColName"": ""eth""}, ""created_at"": ""2022-09-30T02:33:35.841385+00:00"", ""__typename"": ""visualizations""}, {""id"": 2274336, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""Dune Link"", ""alignContent"": ""center""}, {""name"": ""Total Volume (ETH)"", ""title"": ""Total"", ""alignContent"": ""right"", ""numberFormat"": ""0,000""}, {""name"": ""1 day Volume (ETH)"", ""title"": ""\u039e 1 Day"", ""alignContent"": ""right"", ""numberFormat"": ""0,0.0""}, {""name"": ""1W Volume (ETH)"", ""title"": ""\u039e 1 Week"", ""alignContent"": ""right"", ""numberFormat"": ""0,000.0""}, {""name"": ""Floor Price"", ""title"": ""\u2666 FLOOR"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""Today's Median Sale"", ""title"": ""Median"", ""alignContent"": ""right"", ""numberFormat"": ""0.0""}, {""name"": ""Ranking"", ""title"": ""Rank"", ""alignContent"": ""center""}, {""name"": ""Project / Address"", ""alignContent"": ""left""}, {""name"": ""Rank"", ""title"": ""#"", ""alignContent"": ""left""}, {""name"": ""Day Rank"", ""alignContent"": ""right""}, {""name"": ""1 Week"", ""alignContent"": ""right"", ""numberFormat"": ""0,0""}, {""name"": ""1 Day Sales"", ""alignContent"": ""right""}, {""name"": ""1 Week (ETH)"", ""alignContent"": ""right"", ""numberFormat"": ""0,0.0""}, {""name"": ""1 Day (ETH)"", ""alignContent"": ""right"", ""numberFormat"": ""0,0.0""}, {""name"": ""Sale Count Rank"", ""alignContent"": ""right""}, {""name"": ""1 Day"", ""alignContent"": ""right"", ""numberFormat"": ""0,0""}, {""name"": ""Sales Count"", ""alignContent"": ""right"", ""numberFormat"": ""0,""}, {""name"": ""Volume ETH"", ""title"": ""\u2666 VOLUME"", ""alignContent"": ""right"", ""numberFormat"": ""0,0""}, {""name"": ""Sales"", ""title"": ""SALES"", ""alignContent"": ""right"", ""numberFormat"": ""0,""}, {""name"": ""Median"", ""title"": ""\u2666 MEDIAN"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""Owners"", ""title"": ""OWNERS"", ""alignContent"": ""right"", ""numberFormat"": ""0,""}, {""name"": ""Items"", ""title"": ""ITEMS"", ""alignContent"": ""right"", ""numberFormat"": ""0,""}, {""name"": ""Dashboard Link"", ""title"": ""PROJECT DASHBOARD""}, {""name"": ""dune_link"", ""title"": ""DUNE LINK"", ""alignContent"": ""center""}, {""name"": ""collection"", ""title"": ""COLLECTION""}, {""name"": ""USD"", ""title"": ""USD VOLUME"", ""alignContent"": ""right"", ""numberFormat"": ""$0,""}, {""name"": ""sales"", ""title"": ""SALES"", ""alignContent"": ""right"", ""numberFormat"": ""0,""}, {""name"": ""median"", ""title"": ""MEDIAN"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""eth"", ""title"": ""ETH VOLUME"", ""alignContent"": ""right"", ""numberFormat"": ""0,.00""}, {""name"": ""usd"", ""title"": ""USD VOLUME"", ""alignContent"": ""right"", ""numberFormat"": ""$,""}, {""name"": ""floor"", ""title"": ""LOWEST"", ""alignContent"": ""right"", ""numberFormat"": ""0,0.00""}, {""name"": ""high"", ""title"": ""HIGHEST"", ""alignContent"": ""right"", ""numberFormat"": ""0,0.00""}, {""name"": ""collection_link"", ""title"": ""COLLECTION""}, {""name"": ""mints"", ""title"": ""\ud83c\udf3f MINTS"", ""alignContent"": ""right"", ""numberFormat"": ""0,""}]}, ""created_at"": ""2022-09-30T02:16:43.949601+00:00"", ""__typename"": ""visualizations""}]","SELECT 
    SUM(sales) AS sales, 
    SUM(eth) AS eth,
    SUM(usd) AS usd 
FROM (
    SELECT 
         '<a href=""https://dune.com/cryptuschrist/art-blocks-custom-dashboard?Project+ID=' || ROUND(project_id,0)::text || '""> 🟠  </a>' || collection_link AS collection , 
        COUNT(*) AS sales, 
        SUM(mint) AS mints, 
        SUM(price) AS eth, 
        SUM(price_usd) AS usd,
        CASE WHEN COUNT(*) > 1 THEN MIN(price) ELSE NULL END AS floor, 
        percentile_cont(.5) within GROUP (ORDER BY price) AS median, 
        CASE WHEN COUNT(*) > 1 THEN MAX(price) ELSE NULL END  AS high 
    FROM (
        SELECT 
            project_id, 
            collection_link, 
            price, 
            price_usd, 
            1 as mint 
        FROM  dune_user_generated.cryptuschrist_artblocks_mints_view 
        WHERE CASE WHEN '{{Time}}' = '5 Year' THEN '5 Year' = '5 Year' ELSE block_time > (NOW() - INTERVAL '{{Time}}') END 
        
        UNION ALL 
        
        SELECT
            project_id, 
            collection_link, 
            price, 
            price_usd,
            Null as mint 
        FROM dune_user_generated.cryptuschrist_allexchange3 a 
        LEFT JOIN  dune_user_generated.cryptus_art_blocks_tokens blo ON blo.nft_contract_address = a.nft_contract_address AND a.token_id = blo.token_id::text   
        WHERE CASE WHEN '{{Time}}' = '5 Year' THEN '5 Year' = '5 Year' ELSE block_time > (NOW() - INTERVAL '{{Time}}') END 
        AND a.nft_contract_address IN ('\xa7d8d9ef8d8ce8992df33d8b8cf4aebabd5bd270', '\x059edd72cd353df5106d2b9cc5ab83a52287ac3a') 
        ) a 
    GROUP BY 1
    ORDER BY 5 DESC NULLS LAST 
) b 
"
1204095,Top NFT Collections $$ USD Version $$,🟠 Collection Dashboard ⛵ OpenSea 💎 Gem.xyz  📶 Etherscan ,"[{""id"": 2061127, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""Dune Link"", ""alignContent"": ""center""}, {""name"": ""Total Volume (ETH)"", ""title"": ""Total"", ""alignContent"": ""right"", ""numberFormat"": ""0,000""}, {""name"": ""1 day Volume (ETH)"", ""title"": """", ""alignContent"": ""right"", ""numberFormat"": ""0,""}, {""name"": ""1W Volume (ETH)"", ""title"": """", ""alignContent"": ""right"", ""numberFormat"": ""0,000""}, {""name"": ""Floor Price"", ""title"": ""FLOOR \u2666"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""Today's Median Sale"", ""title"": ""Median"", ""alignContent"": ""right"", ""numberFormat"": ""0.0""}, {""name"": ""Ranking"", ""title"": ""Rank"", ""alignContent"": ""center""}, {""name"": ""Project / Address"", ""alignContent"": ""left""}, {""name"": ""Rank"", ""title"": ""RANK"", ""alignContent"": ""center""}, {""name"": ""Day Rank"", ""title"": ""Rank"", ""alignContent"": ""center""}, {""name"": ""Median"", ""title"": ""MEDIAN \u2666"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""Owners"", ""title"": ""OWNERS"", ""alignContent"": ""right"", ""numberFormat"": ""0,""}, {""name"": ""Items"", ""title"": ""ITEMS"", ""alignContent"": ""right"", ""numberFormat"": ""0,""}, {""name"": ""Volume ETH"", ""title"": ""ETH \u2666 VOLUME"", ""alignContent"": ""right"", ""numberFormat"": ""0,0.""}, {""name"": ""Sales"", ""title"": ""SALES COUNT"", ""alignContent"": ""right"", ""numberFormat"": ""0,""}, {""name"": ""Dashboard Link"", ""title"": ""PROJECT DASHBOARD""}, {""name"": ""dune_link"", ""title"": ""DUNE \ud83d\udd17"", ""alignContent"": ""center""}, {""name"": ""OPENSEA"", ""title"": ""COLLECTION - OPENSEA""}, {""name"": ""SELL FEE %"", ""title"": ""FEE"", ""alignContent"": ""right"", ""numberFormat"": ""0.0""}, {""name"": ""collection"", ""title"": ""COLLECTION""}, {""name"": ""sales"", ""title"": ""SALES"", ""alignContent"": ""right"", ""numberFormat"": ""0,""}, {""name"": ""total_volume"", ""title"": ""$ TOTAL VOLUME"", ""alignContent"": ""right"", ""numberFormat"": ""$0,0"", ""coloredPositiveValues"": true}, {""name"": ""opensea_volume"", ""title"": ""\u2666 OPENSEA"", ""alignContent"": ""right"", ""numberFormat"": ""0,0""}, {""name"": ""looksrare_volume"", ""title"": ""\u2666 LOOKS"", ""alignContent"": ""right"", ""numberFormat"": ""0,""}, {""name"": ""x2y2_volume"", ""title"": ""\u2666 X2Y2"", ""alignContent"": ""right"", ""numberFormat"": ""0,""}, {""name"": ""lowest_sale"", ""title"": ""$ LOWEST"", ""alignContent"": ""right"", ""numberFormat"": ""$0,0""}, {""name"": ""median"", ""title"": ""$ MEDIAN"", ""alignContent"": ""right"", ""numberFormat"": ""$0,0""}, {""name"": ""links"", ""title"": "" "", ""alignContent"": ""right""}, {""name"": ""high_sale"", ""title"": ""$ HIGHEST"", ""alignContent"": ""right"", ""numberFormat"": ""$0,0""}, {""name"": ""usd_total_volume"", ""title"": ""$ TOTAL"", ""alignContent"": ""right"", ""numberFormat"": ""$0,0""}, {""name"": ""usd_lowest_sale"", ""title"": ""$ LOW"", ""alignContent"": ""right"", ""numberFormat"": ""$0,0""}, {""name"": ""usd_median"", ""title"": ""$ MEDIAN"", ""alignContent"": ""right"", ""numberFormat"": ""$0,0""}, {""name"": ""usd_high_sale"", ""title"": ""$ HIGH"", ""alignContent"": ""right"", ""numberFormat"": ""$0,0""}, {""name"": ""ratio"", ""title"": ""UNIQUES"", ""alignContent"": ""right"", ""numberFormat"": ""%""}]}, ""created_at"": ""2022-08-25T16:12:28.439776+00:00"", ""__typename"": ""visualizations""}]","SELECT  
    ROW_NUMBER() OVER (ORDER BY SUM(price_usd) DESC) AS ""Rank"",  
    CASE 
        WHEN art_slug IS NOT NULL THEN CONCAT('<a href=""https://dune.com/cryptuschrist/art-blocks-custom-dashboard?Project+ID=',ROUND(art.project_id,0)::text,'""> 🔲 </a>','  ', '<a href=""',art_url,'"" target=""_blank"">',CONCAT('⛵ ',SUBSTRING(art_collection,0,35)),' </a>')  
        ELSE COALESCE(collection_opensea_dune,CONCAT('<a href=""https://dune.xyz/cryptuschrist/CUSTOM-NFT-Dashboard?NFT%20Contract=0',SUBSTRING(""nft_contract_address""::text,2,42),'""> 🟠 </a>','  ','<a href=""https://opensea.io/assets/ethereum/0',SUBSTRING(""nft_contract_address""::text, 2),'/1"" target=""_blank"">',CONCAT('⛵  CONTRACT: 0x..',UPPER(SUBSTRING(""nft_contract_address""::text, 38,42))),'</a>')) 
    END AS collection,
    COUNT(*) AS sales,
    SUM(price_usd) AS total_volume,  
    ROUND(MIN(price_usd)::numeric,2) AS lowest_sale, 
    percentile_cont(.5) within GROUP (ORDER BY price_usd) AS median, 
    MAX(price_usd) AS high_sale, 
    -- CryptoPunks holders includes Wrapped Punks 
    CASE WHEN nft_contract_address = '\xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb' THEN (SELECT COUNT(wallet) FROM dune_user_generated.cryptuschrist_punk_wallets) ELSE COALESCE(MAX(o.owners),MAX(s.owners)) END AS ""Owners"",
    CASE WHEN nft_contract_address = '\xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb' THEN 10000 ELSE COALESCE(MAX(o.items),MAX(s.items)) END AS ""Items"",
    (CASE WHEN nft_contract_address = '\xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb' THEN (SELECT COUNT(wallet) FROM dune_user_generated.cryptuschrist_punk_wallets) ELSE COALESCE(MAX(o.owners),MAX(s.owners)) END)/(CASE WHEN nft_contract_address = '\xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb' THEN 10000 ELSE COALESCE(MAX(o.items),MAX(s.items)) END) AS ratio, 
    CONCAT('<a href=""https://www.gem.xyz/collection/0',SUBSTRING(""nft_contract_address""::text, 2),'"" target=""_blank"">💎 </a>' , ' ','<a href=""https://etherscan.io/token/0',SUBSTRING(""nft_contract_address""::text, 2),'"" target=""_blank"">📶 </a>') as links
FROM dune_user_generated.""cryptuschrist_allexchange3"" a 
LEFT JOIN (SELECT collection AS art_collection, CONCAT('https://opensea.io/collection/', slug) AS art_url, slug as art_slug, token_id AS art_token, nft_contract_address AS art_contract , project_id  FROM  dune_user_generated.cryptus_art_blocks_tokens) art ON art_contract = nft_contract_address AND art_token::text  = token_id 
LEFT JOIN (SELECT project_id, owners, items FROM dune_user_generated.cryptus_art_blocks_owners_items) o on o.project_id  = art.project_id 
LEFT JOIN dune_user_generated.""cryptuschrist_nft_projects5"" on ""nft_contract"" = nft_contract_address
LEFT JOIN dune_user_generated.cryptus_holders s ON nft_contract_address = s.contract_address 
WHERE CASE WHEN '{{Platform}}' = 'All' THEN 'All'='All' ELSE platform = '{{Platform}}' END 
AND CASE WHEN '{{Time}}' = '5 Year' THEN '5 Year' = '5 Year' ELSE block_time > (NOW() - INTERVAL '{{Time}}') END
AND a.nft_contract_address NOT IN ('\xc36cf0cfcb5d905b8b513860db0cfe63f6cf9f5c', '\x76be3b62873462d2142405439777e971754e8e77', '\x495f947276749ce646f68ac8c248420045cb7b5e' )
GROUP BY nft_contract_address, 2, 11 
ORDER BY 4 DESC NULLS LAST  
LIMIT 500

/* 
--CONCAT(collection_opensea, collection_looksrare, collection_x2y2, '<a href=""https://etherscan.io/token/0',SUBSTRING(""nft_contract_address""::text, 2),'"" target=""_blank"">📶 </a>') AS links 
--WHEN i.slug IS NOT NULL THEN CONCAT('<a href=""https://dune.xyz/cryptuschrist/opensea-openstore-contract?Collection+Slug=',i.slug, '"">🟠 </a>',' ', '<a href=""',shared_url,'"" target=""_blank"">',CONCAT('⛵ ',SUBSTRING(shared_collection,0,35)),' </a>')  
AND nft_contract_address NOT IN ( 
            '\xA604060890923Ff400e8c6f5290461A83AEDACec',  --Shared Storefront LazyMinter  
            '\x81ae0be3a8044772d04f32398bac1e1b4b215aa8',  --Dreadfull X2Y2 Wash Trades
            '\x4E1f41613c9084FdB9E34E11fAE9412427480e56',  --Terraformas LooksRare Wash Trade
            '\xa5D37c0364b9E6D96EE37E03964E7aD2b33a93F4',  --Catgirl Academia LooksRare  
            '\xbC578eCcA2115dAC0c93C08674edC0C7D01Fe09C',  --Invisible Society 
            '\x495f947276749ce646f68ac8c248420045cb7b5e',  --OpenSea Shared 1155 
            '\x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7',  --Meebits 
            '\x1dfe7ca09e99d10835bf73044a23b73fc20623df',  --More Loot X2Y2 Wash Trades 
            '\xccb893eFB3ECE7816EABE0ce73Fb4767d69CD036',  --Stereograms LooksRare 1 owner 
            '\x7a376C1F8eDF7BA7Eb94A7438a8313a17D830FF8',  --Project Kevin's LooksRare Wash Trades 
            '\xfF36cA1396d2a9016869274F1017d6C2139f495E',  --Dementors Town X2Y2 Wash 
            '\xC36442b4a4522E871399CD717aBDD847Ab11FE88', -- UNISWAP LP - being used to washtrade LooksRare 
            '\x7a48E016122B4786E3b96414598Fc608c8DC3aD4', -- HypePass - more wash trading 
            '\x25FA24d856270Aa008249672b35EBc37383a8759', -- LooksRare more trash 
            '\x5CFeeEfCC47f72BD04FCe2f54bcd4C1C62a4E0AA', -- More LooksRare trash 
            '\x76be3b62873462d2142405439777e971754e8e77', -- Parallel Alpha slows down query too much 
            '\xc36cf0cfcb5d905b8b513860db0cfe63f6cf9f5c', -- Town Star slows down query no thanks 
            '\x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85', -- ENS too many items query crashes
            '\x2e6758F3f54a5CEFC090B7ABCf7dAb2F72c0119D',  -- More Trash from LooksRare 
            '\xeCf9b0Dfd160f070c924C3d9f797a6B44dE8fa26', -- More Trash from LooksRare 
            '\x076Ffeb1F1D398cf6DaaeA7c3C719c8ad009aF24', 
            '\xa0bae4c0410d79398703cbd9a30d010d414ab0da' -- X2Y2 ASCII 
            )  

*/

    -- SUM(opensea_vol) AS opensea_volume, 
    -- SUM(looksrare_vol) AS looksrare_volume, 
    -- SUM(x2y2_vol) AS x2y2_volume, 
    -- CONCAT('<a href=""https://twitter.com/',twitter,'"" target=""_blank"">',twitter,'</a>') AS ""@TWITTER"",
    -- CONCAT('<a href=""',discord,'"" target=""_blank"">',SUBSTRING(""discord""::text FROM 20),'</a>') AS ""DISCORD"",
    
-- comments / feedback @CryptusChrist on Twitter

    "
1290826,TOP Individual Sales - All Collections,Over selected time period. 📶 Etherscan 🟡 Wallet Dashboard 💥 BLUR ⛵ OpenSea 	🌀 X2Y2 🔲 Art Blocks 🟢 LooksRare 🟪️️ sudoswap 🌊Shared Storefront Contract,"[{""id"": 2211937, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""Price (ETH)"", ""numberFormat"": ""0.00""}, {""name"": ""Price [ETH]"", ""numberFormat"": ""0.00""}, {""name"": ""ETH Price"", ""alignContent"": ""center"", ""numberFormat"": ""0.00""}, {""name"": ""Token ID Opensea"", ""alignContent"": ""center""}, {""name"": ""Sale Time"", ""title"": ""UTC Sale Time"", ""alignContent"": ""left"", ""numberFormat"": """"}, {""name"": ""Sale #"", ""alignContent"": ""left"", ""numberFormat"": ""0,""}, {""name"": ""Seller"", ""alignContent"": ""center""}, {""name"": ""TX [Etherscan]"", ""alignContent"": ""center""}, {""name"": ""Buyer"", ""title"": ""\ud83c\udf0a Buyer"", ""alignContent"": ""left""}, {""name"": ""ID [Opensea]"", ""alignContent"": ""center""}, {""name"": ""Seller [OS]"", ""alignContent"": ""center""}, {""name"": ""Buyer [OS]"", ""title"": ""Buyer"", ""alignContent"": ""left""}, {""name"": ""Price"", ""title"": ""ETH"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""Token [OS]"", ""title"": ""Token"", ""alignContent"": ""center""}, {""name"": ""Transaction"", ""title"": "" "", ""alignContent"": ""center""}, {""name"": ""Wallet"", ""alignContent"": ""center""}, {""name"": ""$USD"", ""title"": ""USD"", ""alignContent"": ""right"", ""numberFormat"": ""$0,""}, {""name"": ""[Token]"", ""title"": ""Token"", ""alignContent"": ""center""}, {""name"": ""Sales"", ""title"": "" ""}, {""name"": ""sale_time"", ""title"": ""Time of Sale""}, {""name"": ""sale_num"", ""title"": ""Sale #"", ""alignContent"": ""center"", ""numberFormat"": ""0,""}, {""name"": ""token"", ""title"": ""TOKEN"", ""alignContent"": ""left""}, {""name"": ""price_eth"", ""title"": ""\u2666 ETH"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""usd"", ""title"": ""$USD"", ""alignContent"": ""right"", ""numberFormat"": ""$0,""}, {""name"": ""details"", ""title"": ""DATA"", ""alignContent"": ""center""}, {""name"": ""tx"", ""title"": ""TX"", ""alignContent"": ""right""}, {""name"": ""time_since"", ""title"": ""AGE"", ""alignContent"": ""right""}, {""name"": ""buyer_os"", ""title"": ""BUYER ""}, {""name"": ""Market"", ""title"": ""MARKET"", ""alignContent"": ""right""}, {""name"": ""pst_etherscan"", ""title"": ""PST / ETHERSCAN ""}, {""name"": ""seller_os"", ""title"": ""SELLER""}, {""name"": ""etherscan"", ""title"": "" TX"", ""alignContent"": ""center""}, {""name"": ""time"", ""title"": ""SALE TIME""}, {""name"": ""seller_link"", ""title"": ""SELLER""}, {""name"": ""buyer_link"", ""title"": ""BUYER""}, {""name"": ""token_link"", ""title"": ""TOKEN""}, {""name"": ""eth_amount"", ""title"": ""\u2666 PRICE"", ""alignContent"": ""right"", ""numberFormat"": ""0,0.00""}, {""name"": ""usd_amount"", ""title"": ""USD"", ""alignContent"": ""right"", ""numberFormat"": ""$0,""}, {""name"": ""platform"", ""title"": ""MARKET"", ""alignContent"": ""right""}, {""name"": ""tx_link"", ""title"": ""TX""}, {""name"": ""price_usd"", ""title"": ""$USD"", ""alignContent"": ""right"", ""numberFormat"": ""$0,""}, {""name"": ""token_id_link"", ""title"": ""TOKEN""}, {""name"": ""collection"", ""title"": ""COLLECTION ""}, {""name"": ""age"", ""title"": ""AGE"", ""alignContent"": ""right""}]}, ""created_at"": ""2022-09-21T06:54:45.461503+00:00"", ""__typename"": ""visualizations""}]","SELECT 
    CASE 
        WHEN art_slug IS NOT NULL THEN CONCAT('<a href=""https://dune.com/cryptuschrist/art-blocks-custom-dashboard?Project+ID=',ROUND(art.project_id,0)::text,'""> 🟠 </a>','  ', '<a href=""',art_url,'"" target=""_blank"">',CONCAT('🔲 ',SUBSTRING(art_collection,0,35)),' </a>')  
        WHEN shared_url IS NOT NULL THEN CONCAT('<a href=""https://dune.xyz/cryptuschrist/opensea-openstore-contract?Collection+Slug=',i.slug, '"">🟠 </a>',' ', '<a href=""',shared_url,'"" target=""_blank"">',CONCAT('🌊 ',SUBSTRING(shared_collection,0,35)),' </a>')  
        WHEN x.token_id IS NOT NULL THEN CONCAT('<a href=""https://dune.xyz/cryptuschrist/CUSTOM-NFT-Dashboard?NFT%20Contract=0xc143bbfcdbdbed6d454803804752a064a622c1f3""> 🟠 </a>','  ','<a href=""https://opensea.io/',x.slug,'"" target=""_blank"">⛵ ',x.collection ,'</a>')
        ELSE COALESCE((CASE WHEN platform = 'OpenSea' THEN collection_opensea_dune 
                            WHEN platform = 'X2Y2' THEN collection_x2y2_dune 
                            WHEN platform = 'LooksRare' THEN collection_looksrare_dune 
                            WHEN platform = 'Coinbase' THEN collection_coinbase_dune
                            WHEN platform = 'sudoswap' THEN CONCAT('<a href=""https://dune.xyz/cryptuschrist/CUSTOM-NFT-Dashboard?NFT%20Contract=0',SUBSTRING(a.""nft_contract_address""::text,2,42),'""> 🟠 </a>','  ','<a href=""https://sudoswap.xyz/#/browse/buy/0',SUBSTRING(a.""nft_contract_address""::text, 2),'"" target=""_blank"">🟪 ', COALESCE(nft_collection, CONCAT('CONTRACT: 0x..',UPPER(SUBSTRING(a.""nft_contract_address""::text, 38,42))),'</a>')) 
                            WHEN platform = 'BLUR.io' THEN CONCAT('<a href=""https://dune.xyz/cryptuschrist/CUSTOM-NFT-Dashboard?NFT%20Contract=0',SUBSTRING(a.""nft_contract_address""::text,2,42),'""> 🟠 </a>','  ','<a href=""https://blur.io/collection/0',SUBSTRING(a.""nft_contract_address""::text, 2),'"" target=""_blank"">💥 ', COALESCE(nft_collection, CONCAT('CONTRACT: 0x..',UPPER(SUBSTRING(a.""nft_contract_address""::text, 38,42))),'</a>'))  
                            WHEN nft_collection = 'CryptoPunks' THEN collection_punks 
                            ELSE collection_opensea_dune END),CONCAT('<a href=""https://dune.xyz/cryptuschrist/CUSTOM-NFT-Dashboard?NFT%20Contract=0',SUBSTRING(a.""nft_contract_address""::text,2,42),'""> 🟠 </a>','  ','<a href=""https://opensea.io/assets/ethereum/0',SUBSTRING(a.""nft_contract_address""::text, 2),'/1"" target=""_blank"">',CONCAT('⛵  CONTRACT: 0x..',UPPER(SUBSTRING(a.""nft_contract_address""::text, 38,42))),'</a>')) 
    END AS collection,
    CASE 
        WHEN art_token is not NULL THEN CONCAT('<a href=""https://www.artblocks.io/token/' , art_token::text , '"" target=""_blank"">🔲 '   , ROUND(art_token::numeric - (project_id*1000000),0) , '</a>') 
        WHEN ens_name IS NOT NULL THEN CONCAT('<a href=""https://opensea.io/assets/ethereum/0x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85/'  , ens.""token_id""::text , '"" target=""_blank"">⛵ ' ,  SUBSTRING(ens_name::text,0,24) , '.eth</a>' ) 
        WHEN shared_url IS NOT NULL THEN CONCAT('<a href=""https://opensea.io/assets/ethereum/0x495f947276749ce646f68ac8c248420045cb7b5e/'  , a.token_id::text , '"" target=""_blank"">🌊 ' ,  (ROUND(item_id,0))::text, '</a>' ) 
        ELSE token_id_link 
    END AS token_id_link,
    price AS eth_amount, 
    price_usd,
    CONCAT('<a href=""https://dune.xyz/cryptuschrist/Wallet-Stats-Dash?Wallet%20Address=0', substring(""buyer""::text from 2), '"">🟡  ',COALESCE(SUBSTRING(b.""name""::text, 0, 21) , UPPER(SUBSTRING(""buyer""::text, 39, 42))), '</a>') as buyer_link,
    CONCAT('<a href=""https://dune.xyz/cryptuschrist/Wallet-Stats-Dash?Wallet%20Address=0', substring(""seller""::text from 2),'"">🟡  ',COALESCE(SUBSTRING(s.""name""::text, 0, 21) , UPPER(SUBSTRING(""seller""::text, 39, 42))), '</a>') as seller_link, 
    CASE 
        WHEN (NOW() - block_time) < '1 hour' THEN TO_CHAR((NOW() - block_time), 'FMMI ""minutes"" ago') 
        WHEN (NOW() - block_time) < '2 hour' THEN TO_CHAR((NOW() - block_time), 'FMhh24 ""hour ago""') 
        WHEN (NOW() - block_time) < '24 hour' THEN TO_CHAR((NOW() - block_time), 'FMhh24 ""hours ago""') 
        WHEN (NOW() - block_time) < '48 hour' THEN TO_CHAR((NOW() - block_time), 'FMdd ""day ago""')  
        WHEN (NOW() - block_time) < '60 day' THEN TO_CHAR((NOW() - block_time), 'FMdd ""days ago""') 
        WHEN (NOW() - block_time) < '2 months' THEN TO_CHAR((NOW() - block_time), 'FMww ""weeks ago""')
        WHEN (NOW() - block_time) < '365 day' THEN to_char(age(NOW()::timestamp, block_time),'FMMM ""months"" ago')
        WHEN (NOW() - block_time) < '2 year' THEN to_char(age(NOW()::timestamp, block_time),'FMYY ""year"" ago')
    ELSE to_char(age(NOW()::timestamp, block_time),'FMYY ""years"" ago')
    END AS age, 
   tx 
FROM dune_user_generated.cryptuschrist_allexchange3 a 
LEFT JOIN (SELECT collection AS shared_collection, CONCAT('https://opensea.io/collection/', slug) AS shared_url, slug, token_id AS token, item_id,  nft_contract_address AS nft FROM dune_user_generated.storefront_ids2) i ON '\x495f947276749ce646f68ac8c248420045cb7b5e' = nft_contract_address AND token = token_id  
LEFT JOIN (SELECT collection AS art_collection, CONCAT('https://opensea.io/collection/', slug) AS art_url, slug as art_slug, token_id AS art_token, nft_contract_address AS art_contract , project_id, token_id_link as blocks_token  FROM  dune_user_generated.cryptus_art_blocks_tokens) art ON art_contract = nft_contract_address AND art_token::text  = token_id 
LEFT JOIN dune_user_generated.cryptus_ens_token_ids_view ens on ens.token_id = a.token_id and a.nft_contract_address = '\x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85'
LEFT JOIN dune_user_generated.cryptuschrist_sub_collections x ON x.token_id::text = a.token_id AND a.nft_contract_address = '\xc143bbfcdbdbed6d454803804752a064a622c1f3'
LEFT JOIN dune_user_generated.""cryptuschrist_nft_projects5"" on ""nft_contract"" = a.nft_contract_address 
LEFT JOIN dune_user_generated.""cryptuschrist_ens_opensea2"" b ON b.address = ""buyer""    
LEFT JOIN dune_user_generated.""cryptuschrist_ens_opensea2"" s ON s.address = ""seller""
WHERE CASE WHEN '{{Platform}}' = 'All' THEN 'All'='All' ELSE platform = '{{Platform}}' END 
AND CASE WHEN '{{Time}}' = '5 Year' THEN '5 Year' = '5 Year' ELSE block_time > (NOW() - INTERVAL '{{Time}}') END
ORDER BY price_usd DESC NULLS LAST LIMIT 500
"
681657,CoinbaseNFT: Buyers & Sellers,,"[{""id"": 1264226, ""type"": ""table"", ""name"": """", ""options"": {}, ""created_at"": ""2022-05-07T02:42:06.612264+00:00"", ""__typename"": ""visualizations""}, {""id"": 1264227, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Buyers Today"", ""stringPrefix"": """", ""counterColName"": ""Buyers""}, ""created_at"": ""2022-05-07T02:42:06.612264+00:00"", ""__typename"": ""visualizations""}, {""id"": 1264266, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Sellers Today"", ""counterColName"": ""Sellers""}, ""created_at"": ""2022-05-07T02:49:17.628768+00:00"", ""__typename"": ""visualizations""}, {""id"": 1264228, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Unique Users""}}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""columnMapping"": {""day"": ""x"", ""Buyers"": ""y"", ""buyers"": ""y"", ""Sellers"": ""y"", ""sellers"": ""y"", ""total_volume"": ""y""}, ""seriesOptions"": {""Buyers"": {""type"": ""column"", ""color"": ""#004ff6"", ""yAxis"": 0, ""zIndex"": 0}, ""Sellers"": {""type"": ""column"", ""color"": ""#989696"", ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-05-07T02:42:06.612264+00:00"", ""__typename"": ""visualizations""}]"," SELECT  date_trunc('day', block_time) AS day,
    COUNT(DISTINCT(buyer)) as ""Buyers"", 
    COUNT(DISTINCT(seller)) as ""Sellers"" 
FROM dune_user_generated.cryptuschrist_coinbase
GROUP BY 1 ORDER BY 1 DESC 

"
681690,CoinbaseNFT: Buyers & Sellers - Weekly,,"[{""id"": 1264279, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Sellers This Week"", ""counterColName"": ""Sellers""}, ""created_at"": ""2022-05-07T02:50:50.387474+00:00"", ""__typename"": ""visualizations""}, {""id"": 1264276, ""type"": ""table"", ""name"": """", ""options"": {}, ""created_at"": ""2022-05-07T02:50:50.387474+00:00"", ""__typename"": ""visualizations""}, {""id"": 1264277, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Buyers This Week"", ""stringPrefix"": """", ""counterColName"": ""Buyers""}, ""created_at"": ""2022-05-07T02:50:50.387474+00:00"", ""__typename"": ""visualizations""}, {""id"": 1264278, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""-"", ""title"": {""text"": ""Unique Users""}}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""columnMapping"": {""day"": ""x"", ""week"": ""x"", ""Buyers"": ""y"", ""buyers"": ""y"", ""Sellers"": ""y"", ""sellers"": ""y"", ""total_volume"": ""y""}, ""seriesOptions"": {""Buyers"": {""type"": ""column"", ""color"": ""#004ff6"", ""yAxis"": 0, ""zIndex"": 0}, ""Sellers"": {""type"": ""column"", ""color"": ""#9e9c9c"", ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-05-07T02:50:50.387474+00:00"", ""__typename"": ""visualizations""}]"," SELECT  date_trunc('week', block_time) AS week,
    COUNT(DISTINCT(buyer)) as ""Buyers"", 
    COUNT(DISTINCT(seller)) as ""Sellers"" 
FROM dune_user_generated.cryptuschrist_coinbase
GROUP BY 1 ORDER BY 1 DESC 

"
677313,CoinbaseNFT: Volume,,"[{""id"": 1256329, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Volume: All Time"", ""stringPrefix"": ""\u2666 "", ""counterColName"": ""total_volume""}, ""created_at"": ""2022-05-05T22:24:57.013962+00:00"", ""__typename"": ""visualizations""}, {""id"": 1256328, ""type"": ""table"", ""name"": """", ""options"": {}, ""created_at"": ""2022-05-05T22:24:57.013962+00:00"", ""__typename"": ""visualizations""}, {""id"": 1791663, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Volume: All Time"", ""stringPrefix"": ""$"", ""counterColName"": ""usd_volume""}, ""created_at"": ""2022-07-14T10:29:16.077222+00:00"", ""__typename"": ""visualizations""}]"," SELECT 
    SUM(price) AS total_volume
    , SUM(price_usd) AS usd_volume 
 FROM dune_user_generated.cryptuschrist_coinbase_usd 
"
681417,CoinbaseNFT: Volume ♦,,"[{""id"": 1263773, ""type"": ""table"", ""name"": """", ""options"": {}, ""created_at"": ""2022-05-07T00:47:34.165367+00:00"", ""__typename"": ""visualizations""}, {""id"": 1263772, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Volume: All Time"", ""stringPrefix"": ""\u2666 "", ""counterColName"": ""total_volume""}, ""created_at"": ""2022-05-07T00:47:34.165367+00:00"", ""__typename"": ""visualizations""}, {""id"": 1263774, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""\u2666 VOLUME ETH""}, ""tickFormat"": ""0,""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""0,"", ""columnMapping"": {""day"": ""x"", ""total_volume"": ""y""}, ""seriesOptions"": {""total_volume"": {""name"": ""VOLUME"", ""type"": ""column"", ""color"": ""#004ff6"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-05-07T00:47:34.165367+00:00"", ""__typename"": ""visualizations""}]","SELECT date_trunc('day', block_time) AS day, SUM(price) AS total_volume 
FROM dune_user_generated.cryptuschrist_coinbase_usd
WHERE CASE WHEN '{{NFT Contract}}' = '0x..OPTIONAL' THEN '0x..OPTIONAL'='0x..OPTIONAL'  ELSE nft_contract_address = CONCAT('\x', substring('{{NFT Contract}}' from 3))::bytea END
GROUP BY 1 
ORDER BY 1 DESC 

"
677299,CoinbaseNFT: Top Collections ALL TIME,🔥=Customizes this Sales Feed to Collection Only Sales,"[{""id"": 1256311, ""type"": ""table"", ""name"": """", ""options"": {""columns"": [{""name"": ""volume"", ""title"": ""\u2666 VOLUME"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""collection"", ""title"": ""COLLECTION""}, {""name"": ""sales"", ""title"": ""SALES"", ""alignContent"": ""right"", ""numberFormat"": ""0,""}, {""name"": ""nft_filter"", ""title"": "" "", ""alignContent"": ""center""}, {""name"": ""usd_volume"", ""title"": ""$USD"", ""alignContent"": ""right"", ""numberFormat"": ""$0,""}]}, ""created_at"": ""2022-05-05T22:18:14.628118+00:00"", ""__typename"": ""visualizations""}]","SELECT 
    COALESCE(collection_coinbase_dune,CONCAT('<a href=""https://dune.xyz/cryptuschrist/CUSTOM-NFT-Dashboard?NFT%20Contract=0',SUBSTRING(""nft_contract_address""::text, 2),'""> 🟠  </a>',' ','<a href=""https://nft.coinbase.com/collection/ethereum/0',SUBSTRING(""nft_contract_address""::text, 2),'"" target=""_blank"">',CONCAT('🇨 0x..',UPPER(SUBSTRING(""nft_contract_address""::text, 39,42))),'</a>')) AS collection, 
    sales,
    volume,
    usd_volume,
    '<a href=""https://dune.com/cryptuschrist/Coinbase-NFT?NFT%20Contract=0'|| substring(nft_contract_address::text from 2) || '"">🔥</a>' as nft_filter
FROM
    (
     SELECT nft_contract_address, COUNT(*) AS sales, SUM(price) AS volume, SUM(price_usd) AS usd_volume
     FROM dune_user_generated.cryptuschrist_coinbase_usd
     GROUP BY 1 
     ) a 
LEFT JOIN dune_user_generated.""cryptuschrist_nft_projects5"" on ""nft_contract"" = nft_contract_address
ORDER BY 4 DESC nulls last 
"
696922,CoinbaseNFT: Top Collections TODAY,🔥=Customizes this Sales Feed to Collection Only Sales,"[{""id"": 1290757, ""type"": ""table"", ""name"": """", ""options"": {""columns"": [{""name"": ""volume"", ""title"": ""\u2666 VOLUME"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""collection"", ""title"": ""COLLECTION""}, {""name"": ""sales"", ""title"": ""SALES"", ""alignContent"": ""right""}, {""name"": ""nft_filter"", ""title"": "" "", ""alignContent"": ""right""}, {""name"": ""usd_volume"", ""title"": ""$USD "", ""alignContent"": ""right"", ""numberFormat"": ""$0,""}]}, ""created_at"": ""2022-05-11T05:46:02.664769+00:00"", ""__typename"": ""visualizations""}]","SELECT 
    COALESCE(collection_coinbase_dune,CONCAT('<a href=""https://dune.xyz/cryptuschrist/CUSTOM-NFT-Dashboard?NFT%20Contract=0',SUBSTRING(""nft_contract_address""::text, 2),'""> 🟠  </a>',' ','<a href=""https://nft.coinbase.com/collection/ethereum/0',SUBSTRING(""nft_contract_address""::text, 2),'"" target=""_blank"">',CONCAT('🇨 0x..',UPPER(SUBSTRING(""nft_contract_address""::text, 39,42))),'</a>')) AS collection, 
    COUNT(*) AS sales, 
    SUM(price) AS volume, 
    SUM(price_usd) AS usd_volume, 
    '<a href=""https://dune.com/cryptuschrist/Coinbase-NFT?NFT%20Contract=0'|| substring(nft_contract_address::text from 2) || '"">🔥</a>' as nft_filter
FROM dune_user_generated.cryptuschrist_coinbase_usd 
LEFT JOIN dune_user_generated.""cryptuschrist_nft_projects5"" on ""nft_contract"" = nft_contract_address
WHERE block_time > NOW() - INTERVAL '24 hour'
GROUP BY 1 ,5 
ORDER BY 4 DESC NULLS LAST 



"
677366,Coinbase NFT - All Time Sales,📶 Etherscan 🟡 Wallet Dashboard 🇨 CoinbaseNFT Links,"[{""id"": 1256411, ""type"": ""table"", ""name"": """", ""options"": {""columns"": [{""name"": ""price"", ""title"": ""\u2666 ETH"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""market_link"", ""title"": ""TOKEN LINK"", ""alignContent"": ""right""}, {""name"": ""age"", ""title"": ""AGE"", ""alignContent"": ""right""}, {""name"": ""usd_price"", ""title"": ""USD"", ""alignContent"": ""right"", ""numberFormat"": ""$0,""}, {""name"": ""token_id"", ""title"": ""TOKEN""}, {""name"": ""seller_link"", ""title"": ""SELLER""}, {""name"": ""buyer_link"", ""title"": ""BUYER""}, {""name"": ""block_time"", ""title"": ""TIME""}, {""name"": ""tx"", ""title"": ""TX""}, {""name"": ""token_xfers"", ""title"": ""TOKEN""}, {""name"": ""collection"", ""title"": ""COLLECTION""}, {""name"": ""token_link"", ""title"": ""TOKEN""}]}, ""created_at"": ""2022-05-05T22:56:42.726802+00:00"", ""__typename"": ""visualizations""}]","SELECT 
    block_time, 
    COALESCE(collection_coinbase_dune,CONCAT('<a href=""https://dune.xyz/cryptuschrist/CUSTOM-NFT-Dashboard?NFT%20Contract=0',SUBSTRING(""nft_contract_address""::text, 2),'""> 🟠  </a>',' ','<a href=""https://nft.coinbase.com/collection/ethereum/0',SUBSTRING(""nft_contract_address""::text, 2),'"" target=""_blank"">',CONCAT('🇨 0x..',UPPER(SUBSTRING(""nft_contract_address""::text, 39,42))),'</a>')) AS collection, 
    CONCAT('<a href=""https://dune.xyz/cryptuschrist/Wallet-Stats-Dash?Wallet%20Address=0', substring(buyer::text from 2), '"">🟡  ',COALESCE(SUBSTRING(b.""name""::text, 0, 23) , CONCAT(UPPER(SUBSTRING(buyer::text, 39, 42)))), '</a>') as buyer_link,
    CONCAT('<a href=""https://dune.xyz/cryptuschrist/Wallet-Stats-Dash?Wallet%20Address=0', substring(seller::text from 2), '"">🟡  ',COALESCE(SUBSTRING(s.""name""::text, 0, 23) , CONCAT(UPPER(SUBSTRING(seller::text, 39, 42)))), '</a>') as seller_link,
    '<a href=""https://nft.coinbase.com/nft/ethereum/0' || substring(""nft_contract_address""::text from 2) || '/' || token_id::text ||  '"" target=""_blank"">🇨 ' || SUBSTRING(""token_id""::text,0,7) || '</a>' AS  token_link,
    price,  
    price_usd AS usd_price,
    CASE 
        WHEN (NOW() - block_time) < '1 hour' THEN TO_CHAR((NOW() - block_time), 'FMMI ""minutes"" ago') 
        WHEN (NOW() - block_time) < '2 hour' THEN TO_CHAR((NOW() - block_time), 'FMhh24 ""hour ago""') 
        WHEN (NOW() - block_time) < '24 hour' THEN TO_CHAR((NOW() - block_time), 'FMhh24 ""hours ago""') 
        WHEN (NOW() - block_time) < '48 hour' THEN TO_CHAR((NOW() - block_time), 'FMdd ""day ago""')  
        WHEN (NOW() - block_time) < '60 day' THEN TO_CHAR((NOW() - block_time), 'FMdd ""days ago""') 
        WHEN (NOW() - block_time) < '2 months' THEN TO_CHAR((NOW() - block_time), 'FMww ""weeks ago""')
        WHEN (NOW() - block_time) < '365 day' THEN to_char(age(NOW()::timestamp, block_time),'FMMM ""months"" ago')
        WHEN (NOW() - block_time) < '2 year' THEN to_char(age(NOW()::timestamp, block_time),'FMYY ""year"" ago')
    ELSE to_char(age(NOW()::timestamp, block_time),'FMYY ""years"" ago')
    END AS age, 
     tx 
FROM dune_user_generated.cryptuschrist_coinbase_usd   
LEFT JOIN dune_user_generated.""cryptuschrist_ens_opensea2"" b ON b.address = buyer 
LEFT JOIN dune_user_generated.""cryptuschrist_ens_opensea2"" s ON s.address = seller 
LEFT JOIN dune_user_generated.""cryptuschrist_nft_projects5"" on ""nft_contract"" = nft_contract_address
WHERE CASE WHEN '{{Wallet Address}}' = '0x...OPTIONAL' THEN '0x...OPTIONAL'='0x...OPTIONAL' ELSE (buyer = CONCAT('\x', substring('{{Wallet Address}}' from 3))::bytea OR seller = CONCAT('\x', substring('{{Wallet Address}}' from 3))::bytea) END
AND CASE WHEN '{{NFT Contract}}' = '0x..OPTIONAL' THEN '0x..OPTIONAL'='0x..OPTIONAL' ELSE nft_contract_address = CONCAT('\x', substring('{{NFT Contract}}' from 3))::bytea END
ORDER BY 1 DESC 



    "
677320,CoinbaseNFT: Top Buyers All Time,🔥=Customizes this Feed 🇨=CoinbaseNFT Wallet Link ,"[{""id"": 1256336, ""type"": ""table"", ""name"": """", ""options"": {""columns"": [{""name"": ""volume"", ""title"": ""\u2666 VOLUME"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""collection"", ""title"": ""COLLECTION""}, {""name"": ""sales"", ""title"": ""SALES"", ""alignContent"": ""right""}, {""name"": ""coinbase_wallet"", ""title"": ""COINBASE WALLET""}, {""name"": ""wallet_dash"", ""title"": ""DUNE"", ""alignContent"": ""right""}, {""name"": ""wallet_filter"", ""title"": "" "", ""alignContent"": ""right""}, {""name"": ""usd_volume"", ""title"": ""$USD"", ""alignContent"": ""right"", ""numberFormat"": ""$0,""}]}, ""created_at"": ""2022-05-05T22:28:27.902903+00:00"", ""__typename"": ""visualizations""}]","SELECT 
    '<a href=""https://nft.coinbase.com/0' ||  SUBSTRING(buyer::text, 2, 42) ||  '"" target=""_blank"">🇨 '|| COALESCE(SUBSTRING(b.""name""::text, 0, 20) , CONCAT(UPPER(SUBSTRING(buyer::text, 39, 42)))) || '</a>' AS coinbase_wallet, 
    sales,
    volume,
    usd_volume, 
    '<a href=""https://dune.com/cryptuschrist/Coinbase-NFT?Wallet%20Address=0'|| substring(buyer::text from 2) || '"">🔥</a>' as wallet_filter
FROM 
    (
     SELECT buyer, COUNT(*) AS sales, SUM(price) AS volume, SUM(price_usd) AS usd_volume
     FROM dune_user_generated.cryptuschrist_coinbase_usd
     GROUP BY 1
     ) a 
LEFT JOIN dune_user_generated.""cryptuschrist_ens_opensea2"" b ON b.address = buyer 
ORDER BY 4  DESC nulls last
"
681478,CoinbaseNFT: Sales,,"[{""id"": 1263902, ""type"": ""table"", ""name"": """", ""options"": {}, ""created_at"": ""2022-05-07T01:17:51.819895+00:00"", ""__typename"": ""visualizations""}, {""id"": 1263904, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""TOTAL SALES""}}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""columnMapping"": {""day"": ""x"", ""sales"": ""y"", ""total_volume"": ""y""}, ""seriesOptions"": {""sales"": {""type"": ""column"", ""color"": ""#908f8f"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-05-07T01:17:51.819895+00:00"", ""__typename"": ""visualizations""}]","SELECT date_trunc('day', block_time) AS day, COUNT(*) AS sales 
FROM dune_user_generated.cryptuschrist_coinbase
WHERE CASE WHEN '{{NFT Contract}}' = '0x..OPTIONAL' THEN '0x..OPTIONAL'='0x..OPTIONAL' ELSE nft_contract_address = CONCAT('\x', substring('{{NFT Contract}}' from 3))::bytea END
GROUP BY 1 
ORDER BY 1 DESC 

"
677280,CoinbaseNFT,,"[{""id"": 1256282, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-05-05T22:12:50.215568+00:00"", ""__typename"": ""visualizations""}, {""id"": 1256291, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Sales: 24 Hours"", ""counterColName"": ""count""}, ""created_at"": ""2022-05-05T22:14:53.095618+00:00"", ""__typename"": ""visualizations""}]"," SELECT COUNT(*)
 FROM dune_user_generated.cryptuschrist_coinbase 
 WHERE block_time > NOW() - INTERVAL '24 hour'
"
696921,CoinbaseNFT: Top Buyers TODAY,🔥=Customizes this Feed 🇨=CoinbaseNFT Wallet Link ,"[{""id"": 1290756, ""type"": ""table"", ""name"": """", ""options"": {""columns"": [{""name"": ""volume"", ""title"": ""\u2666 VOLUME"", ""alignContent"": ""right"", ""numberFormat"": ""0.00""}, {""name"": ""collection"", ""title"": ""COLLECTION""}, {""name"": ""sales"", ""title"": ""SALES"", ""alignContent"": ""right""}, {""name"": ""coinbase_wallet"", ""title"": ""COINBASE WALLET""}, {""name"": ""wallet_dash"", ""title"": ""DUNE"", ""alignContent"": ""right""}, {""name"": ""wallet_filter"", ""title"": "" "", ""alignContent"": ""right""}, {""name"": ""usd_volume"", ""title"": ""$USD"", ""alignContent"": ""right"", ""numberFormat"": ""$0,""}]}, ""created_at"": ""2022-05-11T05:45:16.385433+00:00"", ""__typename"": ""visualizations""}]","SELECT 
    '<a href=""https://nft.coinbase.com/0' ||  SUBSTRING(buyer::text, 2, 42) ||  '"" target=""_blank"">🇨 '|| COALESCE(SUBSTRING(b.""name""::text, 0, 20) , CONCAT(UPPER(SUBSTRING(buyer::text, 39, 42)))) || '</a>' AS coinbase_wallet, 
    sales,
    volume,
    usd_volume, 
    '<a href=""https://dune.com/cryptuschrist/Coinbase-NFT?Wallet%20Address=0'|| substring(buyer::text from 2) || '"">🔥</a>' as wallet_filter
FROM
    (
     SELECT buyer, COUNT(*) AS sales, SUM(price) AS volume, SUM(price_usd) AS usd_volume
     FROM dune_user_generated.cryptuschrist_coinbase_usd
     WHERE block_time > NOW() - INTERVAL '24 hour'
     GROUP BY 1
     ) a 
LEFT JOIN dune_user_generated.""cryptuschrist_ens_opensea2"" b ON b.address = buyer 
ORDER BY 3 DESC
"
828040,CoinbaseNFT Users - All Time,,"[{""id"": 1447942, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""counterLabel"": ""CoinbaseNFT Total Users"", ""counterColName"": ""users""}, ""created_at"": ""2022-05-21T08:45:18.471432+00:00"", ""__typename"": ""visualizations""}, {""id"": 1447943, ""type"": ""table"", ""name"": ""Query results"", ""options"": {""columns"": [{""name"": ""users"", ""numberFormat"": ""0,""}]}, ""created_at"": ""2022-05-21T08:45:18.471432+00:00"", ""__typename"": ""visualizations""}]","SELECT COUNT(DISTINCT(wallet)) AS users 
FROM
    (
    SELECT buyer AS wallet
    FROM dune_user_generated.cryptuschrist_coinbase
    
    UNION ALL 
    
    SELECT seller AS wallet
    FROM dune_user_generated.cryptuschrist_coinbase 
    ) a 
"
610233,Lido Staking Marketshare,,"[{""id"": 1139467, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Staked Through Lido \ud83d\udca7"", ""stringSuffix"": ""%"", ""stringDecimal"": 2, ""counterColName"": ""lido_percentage""}, ""created_at"": ""2022-04-16T21:59:18.308526+00:00"", ""__typename"": ""visualizations""}]","WITH lido_staked_total AS (
    SELECT SUM(value) AS lido_staked_total
    FROM ethereum.traces
    WHERE ""to"" = '\x00000000219ab540356cBB839Cbe05303d7705Fa'
    AND ""from"" IN (SELECT distinct contract_address FROM lido.""steth_evt_Submitted"")
    AND success
    AND value > 0
    )

SELECT 100.0*lido_staked_total/SUM(value) AS lido_percentage
FROM ethereum.traces, lido_staked_total
WHERE ""to"" = '\x00000000219ab540356cBB839Cbe05303d7705Fa'
AND success
AND value > 0
GROUP BY lido_staked_total"
612415,Liquid Staking Percentage,,"[{""id"": 1144028, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Liquid Staking Marketshare \ud83d\udca6"", ""stringSuffix"": ""%"", ""stringDecimal"": 2, ""counterColName"": ""liquid_staking_percentage""}, ""created_at"": ""2022-04-17T23:50:33.187984+00:00"", ""__typename"": ""visualizations""}]","WITH rocketpool_address_list AS (
    SELECT distinct traces.""from"" AS address
    FROM ethereum.transactions txs
    RIGHT JOIN ethereum.traces traces ON txs.hash=traces.tx_hash AND traces.to='\x00000000219ab540356cbb839cbe05303d7705fa'
    WHERE txs.""to"" = '\xdcd51fc5cd918e0461b9b7fb75967fdfd10dae2f'
    )

, liquid_staking_addresses AS (
    SELECT distinct contract_address AS address FROM lido.""steth_evt_Submitted"" --Lido
    UNION
    SELECT '\x607ebC82329D0CAc3027B83d15e4b4E816F131b7'::bytea AS address --Stakehound
    UNION
    SELECT '\x84db6ee82b7cf3b47e8f19270abde5718b936670'::bytea AS address -- ANKR/Stkr
    UNION
    SELECT '\xc874b064f465bdd6411d45734b56fac750cda29a'::bytea AS address --StakeWise
    UNION
    SELECT '\xcbc1065255cbc3ab41a6868c22d1f1c573ab89fd'::bytea AS address --CREAM
    UNION
    SELECT '\xbca3b7b87dcb15f0efa66136bc0e4684a3e5da4d'::bytea AS address --SharedStake
    UNION
    SELECT NULL AS address --StaFi
    UNION
    SELECT traces.""from"" AS address -- Rocket Pool
    FROM ethereum.transactions txs
    RIGHT JOIN ethereum.traces traces ON txs.hash=traces.tx_hash AND traces.to='\x00000000219ab540356cbb839cbe05303d7705fa'
    WHERE txs.""to"" IN ('\xdcd51fc5cd918e0461b9b7fb75967fdfd10dae2f', '\x1cc9cf5586522c6f483e84a19c3c2b0b6d027bf0')
    )

, liquid_staking_total AS (
    SELECT SUM(value)/1e18
        --+12000 --StaFi
        AS  liquid_staking_total
    FROM ethereum.traces
    WHERE ""to"" = '\x00000000219ab540356cBB839Cbe05303d7705Fa'
    AND ""from"" IN (SELECT address FROM liquid_staking_addresses)
    AND success
    AND value > 0
    )

SELECT 100.0*liquid_staking_total/(SUM(value)/1e18) AS liquid_staking_percentage
FROM ethereum.traces,  liquid_staking_total
WHERE ""to"" = '\x00000000219ab540356cBB839Cbe05303d7705Fa'
AND success
AND value > 0
GROUP BY  liquid_staking_total"
1184562,ETH Beacon Chain Depositor Identified Entities,Ordered by Deposited Amount,"[{""id"": 2027568, ""type"": ""table"", ""name"": """", ""options"": {""columns"": [{""name"": ""deposited_eth"", ""title"": ""ETH Deposited"", ""numberFormat"": ""###,###""}, {""name"": ""staker"", ""title"": ""Staker""}, {""name"": ""last_deposit"", ""title"": ""Last Deposit"", ""numberFormat"": """"}, {""name"": ""first_deposit"", ""title"": ""First Deposit""}, {""name"": ""marketshare"", ""title"": ""Marketshare"", ""numberFormat"": ""###.[##]%""}, {""name"": ""depositor"", ""title"": ""Depositor""}, {""name"": ""validators"", ""title"": ""Validators"", ""numberFormat"": ""###,###""}, {""name"": ""ranking"", ""title"": ""Rank""}]}, ""created_at"": ""2022-08-19T12:32:30.702264+00:00"", ""__typename"": ""visualizations""}]","WITH staker_names AS (SELECT *
    FROM (
        values ('\xae7ab96520de3a18e5e111b5eaab095312d7fe84'::bytea, 'Lido', 'Liquid Staking')
        , ('\x39dc6a99209b5e6b81dc8540c86ff10981ebda29'::bytea, 'Staked.us', 'Staking Pools')
        , ('\x0194512e77d798e4871973d9cb9d7ddfc0ffd801'::bytea, 'stakefish', 'Staking Pools')
        , ('\xd4039ecc40aeda0582036437cf3ec02845da4c13'::bytea, 'Kraken', 'CEX')
        , ('\xa40dfee99e1c85dc97fdc594b16a460717838703'::bytea, 'Kraken', 'CEX')
        , ('\x622de9bb9ff8907414785a633097db438f9a2d86'::bytea, 'Bitcoin Suisse', 'Staking Pools')
        , ('\xdd9663bd979f1ab1bada85e1bc7d7f13cafe71f8'::bytea, 'Bitcoin Suisse', 'Staking Pools')
        , ('\xec70e3c8afe212039c3f6a2df1c798003bf7cfe9'::bytea, 'Bitcoin Suisse', 'Staking Pools')
        , ('\x3837eA2279b8E5c260A78F5F4181B783BbE76a8B'::bytea, 'Bitcoin Suisse', 'Staking Pools')
        , ('\x2a7077399b3e90f5392d55a1dc7046ad8d152348'::bytea, 'Bitcoin Suisse', 'Staking Pools')
        , ('\xc2288b408dc872a1546f13e6ebfa9c94998316a2'::bytea, 'Bitcoin Suisse', 'Staking Pools')
        , ('\xf2be95116845252a28bd43661651917dc183dab1'::bytea, 'Figment', 'Staking Pools')
        , ('\x37ab162ab59e106d6072eb7a7bd4c4c2973455a7'::bytea, 'Figment', 'Staking Pools')
        , ('\xc874b064f465bdd6411d45734b56fac750cda29a'::bytea, 'Stakewise', 'Liquid Staking')
        , ('\x84db6ee82b7cf3b47e8f19270abde5718b936670'::bytea, 'Stkr (Ankr)', 'Liquid Staking')
        , ('\x194bd70b59491ce1310ea0bceabdb6c23ac9d5b2'::bytea, 'Huobi', 'CEX')
        , ('\xb73f4d4e99f65ec4b16b684e44f81aeca5ba2b7c'::bytea, 'Huobi', 'CEX')
        , ('\xbf1556a7d625654e3d64d1f0466a60a697fac178'::bytea, 'InfStones', 'Staking Pools')
        , ('\xbca3b7b87dcb15f0efa66136bc0e4684a3e5da4d'::bytea, 'SharedStake', 'Liquid Staking')
        , ('\xeadcba8bf9aca93f627f31fb05470f5a0686ceca'::bytea, 'StakeWise Solos', 'Staking Pools')
        , ('0xfa5f9eaa65ffb2a75de092eb7f3fc84fc86b5b18'::bytea, 'Abyss Finance', 'Staking Pools')
        , ('\x66827bcd635f2bb1779d68c46aeb16541bca6ba8'::bytea, 'PieDAO', 'Staking Pools')
        , ('\xd6216fc19db775df9774a6e33526131da7d19a2c'::bytea, 'KuCoin', 'CEX')
        , ('\x1692e170361cefd1eb7240ec13d048fd9af6d667'::bytea, 'KuCoin', 'CEX')
        , ('\x7b915c27a0Ed48E2Ce726Ee40F20B2bF8a88a1b3'::bytea, 'KuCoin', 'CEX')
        , ('\xcbc1065255cbc3ab41a6868c22d1f1c573ab89fd'::bytea, 'CREAM', 'Liquid Staking')
        , ('\x808e7133C700cF3a66E6A25AAdB1fBEF6be468b4'::bytea, 'Bitstamp', 'CEX')
        , ('\x12ec5befa9166fa327d4c345a93f0ac99dd2a7d8'::bytea, 'Blox Staking', 'Staking Pools')
        , ('\x24B2F1AECED4B34133152Bb20cFd6a206A0EA33C'::bytea, 'staked.finance', 'Liquid Staking')
        , ('\x0CA7b4b87fEB2c0BDa9CB37B6cd0de22B816Cd04'::bytea, 'MyColdWallet', 'Others')
        , ('\x1270a0aad453a315c5ab99397d88121c34453eb4'::bytea, 'TideBit', 'Others')
        , ('\x0038598EcB3B308EBc6c6e2c635BaCaA3c5298a3'::bytea, 'Poloniex', 'CEX')
        , ('\xD39aEeb73983e5fbc52B77A3957a48c1EeAC8eD7'::bytea, 'MintDice.com', 'Others')
        , ('\x7ebf05749faf7eb78eff153e40c15890bb4578a4'::bytea, 'neukind.com', 'Staking Pools')
        , ('\xa54be2edaa143e969a63fc744bbd2d511b50cbc3'::bytea, 'neukind.com', 'Staking Pools')
        , ('\xac29ef7a7f4325ffa564de9abf67e5ace46c88f8'::bytea, 'neukind.com', 'Staking Pools')
        , ('\xc3003f8b89f35a7bf3cb3a6ec3d8e4c3c8ce7cce'::bytea, 'neukind.com', 'Staking Pools')
        , ('\x06521aF7183a4A61D067016fC3bC0500DA1567c1'::bytea, 'ptxptx', 'Others')
        , ('\x8E1D8B147cC4C939a597dC501C47cC8B4ab26BD5'::bytea, 'Tetranode', 'Whales')
        , ('\x1db3439a222c519ab44bb1144fc28167b4fa6ee6'::bytea, 'Vitalik Buterin', 'Whales')
        , ('\x49df3cca2670eb0d591146b16359fe336e476f29'::bytea, 'stereum.net', 'Others')
        , ('\x62dfeb55fcbdcb921446168eecfd1406379a1ee1'::bytea, 'stereum.net', 'Others')
        , ('\x2bE0282532AD9FA7cc4C45aeAA1707d2E93357C2'::bytea, 'Blockdaemon.com', 'Others')
        , ('\x5e59aaB1F114234F003008300C3D7593c6cEEa26'::bytea, 'boxfish.studio', 'Others')
        , ('\xd1933DF1c223ad7CB5716B066cA26BC24569e622'::bytea, 'Ethereum on ARM', 'Others')
        , ('\x5a0036bcab4501e70f086c634e2958a8beae3a11'::bytea, 'OKX', 'CEX')
        , ('\x607ebC82329D0CAc3027B83d15e4b4E816F131b7'::bytea, 'StakeHound', 'Liquid Staking')
        , ('\xc236c3ec83351b07f148afbadc252cce2c07972e'::bytea, 'Bitfinex', 'CEX')
        , ('\xe733455faddf4999176e99a0ec084e978f5552ed'::bytea, 'Bitfinex', 'CEX')
        , ('\x4c2f150fc90fed3d8281114c2349f1906cde5346'::bytea, 'Gemini', 'CEX')
        , ('\xbb84d966c09264ce9a2104a4a20bb378369986db'::bytea, 'WEX Exchange', 'CEX')
        --, ('\'::bytea, '', '')
        --, ('\', '')
        ) 
        x (address, name, category)
        UNION
        SELECT coinbase.address
        , 'Coinbase' AS name
        , 'CEX' AS category
        FROM (
            SELECT distinct et.""from"" AS address
            , MIN(et.block_time) AS block_time
            FROM ethereum.traces et
            INNER JOIN ethereum.traces et2 ON et2.""from""=et.""from"" AND et2.value > 0 AND et2.""to""='\xA090e606E30bD747d4E6245a1517EbE430F0057e'
            WHERE et.""to""='\x00000000219ab540356cBB839Cbe05303d7705Fa'
            AND et.success
            AND et.value > 0
            GROUP BY et.""from""
            ) coinbase
        GROUP BY coinbase.address
        UNION
        SELECT binance.address
        , 'Binance' AS name
        , 'CEX' AS category
        FROM (
            SELECT '\xF17ACEd3c7A8DAA29ebb90Db8D1b6efD8C364a18'::bytea AS address
            UNION
            SELECT '\x2f47a1c2db4a3b78cda44eade915c3b19107ddcc'::bytea AS address
            UNION
            SELECT distinct ""to"" AS address
            FROM ethereum.transactions
            WHERE ""from""='\xF17ACEd3c7A8DAA29ebb90Db8D1b6efD8C364a18'
            AND ""to"" !='\x00000000219ab540356cbb839cbe05303d7705fa'
            GROUP BY ""to""
        ) binance
        LEFT JOIN ethereum.traces t ON binance.address::bytea=t.""from"" AND t.""to""='\x00000000219ab540356cbb839cbe05303d7705fa'
        GROUP BY binance.address
    )

, through_staking_protocol AS (
    SELECT traces.""from"" AS address
    , 'RocketPool' AS protocol
    FROM ethereum.transactions txs
    RIGHT JOIN ethereum.traces traces ON txs.hash=traces.tx_hash AND traces.to='\x00000000219ab540356cbb839cbe05303d7705fa'
    WHERE txs.""to"" IN ('\xdcd51fc5cd918e0461b9b7fb75967fdfd10dae2f', '\x1cc9cf5586522c6f483e84a19c3c2b0b6d027bf0')
    )

, all_stakers_data AS (
    SELECT et.""from""::text AS address
    , sn.name AS project_name_known
    , llp.name AS project_name
    , lle.name AS ens_name
    , SUM(value)/1e18 AS deposited_eth
    , MIN(block_time) AS first_deposit
    , MAX(block_time) AS last_deposit
    , tsp.protocol AS liquid_staking_protocol
    FROM ethereum.traces et
    LEFT JOIN staker_names sn ON et.""from""=sn.address
    LEFT JOIN labels.labels llp ON et.""from""=llp.address AND llp.""type""='project' AND llp.name<>'gnosis_safe'
    LEFT JOIN labels.labels lle ON et.""from""=lle.address AND lle.""type""='ens name reverse'
    LEFT JOIN through_staking_protocol tsp ON et.""from""=tsp.address
    WHERE ""to"" = '\x00000000219ab540356cBB839Cbe05303d7705Fa'
    AND success
    AND value > 0
    GROUP BY et.""from"", project_name_known, project_name, ens_name, tsp.protocol
    )

SELECT * FROM (
    SELECT CASE WHEN (MAX(project_name_known) IS NULL AND MAX(liquid_staking_protocol) IS NULL AND MAX(project_name) IS NULL) THEN NULL
        ELSE ROW_NUMBER() OVER (ORDER BY SUM(deposited_eth) DESC) END AS ranking
    , COALESCE(project_name_known, liquid_staking_protocol, project_name) AS depositor
    , SUM(deposited_eth) AS deposited_eth
    , SUM(deposited_eth)/32 AS validators
    , SUM(deposited_eth)/(SELECT SUM(deposited_eth) FROM all_stakers_data) AS marketshare
    , to_char(MIN(first_deposit), 'YYYY-MM-DD') AS first_deposit
    , to_char(MAX(last_deposit), 'YYYY-MM-DD') AS last_deposit
    FROM all_stakers_data
    WHERE project_name_known IS NOT NULL OR liquid_staking_protocol IS NOT NULL OR project_name IS NOT NULL
    GROUP BY depositor
    UNION
    SELECT NULL ranking
    , 'Others' AS depositor
    , SUM(deposited_eth) AS deposited_eth
    , SUM(deposited_eth)/32 AS validators
    , SUM(deposited_eth)/(SELECT SUM(deposited_eth) FROM all_stakers_data) AS marketshare
    , to_char(MIN(first_deposit), 'YYYY-MM-DD') AS first_deposit
    , to_char(MAX(last_deposit), 'YYYY-MM-DD') AS last_deposit
    FROM all_stakers_data
    WHERE project_name_known IS NULL AND liquid_staking_protocol IS NULL AND project_name IS NULL
    GROUP BY depositor
    ) t
ORDER BY ranking"
1262774,CEXs Staking Depositors,By Entity,"[{""id"": 2164126, ""type"": ""table"", ""name"": """", ""options"": {""columns"": [{""name"": ""deposited_eth"", ""title"": ""ETH Deposited"", ""numberFormat"": ""###,###""}, {""name"": ""staker"", ""title"": ""Staker""}, {""name"": ""last_deposit"", ""title"": ""Last Deposit"", ""numberFormat"": """"}, {""name"": ""first_deposit"", ""title"": ""First Deposit""}, {""name"": ""marketshare"", ""title"": ""Marketshare"", ""numberFormat"": ""###.[##]%""}, {""name"": ""depositor"", ""title"": ""Depositor""}, {""name"": ""entity"", ""title"": ""Entity""}]}, ""created_at"": ""2022-09-12T16:52:00.861823+00:00"", ""__typename"": ""visualizations""}, {""id"": 2164127, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""###,###"", ""columnMapping"": {""entity"": ""x"", ""category"": ""x"", ""depositor"": ""x"", ""deposited_eth"": ""y""}, ""seriesOptions"": {""deposited_eth"": {""name"": ""Deposited ETH"", ""type"": ""pie"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2022-09-12T16:52:00.861823+00:00"", ""__typename"": ""visualizations""}]","WITH staker_names AS (SELECT *
    FROM (
        values ('\xae7ab96520de3a18e5e111b5eaab095312d7fe84'::bytea, 'Lido', 'Liquid Staking')
        , ('\x39dc6a99209b5e6b81dc8540c86ff10981ebda29'::bytea, 'Staked.us', 'Staking Pools')
        , ('\x0194512e77d798e4871973d9cb9d7ddfc0ffd801'::bytea, 'stakefish', 'Staking Pools')
        , ('\xd4039ecc40aeda0582036437cf3ec02845da4c13'::bytea, 'Kraken', 'CEXs')
        , ('\xa40dfee99e1c85dc97fdc594b16a460717838703'::bytea, 'Kraken', 'CEXs')
        , ('\x622de9bb9ff8907414785a633097db438f9a2d86'::bytea, 'Bitcoin Suisse', 'Staking Pools')
        , ('\xdd9663bd979f1ab1bada85e1bc7d7f13cafe71f8'::bytea, 'Bitcoin Suisse', 'Staking Pools')
        , ('\xec70e3c8afe212039c3f6a2df1c798003bf7cfe9'::bytea, 'Bitcoin Suisse', 'Staking Pools')
        , ('\x3837eA2279b8E5c260A78F5F4181B783BbE76a8B'::bytea, 'Bitcoin Suisse', 'Staking Pools')
        , ('\x2a7077399b3e90f5392d55a1dc7046ad8d152348'::bytea, 'Bitcoin Suisse', 'Staking Pools')
        , ('\xc2288b408dc872a1546f13e6ebfa9c94998316a2'::bytea, 'Bitcoin Suisse', 'Staking Pools')
        , ('\xf2be95116845252a28bd43661651917dc183dab1'::bytea, 'Figment', 'Staking Pools')
        , ('\x37ab162ab59e106d6072eb7a7bd4c4c2973455a7'::bytea, 'Figment', 'Staking Pools')
        , ('\xc874b064f465bdd6411d45734b56fac750cda29a'::bytea, 'Stakewise', 'Liquid Staking')
        , ('\x84db6ee82b7cf3b47e8f19270abde5718b936670'::bytea, 'Stkr (Ankr)', 'Liquid Staking')
        , ('\x194bd70b59491ce1310ea0bceabdb6c23ac9d5b2'::bytea, 'Huobi', 'CEXs')
        , ('\xb73f4d4e99f65ec4b16b684e44f81aeca5ba2b7c'::bytea, 'Huobi', 'CEXs')
        , ('\xbf1556a7d625654e3d64d1f0466a60a697fac178'::bytea, 'InfStones', 'Staking Pools')
        , ('\xbca3b7b87dcb15f0efa66136bc0e4684a3e5da4d'::bytea, 'SharedStake', 'Liquid Staking')
        , ('\xeadcba8bf9aca93f627f31fb05470f5a0686ceca'::bytea, 'StakeWise Solos', 'Staking Pools')
        , ('0xfa5f9eaa65ffb2a75de092eb7f3fc84fc86b5b18'::bytea, 'Abyss Finance', 'Staking Pools')
        , ('\x66827bcd635f2bb1779d68c46aeb16541bca6ba8'::bytea, 'PieDAO', 'Staking Pools')
        , ('\xd6216fc19db775df9774a6e33526131da7d19a2c'::bytea, 'KuCoin', 'CEXs')
        , ('\x1692e170361cefd1eb7240ec13d048fd9af6d667'::bytea, 'KuCoin', 'CEXs')
        , ('\x7b915c27a0Ed48E2Ce726Ee40F20B2bF8a88a1b3'::bytea, 'KuCoin', 'CEXs')
        , ('\xcbc1065255cbc3ab41a6868c22d1f1c573ab89fd'::bytea, 'CREAM', 'Liquid Staking')
        , ('\x808e7133C700cF3a66E6A25AAdB1fBEF6be468b4'::bytea, 'Bitstamp', 'CEXs')
        , ('\x12ec5befa9166fa327d4c345a93f0ac99dd2a7d8'::bytea, 'Blox Staking', 'Staking Pools')
        , ('\x24B2F1AECED4B34133152Bb20cFd6a206A0EA33C'::bytea, 'staked.finance', 'Liquid Staking')
        , ('\x0CA7b4b87fEB2c0BDa9CB37B6cd0de22B816Cd04'::bytea, 'MyColdWallet', 'Others')
        , ('\x1270a0aad453a315c5ab99397d88121c34453eb4'::bytea, 'TideBit', 'Others')
        , ('\x0038598EcB3B308EBc6c6e2c635BaCaA3c5298a3'::bytea, 'Poloniex', 'CEXs')
        , ('\xD39aEeb73983e5fbc52B77A3957a48c1EeAC8eD7'::bytea, 'MintDice.com', 'Others')
        , ('\x7ebf05749faf7eb78eff153e40c15890bb4578a4'::bytea, 'neukind.com', 'Staking Pools')
        , ('\xa54be2edaa143e969a63fc744bbd2d511b50cbc3'::bytea, 'neukind.com', 'Staking Pools')
        , ('\xac29ef7a7f4325ffa564de9abf67e5ace46c88f8'::bytea, 'neukind.com', 'Staking Pools')
        , ('\xc3003f8b89f35a7bf3cb3a6ec3d8e4c3c8ce7cce'::bytea, 'neukind.com', 'Staking Pools')
        , ('\x06521aF7183a4A61D067016fC3bC0500DA1567c1'::bytea, 'ptxptx', 'Others')
        , ('\x8E1D8B147cC4C939a597dC501C47cC8B4ab26BD5'::bytea, 'Tetranode', 'Whales')
        , ('\x1db3439a222c519ab44bb1144fc28167b4fa6ee6'::bytea, 'Vitalik Buterin', 'Whales')
        , ('\x49df3cca2670eb0d591146b16359fe336e476f29'::bytea, 'stereum.net', 'Others')
        , ('\x62dfeb55fcbdcb921446168eecfd1406379a1ee1'::bytea, 'stereum.net', 'Others')
        , ('\x2bE0282532AD9FA7cc4C45aeAA1707d2E93357C2'::bytea, 'Blockdaemon.com', 'Others')
        , ('\x5e59aaB1F114234F003008300C3D7593c6cEEa26'::bytea, 'boxfish.studio', 'Others')
        , ('\xd1933DF1c223ad7CB5716B066cA26BC24569e622'::bytea, 'Ethereum on ARM', 'Others')
        , ('\x5a0036bcab4501e70f086c634e2958a8beae3a11'::bytea, 'OKX', 'CEXs')
        , ('\x607ebC82329D0CAc3027B83d15e4b4E816F131b7'::bytea, 'StakeHound', 'Liquid Staking')
        , ('\xc236c3ec83351b07f148afbadc252cce2c07972e'::bytea, 'Bitfinex', 'CEXs')
        , ('\xe733455faddf4999176e99a0ec084e978f5552ed'::bytea, 'Bitfinex', 'CEXs')
        , ('\x4c2f150fc90fed3d8281114c2349f1906cde5346'::bytea, 'Gemini', 'CEXs')
        , ('\xbb84d966c09264ce9a2104a4a20bb378369986db'::bytea, 'WEX Exchange', 'CEXs')
        --, ('\'::bytea, '', '')
        ) 
        x (address, name, category)
        UNION
        SELECT coinbase.address
        , 'Coinbase' AS name
        , 'CEXs' AS category
        FROM (
            SELECT distinct et.""from"" AS address
            FROM ethereum.traces et
            INNER JOIN ethereum.traces et2 ON et2.""from""=et.""from"" AND et2.value > 0 AND et2.""to""='\xA090e606E30bD747d4E6245a1517EbE430F0057e'
            WHERE et.""to""='\x00000000219ab540356cBB839Cbe05303d7705Fa'
            AND et.success
            AND et.value > 0
            GROUP BY et.""from""
            ) coinbase
        GROUP BY coinbase.address
        UNION
        SELECT binance.address
        , 'Binance' AS name
        , 'CEXs' AS category
        FROM (
            SELECT '\xF17ACEd3c7A8DAA29ebb90Db8D1b6efD8C364a18'::bytea AS address
            UNION
            SELECT '\x2f47a1c2db4a3b78cda44eade915c3b19107ddcc'::bytea AS address
            UNION
            SELECT distinct ""to"" AS address
            FROM ethereum.transactions
            WHERE ""from""='\xF17ACEd3c7A8DAA29ebb90Db8D1b6efD8C364a18'
            AND ""to"" !='\x00000000219ab540356cbb839cbe05303d7705fa'
            GROUP BY ""to""
        ) binance
        GROUP BY binance.address
    )

, through_staking_protocol AS (
    SELECT traces.""from"" AS address
    , 'Rocket Pool' AS protocol
    , 'Others' AS category
    FROM ethereum.transactions txs
    RIGHT JOIN ethereum.traces traces ON txs.hash=traces.tx_hash AND traces.to='\x00000000219ab540356cbb839cbe05303d7705fa'
    WHERE txs.""to"" IN ('\xdcd51fc5cd918e0461b9b7fb75967fdfd10dae2f', '\x1cc9cf5586522c6f483e84a19c3c2b0b6d027bf0')
    )

, all_stakers_data AS (
    SELECT et.""from""::text AS address
    , sn.name AS project_name_known
    , llp.name AS project_name
    , lle.name AS ens_name
    , CASE WHEN SUM(value)/1e18 > 320 THEN COALESCE(sn.category, tsp.category, 'Whales')
        ELSE COALESCE(sn.category, tsp.category, 'Others')
        END AS category
    , SUM(value)/1e18 AS deposited_eth
    , MAX(block_time) AS last_deposit
    , tsp.protocol AS liquid_staking_protocol
    FROM ethereum.traces et
    LEFT JOIN staker_names sn ON et.""from""=sn.address
    LEFT JOIN labels.labels llp ON et.""from""=llp.address AND llp.""type""='project'
    LEFT JOIN labels.labels lle ON et.""from""=lle.address AND lle.""type""='ens name reverse'
    LEFT JOIN through_staking_protocol tsp ON et.""from""=tsp.address
    WHERE ""to"" = '\x00000000219ab540356cBB839Cbe05303d7705Fa'
    AND success
    AND value > 0
    GROUP BY et.""from"", project_name_known, project_name, ens_name, tsp.protocol, sn.category, tsp.category
    )

SELECT COALESCE(project_name_known, project_name) AS entity
, SUM(deposited_eth) AS deposited_eth
, SUM(deposited_eth)/(SELECT SUM(deposited_eth) FROM all_stakers_data WHERE category='CEXs') AS marketshare
--, to_char(MAX(last_deposit), 'DDth"" of ""FMMon"" ""YYYY') AS last_deposit
FROM all_stakers_data
WHERE category='CEXs'
GROUP BY COALESCE(project_name_known, project_name)
ORDER BY SUM(deposited_eth) DESC"
991628,Beacon Chain Depositors Over Time,By Entity,"[{""id"": 2277799, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack"", ""percentValues"": false}, ""reverseX"": false, ""columnMapping"": {""date"": ""x"", ""depositor"": ""series"", ""marketshare"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""area""}, ""created_at"": ""2022-09-30T15:50:07.491089+00:00"", ""__typename"": ""visualizations""}, {""id"": 1717067, ""type"": ""table"", ""name"": """", ""options"": {""columns"": [{""name"": ""deposited_eth"", ""title"": ""ETH Deposited"", ""numberFormat"": ""###,###""}, {""name"": ""staker"", ""title"": ""Staker""}, {""name"": ""last_deposit"", ""title"": ""Last Deposit"", ""numberFormat"": """"}, {""name"": ""first_deposit"", ""title"": ""First Deposit""}, {""name"": ""marketshare"", ""title"": ""Marketshare"", ""numberFormat"": ""###.[##]%""}, {""name"": ""depositor"", ""title"": ""Depositor""}]}, ""created_at"": ""2022-07-02T19:23:08.383104+00:00"", ""__typename"": ""visualizations""}, {""id"": 1717071, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack"", ""percentValues"": false}, ""reverseX"": false, ""numberFormat"": ""###,###"", ""columnMapping"": {""date"": ""x"", ""depositor"": ""series"", ""deposited_eth"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""area""}, ""created_at"": ""2022-07-02T19:26:14.085237+00:00"", ""__typename"": ""visualizations""}, {""id"": 1717104, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack"", ""percentValues"": true}, ""reverseX"": false, ""columnMapping"": {""date"": ""x"", ""depositor"": ""series"", ""deposited_eth"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""area""}, ""created_at"": ""2022-07-02T19:42:24.193654+00:00"", ""__typename"": ""visualizations""}]","WITH staker_names AS (SELECT *
    FROM (
        values ('\xae7ab96520de3a18e5e111b5eaab095312d7fe84'::bytea, 'Lido', 'Liquid Staking')
        , ('\x39dc6a99209b5e6b81dc8540c86ff10981ebda29'::bytea, 'Staked.us', 'Staking Pools')
        , ('\x0194512e77d798e4871973d9cb9d7ddfc0ffd801'::bytea, 'stakefish', 'Staking Pools')
        , ('\xd4039ecc40aeda0582036437cf3ec02845da4c13'::bytea, 'Kraken', 'CEX')
        , ('\xa40dfee99e1c85dc97fdc594b16a460717838703'::bytea, 'Kraken', 'CEX')
        , ('\x622de9bb9ff8907414785a633097db438f9a2d86'::bytea, 'Bitcoin Suisse', 'Staking Pools')
        , ('\xdd9663bd979f1ab1bada85e1bc7d7f13cafe71f8'::bytea, 'Bitcoin Suisse', 'Staking Pools')
        , ('\xec70e3c8afe212039c3f6a2df1c798003bf7cfe9'::bytea, 'Bitcoin Suisse', 'Staking Pools')
        , ('\x3837eA2279b8E5c260A78F5F4181B783BbE76a8B'::bytea, 'Bitcoin Suisse', 'Staking Pools')
        , ('\x2a7077399b3e90f5392d55a1dc7046ad8d152348'::bytea, 'Bitcoin Suisse', 'Staking Pools')
        , ('\xc2288b408dc872a1546f13e6ebfa9c94998316a2'::bytea, 'Bitcoin Suisse', 'Staking Pools')
        , ('\xf2be95116845252a28bd43661651917dc183dab1'::bytea, 'Figment', 'Staking Pools')
        , ('\x37ab162ab59e106d6072eb7a7bd4c4c2973455a7'::bytea, 'Figment', 'Staking Pools')
        , ('\xc874b064f465bdd6411d45734b56fac750cda29a'::bytea, 'Stakewise', 'Liquid Staking')
        , ('\x84db6ee82b7cf3b47e8f19270abde5718b936670'::bytea, 'Stkr (Ankr)', 'Liquid Staking')
        , ('\x194bd70b59491ce1310ea0bceabdb6c23ac9d5b2'::bytea, 'Huobi', 'CEX')
        , ('\xb73f4d4e99f65ec4b16b684e44f81aeca5ba2b7c'::bytea, 'Huobi', 'CEX')
        , ('\xbf1556a7d625654e3d64d1f0466a60a697fac178'::bytea, 'InfStones', 'Staking Pools')
        , ('\xbca3b7b87dcb15f0efa66136bc0e4684a3e5da4d'::bytea, 'SharedStake', 'Liquid Staking')
        , ('\xeadcba8bf9aca93f627f31fb05470f5a0686ceca'::bytea, 'StakeWise Solos', 'Staking Pools')
        , ('0xfa5f9eaa65ffb2a75de092eb7f3fc84fc86b5b18'::bytea, 'Abyss Finance', 'Staking Pools')
        , ('\x66827bcd635f2bb1779d68c46aeb16541bca6ba8'::bytea, 'PieDAO', 'Staking Pools')
        , ('\xd6216fc19db775df9774a6e33526131da7d19a2c'::bytea, 'KuCoin', 'CEX')
        , ('\x1692e170361cefd1eb7240ec13d048fd9af6d667'::bytea, 'KuCoin', 'CEX')
        , ('\x7b915c27a0Ed48E2Ce726Ee40F20B2bF8a88a1b3'::bytea, 'KuCoin', 'CEX')
        , ('\xcbc1065255cbc3ab41a6868c22d1f1c573ab89fd'::bytea, 'CREAM', 'Liquid Staking')
        , ('\x808e7133C700cF3a66E6A25AAdB1fBEF6be468b4'::bytea, 'Bitstamp', 'CEX')
        , ('\x12ec5befa9166fa327d4c345a93f0ac99dd2a7d8'::bytea, 'Blox Staking', 'Staking Pools')
        , ('\x24B2F1AECED4B34133152Bb20cFd6a206A0EA33C'::bytea, 'staked.finance', 'Liquid Staking')
        --, ('\x0CA7b4b87fEB2c0BDa9CB37B6cd0de22B816Cd04'::bytea, 'MyColdWallet', 'Others')
        --, ('\x1270a0aad453a315c5ab99397d88121c34453eb4'::bytea, 'TideBit', 'Others')
        , ('\x0038598EcB3B308EBc6c6e2c635BaCaA3c5298a3'::bytea, 'Poloniex', 'CEX')
        , ('\xD39aEeb73983e5fbc52B77A3957a48c1EeAC8eD7'::bytea, 'MintDice.com', 'Others')
        , ('\x7ebf05749faf7eb78eff153e40c15890bb4578a4'::bytea, 'neukind.com', 'Staking Pools')
        , ('\xa54be2edaa143e969a63fc744bbd2d511b50cbc3'::bytea, 'neukind.com', 'Staking Pools')
        , ('\xac29ef7a7f4325ffa564de9abf67e5ace46c88f8'::bytea, 'neukind.com', 'Staking Pools')
        , ('\xc3003f8b89f35a7bf3cb3a6ec3d8e4c3c8ce7cce'::bytea, 'neukind.com', 'Staking Pools')
        --, ('\x06521aF7183a4A61D067016fC3bC0500DA1567c1'::bytea, 'ptxptx', 'Others')
        --, ('\x8E1D8B147cC4C939a597dC501C47cC8B4ab26BD5'::bytea, 'Tetranode', 'Whale')
        , ('\x1db3439a222c519ab44bb1144fc28167b4fa6ee6'::bytea, 'Vitalik Buterin', 'Whale')
        --, ('\x49df3cca2670eb0d591146b16359fe336e476f29'::bytea, 'stereum.net', 'Others')
        --, ('\x62dfeb55fcbdcb921446168eecfd1406379a1ee1'::bytea, 'stereum.net', 'Others')
        --, ('\x2bE0282532AD9FA7cc4C45aeAA1707d2E93357C2'::bytea, 'Blockdaemon.com', 'Others')
        --, ('\x5e59aaB1F114234F003008300C3D7593c6cEEa26'::bytea, 'boxfish.studio', 'Others')
        --, ('\xd1933DF1c223ad7CB5716B066cA26BC24569e622'::bytea, 'Ethereum on ARM', 'Others')
        , ('\x5a0036bcab4501e70f086c634e2958a8beae3a11'::bytea, 'OKX', 'CEX')
        , ('\x607ebC82329D0CAc3027B83d15e4b4E816F131b7'::bytea, 'StakeHound', 'Liquid Staking')
        , ('\xc236c3ec83351b07f148afbadc252cce2c07972e'::bytea, 'Bitfinex', 'CEX')
        , ('\xe733455faddf4999176e99a0ec084e978f5552ed'::bytea, 'Bitfinex', 'CEX')
        , ('\x4c2f150fc90fed3d8281114c2349f1906cde5346'::bytea, 'Gemini', 'CEX')
        , ('\xbb84d966c09264ce9a2104a4a20bb378369986db'::bytea, 'WEX Exchange', 'CEX')
        --, ('\'::bytea, '', '')
        ) 
        x (address, name, category)
        UNION
        SELECT coinbase.address
        , 'Coinbase' AS name
        , 'CEX' AS category
        FROM (
            SELECT distinct et.""from"" AS address
            FROM ethereum.traces et
            INNER JOIN ethereum.traces et2 ON et2.""from""=et.""from"" AND et2.value > 0 AND et2.""to""='\xA090e606E30bD747d4E6245a1517EbE430F0057e'
            WHERE et.""to""='\x00000000219ab540356cBB839Cbe05303d7705Fa'
            AND et.success
            AND et.value > 0
            GROUP BY et.""from""
            ) coinbase
        GROUP BY coinbase.address
        UNION
        SELECT binance.address
        , 'Binance' AS name
        , 'CEX' AS category
        FROM (
            SELECT '\xF17ACEd3c7A8DAA29ebb90Db8D1b6efD8C364a18'::bytea AS address
            UNION
            SELECT '\x2f47a1c2db4a3b78cda44eade915c3b19107ddcc'::bytea AS address
            UNION
            SELECT distinct ""to"" AS address
            FROM ethereum.transactions
            WHERE ""from""='\xF17ACEd3c7A8DAA29ebb90Db8D1b6efD8C364a18'
            AND ""to"" !='\x00000000219ab540356cbb839cbe05303d7705fa'
            GROUP BY ""to""
        ) binance
        GROUP BY binance.address
    )

, through_staking_protocol AS (
    SELECT traces.""from"" AS address
    , 'Rocket Pool' AS protocol
    , 'Others' AS category
    FROM ethereum.transactions txs
    RIGHT JOIN ethereum.traces traces ON txs.hash=traces.tx_hash AND traces.to='\x00000000219ab540356cbb839cbe05303d7705fa'
    WHERE txs.""to"" IN ('\xdcd51fc5cd918e0461b9b7fb75967fdfd10dae2f', '\x1cc9cf5586522c6f483e84a19c3c2b0b6d027bf0')
    )

, all_stakers_data AS (
    SELECT date_trunc('week', et.block_time) AS time
    , COALESCE(sn.name, llp.name, tsp.protocol, 'Others') AS depositor
    , SUM(value)/1e18 AS deposited_eth
    FROM ethereum.traces et
    LEFT JOIN staker_names sn ON et.""from""=sn.address
    LEFT JOIN labels.labels llp ON et.""from""=llp.address AND llp.""type""='project' AND llp.name<>'gnosis_safe' AND llp.name<>'argent' AND llp.name<>'fortube'
    LEFT JOIN labels.labels lle ON et.""from""=lle.address AND lle.""type""='ens name reverse'
    LEFT JOIN through_staking_protocol tsp ON et.""from""=tsp.address
    WHERE ""to"" = '\x00000000219ab540356cBB839Cbe05303d7705Fa'
    AND success
    AND value > 0
    GROUP BY time, depositor
    )

, ranking AS (
    SELECT ROW_NUMBER() OVER (ORDER BY SUM(value) DESC) AS ranking_
    , COALESCE(sn.name, llp.name, tsp.protocol, 'Others') AS depositor
    FROM ethereum.traces et
    LEFT JOIN staker_names sn ON et.""from""=sn.address
    LEFT JOIN labels.labels llp ON et.""from""=llp.address AND llp.""type""='project' AND llp.name<>'gnosis_safe' AND llp.name<>'argent' AND llp.name<>'fortube'
    LEFT JOIN labels.labels lle ON et.""from""=lle.address AND lle.""type""='ens name reverse'
    LEFT JOIN through_staking_protocol tsp ON et.""from""=tsp.address
    WHERE ""to"" = '\x00000000219ab540356cBB839Cbe05303d7705Fa'
    AND success
    AND value > 0
    GROUP BY depositor
    )


, stats AS (
    SELECT gs.date
    , p.depositor
    , SUM(deposited_eth) AS deposited_eth
    , r.ranking_
    FROM generate_series(
        (SELECT MIN(time) FROM all_stakers_data)
        , date_trunc('week', NOW())
        , interval '1 week'
        ) gs(dte)
    CROSS JOIN (SELECT distinct depositor FROM all_stakers_data) p LEFT JOIN LATERAL
        (SELECT SUM(SUM(deposited_eth)) OVER (ORDER BY time) AS deposited_eth
        FROM all_stakers_data t
        WHERE t.time <= gs.date AND
        t.depositor = p.depositor
        GROUP BY t.time
        ORDER BY t.time DESC
        LIMIT 1
        ) t ON 1=1
    LEFT JOIN ranking r ON p.depositor=r.depositor
    GROUP BY gs.date, p.depositor, r.ranking_
    )
    
    SELECT s1.date
    , s1.depositor
    , s1.deposited_eth
    , s1.deposited_eth/SUM(s2.deposited_eth) AS marketshare
    FROM stats s1
    LEFT JOIN stats s2 ON s1.date=s2.date
    GROUP BY s1.date, s1.depositor, s1.deposited_eth, s1.ranking_
    ORDER BY s1.ranking_"
1262800,Liquid Staking Depositors,By Entity,"[{""id"": 2164164, ""type"": ""table"", ""name"": """", ""options"": {""columns"": [{""name"": ""deposited_eth"", ""title"": ""ETH Deposited"", ""numberFormat"": ""###,###""}, {""name"": ""staker"", ""title"": ""Staker""}, {""name"": ""last_deposit"", ""title"": ""Last Deposit"", ""numberFormat"": """"}, {""name"": ""first_deposit"", ""title"": ""First Deposit""}, {""name"": ""marketshare"", ""title"": ""Marketshare"", ""numberFormat"": ""###.[##]%""}, {""name"": ""depositor"", ""title"": ""Depositor""}, {""name"": ""entity"", ""title"": ""Entity""}]}, ""created_at"": ""2022-09-12T17:00:21.365883+00:00"", ""__typename"": ""visualizations""}, {""id"": 2164165, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""###,###"", ""columnMapping"": {""category"": ""x"", ""depositor"": ""x"", ""deposited_eth"": ""y""}, ""seriesOptions"": {""deposited_eth"": {""name"": ""Deposited ETH"", ""type"": ""pie"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2022-09-12T17:00:21.365883+00:00"", ""__typename"": ""visualizations""}]","WITH staker_names AS (SELECT *
    FROM (
        values ('\xae7ab96520de3a18e5e111b5eaab095312d7fe84'::bytea, 'Lido', 'Liquid Staking')
        , ('\x39dc6a99209b5e6b81dc8540c86ff10981ebda29'::bytea, 'Staked.us', 'Staking Pools')
        , ('\x0194512e77d798e4871973d9cb9d7ddfc0ffd801'::bytea, 'stakefish', 'Staking Pools')
        , ('\xd4039ecc40aeda0582036437cf3ec02845da4c13'::bytea, 'Kraken', 'CEXs')
        , ('\xa40dfee99e1c85dc97fdc594b16a460717838703'::bytea, 'Kraken', 'CEXs')
        , ('\x622de9bb9ff8907414785a633097db438f9a2d86'::bytea, 'Bitcoin Suisse', 'Staking Pools')
        , ('\xdd9663bd979f1ab1bada85e1bc7d7f13cafe71f8'::bytea, 'Bitcoin Suisse', 'Staking Pools')
        , ('\xec70e3c8afe212039c3f6a2df1c798003bf7cfe9'::bytea, 'Bitcoin Suisse', 'Staking Pools')
        , ('\x3837eA2279b8E5c260A78F5F4181B783BbE76a8B'::bytea, 'Bitcoin Suisse', 'Staking Pools')
        , ('\x2a7077399b3e90f5392d55a1dc7046ad8d152348'::bytea, 'Bitcoin Suisse', 'Staking Pools')
        , ('\xc2288b408dc872a1546f13e6ebfa9c94998316a2'::bytea, 'Bitcoin Suisse', 'Staking Pools')
        , ('\xf2be95116845252a28bd43661651917dc183dab1'::bytea, 'Figment', 'Staking Pools')
        , ('\x37ab162ab59e106d6072eb7a7bd4c4c2973455a7'::bytea, 'Figment', 'Staking Pools')
        , ('\xc874b064f465bdd6411d45734b56fac750cda29a'::bytea, 'Stakewise', 'Liquid Staking')
        , ('\x84db6ee82b7cf3b47e8f19270abde5718b936670'::bytea, 'Stkr (Ankr)', 'Liquid Staking')
        , ('\x194bd70b59491ce1310ea0bceabdb6c23ac9d5b2'::bytea, 'Huobi', 'CEXs')
        , ('\xb73f4d4e99f65ec4b16b684e44f81aeca5ba2b7c'::bytea, 'Huobi', 'CEXs')
        , ('\xbf1556a7d625654e3d64d1f0466a60a697fac178'::bytea, 'InfStones', 'Staking Pools')
        , ('\xbca3b7b87dcb15f0efa66136bc0e4684a3e5da4d'::bytea, 'SharedStake', 'Liquid Staking')
        , ('\xeadcba8bf9aca93f627f31fb05470f5a0686ceca'::bytea, 'StakeWise Solos', 'Staking Pools')
        , ('0xfa5f9eaa65ffb2a75de092eb7f3fc84fc86b5b18'::bytea, 'Abyss Finance', 'Staking Pools')
        , ('\x66827bcd635f2bb1779d68c46aeb16541bca6ba8'::bytea, 'PieDAO', 'Staking Pools')
        , ('\xd6216fc19db775df9774a6e33526131da7d19a2c'::bytea, 'KuCoin', 'CEXs')
        , ('\x1692e170361cefd1eb7240ec13d048fd9af6d667'::bytea, 'KuCoin', 'CEXs')
        , ('\x7b915c27a0Ed48E2Ce726Ee40F20B2bF8a88a1b3'::bytea, 'KuCoin', 'CEXs')
        , ('\xcbc1065255cbc3ab41a6868c22d1f1c573ab89fd'::bytea, 'CREAM', 'Liquid Staking')
        , ('\x808e7133C700cF3a66E6A25AAdB1fBEF6be468b4'::bytea, 'Bitstamp', 'CEXs')
        , ('\x12ec5befa9166fa327d4c345a93f0ac99dd2a7d8'::bytea, 'Blox Staking', 'Staking Pools')
        , ('\x24B2F1AECED4B34133152Bb20cFd6a206A0EA33C'::bytea, 'staked.finance', 'Liquid Staking')
        , ('\x0CA7b4b87fEB2c0BDa9CB37B6cd0de22B816Cd04'::bytea, 'MyColdWallet', 'Others')
        , ('\x1270a0aad453a315c5ab99397d88121c34453eb4'::bytea, 'TideBit', 'Others')
        , ('\x0038598EcB3B308EBc6c6e2c635BaCaA3c5298a3'::bytea, 'Poloniex', 'CEXs')
        , ('\xD39aEeb73983e5fbc52B77A3957a48c1EeAC8eD7'::bytea, 'MintDice.com', 'Others')
        , ('\x7ebf05749faf7eb78eff153e40c15890bb4578a4'::bytea, 'neukind.com', 'Staking Pools')
        , ('\xa54be2edaa143e969a63fc744bbd2d511b50cbc3'::bytea, 'neukind.com', 'Staking Pools')
        , ('\xac29ef7a7f4325ffa564de9abf67e5ace46c88f8'::bytea, 'neukind.com', 'Staking Pools')
        , ('\xc3003f8b89f35a7bf3cb3a6ec3d8e4c3c8ce7cce'::bytea, 'neukind.com', 'Staking Pools')
        , ('\x06521aF7183a4A61D067016fC3bC0500DA1567c1'::bytea, 'ptxptx', 'Others')
        , ('\x8E1D8B147cC4C939a597dC501C47cC8B4ab26BD5'::bytea, 'Tetranode', 'Whales')
        , ('\x1db3439a222c519ab44bb1144fc28167b4fa6ee6'::bytea, 'Vitalik Buterin', 'Whales')
        , ('\x49df3cca2670eb0d591146b16359fe336e476f29'::bytea, 'stereum.net', 'Others')
        , ('\x62dfeb55fcbdcb921446168eecfd1406379a1ee1'::bytea, 'stereum.net', 'Others')
        , ('\x2bE0282532AD9FA7cc4C45aeAA1707d2E93357C2'::bytea, 'Blockdaemon.com', 'Others')
        , ('\x5e59aaB1F114234F003008300C3D7593c6cEEa26'::bytea, 'boxfish.studio', 'Others')
        , ('\xd1933DF1c223ad7CB5716B066cA26BC24569e622'::bytea, 'Ethereum on ARM', 'Others')
        , ('\x5a0036bcab4501e70f086c634e2958a8beae3a11'::bytea, 'OKX', 'CEXs')
        , ('\x607ebC82329D0CAc3027B83d15e4b4E816F131b7'::bytea, 'StakeHound', 'Liquid Staking')
        , ('\xc236c3ec83351b07f148afbadc252cce2c07972e'::bytea, 'Bitfinex', 'CEXs')
        , ('\xe733455faddf4999176e99a0ec084e978f5552ed'::bytea, 'Bitfinex', 'CEXs')
        , ('\x4c2f150fc90fed3d8281114c2349f1906cde5346'::bytea, 'Gemini', 'CEXs')
        , ('\xbb84d966c09264ce9a2104a4a20bb378369986db'::bytea, 'WEX Exchange', 'CEXs')
        --, ('\'::bytea, '', '')
        ) 
        x (address, name, category)
        UNION
        SELECT coinbase.address
        , 'Coinbase' AS name
        , 'CEXs' AS category
        FROM (
            SELECT distinct et.""from"" AS address
            FROM ethereum.traces et
            INNER JOIN ethereum.traces et2 ON et2.""from""=et.""from"" AND et2.value > 0 AND et2.""to""='\xA090e606E30bD747d4E6245a1517EbE430F0057e'
            WHERE et.""to""='\x00000000219ab540356cBB839Cbe05303d7705Fa'
            AND et.success
            AND et.value > 0
            GROUP BY et.""from""
            ) coinbase
        GROUP BY coinbase.address
        UNION
        SELECT binance.address
        , 'Binance' AS name
        , 'CEXs' AS category
        FROM (
            SELECT '\xF17ACEd3c7A8DAA29ebb90Db8D1b6efD8C364a18'::bytea AS address
            UNION
            SELECT '\x2f47a1c2db4a3b78cda44eade915c3b19107ddcc'::bytea AS address
            UNION
            SELECT distinct ""to"" AS address
            FROM ethereum.transactions
            WHERE ""from""='\xF17ACEd3c7A8DAA29ebb90Db8D1b6efD8C364a18'
            AND ""to"" !='\x00000000219ab540356cbb839cbe05303d7705fa'
            GROUP BY ""to""
        ) binance
        GROUP BY binance.address
    )

, through_staking_protocol AS (
    SELECT traces.""from"" AS address
    , 'Rocket Pool' AS protocol
    , 'Liquid Staking' AS category
    FROM ethereum.transactions txs
    RIGHT JOIN ethereum.traces traces ON txs.hash=traces.tx_hash AND traces.to='\x00000000219ab540356cbb839cbe05303d7705fa'
    WHERE txs.""to"" IN ('\xdcd51fc5cd918e0461b9b7fb75967fdfd10dae2f', '\x1cc9cf5586522c6f483e84a19c3c2b0b6d027bf0')
    )

, all_stakers_data AS (
    SELECT et.""from""::text AS address
    , sn.name AS project_name_known
    , llp.name AS project_name
    , lle.name AS ens_name
    , CASE WHEN SUM(value)/1e18 > 320 THEN COALESCE(sn.category, tsp.category, tsp.protocol, 'Whales')
        ELSE COALESCE(sn.category, tsp.category, tsp.protocol, 'Others')
        END AS category
    , SUM(value)/1e18 AS deposited_eth
    , MAX(block_time) AS last_deposit
    , tsp.protocol AS liquid_staking_protocol
    FROM ethereum.traces et
    LEFT JOIN staker_names sn ON et.""from""=sn.address
    LEFT JOIN labels.labels llp ON et.""from""=llp.address AND llp.""type""='project'
    LEFT JOIN labels.labels lle ON et.""from""=lle.address AND lle.""type""='ens name reverse'
    LEFT JOIN through_staking_protocol tsp ON et.""from""=tsp.address
    WHERE ""to"" = '\x00000000219ab540356cBB839Cbe05303d7705Fa'
    AND success
    AND value > 0
    GROUP BY et.""from"", project_name_known, project_name, ens_name, tsp.protocol, sn.category, tsp.category
    )

SELECT COALESCE(project_name_known, project_name, liquid_staking_protocol) AS entity
, SUM(deposited_eth) AS deposited_eth
, SUM(deposited_eth)/(SELECT SUM(deposited_eth) FROM all_stakers_data WHERE category='Liquid Staking') AS marketshare
--, to_char(MAX(last_deposit), 'DDth"" of ""FMMon"" ""YYYY') AS last_deposit
FROM all_stakers_data
WHERE category='Liquid Staking'
GROUP BY COALESCE(project_name_known, project_name, liquid_staking_protocol)
ORDER BY SUM(deposited_eth) DESC"
612372,Total Validators,,"[{""id"": 1143523, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Validators \u2705"", ""counterColName"": ""total_staking_nodes""}, ""created_at"": ""2022-04-17T21:19:02.68222+00:00"", ""__typename"": ""visualizations""}]","SELECT (SUM(value)/1e18)/32 AS total_staking_nodes
FROM ethereum.traces
WHERE ""to"" = '\x00000000219ab540356cBB839Cbe05303d7705Fa'
AND success
AND value > 0"
610396,Deposited ETH - Percentage of Total ETH Supply,,"[{""id"": 1193396, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2022-04-26T14:36:50.203503+00:00"", ""__typename"": ""visualizations""}, {""id"": 1139837, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Staked Share of ETH Supply \ud83c\udf70"", ""stringSuffix"": ""%"", ""stringDecimal"": 2, ""counterColName"": ""percentage_staked""}, ""created_at"": ""2022-04-17T00:02:43.799242+00:00"", ""__typename"": ""visualizations""}]","WITH eth_supply AS ( -- check for accuracy: https://etherscan.io/chart/ethersupplygrowth
    SELECT 120737644 - SUM(eb.base_fee_per_gas*et.gas_used)/1e18
    -- missing  ETH2 rewards for now, awaiting beacon chain data
    AS eth_supply
    FROM ethereum.transactions et
    INNER JOIN ethereum.blocks eb ON eb.number = et.block_number
    WHERE et.block_time >= '2022-09-29'
    )
    
SELECT (100*SUM(value)/1e18)/MAX(eth_supply) AS percentage_staked
, SUM(value)/1e18 AS staked
, MAX(eth_supply) AS eth_supply
FROM ethereum.traces, eth_supply
WHERE ""to"" = '\x00000000219ab540356cBB839Cbe05303d7705Fa'
AND success
AND value > 0"
991483,Beacon Chain Staking Depositors,By Entity,"[{""id"": 1716830, ""type"": ""table"", ""name"": """", ""options"": {""columns"": [{""name"": ""deposited_eth"", ""title"": ""ETH Deposited"", ""numberFormat"": ""###,###""}, {""name"": ""staker"", ""title"": ""Staker""}, {""name"": ""last_deposit"", ""title"": ""Last Deposit"", ""numberFormat"": """"}, {""name"": ""first_deposit"", ""title"": ""First Deposit""}, {""name"": ""marketshare"", ""title"": ""Marketshare"", ""numberFormat"": ""###.[##]%""}, {""name"": ""depositor"", ""title"": ""Depositor""}]}, ""created_at"": ""2022-07-02T17:40:20.030507+00:00"", ""__typename"": ""visualizations""}, {""id"": 1716887, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""###,###"", ""columnMapping"": {""depositor"": ""x"", ""deposited_eth"": ""y""}, ""seriesOptions"": {""deposited_eth"": {""name"": ""Deposited ETH"", ""type"": ""pie"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2022-07-02T18:01:52.85138+00:00"", ""__typename"": ""visualizations""}]","WITH staker_names AS (SELECT *
    FROM (
        values ('\xae7ab96520de3a18e5e111b5eaab095312d7fe84'::bytea, 'Lido', 'Liquid Staking')
        , ('\x39dc6a99209b5e6b81dc8540c86ff10981ebda29'::bytea, 'Staked.us', 'Staking Pools')
        , ('\x0194512e77d798e4871973d9cb9d7ddfc0ffd801'::bytea, 'stakefish', 'Staking Pools')
        , ('\xd4039ecc40aeda0582036437cf3ec02845da4c13'::bytea, 'Kraken', 'CEX')
        , ('\xa40dfee99e1c85dc97fdc594b16a460717838703'::bytea, 'Kraken', 'CEX')
        , ('\x622de9bb9ff8907414785a633097db438f9a2d86'::bytea, 'Bitcoin Suisse', 'Staking Pools')
        , ('\xdd9663bd979f1ab1bada85e1bc7d7f13cafe71f8'::bytea, 'Bitcoin Suisse', 'Staking Pools')
        , ('\xec70e3c8afe212039c3f6a2df1c798003bf7cfe9'::bytea, 'Bitcoin Suisse', 'Staking Pools')
        , ('\x3837eA2279b8E5c260A78F5F4181B783BbE76a8B'::bytea, 'Bitcoin Suisse', 'Staking Pools')
        , ('\x2a7077399b3e90f5392d55a1dc7046ad8d152348'::bytea, 'Bitcoin Suisse', 'Staking Pools')
        , ('\xc2288b408dc872a1546f13e6ebfa9c94998316a2'::bytea, 'Bitcoin Suisse', 'Staking Pools')
        , ('\xf2be95116845252a28bd43661651917dc183dab1'::bytea, 'Figment', 'Staking Pools')
        , ('\x37ab162ab59e106d6072eb7a7bd4c4c2973455a7'::bytea, 'Figment', 'Staking Pools')
        , ('\xc874b064f465bdd6411d45734b56fac750cda29a'::bytea, 'Stakewise', 'Liquid Staking')
        , ('\x84db6ee82b7cf3b47e8f19270abde5718b936670'::bytea, 'Stkr (Ankr)', 'Liquid Staking')
        , ('\x194bd70b59491ce1310ea0bceabdb6c23ac9d5b2'::bytea, 'Huobi', 'CEX')
        , ('\xb73f4d4e99f65ec4b16b684e44f81aeca5ba2b7c'::bytea, 'Huobi', 'CEX')
        , ('\xbf1556a7d625654e3d64d1f0466a60a697fac178'::bytea, 'InfStones', 'Staking Pools')
        , ('\xbca3b7b87dcb15f0efa66136bc0e4684a3e5da4d'::bytea, 'SharedStake', 'Liquid Staking')
        , ('\xeadcba8bf9aca93f627f31fb05470f5a0686ceca'::bytea, 'StakeWise Solos', 'Staking Pools')
        , ('0xfa5f9eaa65ffb2a75de092eb7f3fc84fc86b5b18'::bytea, 'Abyss Finance', 'Staking Pools')
        , ('\x66827bcd635f2bb1779d68c46aeb16541bca6ba8'::bytea, 'PieDAO', 'Staking Pools')
        , ('\xd6216fc19db775df9774a6e33526131da7d19a2c'::bytea, 'KuCoin', 'CEX')
        , ('\x1692e170361cefd1eb7240ec13d048fd9af6d667'::bytea, 'KuCoin', 'CEX')
        , ('\x7b915c27a0Ed48E2Ce726Ee40F20B2bF8a88a1b3'::bytea, 'KuCoin', 'CEX')
        , ('\xcbc1065255cbc3ab41a6868c22d1f1c573ab89fd'::bytea, 'CREAM', 'Liquid Staking')
        , ('\x808e7133C700cF3a66E6A25AAdB1fBEF6be468b4'::bytea, 'Bitstamp', 'CEX')
        , ('\x12ec5befa9166fa327d4c345a93f0ac99dd2a7d8'::bytea, 'Blox Staking', 'Staking Pools')
        , ('\x24B2F1AECED4B34133152Bb20cFd6a206A0EA33C'::bytea, 'staked.finance', 'Liquid Staking')
        --, ('\x0CA7b4b87fEB2c0BDa9CB37B6cd0de22B816Cd04'::bytea, 'MyColdWallet', 'Others')
        --, ('\x1270a0aad453a315c5ab99397d88121c34453eb4'::bytea, 'TideBit', 'Others')
        , ('\x0038598EcB3B308EBc6c6e2c635BaCaA3c5298a3'::bytea, 'Poloniex', 'CEX')
        , ('\xD39aEeb73983e5fbc52B77A3957a48c1EeAC8eD7'::bytea, 'MintDice.com', 'Others')
        , ('\x7ebf05749faf7eb78eff153e40c15890bb4578a4'::bytea, 'neukind.com', 'Staking Pools')
        , ('\xa54be2edaa143e969a63fc744bbd2d511b50cbc3'::bytea, 'neukind.com', 'Staking Pools')
        , ('\xac29ef7a7f4325ffa564de9abf67e5ace46c88f8'::bytea, 'neukind.com', 'Staking Pools')
        , ('\xc3003f8b89f35a7bf3cb3a6ec3d8e4c3c8ce7cce'::bytea, 'neukind.com', 'Staking Pools')
        --, ('\x06521aF7183a4A61D067016fC3bC0500DA1567c1'::bytea, 'ptxptx', 'Others')
        --, ('\x8E1D8B147cC4C939a597dC501C47cC8B4ab26BD5'::bytea, 'Tetranode', 'Whale')
        , ('\x1db3439a222c519ab44bb1144fc28167b4fa6ee6'::bytea, 'Vitalik Buterin', 'Whale')
        --, ('\x49df3cca2670eb0d591146b16359fe336e476f29'::bytea, 'stereum.net', 'Others')
        --, ('\x62dfeb55fcbdcb921446168eecfd1406379a1ee1'::bytea, 'stereum.net', 'Others')
        --, ('\x2bE0282532AD9FA7cc4C45aeAA1707d2E93357C2'::bytea, 'Blockdaemon.com', 'Others')
        --, ('\x5e59aaB1F114234F003008300C3D7593c6cEEa26'::bytea, 'boxfish.studio', 'Others')
        --, ('\xd1933DF1c223ad7CB5716B066cA26BC24569e622'::bytea, 'Ethereum on ARM', 'Others')
        , ('\x5a0036bcab4501e70f086c634e2958a8beae3a11'::bytea, 'OKX', 'CEX')
        , ('\x607ebC82329D0CAc3027B83d15e4b4E816F131b7'::bytea, 'StakeHound', 'Liquid Staking')
        , ('\xc236c3ec83351b07f148afbadc252cce2c07972e'::bytea, 'Bitfinex', 'CEX')
        , ('\xe733455faddf4999176e99a0ec084e978f5552ed'::bytea, 'Bitfinex', 'CEX')
        , ('\x4c2f150fc90fed3d8281114c2349f1906cde5346'::bytea, 'Gemini', 'CEX')
        , ('\xbb84d966c09264ce9a2104a4a20bb378369986db'::bytea, 'WEX Exchange', 'CEX')
        --, ('\'::bytea, '', '')
        ) 
        x (address, name, category)
        UNION
        SELECT coinbase.address
        , 'Coinbase' AS name
        , 'CEX' AS category
        FROM (
            SELECT distinct et.""from"" AS address
            FROM ethereum.traces et
            INNER JOIN ethereum.traces et2 ON et2.""from""=et.""from"" AND et2.value > 0 AND et2.""to""='\xA090e606E30bD747d4E6245a1517EbE430F0057e'
            WHERE et.""to""='\x00000000219ab540356cBB839Cbe05303d7705Fa'
            AND et.success
            AND et.value > 0
            GROUP BY et.""from""
            ) coinbase
        GROUP BY coinbase.address
        UNION
        SELECT binance.address
        , 'Binance' AS name
        , 'CEX' AS category
        FROM (
            SELECT '\xF17ACEd3c7A8DAA29ebb90Db8D1b6efD8C364a18'::bytea AS address
            UNION
            SELECT '\x2f47a1c2db4a3b78cda44eade915c3b19107ddcc'::bytea AS address
            UNION
            SELECT distinct ""to"" AS address
            FROM ethereum.transactions
            WHERE ""from""='\xF17ACEd3c7A8DAA29ebb90Db8D1b6efD8C364a18'
            AND ""to"" !='\x00000000219ab540356cbb839cbe05303d7705fa'
            GROUP BY ""to""
        ) binance
        GROUP BY binance.address
    )

, through_staking_protocol AS (
    SELECT traces.""from"" AS address
    , 'Rocket Pool' AS protocol
    , 'Others' AS category
    FROM ethereum.transactions txs
    RIGHT JOIN ethereum.traces traces ON txs.hash=traces.tx_hash AND traces.to='\x00000000219ab540356cbb839cbe05303d7705fa'
    WHERE txs.""to"" IN ('\xdcd51fc5cd918e0461b9b7fb75967fdfd10dae2f', '\x1cc9cf5586522c6f483e84a19c3c2b0b6d027bf0')
    )

, all_stakers_data AS (
    SELECT et.""from""::text AS address
    , sn.name AS project_name_known
    , llp.name AS project_name
    , lle.name AS ens_name
    , SUM(value)/1e18 AS deposited_eth
    , MAX(block_time) AS last_deposit
    , tsp.protocol AS liquid_staking_protocol
    FROM ethereum.traces et
    LEFT JOIN staker_names sn ON et.""from""=sn.address
    LEFT JOIN labels.labels llp ON et.""from""=llp.address AND llp.""type""='project' AND llp.name<>'gnosis_safe' AND llp.name<>'argent' AND llp.name<>'fortube'
    LEFT JOIN labels.labels lle ON et.""from""=lle.address AND lle.""type""='ens name reverse'
    LEFT JOIN through_staking_protocol tsp ON et.""from""=tsp.address
    WHERE ""to"" = '\x00000000219ab540356cBB839Cbe05303d7705Fa'
    AND success
    AND value > 0
    GROUP BY et.""from"", project_name_known, project_name, ens_name, tsp.protocol
    )

SELECT COALESCE(project_name_known, project_name, liquid_staking_protocol, 'Others') AS depositor
, SUM(deposited_eth) AS deposited_eth
, SUM(deposited_eth)/(SELECT SUM(deposited_eth) FROM all_stakers_data) AS marketshare
, to_char(MAX(last_deposit), 'DDth"" of ""FMMon"" ""YYYY') AS last_deposit
FROM all_stakers_data
GROUP BY project_name_known, project_name, liquid_staking_protocol
ORDER BY SUM(deposited_eth) DESC"
610502,ETH Beacon Chain Depositors Count,,"[{""id"": 1139939, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Cumulative""}}, {""type"": ""linear"", ""title"": {""text"": ""Weekly""}}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""numberFormat"": ""###,###"", ""columnMapping"": {"""": ""y"", ""time"": ""x"", ""total_stakers"": ""y"", ""new_daily_stakers"": ""y"", ""returning_daily_stakers"": ""y""}, ""seriesOptions"": {""total_stakers"": {""name"": ""Total"", ""type"": ""area"", ""color"": ""#DEDEDE"", ""yAxis"": 0, ""zIndex"": 0}, ""new_daily_stakers"": {""name"": ""New"", ""type"": ""column"", ""color"": ""#00E078"", ""yAxis"": 1, ""zIndex"": 2}, ""returning_daily_stakers"": {""name"": ""Returning"", ""type"": ""column"", ""color"": ""#E39802"", ""yAxis"": 1, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column"", ""numberFormatRightYAxisSeries"": ""###,###""}, ""created_at"": ""2022-04-17T01:37:52.996686+00:00"", ""__typename"": ""visualizations""}]","WITH total AS (
    SELECT date_trunc('week', block_time) AS time
    , COUNT(distinct ""from"") AS stakers_count
    FROM ethereum.traces
    WHERE ""to"" = '\x00000000219ab540356cBB839Cbe05303d7705Fa'
    AND success
    AND value > 0
    GROUP BY time
    )

, min_dates AS (
    SELECT date_trunc('week', min_time) AS time
    , COUNT(staker) AS stakers_count
    FROM (
        SELECT MIN(block_time) AS min_time
        , ""from"" AS staker
        FROM ethereum.traces
        WHERE ""to"" = '\x00000000219ab540356cBB839Cbe05303d7705Fa'
        AND success
        AND value > 0
        GROUP BY staker
        ) t
    GROUP BY time
    )

SELECT t.time
, t.stakers_count-md.stakers_count AS returning_daily_stakers
, md.stakers_count AS new_daily_stakers
, t.stakers_count AS total_daily_stakers
, SUM(t.stakers_count) OVER (ORDER BY t.time RANGE UNBOUNDED PRECEDING) AS total_stakers
FROM total t
LEFT JOIN min_dates md ON md.time=t.time
GROUP BY t.time, t.stakers_count, md.stakers_count"
609518,ETH Deposited to Beacon Chain & Validators,Cumulative,"[{""id"": 1138523, ""type"": ""chart"", ""name"": """", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""ETH Deposited""}}, {""type"": ""linear"", ""title"": {""text"": ""Validators""}}], ""legend"": {""enabled"": false}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""numberFormat"": ""###,###"", ""columnMapping"": {""time"": ""x"", ""eth_nodes"": ""y"", ""validators"": ""y"", ""cum_deposited_eth"": ""y""}, ""seriesOptions"": {""validators"": {""name"": ""Validators"", ""type"": ""line"", ""color"": ""#000000"", ""yAxis"": 1, ""zIndex"": 1}, ""cum_deposited_eth"": {""name"": ""ETH Deposited"", ""type"": ""area"", ""color"": ""#58ADF6"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""area""}, ""created_at"": ""2022-04-16T16:25:11.910817+00:00"", ""__typename"": ""visualizations""}, {""id"": 1465585, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2022-05-24T13:35:33.992101+00:00"", ""__typename"": ""visualizations""}]","SELECT date_trunc('day', block_time) AS time
, SUM(SUM(value)/1e18) OVER (ORDER BY date_trunc('day', block_time) RANGE UNBOUNDED PRECEDING) AS cum_deposited_eth
, SUM((SUM(value)/1e18)/32) OVER (ORDER BY date_trunc('day', block_time) RANGE UNBOUNDED PRECEDING) AS validators
FROM ethereum.traces
WHERE ""to"" = '\x00000000219ab540356cBB839Cbe05303d7705Fa'
AND success
AND value > 0
GROUP BY time"
612355,Distinct Depositor Addresses,,"[{""id"": 1143488, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Depositor Addresses \ud83d\udc65"", ""stringPrefix"": """", ""stringSuffix"": """", ""counterColName"": ""stakers_count""}, ""created_at"": ""2022-04-17T21:07:45.257221+00:00"", ""__typename"": ""visualizations""}]","SELECT COUNT(distinct ""from"") AS stakers_count
FROM ethereum.traces
WHERE ""to"" = '\x00000000219ab540356cBB839Cbe05303d7705Fa'
AND success
AND value > 0"
610155,ETH Deposited to Beacon Chain,Weekly,"[{""id"": 1139340, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""###,###"", ""columnMapping"": {""time"": ""x"", ""deposited_eth"": ""y"", ""deposited_eth_ma"": ""y"", ""deposited_eth_ma7"": ""y"", ""deposited_eth_ma14"": ""y""}, ""seriesOptions"": {""deposited_eth"": {""name"": ""Weekly"", ""type"": ""column"", ""color"": ""#FF6962"", ""yAxis"": 0, ""zIndex"": 0}, ""deposited_eth_ma"": {""name"": ""MA6"", ""type"": ""line"", ""color"": ""#000000"", ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-04-16T20:22:47.745577+00:00"", ""__typename"": ""visualizations""}]","SELECT date_trunc('week', block_time) AS time
, SUM(value)/1e18 AS deposited_eth
, AVG(SUM(value)/1e18) OVER (ORDER BY date_trunc('week', block_time) ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS deposited_eth_ma
FROM ethereum.traces
WHERE ""to"" = '\x00000000219ab540356cBB839Cbe05303d7705Fa'
AND success
AND value > 0
GROUP BY time"
1262797,Staking Pools Depositors,By Entity,"[{""id"": 2164160, ""type"": ""table"", ""name"": """", ""options"": {""columns"": [{""name"": ""deposited_eth"", ""title"": ""ETH Deposited"", ""numberFormat"": ""###,###""}, {""name"": ""staker"", ""title"": ""Staker""}, {""name"": ""last_deposit"", ""title"": ""Last Deposit"", ""numberFormat"": """"}, {""name"": ""first_deposit"", ""title"": ""First Deposit""}, {""name"": ""marketshare"", ""title"": ""Marketshare"", ""numberFormat"": ""###.[##]%""}, {""name"": ""depositor"", ""title"": ""Depositor""}, {""name"": ""entity"", ""title"": ""Entity""}]}, ""created_at"": ""2022-09-12T16:59:49.315989+00:00"", ""__typename"": ""visualizations""}, {""id"": 2164161, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""###,###"", ""columnMapping"": {""category"": ""x"", ""depositor"": ""x"", ""deposited_eth"": ""y""}, ""seriesOptions"": {""deposited_eth"": {""name"": ""Deposited ETH"", ""type"": ""pie"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2022-09-12T16:59:49.315989+00:00"", ""__typename"": ""visualizations""}]","WITH staker_names AS (SELECT *
    FROM (
        values ('\xae7ab96520de3a18e5e111b5eaab095312d7fe84'::bytea, 'Lido', 'Liquid Staking')
        , ('\x39dc6a99209b5e6b81dc8540c86ff10981ebda29'::bytea, 'Staked.us', 'Staking Pools')
        , ('\x0194512e77d798e4871973d9cb9d7ddfc0ffd801'::bytea, 'stakefish', 'Staking Pools')
        , ('\xd4039ecc40aeda0582036437cf3ec02845da4c13'::bytea, 'Kraken', 'CEXs')
        , ('\xa40dfee99e1c85dc97fdc594b16a460717838703'::bytea, 'Kraken', 'CEXs')
        , ('\x622de9bb9ff8907414785a633097db438f9a2d86'::bytea, 'Bitcoin Suisse', 'Staking Pools')
        , ('\xdd9663bd979f1ab1bada85e1bc7d7f13cafe71f8'::bytea, 'Bitcoin Suisse', 'Staking Pools')
        , ('\xec70e3c8afe212039c3f6a2df1c798003bf7cfe9'::bytea, 'Bitcoin Suisse', 'Staking Pools')
        , ('\x3837eA2279b8E5c260A78F5F4181B783BbE76a8B'::bytea, 'Bitcoin Suisse', 'Staking Pools')
        , ('\x2a7077399b3e90f5392d55a1dc7046ad8d152348'::bytea, 'Bitcoin Suisse', 'Staking Pools')
        , ('\xc2288b408dc872a1546f13e6ebfa9c94998316a2'::bytea, 'Bitcoin Suisse', 'Staking Pools')
        , ('\xf2be95116845252a28bd43661651917dc183dab1'::bytea, 'Figment', 'Staking Pools')
        , ('\x37ab162ab59e106d6072eb7a7bd4c4c2973455a7'::bytea, 'Figment', 'Staking Pools')
        , ('\xc874b064f465bdd6411d45734b56fac750cda29a'::bytea, 'Stakewise', 'Liquid Staking')
        , ('\x84db6ee82b7cf3b47e8f19270abde5718b936670'::bytea, 'Stkr (Ankr)', 'Liquid Staking')
        , ('\x194bd70b59491ce1310ea0bceabdb6c23ac9d5b2'::bytea, 'Huobi', 'CEXs')
        , ('\xb73f4d4e99f65ec4b16b684e44f81aeca5ba2b7c'::bytea, 'Huobi', 'CEXs')
        , ('\xbf1556a7d625654e3d64d1f0466a60a697fac178'::bytea, 'InfStones', 'Staking Pools')
        , ('\xbca3b7b87dcb15f0efa66136bc0e4684a3e5da4d'::bytea, 'SharedStake', 'Liquid Staking')
        , ('\xeadcba8bf9aca93f627f31fb05470f5a0686ceca'::bytea, 'StakeWise Solos', 'Staking Pools')
        , ('0xfa5f9eaa65ffb2a75de092eb7f3fc84fc86b5b18'::bytea, 'Abyss Finance', 'Staking Pools')
        , ('\x66827bcd635f2bb1779d68c46aeb16541bca6ba8'::bytea, 'PieDAO', 'Staking Pools')
        , ('\xd6216fc19db775df9774a6e33526131da7d19a2c'::bytea, 'KuCoin', 'CEXs')
        , ('\x1692e170361cefd1eb7240ec13d048fd9af6d667'::bytea, 'KuCoin', 'CEXs')
        , ('\x7b915c27a0Ed48E2Ce726Ee40F20B2bF8a88a1b3'::bytea, 'KuCoin', 'CEXs')
        , ('\xcbc1065255cbc3ab41a6868c22d1f1c573ab89fd'::bytea, 'CREAM', 'Liquid Staking')
        , ('\x808e7133C700cF3a66E6A25AAdB1fBEF6be468b4'::bytea, 'Bitstamp', 'CEXs')
        , ('\x12ec5befa9166fa327d4c345a93f0ac99dd2a7d8'::bytea, 'Blox Staking', 'Staking Pools')
        , ('\x24B2F1AECED4B34133152Bb20cFd6a206A0EA33C'::bytea, 'staked.finance', 'Liquid Staking')
        , ('\x0CA7b4b87fEB2c0BDa9CB37B6cd0de22B816Cd04'::bytea, 'MyColdWallet', 'Others')
        , ('\x1270a0aad453a315c5ab99397d88121c34453eb4'::bytea, 'TideBit', 'Others')
        , ('\x0038598EcB3B308EBc6c6e2c635BaCaA3c5298a3'::bytea, 'Poloniex', 'CEXs')
        , ('\xD39aEeb73983e5fbc52B77A3957a48c1EeAC8eD7'::bytea, 'MintDice.com', 'Others')
        , ('\x7ebf05749faf7eb78eff153e40c15890bb4578a4'::bytea, 'neukind.com', 'Staking Pools')
        , ('\xa54be2edaa143e969a63fc744bbd2d511b50cbc3'::bytea, 'neukind.com', 'Staking Pools')
        , ('\xac29ef7a7f4325ffa564de9abf67e5ace46c88f8'::bytea, 'neukind.com', 'Staking Pools')
        , ('\xc3003f8b89f35a7bf3cb3a6ec3d8e4c3c8ce7cce'::bytea, 'neukind.com', 'Staking Pools')
        , ('\x06521aF7183a4A61D067016fC3bC0500DA1567c1'::bytea, 'ptxptx', 'Others')
        , ('\x8E1D8B147cC4C939a597dC501C47cC8B4ab26BD5'::bytea, 'Tetranode', 'Whales')
        , ('\x1db3439a222c519ab44bb1144fc28167b4fa6ee6'::bytea, 'Vitalik Buterin', 'Whales')
        , ('\x49df3cca2670eb0d591146b16359fe336e476f29'::bytea, 'stereum.net', 'Others')
        , ('\x62dfeb55fcbdcb921446168eecfd1406379a1ee1'::bytea, 'stereum.net', 'Others')
        , ('\x2bE0282532AD9FA7cc4C45aeAA1707d2E93357C2'::bytea, 'Blockdaemon.com', 'Others')
        , ('\x5e59aaB1F114234F003008300C3D7593c6cEEa26'::bytea, 'boxfish.studio', 'Others')
        , ('\xd1933DF1c223ad7CB5716B066cA26BC24569e622'::bytea, 'Ethereum on ARM', 'Others')
        , ('\x5a0036bcab4501e70f086c634e2958a8beae3a11'::bytea, 'OKX', 'CEXs')
        , ('\x607ebC82329D0CAc3027B83d15e4b4E816F131b7'::bytea, 'StakeHound', 'Liquid Staking')
        , ('\xc236c3ec83351b07f148afbadc252cce2c07972e'::bytea, 'Bitfinex', 'CEXs')
        , ('\xe733455faddf4999176e99a0ec084e978f5552ed'::bytea, 'Bitfinex', 'CEXs')
        , ('\x4c2f150fc90fed3d8281114c2349f1906cde5346'::bytea, 'Gemini', 'CEXs')
        , ('\xbb84d966c09264ce9a2104a4a20bb378369986db'::bytea, 'WEX Exchange', 'CEXs')
        --, ('\'::bytea, '', '')
        ) 
        x (address, name, category)
        UNION
        SELECT coinbase.address
        , 'Coinbase' AS name
        , 'CEXs' AS category
        FROM (
            SELECT distinct et.""from"" AS address
            FROM ethereum.traces et
            INNER JOIN ethereum.traces et2 ON et2.""from""=et.""from"" AND et2.value > 0 AND et2.""to""='\xA090e606E30bD747d4E6245a1517EbE430F0057e'
            WHERE et.""to""='\x00000000219ab540356cBB839Cbe05303d7705Fa'
            AND et.success
            AND et.value > 0
            GROUP BY et.""from""
            ) coinbase
        GROUP BY coinbase.address
        UNION
        SELECT binance.address
        , 'Binance' AS name
        , 'CEXs' AS category
        FROM (
            SELECT '\xF17ACEd3c7A8DAA29ebb90Db8D1b6efD8C364a18'::bytea AS address
            UNION
            SELECT '\x2f47a1c2db4a3b78cda44eade915c3b19107ddcc'::bytea AS address
            UNION
            SELECT distinct ""to"" AS address
            FROM ethereum.transactions
            WHERE ""from""='\xF17ACEd3c7A8DAA29ebb90Db8D1b6efD8C364a18'
            AND ""to"" !='\x00000000219ab540356cbb839cbe05303d7705fa'
            GROUP BY ""to""
        ) binance
        GROUP BY binance.address
    )

, through_staking_protocol AS (
    SELECT traces.""from"" AS address
    , 'Rocket Pool' AS protocol
    , 'Others' AS category
    FROM ethereum.transactions txs
    RIGHT JOIN ethereum.traces traces ON txs.hash=traces.tx_hash AND traces.to='\x00000000219ab540356cbb839cbe05303d7705fa'
    WHERE txs.""to"" IN ('\xdcd51fc5cd918e0461b9b7fb75967fdfd10dae2f', '\x1cc9cf5586522c6f483e84a19c3c2b0b6d027bf0')
    )

, all_stakers_data AS (
    SELECT et.""from""::text AS address
    , sn.name AS project_name_known
    , llp.name AS project_name
    , lle.name AS ens_name
    , CASE WHEN SUM(value)/1e18 > 320 THEN COALESCE(sn.category, tsp.category, 'Whales')
        ELSE COALESCE(sn.category, tsp.category, 'Others')
        END AS category
    , SUM(value)/1e18 AS deposited_eth
    , MAX(block_time) AS last_deposit
    , tsp.protocol AS liquid_staking_protocol
    FROM ethereum.traces et
    LEFT JOIN staker_names sn ON et.""from""=sn.address
    LEFT JOIN labels.labels llp ON et.""from""=llp.address AND llp.""type""='project'
    LEFT JOIN labels.labels lle ON et.""from""=lle.address AND lle.""type""='ens name reverse'
    LEFT JOIN through_staking_protocol tsp ON et.""from""=tsp.address
    WHERE ""to"" = '\x00000000219ab540356cBB839Cbe05303d7705Fa'
    AND success
    AND value > 0
    GROUP BY et.""from"", project_name_known, project_name, ens_name, tsp.protocol, sn.category, tsp.category
    )

SELECT COALESCE(project_name_known, project_name) AS entity
, SUM(deposited_eth) AS deposited_eth
, SUM(deposited_eth)/(SELECT SUM(deposited_eth) FROM all_stakers_data WHERE category='Staking Pools') AS marketshare
--, to_char(MAX(last_deposit), 'DDth"" of ""FMMon"" ""YYYY') AS last_deposit
FROM all_stakers_data
WHERE category='Staking Pools'
GROUP BY COALESCE(project_name_known, project_name)
ORDER BY SUM(deposited_eth) DESC"
610228,Total ETH Deposited,,"[{""id"": 1139455, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""counterLabel"": ""ETH Deposited \ud83d\udceb"", ""stringPrefix"": ""\u039e"", ""counterColName"": ""total_deposited_eth""}, ""created_at"": ""2022-04-16T21:48:28.486531+00:00"", ""__typename"": ""visualizations""}]","SELECT SUM(value)/1e18 AS total_deposited_eth
FROM ethereum.traces
WHERE ""to"" = '\x00000000219ab540356cBB839Cbe05303d7705Fa'
AND success
AND value > 0"
609839,ETH Beacon Chain Depositor Addresses,Ordered by Deposited Amount,"[{""id"": 1138680, ""type"": ""table"", ""name"": """", ""options"": {""columns"": [{""name"": ""deposited_eth"", ""title"": ""ETH Deposited"", ""numberFormat"": ""###,###""}, {""name"": ""staker"", ""title"": ""Staker""}, {""name"": ""last_deposit"", ""title"": ""Last Deposit"", ""numberFormat"": """"}, {""name"": ""first_deposit"", ""title"": ""First Deposit""}, {""name"": ""marketshare"", ""title"": ""Marketshare"", ""numberFormat"": ""###.[##]%""}, {""name"": ""depositor"", ""title"": ""Depositor""}, {""name"": ""validators"", ""title"": ""Validators"", ""numberFormat"": ""###,###""}]}, ""created_at"": ""2022-04-16T17:02:30.643827+00:00"", ""__typename"": ""visualizations""}]","WITH staker_names AS (SELECT *
    FROM (
        values ('\xae7ab96520de3a18e5e111b5eaab095312d7fe84'::bytea, 'Lido', 'Liquid Staking')
        , ('\x39dc6a99209b5e6b81dc8540c86ff10981ebda29'::bytea, 'Staked.us', 'Staking Pools')
        , ('\x0194512e77d798e4871973d9cb9d7ddfc0ffd801'::bytea, 'stakefish', 'Staking Pools')
        , ('\xd4039ecc40aeda0582036437cf3ec02845da4c13'::bytea, 'Kraken', 'CEX')
        , ('\xa40dfee99e1c85dc97fdc594b16a460717838703'::bytea, 'Kraken', 'CEX')
        , ('\x622de9bb9ff8907414785a633097db438f9a2d86'::bytea, 'Bitcoin Suisse', 'Staking Pools')
        , ('\xdd9663bd979f1ab1bada85e1bc7d7f13cafe71f8'::bytea, 'Bitcoin Suisse', 'Staking Pools')
        , ('\xec70e3c8afe212039c3f6a2df1c798003bf7cfe9'::bytea, 'Bitcoin Suisse', 'Staking Pools')
        , ('\x3837eA2279b8E5c260A78F5F4181B783BbE76a8B'::bytea, 'Bitcoin Suisse', 'Staking Pools')
        , ('\x2a7077399b3e90f5392d55a1dc7046ad8d152348'::bytea, 'Bitcoin Suisse', 'Staking Pools')
        , ('\xc2288b408dc872a1546f13e6ebfa9c94998316a2'::bytea, 'Bitcoin Suisse', 'Staking Pools')
        , ('\xf2be95116845252a28bd43661651917dc183dab1'::bytea, 'Figment', 'Staking Pools')
        , ('\x37ab162ab59e106d6072eb7a7bd4c4c2973455a7'::bytea, 'Figment', 'Staking Pools')
        , ('\xc874b064f465bdd6411d45734b56fac750cda29a'::bytea, 'Stakewise', 'Liquid Staking')
        , ('\x84db6ee82b7cf3b47e8f19270abde5718b936670'::bytea, 'Stkr (Ankr)', 'Liquid Staking')
        , ('\x194bd70b59491ce1310ea0bceabdb6c23ac9d5b2'::bytea, 'Huobi', 'CEX')
        , ('\xb73f4d4e99f65ec4b16b684e44f81aeca5ba2b7c'::bytea, 'Huobi', 'CEX')
        , ('\xbf1556a7d625654e3d64d1f0466a60a697fac178'::bytea, 'InfStones', 'Staking Pools')
        , ('\xbca3b7b87dcb15f0efa66136bc0e4684a3e5da4d'::bytea, 'SharedStake', 'Liquid Staking')
        , ('\xeadcba8bf9aca93f627f31fb05470f5a0686ceca'::bytea, 'StakeWise Solos', 'Staking Pools')
        , ('0xfa5f9eaa65ffb2a75de092eb7f3fc84fc86b5b18'::bytea, 'Abyss Finance', 'Staking Pools')
        , ('\x66827bcd635f2bb1779d68c46aeb16541bca6ba8'::bytea, 'PieDAO', 'Staking Pools')
        , ('\xd6216fc19db775df9774a6e33526131da7d19a2c'::bytea, 'KuCoin', 'CEX')
        , ('\x1692e170361cefd1eb7240ec13d048fd9af6d667'::bytea, 'KuCoin', 'CEX')
        , ('\x7b915c27a0Ed48E2Ce726Ee40F20B2bF8a88a1b3'::bytea, 'KuCoin', 'CEX')
        , ('\xcbc1065255cbc3ab41a6868c22d1f1c573ab89fd'::bytea, 'CREAM', 'Liquid Staking')
        , ('\x808e7133C700cF3a66E6A25AAdB1fBEF6be468b4'::bytea, 'Bitstamp', 'CEX')
        , ('\x12ec5befa9166fa327d4c345a93f0ac99dd2a7d8'::bytea, 'Blox Staking', 'Staking Pools')
        , ('\x24B2F1AECED4B34133152Bb20cFd6a206A0EA33C'::bytea, 'staked.finance', 'Liquid Staking')
        , ('\x0CA7b4b87fEB2c0BDa9CB37B6cd0de22B816Cd04'::bytea, 'MyColdWallet', 'Others')
        , ('\x1270a0aad453a315c5ab99397d88121c34453eb4'::bytea, 'TideBit', 'Others')
        , ('\x0038598EcB3B308EBc6c6e2c635BaCaA3c5298a3'::bytea, 'Poloniex', 'CEX')
        , ('\xD39aEeb73983e5fbc52B77A3957a48c1EeAC8eD7'::bytea, 'MintDice.com', 'Others')
        , ('\x7ebf05749faf7eb78eff153e40c15890bb4578a4'::bytea, 'neukind.com', 'Staking Pools')
        , ('\xa54be2edaa143e969a63fc744bbd2d511b50cbc3'::bytea, 'neukind.com', 'Staking Pools')
        , ('\xac29ef7a7f4325ffa564de9abf67e5ace46c88f8'::bytea, 'neukind.com', 'Staking Pools')
        , ('\xc3003f8b89f35a7bf3cb3a6ec3d8e4c3c8ce7cce'::bytea, 'neukind.com', 'Staking Pools')
        , ('\x06521aF7183a4A61D067016fC3bC0500DA1567c1'::bytea, 'ptxptx', 'Others')
        , ('\x8E1D8B147cC4C939a597dC501C47cC8B4ab26BD5'::bytea, 'Tetranode', 'Whales')
        , ('\x1db3439a222c519ab44bb1144fc28167b4fa6ee6'::bytea, 'Vitalik Buterin', 'Whales')
        , ('\x49df3cca2670eb0d591146b16359fe336e476f29'::bytea, 'stereum.net', 'Others')
        , ('\x62dfeb55fcbdcb921446168eecfd1406379a1ee1'::bytea, 'stereum.net', 'Others')
        , ('\x2bE0282532AD9FA7cc4C45aeAA1707d2E93357C2'::bytea, 'Blockdaemon.com', 'Others')
        , ('\x5e59aaB1F114234F003008300C3D7593c6cEEa26'::bytea, 'boxfish.studio', 'Others')
        , ('\xd1933DF1c223ad7CB5716B066cA26BC24569e622'::bytea, 'Ethereum on ARM', 'Others')
        , ('\x5a0036bcab4501e70f086c634e2958a8beae3a11'::bytea, 'OKX', 'CEX')
        , ('\x607ebC82329D0CAc3027B83d15e4b4E816F131b7'::bytea, 'StakeHound', 'Liquid Staking')
        , ('\xc236c3ec83351b07f148afbadc252cce2c07972e'::bytea, 'Bitfinex', 'CEX')
        , ('\xe733455faddf4999176e99a0ec084e978f5552ed'::bytea, 'Bitfinex', 'CEX')
        , ('\x4c2f150fc90fed3d8281114c2349f1906cde5346'::bytea, 'Gemini', 'CEX')
        , ('\xbb84d966c09264ce9a2104a4a20bb378369986db'::bytea, 'WEX Exchange', 'CEX')
        --, ('\'::bytea, '', '')
        ) 
        x (address, name, category)
        UNION
        SELECT coinbase.address
        , 'Coinbase ' || ROW_NUMBER() OVER (ORDER BY MAX(coinbase.block_time)) AS name
        , 'CEX' AS category
        FROM (
            SELECT distinct et.""from"" AS address
            , MIN(et.block_time) AS block_time
            FROM ethereum.traces et
            INNER JOIN ethereum.traces et2 ON et2.""from""=et.""from"" AND et2.value > 0 AND et2.""to""='\xA090e606E30bD747d4E6245a1517EbE430F0057e'
            WHERE et.""to""='\x00000000219ab540356cBB839Cbe05303d7705Fa'
            AND et.success
            AND et.value > 0
            GROUP BY et.""from""
            ) coinbase
        GROUP BY coinbase.address
        UNION
        SELECT binance.address
        , 'Binance ' || ROW_NUMBER() OVER (ORDER BY MAX(t.block_time)) AS name
        , 'CEX' AS category
        FROM (
            SELECT '\xF17ACEd3c7A8DAA29ebb90Db8D1b6efD8C364a18'::bytea AS address
            UNION
            SELECT '\x2f47a1c2db4a3b78cda44eade915c3b19107ddcc'::bytea AS address
            UNION
            SELECT distinct ""to"" AS address
            FROM ethereum.transactions
            WHERE ""from""='\xF17ACEd3c7A8DAA29ebb90Db8D1b6efD8C364a18'
            AND ""to"" !='\x00000000219ab540356cbb839cbe05303d7705fa'
            GROUP BY ""to""
        ) binance
        LEFT JOIN ethereum.traces t ON binance.address::bytea=t.""from"" AND t.""to""='\x00000000219ab540356cbb839cbe05303d7705fa'
        GROUP BY binance.address
    )

, through_staking_protocol AS (
    SELECT traces.""from"" AS address
    , 'RocketMinipool' AS protocol
    FROM ethereum.transactions txs
    RIGHT JOIN ethereum.traces traces ON txs.hash=traces.tx_hash AND traces.to='\x00000000219ab540356cbb839cbe05303d7705fa'
    WHERE txs.""to"" IN ('\xdcd51fc5cd918e0461b9b7fb75967fdfd10dae2f', '\x1cc9cf5586522c6f483e84a19c3c2b0b6d027bf0')
    )

, all_stakers_data AS (
    SELECT et.""from""::text AS address
    , sn.name AS project_name_known
    , llp.name AS project_name
    , lle.name AS ens_name
    , SUM(value)/1e18 AS deposited_eth
    , MIN(block_time) AS first_deposit
    , MAX(block_time) AS last_deposit
    , tsp.protocol AS liquid_staking_protocol
    FROM ethereum.traces et
    LEFT JOIN staker_names sn ON et.""from""=sn.address
    LEFT JOIN labels.labels llp ON et.""from""=llp.address AND llp.""type""='project' AND llp.name<>'gnosis_safe'
    LEFT JOIN labels.labels lle ON et.""from""=lle.address AND lle.""type""='ens name reverse'
    LEFT JOIN through_staking_protocol tsp ON et.""from""=tsp.address
    WHERE ""to"" = '\x00000000219ab540356cBB839Cbe05303d7705Fa'
    AND success
    AND value > 0
    GROUP BY et.""from"", project_name_known, project_name, ens_name, tsp.protocol
    )

SELECT CASE WHEN liquid_staking_protocol IS NULL THEN '<a href=""https://etherscan.io/address/0' || substring(address from 2) || '"" target=""_blank"" >' || COALESCE(project_name_known, project_name, ens_name, '0' || substring(address from 2 for 5) || '...' || substring(address from 38 for 5)) || '</a>'
    ELSE '<a href=""https://etherscan.io/address/0' || substring(address from 2) || '"" target=""_blank"" >' || COALESCE(project_name_known, project_name, ens_name, '0' || substring(address from 2 for 3) || '...' || substring(address from 40 for 3)) || ' (' || liquid_staking_protocol || ')</a>'
    END AS depositor
, SUM(deposited_eth) AS deposited_eth
, SUM(deposited_eth)/32 AS validators
, SUM(deposited_eth)/(SELECT SUM(deposited_eth) FROM all_stakers_data) AS marketshare
, to_char(MIN(first_deposit), 'YYYY-MM-DD') AS first_deposit
, to_char(MAX(last_deposit), 'YYYY-MM-DD') AS last_deposit
FROM all_stakers_data
GROUP BY depositor, address, first_deposit, last_deposit
ORDER BY deposited_eth DESC"
145028,Bridge TVL change,,"[{""id"": 285679, ""type"": ""counter"", ""name"": ""30 day change in TVL \ud83d\udd23"", ""options"": {""rowNumber"": 1, ""counterLabel"": """", ""stringSuffix"": ""%"", ""stringDecimal"": 1, ""counterColName"": ""?column?""}, ""created_at"": ""2021-09-09T20:52:54.387913+00:00"", ""__typename"": ""visualizations""}, {""id"": 285659, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-09-09T20:38:57.652474+00:00"", ""__typename"": ""visualizations""}]","with tokens(address,label,divisor) as (
    select address, label, 10^decimals as divisor
    from (
    select ""contract_address"" as address, symbol as label, CAST (decimals AS numeric) as decimals
    from erc20.""tokens""
    ) z
),

prices as (
    select date_trunc('day', minute) as day, avg(price) as price, symbol, contract_address
    from prices.""usd""
    where minute > '2021-01-01'
    group by 1, 3, 4
),

ava as (
    select *
    from (
    select date_trunc('day', a.timestamp) as day, 'Avalanche Bridge' as bridge, token_address, label, max(amount_raw) as token_amount, divisor
    from erc20.""token_balances"" a
    left join tokens t on t.address = a.token_address
    where wallet_address = '\xe78388b4ce79068e89bf8aa7f218ef6b9ab0e9d0' --Avalanche
    group by 1, 2, 3, 4, 6
    order by 1
    ) z
),

weth_ava as (
    select day, bridge, token_address, label, avg(token_amount) as token_amount, divisor
    from (
    SELECT day, 'Avalanche Bridge' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, SUM(transfer) over (order by day) as token_amount, 1 as divisor 
    FROM ( 
        SELECT date_trunc('day', evt_block_time) as day, sum(-value/1e18) as transfer
        FROM erc20.""ERC20_evt_Transfer""
        WHERE contract_address = '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' --WETH
        AND ""from"" = '\xe78388b4ce79068e89bf8aa7f218ef6b9ab0e9d0' --Avalanche
        GROUP BY 1
        
        UNION all
        
        SELECT
        date_trunc('day', evt_block_time) as day, sum(value/1e18) as transfer
        FROM erc20.""ERC20_evt_Transfer""
        WHERE contract_address = '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' --WETH
        AND ""to"" = '\xe78388b4ce79068e89bf8aa7f218ef6b9ab0e9d0' --Avalanche
        GROUP BY 1
    ) as net
    ) w
    group by 1, 2 ,3, 4, 6
),

ava_full as(
    select * from ava
),

ava_tvl as (
    select n.day, bridge, token_address, label, token_amount*price/divisor as token_amount_usd
    from ava_full n
    left join prices p on n.day = p.day and n.label = p.symbol
),

usd_miss as (
select 'USDK' as symbol_d, 1 as price_d union all
select 'FRAX' as symbol_d, 1 as price_d union all
select 'UST' as symbol_d, 1 as price_d union all
select 'HUSD' as symbol_d, 1 as price_d union all
select 'LUNA' as symbol_d, 20 as price_d
),

sol as (
select z.day, bridge, token_address, label, avg(token_amount/divisor) as token_amount
    from (
    select date_trunc('day', a.timestamp) as day, 'Solana Wormhole' as bridge, token_address, label, max(amount_raw) as token_amount, divisor
    from erc20.""token_balances"" a
    left join tokens t on t.address = a.token_address
    where wallet_address = '\xf92cD566Ea4864356C5491c177A430C222d7e678' --Sol
    and date_trunc('day', a.timestamp) > '2021-07-01'
    group by 1, 2, 3, 4, 6
    order by 1
    ) z
    group by 1, 2, 3, 4
),

sol_label_swap as (
    select day, bridge, token_address, REPLACE(replace::text, 'renBTC', 'WBTC') as label, token_amount
    from (
        select day, bridge, token_address, token_amount, REPLACE(replace::text, 'WBTC', 'WBTC')
        from (
            select day, bridge, token_address, token_amount, REPLACE(replace::text, 'ibBTC', 'WBTC') 
            from (
                select day, bridge, token_address, token_amount, REPLACE(replace::text, 'BBTC', 'WBTC')
                from (
                    select day, bridge, token_address, token_amount, REPLACE(label::text, 'HBTC', 'WBTC')
                    from sol
                ) z
            ) w
        ) x
    ) m
),

sol_tvl as (
select day, bridge, label, sum(token_amount*price) as token_amount_usd
from (
    select 
        s.day, 
        bridge, 
        token_address, 
        label, 
        token_amount, 
        COALESCE(p.price, 0) + COALESCE(u.price_d, 0) as price
    from sol_label_swap s
    left join prices p on p.day = s.day and p.symbol = s.label
    left join usd_miss u on s.label = u.symbol_d
) w
group by 1, 2, 3
),

near as (
    select *
    from (
    select date_trunc('day', a.timestamp) as day, 'Near Rainbow Bridge' as bridge, token_address, label, max(amount_raw) as token_amount, divisor
    from erc20.""token_balances"" a
    left join tokens t on t.address = a.token_address
    where wallet_address = '\x23ddd3e3692d1861ed57ede224608875809e127f' --Near
    group by 1, 2, 3, 4, 6
    order by 1
    ) z
),

weth_near as (
    select day, bridge, token_address, label, avg(token_amount) as token_amount, divisor
    from (
    SELECT day, 'Near Rainbow Bridge' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, SUM(transfer) over (order by day) as token_amount, 1 as divisor 
    FROM ( 
        SELECT date_trunc('day', evt_block_time) as day, sum(-value/1e18) as transfer
        FROM erc20.""ERC20_evt_Transfer""
        WHERE contract_address = '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' --WETH
        AND ""from"" = '\x23ddd3e3692d1861ed57ede224608875809e127f' --Near
        GROUP BY 1
        
        UNION all
        
        SELECT
        date_trunc('day', evt_block_time) as day, sum(value/1e18) as transfer
        FROM erc20.""ERC20_evt_Transfer""
        WHERE contract_address = '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' --WETH
        AND ""to"" = '\x23ddd3e3692d1861ed57ede224608875809e127f' --Near
        GROUP BY 1
    ) as net
    ) w
    group by 1, 2 ,3, 4, 6
),

near_full as(
    select * from near
),

near_tvl as (
    select n.day, bridge, token_address, label, token_amount*price/divisor as token_amount_usd
    from near_full n
    left join prices p on n.day = p.day and n.label = p.symbol
),

harmony as (
    select *
    from (
    select date_trunc('day', a.timestamp) as day, 'Harmony Bridges' as bridge, token_address, label, max(amount_raw) as token_amount, divisor
    from erc20.""token_balances"" a
    left join tokens t on t.address = a.token_address
    where wallet_address = '\x2dccdb493827e15a5dc8f8b72147e6c4a5620857' --harmony
    group by 1, 2, 3, 4, 6
    order by 1
    ) z
),

eth_harmony as (
    select day, bridge, token_address, label, avg(token_amount) as token_amount, divisor
    from (
    SELECT day, 'Harmony Bridges' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, SUM(transfer) over (order by day) as token_amount, 1 as divisor 
    FROM ( 
        SELECT date_trunc('day', block_time) as day, sum(-value/1e18) as transfer
        FROM ethereum.""traces""
        WHERE ""from"" = '\xf9fb1c508ff49f78b60d3a96dea99fa5d7f3a8a6' --Harmony
        GROUP BY 1
        
        UNION all
        
        SELECT
        date_trunc('day', block_time) as day, sum(value/1e18) as transfer
        FROM ethereum.""traces""
        WHERE ""to"" = '\xf9fb1c508ff49f78b60d3a96dea99fa5d7f3a8a6' --Harmony
        GROUP BY 1
    ) as net
    ) w
    group by 1, 2 ,3, 4, 6
),

harmony_full as(
    select * from harmony union all
    select * from eth_harmony
),

harmony_tvl as (
    select n.day, bridge, token_address, label, (token_amount::numeric * price::numeric)/divisor as token_amount_usd 
    from harmony_full n
    left join prices p on n.day = p.day and n.label = p.symbol
    where n.day > '2021-01-01'
),

ftm as (
    select *
    from (
    select date_trunc('day', a.timestamp) as day, 'Fantom Anyswap Bridge' as bridge, token_address, label, max(amount_raw) as token_amount, divisor
    from erc20.""token_balances"" a
    left join tokens t on t.address = a.token_address
    where wallet_address = '\xC564EE9f21Ed8A2d8E7e76c085740d5e4c5FaFbE' --Fantom Bridge
    group by 1, 2, 3, 4, 6
    order by 1
    ) z
),

weth_ftm as (
    select day, bridge, token_address, label, avg(token_amount) as token_amount, divisor
    from (
    SELECT day, 'Fantom Anyswap Bridge' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, SUM(transfer) over (order by day) as token_amount, 1 as divisor 
    FROM ( 
        SELECT date_trunc('day', evt_block_time) as day, sum(-value/1e18) as transfer
        FROM erc20.""ERC20_evt_Transfer""
        WHERE contract_address = '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' --WETH
        AND ""from"" = '\xC564EE9f21Ed8A2d8E7e76c085740d5e4c5FaFbE' --Fantom Bridge
        GROUP BY 1
        
        UNION all
        
        SELECT
        date_trunc('day', evt_block_time) as day, sum(value/1e18) as transfer
        FROM erc20.""ERC20_evt_Transfer""
        WHERE contract_address = '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' --WETH
        AND ""to"" = '\xC564EE9f21Ed8A2d8E7e76c085740d5e4c5FaFbE' --Fantom Bridge
        GROUP BY 1
    ) as net
    ) w
    group by 1, 2 ,3, 4, 6
),

ftm_full as(
    select * from ftm
),

ftm_tvl as (
    select n.day, bridge, token_address, label, token_amount*price/divisor as token_amount_usd
    from ftm_full n
    left join prices p on n.day = p.day and n.label = p.symbol
),

poly_erc as(
    select day, 'Polygon Bridges' as bridge, token_address, token_symbol as label, amount_usd as token_amount_usd
    from erc20.""view_token_balances_daily""
    where (wallet_address = '\x40ec5B33f54e0E8A33A975908C5BA1c14e5BbbDf'
    or wallet_address = '\x401F6c983eA34274ec46f84D70b31C151321188b')
    and day > '2021-04-01'
    and amount_usd > 5000
),

eth_poly as (
    select p.day, bridge, token_address, label, token_amount * price as token_amount_usd
    from (
    select day, bridge, token_address, label, avg(token_amount) as token_amount, divisor
    from (
    SELECT day, 'Polygon Bridges' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, balance as token_amount, 1 as divisor 
    FROM ( 
        select day, sum (balance) over (order by day) as balance -- h/t to MSilb7 for cracking this one
            from (
                select day, sum(transfer) as balance 
                from (
                    select date_trunc('day', block_time) as day, sum(-value/1e18) as transfer
                    from ethereum.""traces""
                    where ""from"" = '\x8484Ef722627bf18ca5Ae6BcF031c23E6e922B30' --Polygon Eth bridge
                    and (LOWER(call_type) not in ('delegatecall', 'callcode', 'staticcall') or call_type is null)
                    and ""tx_success"" = true
                    and success = true
                    group by 1
                    
                    union all
                    
                    select  date_trunc('day', block_time) as day, sum(value/1e18) as transfer
                    from ethereum.""traces""
                    where ""to"" = '\x8484Ef722627bf18ca5Ae6BcF031c23E6e922B30' --Polygon Eth bridge
                    and (LOWER(call_type) not in ('delegatecall', 'callcode', 'staticcall') or call_type is null)
                    and ""tx_success"" = true
                    and success = true
                    group by 1
                    
                    union all --gas costs
                    
                    select date_trunc('day', block_time) as day, -SUM(gas_price*""gas_used"")/1e18 as transfer
                    from ethereum.""transactions""
                    where ""from"" = '\x8484Ef722627bf18ca5Ae6BcF031c23E6e922B30' --Polygon Eth bridge
                    group by 1
                ) z
                group by 1
                order by 1
            ) w
    ) as net
    ) w
    group by 1, 2 ,3, 4, 6
    ) n
    left join prices p on n.day = p.day and n.label = p.symbol
),

poly_tvl as (
    select * from poly_erc union all
    select * from eth_poly
),

opt_erc as(
    select day, 'Optimism Bridges' as bridge, token_address, token_symbol as label, amount_usd as token_amount_usd
    from erc20.""view_token_balances_daily""
    where (wallet_address = '\x467194771dae2967aef3ecbedd3bf9a310c76c65' --Optimism DAI bridge
    or wallet_address = '\x99C9fc46f92E8a1c0deC1b1747d010903E884bE1' --Optimism bridge
    or wallet_address = '\x5Fd79D46EBA7F351fe49BFF9E87cdeA6c821eF9f') -- Optimism SNX escrow
    and day > '2021-05-01'
    and amount_usd > 5000
),

eth_opt as (
    select p.day, bridge, token_address, label, token_amount * price as token_amount_usd
    from (
    select day, bridge, token_address, label, avg(token_amount) as token_amount, divisor
    from (
    SELECT day, 'Optimism Bridges' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, balance as token_amount, 1 as divisor 
    FROM ( 
        select day, sum (balance) over (order by day) as balance -- h/t to MSilb7 for cracking this one
        from (
            select day, sum(transfer) as balance 
            from (
                select date_trunc('day', block_time) as day, sum(-value/1e18) as transfer
                from ethereum.""traces""
                where ""from"" = '\x99C9fc46f92E8a1c0deC1b1747d010903E884bE1' --optimism bridge
                and (LOWER(call_type) not in ('delegatecall', 'callcode', 'staticcall') or call_type is null)
                and ""tx_success"" = true
                and success = true
                group by 1
                
                union all
                
                select  date_trunc('day', block_time) as day, sum(value/1e18) as transfer
                from ethereum.""traces""
                where ""to"" = '\x99C9fc46f92E8a1c0deC1b1747d010903E884bE1' --optimism bridge
                and (LOWER(call_type) not in ('delegatecall', 'callcode', 'staticcall') or call_type is null)
                and ""tx_success"" = true
                and success = true
                group by 1
                
                union all --gas costs
                
                select date_trunc('day', block_time) as day, -SUM(gas_price*""gas_used"")/1e18 as transfer
                from ethereum.""transactions""
                where ""from"" = '\x99C9fc46f92E8a1c0deC1b1747d010903E884bE1' --optimism bridge
                group by 1
            ) z
            group by 1
            order by 1
        ) w
    ) as net
    ) w
    group by 1, 2 ,3, 4, 6
    ) n
    left join prices p on n.day = p.day and n.label = p.symbol
),

opt_tvl as (
    select * from opt_erc union all
    select * from eth_opt
),

arb_erc as(
    select day, 'Arbitrum Bridges' as bridge, token_address, token_symbol as label, amount_usd as token_amount_usd
    from erc20.""view_token_balances_daily""
    where (wallet_address = '\xcEe284F754E854890e311e3280b767F80797180d' --Arbitrum Custom Gateway
    or wallet_address = '\xa3A7B6F88361F48403514059F1F16C8E78d60EeC') --Arbitrum L1 ERC20 Gateway
    and day > '2021-05-01'
    and amount_usd > 5000
),

eth_arbitrum as (
    select p.day, bridge, token_address, label, token_amount * price as token_amount_usd
    from (
    select day, bridge, token_address, label, avg(token_amount) as token_amount, divisor
    from (
    SELECT day, 'Arbitrum Bridges' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, SUM(transfer) over (order by day) as token_amount, 1 as divisor 
    FROM ( 
         SELECT date_trunc('day', block_time) as day ,
            sum(
                CASE WHEN ""to"" != '\x2f06e43d850ac75926fa2866e40139475b58cb16' AND ""to"" != '\xcb0da32914a683286ed2d4890e8157ffecc9bd06' 
                THEN -value/1e18 
                WHEN ""to"" = '\x2f06e43d850ac75926fa2866e40139475b58cb16' OR ""to"" = '\xcb0da32914a683286ed2d4890e8157ffecc9bd06' 
                THEN value/1e18 
            END) as transfer
        FROM ethereum.""traces""
        WHERE ""from"" = '\x011B6E24FfB0B5f5fCc564cf4183C5BBBc96D515' --Arbitrum Inbox
        GROUP BY 1
    ) as net
    ) w
    group by 1, 2 ,3, 4, 6
    ) n
    left join prices p on n.day = p.day and n.label = p.symbol
),

arb_tvl as (
    select * from arb_erc union all
    select * from eth_arbitrum
),

xdai_erc as (
    select *
    from (
    select date_trunc('day', a.timestamp) as day, 'xDAI Bridges' as bridge, token_address, label, max(amount_raw) as token_amount, divisor
    from erc20.""token_balances"" a
    left join tokens t on t.address = a.token_address
    where wallet_address = '\x88ad09518695c6c3712AC10a214bE5109a655671' OR  wallet_address = '\x4aa42145Aa6Ebf72e164C9bBC74fbD3788045016'
    group by 1, 2, 3, 4, 6
    order by 1
    ) z
),

xdai_tvl as (
    select n.day, bridge, token_address, label, token_amount*price/divisor as token_amount_usd
    from xdai_erc n
    left join prices p on n.day = p.day and n.label = p.symbol
),

weth_celo as (
    select z.day, bridge, token_address, label, token_amount * price as token_amount_usd
    from (
        select day, bridge, token_address, label, avg(token_amount) as token_amount
        from (
            SELECT day, 'Celo Optics Bridge' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, SUM(transfer) over (order by day) as token_amount 
            FROM ( 
                SELECT date_trunc('day', evt_block_time) as day, sum(-value/1e18) as transfer
                FROM erc20.""ERC20_evt_Transfer""
                WHERE contract_address = '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' --WETH
                AND ""from"" = '\x6a39909e805A3eaDd2b61fFf61147796ca6aBB47' --Fantom Bridge
                GROUP BY 1
                
                UNION all
                
                SELECT
                date_trunc('day', evt_block_time) as day, sum(value/1e18) as transfer
                FROM erc20.""ERC20_evt_Transfer""
                WHERE contract_address = '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' --WETH
                AND ""to"" = '\x6a39909e805A3eaDd2b61fFf61147796ca6aBB47' --Fantom Bridge
                GROUP BY 1
            ) as net
        ) w
        group by 1, 2 ,3, 4
    ) z 
    left join prices p on z.day = p.day and z.label = p.symbol
),

celo_erc as(
    select day, 'Optics Bridge' as bridge, token_address, token_symbol as label, amount_usd as token_amount_usd
    from erc20.""view_token_balances_daily""
    where wallet_address = '\x6a39909e805A3eaDd2b61fFf61147796ca6aBB47'
    and day > '2021-04-01'
    and amount_usd > 5000
),

celo_tvl as(
    select * from celo_erc
),

bsc_tvl as(
    select day, 'BSC Anyswap Bridge' as bridge, token_address, token_symbol as label, amount_usd as token_amount_usd
    from erc20.""view_token_balances_daily""
    where wallet_address = '\x533e3c0e6b48010873B947bddC4721b1bDFF9648'
    and day > '2021-04-01'
    and amount_usd > 5000
),

moon_any_tvl as(
    select day, 'Moonriver Anyswap Bridge' as bridge, token_address, token_symbol as label, amount_usd as token_amount_usd
    from erc20.""view_token_balances_daily""
    where wallet_address = '\x10c6b61DbF44a083Aec3780aCF769C77BE747E23'
    and day > '2021-04-01'
    and amount_usd > 5000
),

rsk_tvl as(
    select day, 'RSK Token Bridge' as bridge, token_address, token_symbol as label, amount_usd as token_amount_usd
    from erc20.""view_token_balances_daily""
    where wallet_address = '\x12eD69359919Fc775bC2674860E8Fe2d2b6a7B5D'
    and day > '2021-04-01'
    and amount_usd > 5000
),

zksync_erc as(
    select  day, 'ZkSync Bridge' as bridge, token_address, token_symbol as label, amount_usd as token_amount_usd
    from erc20.""view_token_balances_daily"" a
    left join tokens t on t.address = a.token_address
    where wallet_address = '\xaBEA9132b05A70803a4E85094fD0e1800777fBEF'
    and day > '2021-04-01'
    and amount_usd > 5000
),

weth_zksync as (
    select p.day, bridge, token_address, label, token_amount * price as token_amount_usd
    from (
    select day, bridge, token_address, label, avg(token_amount) as token_amount, divisor
    from (
    SELECT day, 'ZkSync Bridge' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, SUM(transfer) over (order by day) as token_amount, 1 as divisor 
    FROM ( 
        SELECT date_trunc('day', block_time) as day, sum(value/1e18) as transfer
        FROM ethereum.""traces""
        WHERE ""from"" = '\xaBEA9132b05A70803a4E85094fD0e1800777fBEF'
        GROUP BY 1
        
        UNION all
        
        SELECT
        date_trunc('day', block_time) as day, sum(-value/1e18) as transfer
        FROM ethereum.""transactions""
        WHERE ""to"" = '\xaBEA9132b05A70803a4E85094fD0e1800777fBEF' 
        GROUP BY 1
    ) as net
    ) w
    group by 1, 2 ,3, 4, 6
    ) n
    left join prices p on n.day = p.day and n.label = p.symbol
),

zksync_tvl as(
    select * from zksync_erc
),

boba_erc as(
    select day, 'Boba Network Bridge' as bridge, token_address, token_symbol as label, amount_usd as token_amount_usd
    from erc20.""view_token_balances_daily""
    where wallet_address = '\xdc1664458d2f0B6090bEa60A8793A4E66c2F1c00'
    and day > '2021-04-01'
    and amount_usd > 5000
),

weth_boba as (
    select p.day, bridge, token_address, label, token_amount * price as token_amount_usd
    from (
    select day, bridge, token_address, label, avg(token_amount) as token_amount, divisor
    from (
    SELECT day, 'Boba Network Bridge' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, SUM(transfer) over (order by day) as token_amount, 1 as divisor 
    FROM ( 
        SELECT date_trunc('day', block_time) as day, sum(value/1e18) as transfer,""to"",""from""
        FROM ethereum.""traces""
        WHERE ""from"" = '\xdc1664458d2f0B6090bEa60A8793A4E66c2F1c00'
        AND ""to"" = '\x4828900eb9db5346dfe33ccf884984d8014c7b4b'
        AND value > 0
        GROUP BY 1,3,4
        
        UNION all
        
        SELECT date_trunc('day', block_time) as day, sum(-value/1e18) as transfer, ""to"",""from""
        FROM ethereum.""traces""
        WHERE ""from"" = '\x4828900eb9db5346dfe33ccf884984d8014c7b4b'
        AND ""to"" = '\xdc1664458d2f0B6090bEa60A8793A4E66c2F1c00'
        AND value > 0
        GROUP BY 1,3,4
    ) as net
    ) w
    group by 1, 2 ,3, 4, 6
    ) n
    left join prices p on n.day = p.day and n.label = p.symbol
),

boba_tvl as(
    select * from boba_erc
),

ronin as (
    select *
    from (
    select date_trunc('day', a.timestamp) as day, 'Ronin Bridge' as bridge, token_address, label, max(amount_raw) as token_amount, divisor
    from erc20.""token_balances"" a
    left join tokens t on t.address = a.token_address
    where wallet_address = '\x1A2a1c938CE3eC39b6D47113c7955bAa9DD454F2' --Ronin Bridge
    group by 1, 2, 3, 4, 6
    order by 1
    ) z
),

ronin_full as(
    select * from ronin
),

ronin_tvl as (
    select n.day, bridge, token_address, label, token_amount*price/divisor as token_amount_usd
    from ronin_full n
    left join prices p on n.day = p.day and n.label = p.symbol
),

nomad as (
    select *
    from (
    select date_trunc('day', a.timestamp) as day, 'Nomad Bridge' as bridge, token_address, label, max(amount_raw) as token_amount, divisor
    from erc20.""token_balances"" a
    left join tokens t on t.address = a.token_address
    where wallet_address = '\x88a69b4e698a4b090df6cf5bd7b2d47325ad30a3' --nomad
    group by 1, 2, 3, 4, 6
    order by 1
    ) z
),

nomad_tvl as (
    select n.day, bridge, token_address, label, (token_amount::numeric * price::numeric)/divisor as token_amount_usd 
    from nomad n
    left join prices p on n.day = p.day and n.label = p.symbol
    where n.day > '2021-01-01'
),

tvl_now as(
    select sum(TVL_usd) as TVL_usd, '1' as dummy
    from (
        select day, bridge, sum(token_amount_usd) as TVL_usd from harmony_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from near_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from sol_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from ftm_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from poly_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from opt_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from arb_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from xdai_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from celo_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from bsc_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from moon_any_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from rsk_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from boba_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from zksync_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from ronin_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from nomad_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from ava_tvl group by 1,2
    ) z
    where day = current_date - interval '1 days'
),

tvl_30d as(
    select sum(TVL_usd) as TVL_usd30, '1' as dummy
    from (
        select day, bridge, sum(token_amount_usd) as TVL_usd from harmony_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from near_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from sol_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from ftm_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from poly_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from opt_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from arb_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from xdai_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from celo_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from bsc_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from moon_any_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from rsk_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from boba_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from zksync_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from ronin_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from nomad_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from ava_tvl group by 1,2
    ) z
    where day = current_date - interval '30 days'
)

select (tvl_usd - tvl_usd30)*100 / tvl_usd
from (
select *
from tvl_30d tr
left join tvl_now t on t.dummy = tr.dummy 
) z"
145010,Ethereum Bridge Total TVL,,"[{""id"": 285620, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-09-09T20:22:26.081013+00:00"", ""__typename"": ""visualizations""}, {""id"": 285622, ""type"": ""counter"", ""name"": ""Total Value Locked \ud83c\udfe6"", ""options"": {""rowNumber"": 1, ""counterLabel"": """", ""stringPrefix"": ""$"", ""stringSuffix"": ""B"", ""stringDecimal"": 2, ""counterColName"": ""tvl_usd""}, ""created_at"": ""2021-09-09T20:27:37.682801+00:00"", ""__typename"": ""visualizations""}]","with tokens(address,label,divisor) as (
    select address, label, 10^decimals as divisor
    from (
    select ""contract_address"" as address, symbol as label, CAST (decimals AS numeric) as decimals
    from erc20.""tokens""
    ) z
),

prices as (
    select date_trunc('day', minute) as day, avg(price) as price, symbol, contract_address
    from prices.""usd""
    where minute > '2021-01-01'
    group by 1, 3, 4
),

ava as (
    select *
    from (
    select date_trunc('day', a.timestamp) as day, 'Avalanche Bridge' as bridge, token_address, label, max(amount_raw) as token_amount, divisor
    from erc20.""token_balances"" a
    left join tokens t on t.address = a.token_address
    where wallet_address = '\xe78388b4ce79068e89bf8aa7f218ef6b9ab0e9d0' --Avalanche
    group by 1, 2, 3, 4, 6
    order by 1
    ) z
),

weth_ava as (
    select day, bridge, token_address, label, avg(token_amount) as token_amount, divisor
    from (
    SELECT day, 'Avalanche Bridge' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, SUM(transfer) over (order by day) as token_amount, 1 as divisor 
    FROM ( 
        SELECT date_trunc('day', evt_block_time) as day, sum(-value/1e18) as transfer
        FROM erc20.""ERC20_evt_Transfer""
        WHERE contract_address = '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' --WETH
        AND ""from"" = '\xe78388b4ce79068e89bf8aa7f218ef6b9ab0e9d0' --Avalanche
        GROUP BY 1
        
        UNION all
        
        SELECT
        date_trunc('day', evt_block_time) as day, sum(value/1e18) as transfer
        FROM erc20.""ERC20_evt_Transfer""
        WHERE contract_address = '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' --WETH
        AND ""to"" = '\xe78388b4ce79068e89bf8aa7f218ef6b9ab0e9d0' --Avalanche
        GROUP BY 1
    ) as net
    ) w
    group by 1, 2 ,3, 4, 6
),

ava_full as(
    select * from ava
),

ava_tvl as (
    select n.day, bridge, token_address, label, token_amount*price/divisor as token_amount_usd
    from ava_full n
    left join prices p on n.day = p.day and n.label = p.symbol
),

usd_miss as (
select 'USDK' as symbol_d, 1 as price_d union all
select 'FRAX' as symbol_d, 1 as price_d union all
select 'UST' as symbol_d, 1 as price_d union all
select 'HUSD' as symbol_d, 1 as price_d union all
select 'LUNA' as symbol_d, 20 as price_d
),

sol as (
select z.day, bridge, token_address, label, avg(token_amount/divisor) as token_amount
    from (
    select date_trunc('day', a.timestamp) as day, 'Solana Wormhole' as bridge, token_address, label, max(amount_raw) as token_amount, divisor
    from erc20.""token_balances"" a
    left join tokens t on t.address = a.token_address
    where wallet_address = '\xf92cD566Ea4864356C5491c177A430C222d7e678' --Sol
    and date_trunc('day', a.timestamp) > '2021-07-01'
    group by 1, 2, 3, 4, 6
    order by 1
    ) z
    group by 1, 2, 3, 4
),

sol_label_swap as (
    select day, bridge, token_address, REPLACE(replace::text, 'renBTC', 'WBTC') as label, token_amount
    from (
        select day, bridge, token_address, token_amount, REPLACE(replace::text, 'WBTC', 'WBTC')
        from (
            select day, bridge, token_address, token_amount, REPLACE(replace::text, 'ibBTC', 'WBTC') 
            from (
                select day, bridge, token_address, token_amount, REPLACE(replace::text, 'BBTC', 'WBTC')
                from (
                    select day, bridge, token_address, token_amount, REPLACE(label::text, 'HBTC', 'WBTC')
                    from sol
                ) z
            ) w
        ) x
    ) m
),

sol_tvl as (
select day, bridge, label, sum(token_amount*price) as token_amount_usd
from (
    select 
        s.day, 
        bridge, 
        token_address, 
        label, 
        token_amount, 
        COALESCE(p.price, 0) + COALESCE(u.price_d, 0) as price
    from sol_label_swap s
    left join prices p on p.day = s.day and p.symbol = s.label
    left join usd_miss u on s.label = u.symbol_d
) w
group by 1, 2, 3
),

near as (
    select *
    from (
    select date_trunc('day', a.timestamp) as day, 'Near Rainbow Bridge' as bridge, token_address, label, max(amount_raw) as token_amount, divisor
    from erc20.""token_balances"" a
    left join tokens t on t.address = a.token_address
    where wallet_address = '\x23ddd3e3692d1861ed57ede224608875809e127f' --Near
    group by 1, 2, 3, 4, 6
    order by 1
    ) z
),

weth_near as (
    select day, bridge, token_address, label, avg(token_amount) as token_amount, divisor
    from (
    SELECT day, 'Near Rainbow Bridge' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, SUM(transfer) over (order by day) as token_amount, 1 as divisor 
    FROM ( 
        SELECT date_trunc('day', evt_block_time) as day, sum(-value/1e18) as transfer
        FROM erc20.""ERC20_evt_Transfer""
        WHERE contract_address = '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' --WETH
        AND ""from"" = '\x23ddd3e3692d1861ed57ede224608875809e127f' --Near
        GROUP BY 1
        
        UNION all
        
        SELECT
        date_trunc('day', evt_block_time) as day, sum(value/1e18) as transfer
        FROM erc20.""ERC20_evt_Transfer""
        WHERE contract_address = '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' --WETH
        AND ""to"" = '\x23ddd3e3692d1861ed57ede224608875809e127f' --Near
        GROUP BY 1
    ) as net
    ) w
    group by 1, 2 ,3, 4, 6
),

near_full as(
    select * from near
),

near_tvl as (
    select n.day, bridge, token_address, label, token_amount*price/divisor as token_amount_usd
    from near_full n
    left join prices p on n.day = p.day and n.label = p.symbol
),

harmony as (
    select *
    from (
    select date_trunc('day', a.timestamp) as day, 'Harmony Bridges' as bridge, token_address, label, max(amount_raw) as token_amount, divisor
    from erc20.""token_balances"" a
    left join tokens t on t.address = a.token_address
    where wallet_address = '\x2dccdb493827e15a5dc8f8b72147e6c4a5620857' --harmony
    group by 1, 2, 3, 4, 6
    order by 1
    ) z
),

eth_harmony as (
    select day, bridge, token_address, label, avg(token_amount) as token_amount, divisor
    from (
    SELECT day, 'Harmony Bridges' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, SUM(transfer) over (order by day) as token_amount, 1 as divisor 
    FROM ( 
        SELECT date_trunc('day', block_time) as day, sum(-value/1e18) as transfer
        FROM ethereum.""traces""
        WHERE ""from"" = '\xf9fb1c508ff49f78b60d3a96dea99fa5d7f3a8a6' --Harmony
        GROUP BY 1
        
        UNION all
        
        SELECT
        date_trunc('day', block_time) as day, sum(value/1e18) as transfer
        FROM ethereum.""traces""
        WHERE ""to"" = '\xf9fb1c508ff49f78b60d3a96dea99fa5d7f3a8a6' --Harmony
        GROUP BY 1
    ) as net
    ) w
    group by 1, 2 ,3, 4, 6
),

harmony_full as(
    select * from harmony union all
    select * from eth_harmony
),

harmony_tvl as (
    select n.day, bridge, token_address, label, (token_amount::numeric * price::numeric)/divisor as token_amount_usd 
    from harmony_full n
    left join prices p on n.day = p.day and n.label = p.symbol
    where n.day > '2021-01-01'
),

ftm as (
    select *
    from (
    select date_trunc('day', a.timestamp) as day, 'Fantom Anyswap Bridge' as bridge, token_address, label, max(amount_raw) as token_amount, divisor
    from erc20.""token_balances"" a
    left join tokens t on t.address = a.token_address
    where wallet_address = '\xC564EE9f21Ed8A2d8E7e76c085740d5e4c5FaFbE' --Fantom Bridge
    group by 1, 2, 3, 4, 6
    order by 1
    ) z
),

weth_ftm as (
    select day, bridge, token_address, label, avg(token_amount) as token_amount, divisor
    from (
    SELECT day, 'Fantom Anyswap Bridge' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, SUM(transfer) over (order by day) as token_amount, 1 as divisor 
    FROM ( 
        SELECT date_trunc('day', evt_block_time) as day, sum(-value/1e18) as transfer
        FROM erc20.""ERC20_evt_Transfer""
        WHERE contract_address = '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' --WETH
        AND ""from"" = '\xC564EE9f21Ed8A2d8E7e76c085740d5e4c5FaFbE' --Fantom Bridge
        GROUP BY 1
        
        UNION all
        
        SELECT
        date_trunc('day', evt_block_time) as day, sum(value/1e18) as transfer
        FROM erc20.""ERC20_evt_Transfer""
        WHERE contract_address = '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' --WETH
        AND ""to"" = '\xC564EE9f21Ed8A2d8E7e76c085740d5e4c5FaFbE' --Fantom Bridge
        GROUP BY 1
    ) as net
    ) w
    group by 1, 2 ,3, 4, 6
),

ftm_full as(
    select * from ftm
),

ftm_tvl as (
    select n.day, bridge, token_address, label, token_amount*price/divisor as token_amount_usd
    from ftm_full n
    left join prices p on n.day = p.day and n.label = p.symbol
),

poly_erc as(
    select day, 'Polygon Bridges' as bridge, token_address, token_symbol as label, amount_usd as token_amount_usd
    from erc20.""view_token_balances_daily""
    where (wallet_address = '\x40ec5B33f54e0E8A33A975908C5BA1c14e5BbbDf'
    or wallet_address = '\x401F6c983eA34274ec46f84D70b31C151321188b')
    and day > '2021-04-01'
    and amount_usd > 5000
),

eth_poly as (
    select p.day, bridge, token_address, label, token_amount * price as token_amount_usd
    from (
    select day, bridge, token_address, label, avg(token_amount) as token_amount, divisor
    from (
    SELECT day, 'Polygon Bridges' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, balance as token_amount, 1 as divisor 
    FROM ( 
        select day, sum (balance) over (order by day) as balance -- h/t to MSilb7 for cracking this one
            from (
                select day, sum(transfer) as balance 
                from (
                    select date_trunc('day', block_time) as day, sum(-value/1e18) as transfer
                    from ethereum.""traces""
                    where ""from"" = '\x8484Ef722627bf18ca5Ae6BcF031c23E6e922B30' --Polygon Eth bridge
                    and (LOWER(call_type) not in ('delegatecall', 'callcode', 'staticcall') or call_type is null)
                    and ""tx_success"" = true
                    and success = true
                    group by 1
                    
                    union all
                    
                    select  date_trunc('day', block_time) as day, sum(value/1e18) as transfer
                    from ethereum.""traces""
                    where ""to"" = '\x8484Ef722627bf18ca5Ae6BcF031c23E6e922B30' --Polygon Eth bridge
                    and (LOWER(call_type) not in ('delegatecall', 'callcode', 'staticcall') or call_type is null)
                    and ""tx_success"" = true
                    and success = true
                    group by 1
                    
                    union all --gas costs
                    
                    select date_trunc('day', block_time) as day, -SUM(gas_price*""gas_used"")/1e18 as transfer
                    from ethereum.""transactions""
                    where ""from"" = '\x8484Ef722627bf18ca5Ae6BcF031c23E6e922B30' --Polygon Eth bridge
                    group by 1
                ) z
                group by 1
                order by 1
            ) w
    ) as net
    ) w
    group by 1, 2 ,3, 4, 6
    ) n
    left join prices p on n.day = p.day and n.label = p.symbol
),

poly_tvl as (
    select * from poly_erc union all
    select * from eth_poly
),

opt_erc as(
    select day, 'Optimism Bridges' as bridge, token_address, token_symbol as label, amount_usd as token_amount_usd
    from erc20.""view_token_balances_daily""
    where (wallet_address = '\x467194771dae2967aef3ecbedd3bf9a310c76c65' --Optimism DAI bridge
    or wallet_address = '\x99C9fc46f92E8a1c0deC1b1747d010903E884bE1' --Optimism bridge
    or wallet_address = '\x5Fd79D46EBA7F351fe49BFF9E87cdeA6c821eF9f') -- Optimism SNX escrow
    and day > '2021-05-01'
    and amount_usd > 5000
),

eth_opt as (
    select p.day, bridge, token_address, label, token_amount * price as token_amount_usd
    from (
    select day, bridge, token_address, label, avg(token_amount) as token_amount, divisor
    from (
    SELECT day, 'Optimism Bridges' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, balance as token_amount, 1 as divisor 
    FROM ( 
        select day, sum (balance) over (order by day) as balance -- h/t to MSilb7 for cracking this one
        from (
            select day, sum(transfer) as balance 
            from (
                select date_trunc('day', block_time) as day, sum(-value/1e18) as transfer
                from ethereum.""traces""
                where ""from"" = '\x99C9fc46f92E8a1c0deC1b1747d010903E884bE1' --optimism bridge
                and (LOWER(call_type) not in ('delegatecall', 'callcode', 'staticcall') or call_type is null)
                and ""tx_success"" = true
                and success = true
                group by 1
                
                union all
                
                select  date_trunc('day', block_time) as day, sum(value/1e18) as transfer
                from ethereum.""traces""
                where ""to"" = '\x99C9fc46f92E8a1c0deC1b1747d010903E884bE1' --optimism bridge
                and (LOWER(call_type) not in ('delegatecall', 'callcode', 'staticcall') or call_type is null)
                and ""tx_success"" = true
                and success = true
                group by 1
                
                union all --gas costs
                
                select date_trunc('day', block_time) as day, -SUM(gas_price*""gas_used"")/1e18 as transfer
                from ethereum.""transactions""
                where ""from"" = '\x99C9fc46f92E8a1c0deC1b1747d010903E884bE1' --optimism bridge
                group by 1
            ) z
            group by 1
            order by 1
        ) w
    ) as net
    ) w
    group by 1, 2 ,3, 4, 6
    ) n
    left join prices p on n.day = p.day and n.label = p.symbol
),

opt_tvl as (
    select * from opt_erc union all
    select * from eth_opt
),

arb_erc as(
    select day, 'Arbitrum Bridges' as bridge, token_address, token_symbol as label, amount_usd as token_amount_usd
    from erc20.""view_token_balances_daily""
    where (wallet_address = '\xcEe284F754E854890e311e3280b767F80797180d' --Arbitrum Custom Gateway
    or wallet_address = '\xa3A7B6F88361F48403514059F1F16C8E78d60EeC') --Arbitrum L1 ERC20 Gateway
    and day > '2021-05-01'
    and amount_usd > 5000
),

eth_arbitrum as (
    select p.day, bridge, token_address, label, token_amount * price as token_amount_usd
    from (
    select day, bridge, token_address, label, avg(token_amount) as token_amount, divisor
    from (
    SELECT day, 'Arbitrum Bridges' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, SUM(transfer) over (order by day) as token_amount, 1 as divisor 
    FROM ( 
         SELECT date_trunc('day', block_time) as day ,
            sum(
                CASE WHEN ""to"" != '\x2f06e43d850ac75926fa2866e40139475b58cb16' AND ""to"" != '\xcb0da32914a683286ed2d4890e8157ffecc9bd06' 
                THEN -value/1e18 
                WHEN ""to"" = '\x2f06e43d850ac75926fa2866e40139475b58cb16' OR ""to"" = '\xcb0da32914a683286ed2d4890e8157ffecc9bd06' 
                THEN value/1e18 
            END) as transfer
        FROM ethereum.""traces""
        WHERE ""from"" = '\x011B6E24FfB0B5f5fCc564cf4183C5BBBc96D515' --Arbitrum Inbox
        GROUP BY 1
    ) as net
    ) w
    group by 1, 2 ,3, 4, 6
    ) n
    left join prices p on n.day = p.day and n.label = p.symbol
),

arb_tvl as (
    select * from arb_erc union all
    select * from eth_arbitrum
),

xdai_erc as (
    select *
    from (
    select date_trunc('day', a.timestamp) as day, 'xDAI Bridges' as bridge, token_address, label, max(amount_raw) as token_amount, divisor
    from erc20.""token_balances"" a
    left join tokens t on t.address = a.token_address
    where wallet_address = '\x88ad09518695c6c3712AC10a214bE5109a655671' OR  wallet_address = '\x4aa42145Aa6Ebf72e164C9bBC74fbD3788045016'
    group by 1, 2, 3, 4, 6
    order by 1
    ) z
),

xdai_tvl as (
    select n.day, bridge, token_address, label, token_amount*price/divisor as token_amount_usd
    from xdai_erc n
    left join prices p on n.day = p.day and n.label = p.symbol
),

weth_celo as (
    select z.day, bridge, token_address, label, token_amount * price as token_amount_usd
    from (
        select day, bridge, token_address, label, avg(token_amount) as token_amount
        from (
            SELECT day, 'Celo Optics Bridge' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, SUM(transfer) over (order by day) as token_amount 
            FROM ( 
                SELECT date_trunc('day', evt_block_time) as day, sum(-value/1e18) as transfer
                FROM erc20.""ERC20_evt_Transfer""
                WHERE contract_address = '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' --WETH
                AND ""from"" = '\x6a39909e805A3eaDd2b61fFf61147796ca6aBB47' --Fantom Bridge
                GROUP BY 1
                
                UNION all
                
                SELECT
                date_trunc('day', evt_block_time) as day, sum(value/1e18) as transfer
                FROM erc20.""ERC20_evt_Transfer""
                WHERE contract_address = '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' --WETH
                AND ""to"" = '\x6a39909e805A3eaDd2b61fFf61147796ca6aBB47' --Fantom Bridge
                GROUP BY 1
            ) as net
        ) w
        group by 1, 2 ,3, 4
    ) z 
    left join prices p on z.day = p.day and z.label = p.symbol
),

celo_erc as(
    select day, 'Optics Bridge' as bridge, token_address, token_symbol as label, amount_usd as token_amount_usd
    from erc20.""view_token_balances_daily""
    where wallet_address = '\x6a39909e805A3eaDd2b61fFf61147796ca6aBB47'
    and day > '2021-04-01'
    and amount_usd > 5000
),

celo_tvl as(
    select * from celo_erc
),

bsc_tvl as(
    select day, 'BSC Anyswap Bridge' as bridge, token_address, token_symbol as label, amount_usd as token_amount_usd
    from erc20.""view_token_balances_daily""
    where wallet_address = '\x533e3c0e6b48010873B947bddC4721b1bDFF9648'
    and day > '2021-04-01'
    and amount_usd > 5000
),

moon_any_tvl as(
    select day, 'Moonriver Anyswap Bridge' as bridge, token_address, token_symbol as label, amount_usd as token_amount_usd
    from erc20.""view_token_balances_daily""
    where wallet_address = '\x10c6b61DbF44a083Aec3780aCF769C77BE747E23'
    and day > '2021-04-01'
    and amount_usd > 5000
),

rsk_tvl as(
    select day, 'RSK Token Bridge' as bridge, token_address, token_symbol as label, amount_usd as token_amount_usd
    from erc20.""view_token_balances_daily""
    where wallet_address = '\x12eD69359919Fc775bC2674860E8Fe2d2b6a7B5D'
    and day > '2021-04-01'
    and amount_usd > 5000
),

zksync_erc as(
    select  day, 'ZkSync Bridge' as bridge, token_address, token_symbol as label, amount_usd as token_amount_usd
    from erc20.""view_token_balances_daily"" a
    left join tokens t on t.address = a.token_address
    where wallet_address = '\xaBEA9132b05A70803a4E85094fD0e1800777fBEF'
    and day > '2021-04-01'
    and amount_usd > 5000
),

weth_zksync as (
    select p.day, bridge, token_address, label, token_amount * price as token_amount_usd
    from (
    select day, bridge, token_address, label, avg(token_amount) as token_amount, divisor
    from (
    SELECT day, 'ZkSync Bridge' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, SUM(transfer) over (order by day) as token_amount, 1 as divisor 
    FROM ( 
        SELECT date_trunc('day', block_time) as day, sum(value/1e18) as transfer
        FROM ethereum.""traces""
        WHERE ""from"" = '\xaBEA9132b05A70803a4E85094fD0e1800777fBEF'
        GROUP BY 1
        
        UNION all
        
        SELECT
        date_trunc('day', block_time) as day, sum(-value/1e18) as transfer
        FROM ethereum.""transactions""
        WHERE ""to"" = '\xaBEA9132b05A70803a4E85094fD0e1800777fBEF' 
        GROUP BY 1
    ) as net
    ) w
    group by 1, 2 ,3, 4, 6
    ) n
    left join prices p on n.day = p.day and n.label = p.symbol
),

zksync_tvl as(
    select * from zksync_erc
),

boba_erc as(
    select day, 'Boba Network Bridge' as bridge, token_address, token_symbol as label, amount_usd as token_amount_usd
    from erc20.""view_token_balances_daily""
    where wallet_address = '\xdc1664458d2f0B6090bEa60A8793A4E66c2F1c00'
    and day > '2021-04-01'
    and amount_usd > 5000
),

weth_boba as (
    select p.day, bridge, token_address, label, token_amount * price as token_amount_usd
    from (
    select day, bridge, token_address, label, avg(token_amount) as token_amount, divisor
    from (
    SELECT day, 'Boba Network Bridge' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, SUM(transfer) over (order by day) as token_amount, 1 as divisor 
    FROM ( 
        SELECT date_trunc('day', block_time) as day, sum(value/1e18) as transfer,""to"",""from""
        FROM ethereum.""traces""
        WHERE ""from"" = '\xdc1664458d2f0B6090bEa60A8793A4E66c2F1c00'
        AND ""to"" = '\x4828900eb9db5346dfe33ccf884984d8014c7b4b'
        AND value > 0
        GROUP BY 1,3,4
        
        UNION all
        
        SELECT date_trunc('day', block_time) as day, sum(-value/1e18) as transfer, ""to"",""from""
        FROM ethereum.""traces""
        WHERE ""from"" = '\x4828900eb9db5346dfe33ccf884984d8014c7b4b'
        AND ""to"" = '\xdc1664458d2f0B6090bEa60A8793A4E66c2F1c00'
        AND value > 0
        GROUP BY 1,3,4
    ) as net
    ) w
    group by 1, 2 ,3, 4, 6
    ) n
    left join prices p on n.day = p.day and n.label = p.symbol
),

boba_tvl as(
    select * from boba_erc
),

ronin as (
    select *
    from (
    select date_trunc('day', a.timestamp) as day, 'Ronin Bridge' as bridge, token_address, label, max(amount_raw) as token_amount, divisor
    from erc20.""token_balances"" a
    left join tokens t on t.address = a.token_address
    where wallet_address = '\x1A2a1c938CE3eC39b6D47113c7955bAa9DD454F2' --Ronin Bridge
    group by 1, 2, 3, 4, 6
    order by 1
    ) z
),

ronin_full as(
    select * from ronin
),

ronin_tvl as (
    select n.day, bridge, token_address, label, avg(token_amount*price/divisor) as token_amount_usd
    from ronin_full n
    left join prices p on n.day = p.day and n.label = p.symbol
    group by 1, 2, 3, 4
),

synapse as (
    select *
    from (
    select date_trunc('day', a.timestamp) as day, 'Synapse Bridge' as bridge, token_address, label, max(amount_raw) as token_amount, divisor
    from erc20.""token_balances"" a
    left join tokens t on t.address = a.token_address
    where wallet_address = '\x2796317b0fF8538F253012862c06787Adfb8cEb6' --synapse
    group by 1, 2, 3, 4, 6
    order by 1
    ) z
),

synapse_tvl as (
    select n.day, bridge, token_address, label, (token_amount::numeric * price::numeric)/divisor as token_amount_usd 
    from synapse n
    left join prices p on n.day = p.day and n.label = p.symbol
    where n.day > '2021-01-01'
),

nomad as (
    select *
    from (
    select date_trunc('day', a.timestamp) as day, 'Nomad Bridge' as bridge, token_address, label, max(amount_raw) as token_amount, divisor
    from erc20.""token_balances"" a
    left join tokens t on t.address = a.token_address
    where wallet_address = '\x88a69b4e698a4b090df6cf5bd7b2d47325ad30a3' --nomad
    group by 1, 2, 3, 4, 6
    order by 1
    ) z
),

nomad_tvl as (
    select n.day, bridge, token_address, label, (token_amount::numeric * price::numeric)/divisor as token_amount_usd 
    from nomad n
    left join prices p on n.day = p.day and n.label = p.symbol
    where n.day > '2021-01-01'
)

select sum(TVL_usd)/1e9 as TVL_usd
from (
    select day, bridge, sum(token_amount_usd) as TVL_usd from harmony_tvl group by 1,2 union all
    select day, bridge, sum(token_amount_usd) as TVL_usd from near_tvl group by 1,2 union all
    select day, bridge, sum(token_amount_usd) as TVL_usd from sol_tvl group by 1,2 union all
    select day, bridge, sum(token_amount_usd) as TVL_usd from ftm_tvl group by 1,2 union all
    select day, bridge, sum(token_amount_usd) as TVL_usd from poly_tvl group by 1,2 union all
    select day, bridge, sum(token_amount_usd) as TVL_usd from opt_tvl group by 1,2 union all
    select day, bridge, sum(token_amount_usd) as TVL_usd from arb_tvl group by 1,2 union all
    select day, bridge, sum(token_amount_usd) as TVL_usd from xdai_tvl group by 1,2 union all
    select day, bridge, sum(token_amount_usd) as TVL_usd from celo_tvl group by 1,2 union all
    select day, bridge, sum(token_amount_usd) as TVL_usd from bsc_tvl group by 1,2 union all
    select day, bridge, sum(token_amount_usd) as TVL_usd from moon_any_tvl group by 1,2 union all
    select day, bridge, sum(token_amount_usd) as TVL_usd from rsk_tvl group by 1,2 union all
    select day, bridge, sum(token_amount_usd) as TVL_usd from boba_tvl group by 1,2 union all
    select day, bridge, sum(token_amount_usd) as TVL_usd from zksync_tvl group by 1,2 union all
    select day, bridge, sum(token_amount_usd) as TVL_usd from ronin_tvl group by 1,2 union all
    select day, bridge, sum(token_amount_usd) as TVL_usd from synapse_tvl group by 1,2 union all
    select day, bridge, sum(token_amount_usd) as TVL_usd from nomad_tvl group by 1,2 union all
    select day, bridge, sum(token_amount_usd) as TVL_usd from ava_tvl group by 1,2
) z
where day = current_date"
145067,Ethereum bridges TVL ranking 🌐,,"[{""id"": 285735, ""type"": ""table"", ""name"": """", ""options"": {""columns"": [{""name"": ""relative_tvl_change"", ""title"": ""tvl_change_7d"", ""numberFormat"": ""0,0%""}, {""name"": ""tvl_usd"", ""numberFormat"": ""$0,0""}]}, ""created_at"": ""2021-09-09T21:08:13.539109+00:00"", ""__typename"": ""visualizations""}, {""id"": 285797, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""-"", ""tickFormat"": ""o.oo%""}], ""legend"": {""enabled"": true}, ""series"": {""percentValues"": false}, ""reverseX"": false, ""columnMapping"": {""day"": ""x"", ""bridge"": ""series"", ""relative_tvl_change"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""line""}, ""created_at"": ""2021-09-09T21:32:50.328298+00:00"", ""__typename"": ""visualizations""}]","with tokens(address,label,divisor) as (
    select address, label, 10^decimals as divisor
    from (
    select ""contract_address"" as address, symbol as label, CAST (decimals AS numeric) as decimals
    from erc20.""tokens""
    ) z
),

prices as (
    select date_trunc('day', minute) as day, avg(price) as price, symbol, contract_address
    from prices.""usd""
    where minute > '2021-01-01'
    group by 1, 3, 4
),

ava as (
    select *
    from (
    select date_trunc('day', a.timestamp) as day, 'Avalanche Bridge' as bridge, token_address, label, max(amount_raw) as token_amount, divisor
    from erc20.""token_balances"" a
    left join tokens t on t.address = a.token_address
    where wallet_address = '\xe78388b4ce79068e89bf8aa7f218ef6b9ab0e9d0' --Avalanche
    group by 1, 2, 3, 4, 6
    order by 1
    ) z
),

weth_ava as (
    select day, bridge, token_address, label, avg(token_amount) as token_amount, divisor
    from (
    SELECT day, 'Avalanche Bridge' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, SUM(transfer) over (order by day) as token_amount, 1 as divisor 
    FROM ( 
        SELECT date_trunc('day', evt_block_time) as day, sum(-value/1e18) as transfer
        FROM erc20.""ERC20_evt_Transfer""
        WHERE contract_address = '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' --WETH
        AND ""from"" = '\xe78388b4ce79068e89bf8aa7f218ef6b9ab0e9d0' --Avalanche
        GROUP BY 1
        
        UNION all
        
        SELECT
        date_trunc('day', evt_block_time) as day, sum(value/1e18) as transfer
        FROM erc20.""ERC20_evt_Transfer""
        WHERE contract_address = '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' --WETH
        AND ""to"" = '\xe78388b4ce79068e89bf8aa7f218ef6b9ab0e9d0' --Avalanche
        GROUP BY 1
    ) as net
    ) w
    group by 1, 2 ,3, 4, 6
),

ava_full as(
    select * from ava
),

ava_tvl as (
    select n.day, bridge, token_address, label, token_amount*price/divisor as token_amount_usd
    from ava_full n
    left join prices p on n.day = p.day and n.label = p.symbol
),

usd_miss as (
select 'USDK' as symbol_d, 1 as price_d union all
select 'FRAX' as symbol_d, 1 as price_d union all
select 'UST' as symbol_d, 1 as price_d union all
select 'HUSD' as symbol_d, 1 as price_d union all
select 'LUNA' as symbol_d, 20 as price_d
),

sol as (
select z.day, bridge, token_address, label, avg(token_amount/divisor) as token_amount
    from (
    select date_trunc('day', a.timestamp) as day, 'Solana Wormhole' as bridge, token_address, label, max(amount_raw) as token_amount, divisor
    from erc20.""token_balances"" a
    left join tokens t on t.address = a.token_address
    where wallet_address = '\xf92cD566Ea4864356C5491c177A430C222d7e678' --Sol
    and date_trunc('day', a.timestamp) > '2021-07-01'
    group by 1, 2, 3, 4, 6
    order by 1
    ) z
    group by 1, 2, 3, 4
),

sol_label_swap as (
    select day, bridge, token_address, REPLACE(replace::text, 'renBTC', 'WBTC') as label, token_amount
    from (
        select day, bridge, token_address, token_amount, REPLACE(replace::text, 'WBTC', 'WBTC')
        from (
            select day, bridge, token_address, token_amount, REPLACE(replace::text, 'ibBTC', 'WBTC') 
            from (
                select day, bridge, token_address, token_amount, REPLACE(replace::text, 'BBTC', 'WBTC')
                from (
                    select day, bridge, token_address, token_amount, REPLACE(label::text, 'HBTC', 'WBTC')
                    from sol
                ) z
            ) w
        ) x
    ) m
),

sol_tvl as (
select day, bridge, label, sum(token_amount*price) as token_amount_usd
from (
    select 
        s.day, 
        bridge, 
        token_address, 
        label, 
        token_amount, 
        COALESCE(p.price, 0) + COALESCE(u.price_d, 0) as price
    from sol_label_swap s
    left join prices p on p.day = s.day and p.symbol = s.label
    left join usd_miss u on s.label = u.symbol_d
) w
group by 1, 2, 3
),

near as (
    select *
    from (
    select date_trunc('day', a.timestamp) as day, 'Near Raibow' as bridge, token_address, label, max(amount_raw) as token_amount, divisor
    from erc20.""token_balances"" a
    left join tokens t on t.address = a.token_address
    where wallet_address = '\x23ddd3e3692d1861ed57ede224608875809e127f' --Near
    group by 1, 2, 3, 4, 6
    order by 1
    ) z
),

eth_near as (
    select day, bridge, token_address, label, avg(token_amount) as token_amount, divisor
    from (
    SELECT day, 'Near Raibow' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, SUM(transfer) over (order by day) as token_amount, 1 as divisor 
    FROM ( 
        SELECT date_trunc('day', block_time) as day, sum(-value/1e18) as transfer
        FROM ethereum.""traces""
        WHERE ""from"" = '\x6BFaD42cFC4EfC96f529D786D643Ff4A8B89FA52' --Near
        GROUP BY 1
        
        UNION all
        
        SELECT
        date_trunc('day', block_time) as day, sum(value/1e18) as transfer
        FROM ethereum.""traces""
        WHERE ""to"" = '\x6BFaD42cFC4EfC96f529D786D643Ff4A8B89FA52' --Near
        GROUP BY 1
    ) as net
    ) w
    group by 1, 2 ,3, 4, 6
),

near_full as(
    select * from near union all
    select * from eth_near
),

near_tvl as (
    select n.day, bridge, token_address, label, (token_amount::numeric * price::numeric)/divisor as token_amount_usd 
    from near_full n
    left join prices p on n.day = p.day and n.label = p.symbol
    where n.day > '2021-01-01'
),

harmony as (
    select *
    from (
    select date_trunc('day', a.timestamp) as day, 'Harmony Bridges' as bridge, token_address, label, max(amount_raw) as token_amount, divisor
    from erc20.""token_balances"" a
    left join tokens t on t.address = a.token_address
    where wallet_address = '\x2dccdb493827e15a5dc8f8b72147e6c4a5620857' --harmony
    group by 1, 2, 3, 4, 6
    order by 1
    ) z
),

eth_harmony as (
    select day, bridge, token_address, label, avg(token_amount) as token_amount, divisor
    from (
    SELECT day, 'Harmony Bridges' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, SUM(transfer) over (order by day) as token_amount, 1 as divisor 
    FROM ( 
        SELECT date_trunc('day', block_time) as day, sum(-value/1e18) as transfer
        FROM ethereum.""traces""
        WHERE ""from"" = '\xf9fb1c508ff49f78b60d3a96dea99fa5d7f3a8a6' --Harmony
        GROUP BY 1
        
        UNION all
        
        SELECT
        date_trunc('day', block_time) as day, sum(value/1e18) as transfer
        FROM ethereum.""traces""
        WHERE ""to"" = '\xf9fb1c508ff49f78b60d3a96dea99fa5d7f3a8a6' --Harmony
        GROUP BY 1
    ) as net
    ) w
    group by 1, 2 ,3, 4, 6
),

harmony_full as(
    select * from harmony union all
    select * from eth_harmony
),

harmony_tvl as (
    select n.day, bridge, token_address, label, (token_amount::numeric * price::numeric)/divisor as token_amount_usd 
    from harmony_full n
    left join prices p on n.day = p.day and n.label = p.symbol
    where n.day > '2021-01-01'
),

ftm as (
    select *
    from (
    select date_trunc('day', a.timestamp) as day, 'Fantom Anyswap Bridge' as bridge, token_address, label, max(amount_raw) as token_amount, divisor
    from erc20.""token_balances"" a
    left join tokens t on t.address = a.token_address
    where wallet_address = '\xC564EE9f21Ed8A2d8E7e76c085740d5e4c5FaFbE' --Fantom Bridge
    group by 1, 2, 3, 4, 6
    order by 1
    ) z
),

weth_ftm as (
    select day, bridge, token_address, label, avg(token_amount) as token_amount, divisor
    from (
    SELECT day, 'Fantom Anyswap Bridge' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, SUM(transfer) over (order by day) as token_amount, 1 as divisor 
    FROM ( 
        SELECT date_trunc('day', evt_block_time) as day, sum(-value/1e18) as transfer
        FROM erc20.""ERC20_evt_Transfer""
        WHERE contract_address = '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' --WETH
        AND ""from"" = '\xC564EE9f21Ed8A2d8E7e76c085740d5e4c5FaFbE' --Fantom Bridge
        GROUP BY 1
        
        UNION all
        
        SELECT
        date_trunc('day', evt_block_time) as day, sum(value/1e18) as transfer
        FROM erc20.""ERC20_evt_Transfer""
        WHERE contract_address = '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' --WETH
        AND ""to"" = '\xC564EE9f21Ed8A2d8E7e76c085740d5e4c5FaFbE' --Fantom Bridge
        GROUP BY 1
    ) as net
    ) w
    group by 1, 2 ,3, 4, 6
),

ftm_full as(
    select * from ftm
),

ftm_tvl as (
    select n.day, bridge, token_address, label, token_amount*price/divisor as token_amount_usd
    from ftm_full n
    left join prices p on n.day = p.day and n.label = p.symbol
),

poly_erc as(
    select day, 'Polygon Bridges' as bridge, token_address, token_symbol as label, amount_usd as token_amount_usd
    from erc20.""view_token_balances_daily""
    where (wallet_address = '\x40ec5B33f54e0E8A33A975908C5BA1c14e5BbbDf'
    or wallet_address = '\x401F6c983eA34274ec46f84D70b31C151321188b')
    and day > '2021-04-01'
    and amount_usd > 5000
),

eth_poly as (
    select p.day, bridge, token_address, label, token_amount * price as token_amount_usd
    from (
    select day, bridge, token_address, label, avg(token_amount) as token_amount, divisor
    from (
    SELECT day, 'Polygon Bridges' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, balance as token_amount, 1 as divisor 
    FROM ( 
        select day, sum (balance) over (order by day) as balance -- h/t to MSilb7 for cracking this one
            from (
                select day, sum(transfer) as balance 
                from (
                    select date_trunc('day', block_time) as day, sum(-value/1e18) as transfer
                    from ethereum.""traces""
                    where ""from"" = '\x8484Ef722627bf18ca5Ae6BcF031c23E6e922B30' --Polygon Eth bridge
                    and (LOWER(call_type) not in ('delegatecall', 'callcode', 'staticcall') or call_type is null)
                    and ""tx_success"" = true
                    and success = true
                    group by 1
                    
                    union all
                    
                    select  date_trunc('day', block_time) as day, sum(value/1e18) as transfer
                    from ethereum.""traces""
                    where ""to"" = '\x8484Ef722627bf18ca5Ae6BcF031c23E6e922B30' --Polygon Eth bridge
                    and (LOWER(call_type) not in ('delegatecall', 'callcode', 'staticcall') or call_type is null)
                    and ""tx_success"" = true
                    and success = true
                    group by 1
                    
                    union all --gas costs
                    
                    select date_trunc('day', block_time) as day, -SUM(gas_price*""gas_used"")/1e18 as transfer
                    from ethereum.""transactions""
                    where ""from"" = '\x8484Ef722627bf18ca5Ae6BcF031c23E6e922B30' --Polygon Eth bridge
                    group by 1
                ) z
                group by 1
                order by 1
            ) w
    ) as net
    ) w
    group by 1, 2 ,3, 4, 6
    ) n
    left join prices p on n.day = p.day and n.label = p.symbol
),

poly_tvl as (
    select * from poly_erc union all
    select * from eth_poly
),

opt_erc as(
    select day, 'Optimism Bridges' as bridge, token_address, token_symbol as label, amount_usd as token_amount_usd
    from erc20.""view_token_balances_daily""
    where (wallet_address = '\x467194771dae2967aef3ecbedd3bf9a310c76c65' --Optimism DAI bridge
    or wallet_address = '\x99C9fc46f92E8a1c0deC1b1747d010903E884bE1' --Optimism bridge
    or wallet_address = '\x5Fd79D46EBA7F351fe49BFF9E87cdeA6c821eF9f') -- Optimism SNX escrow
    and day > '2021-05-01'
    and amount_usd > 5000
),

eth_opt as (
    select p.day, bridge, token_address, label, token_amount * price as token_amount_usd
    from (
    select day, bridge, token_address, label, avg(token_amount) as token_amount, divisor
    from (
    SELECT day, 'Optimism Bridges' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, balance as token_amount, 1 as divisor 
    FROM ( 
        select day, sum (balance) over (order by day) as balance -- h/t to MSilb7 for cracking this one
        from (
            select day, sum(transfer) as balance 
            from (
                select date_trunc('day', block_time) as day, sum(-value/1e18) as transfer
                from ethereum.""traces""
                where ""from"" = '\x99C9fc46f92E8a1c0deC1b1747d010903E884bE1' --optimism bridge
                and (LOWER(call_type) not in ('delegatecall', 'callcode', 'staticcall') or call_type is null)
                and ""tx_success"" = true
                and success = true
                group by 1
                
                union all
                
                select  date_trunc('day', block_time) as day, sum(value/1e18) as transfer
                from ethereum.""traces""
                where ""to"" = '\x99C9fc46f92E8a1c0deC1b1747d010903E884bE1' --optimism bridge
                and (LOWER(call_type) not in ('delegatecall', 'callcode', 'staticcall') or call_type is null)
                and ""tx_success"" = true
                and success = true
                group by 1
                
                union all --gas costs
                
                select date_trunc('day', block_time) as day, -SUM(gas_price*""gas_used"")/1e18 as transfer
                from ethereum.""transactions""
                where ""from"" = '\x99C9fc46f92E8a1c0deC1b1747d010903E884bE1' --optimism bridge
                group by 1
            ) z
            group by 1
            order by 1
        ) w
    ) as net
    ) w
    group by 1, 2 ,3, 4, 6
    ) n
    left join prices p on n.day = p.day and n.label = p.symbol
),

opt_tvl as (
    select * from opt_erc union all
    select * from eth_opt
),

arb_erc as(
    select day, 'Arbitrum Bridges' as bridge, token_address, token_symbol as label, amount_usd as token_amount_usd
    from erc20.""view_token_balances_daily""
    where (wallet_address = '\xcEe284F754E854890e311e3280b767F80797180d' --Arbitrum Custom Gateway
    or wallet_address = '\xa3A7B6F88361F48403514059F1F16C8E78d60EeC') --Arbitrum L1 ERC20 Gateway
    and day > '2021-05-01'
    and amount_usd > 5000
),

eth_arbitrum as (
    select p.day, bridge, token_address, label, token_amount * price as token_amount_usd
    from (
    select day, bridge, token_address, label, avg(token_amount) as token_amount, divisor
    from (
    SELECT day, 'Arbitrum Bridges' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, SUM(transfer) over (order by day) as token_amount, 1 as divisor 
    FROM ( 
         SELECT date_trunc('day', block_time) as day ,
            sum(
                CASE WHEN ""to"" != '\x2f06e43d850ac75926fa2866e40139475b58cb16' AND ""to"" != '\xcb0da32914a683286ed2d4890e8157ffecc9bd06' 
                THEN -value/1e18 
                WHEN ""to"" = '\x2f06e43d850ac75926fa2866e40139475b58cb16' OR ""to"" = '\xcb0da32914a683286ed2d4890e8157ffecc9bd06' 
                THEN value/1e18 
            END) as transfer
        FROM ethereum.""traces""
        WHERE ""from"" = '\x011B6E24FfB0B5f5fCc564cf4183C5BBBc96D515' --Arbitrum Inbox
        GROUP BY 1
    ) as net
    ) w
    group by 1, 2 ,3, 4, 6
    ) n
    left join prices p on n.day = p.day and n.label = p.symbol
),

arb_tvl as (
    select * from arb_erc union all
    select * from eth_arbitrum
),

xdai_erc as (
    select *
    from (
    select date_trunc('day', a.timestamp) as day, 'xDAI Bridges' as bridge, token_address, label, max(amount_raw) as token_amount, divisor
    from erc20.""token_balances"" a
    left join tokens t on t.address = a.token_address
    where wallet_address = '\x88ad09518695c6c3712AC10a214bE5109a655671' OR  wallet_address = '\x4aa42145Aa6Ebf72e164C9bBC74fbD3788045016'
    group by 1, 2, 3, 4, 6
    order by 1
    ) z
),

xdai_tvl as (
    select n.day, bridge, token_address, label, token_amount*price/divisor as token_amount_usd
    from xdai_erc n
    left join prices p on n.day = p.day and n.label = p.symbol
),

weth_celo as (
    select z.day, bridge, token_address, label, token_amount * price as token_amount_usd
    from (
        select day, bridge, token_address, label, avg(token_amount) as token_amount
        from (
            SELECT day, 'Celo Optics Bridge' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, SUM(transfer) over (order by day) as token_amount 
            FROM ( 
                SELECT date_trunc('day', evt_block_time) as day, sum(-value/1e18) as transfer
                FROM erc20.""ERC20_evt_Transfer""
                WHERE contract_address = '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' --WETH
                AND ""from"" = '\x6a39909e805A3eaDd2b61fFf61147796ca6aBB47' --Fantom Bridge
                GROUP BY 1
                
                UNION all
                
                SELECT
                date_trunc('day', evt_block_time) as day, sum(value/1e18) as transfer
                FROM erc20.""ERC20_evt_Transfer""
                WHERE contract_address = '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' --WETH
                AND ""to"" = '\x6a39909e805A3eaDd2b61fFf61147796ca6aBB47' --Fantom Bridge
                GROUP BY 1
            ) as net
        ) w
        group by 1, 2 ,3, 4
    ) z 
    left join prices p on z.day = p.day and z.label = p.symbol
),

celo_erc as(
    select day, 'Optics Bridge' as bridge, token_address, token_symbol as label, amount_usd as token_amount_usd
    from erc20.""view_token_balances_daily""
    where wallet_address = '\x6a39909e805A3eaDd2b61fFf61147796ca6aBB47'
    and day > '2021-04-01'
    and amount_usd > 5000
),

celo_tvl as(
    select * from celo_erc
),

bsc_tvl as(
    select day, 'BSC Anyswap Bridge' as bridge, token_address, token_symbol as label, amount_usd as token_amount_usd
    from erc20.""view_token_balances_daily""
    where wallet_address = '\x533e3c0e6b48010873B947bddC4721b1bDFF9648'
    and day > '2021-04-01'
    and amount_usd > 5000
),

moon_any_tvl as(
    select day, 'Moonriver Anyswap Bridge' as bridge, token_address, token_symbol as label, amount_usd as token_amount_usd
    from erc20.""view_token_balances_daily""
    where wallet_address = '\x10c6b61DbF44a083Aec3780aCF769C77BE747E23'
    and day > '2021-04-01'
    and amount_usd > 5000
),

rsk_tvl as(
    select day, 'RSK Token Bridge' as bridge, token_address, token_symbol as label, amount_usd as token_amount_usd
    from erc20.""view_token_balances_daily""
    where wallet_address = '\x12eD69359919Fc775bC2674860E8Fe2d2b6a7B5D'
    and day > '2021-04-01'
    and amount_usd > 5000
),

zksync_erc as(
    select  day, 'ZkSync Bridge' as bridge, token_address, token_symbol as label, amount_usd as token_amount_usd
    from erc20.""view_token_balances_daily"" a
    left join tokens t on t.address = a.token_address
    where wallet_address = '\xaBEA9132b05A70803a4E85094fD0e1800777fBEF'
    and day > '2021-04-01'
    and amount_usd > 5000
),

weth_zksync as (
    select p.day, bridge, token_address, label, token_amount * price as token_amount_usd
    from (
    select day, bridge, token_address, label, avg(token_amount) as token_amount, divisor
    from (
    SELECT day, 'ZkSync Bridge' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, SUM(transfer) over (order by day) as token_amount, 1 as divisor 
    FROM ( 
        SELECT date_trunc('day', block_time) as day, sum(value/1e18) as transfer
        FROM ethereum.""traces""
        WHERE ""from"" = '\xaBEA9132b05A70803a4E85094fD0e1800777fBEF'
        GROUP BY 1
        
        UNION all
        
        SELECT
        date_trunc('day', block_time) as day, sum(-value/1e18) as transfer
        FROM ethereum.""transactions""
        WHERE ""to"" = '\xaBEA9132b05A70803a4E85094fD0e1800777fBEF' 
        GROUP BY 1
    ) as net
    ) w
    group by 1, 2 ,3, 4, 6
    ) n
    left join prices p on n.day = p.day and n.label = p.symbol
),

zksync_tvl as(
    select * from zksync_erc
),

boba_erc as(
    select day, 'Boba Network Bridge' as bridge, token_address, token_symbol as label, amount_usd as token_amount_usd
    from erc20.""view_token_balances_daily""
    where wallet_address = '\xdc1664458d2f0B6090bEa60A8793A4E66c2F1c00'
    and day > '2021-04-01'
    and amount_usd > 5000
),

weth_boba as (
    select p.day, bridge, token_address, label, token_amount * price as token_amount_usd
    from (
    select day, bridge, token_address, label, avg(token_amount) as token_amount, divisor
    from (
    SELECT day, 'Boba Network Bridge' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, SUM(transfer) over (order by day) as token_amount, 1 as divisor 
    FROM ( 
        SELECT date_trunc('day', block_time) as day, sum(value/1e18) as transfer,""to"",""from""
        FROM ethereum.""traces""
        WHERE ""from"" = '\xdc1664458d2f0B6090bEa60A8793A4E66c2F1c00'
        AND ""to"" = '\x4828900eb9db5346dfe33ccf884984d8014c7b4b'
        AND value > 0
        GROUP BY 1,3,4
        
        UNION all
        
        SELECT date_trunc('day', block_time) as day, sum(-value/1e18) as transfer, ""to"",""from""
        FROM ethereum.""traces""
        WHERE ""from"" = '\x4828900eb9db5346dfe33ccf884984d8014c7b4b'
        AND ""to"" = '\xdc1664458d2f0B6090bEa60A8793A4E66c2F1c00'
        AND value > 0
        GROUP BY 1,3,4
    ) as net
    ) w
    group by 1, 2 ,3, 4, 6
    ) n
    left join prices p on n.day = p.day and n.label = p.symbol
),

boba_tvl as(
    select * from boba_erc
),

ronin as (
    select *
    from (
    select date_trunc('day', a.timestamp) as day, 'Ronin Bridge' as bridge, token_address, label, max(amount_raw) as token_amount, divisor
    from erc20.""token_balances"" a
    left join tokens t on t.address = a.token_address
    where wallet_address = '\x1A2a1c938CE3eC39b6D47113c7955bAa9DD454F2' --Ronin Bridge
    group by 1, 2, 3, 4, 6
    order by 1
    ) z
),

ronin_full as(
    select * from ronin
),

ronin_tvl as (
    select n.day, bridge, token_address, label, avg(token_amount*price/divisor) as token_amount_usd
    from ronin_full n
    left join prices p on n.day = p.day and n.label = p.symbol
    group by 1, 2, 3, 4
),

synapse as (
    select *
    from (
    select date_trunc('day', a.timestamp) as day, 'Synapse Bridge' as bridge, token_address, label, max(amount_raw) as token_amount, divisor
    from erc20.""token_balances"" a
    left join tokens t on t.address = a.token_address
    where wallet_address = '\x2796317b0fF8538F253012862c06787Adfb8cEb6' --synapse
    group by 1, 2, 3, 4, 6
    order by 1
    ) z
),

synapse_tvl as (
    select n.day, bridge, token_address, label, (token_amount::numeric * price::numeric)/divisor as token_amount_usd 
    from synapse n
    left join prices p on n.day = p.day and n.label = p.symbol
    where n.day > '2021-01-01'
),

nomad as (
    select *
    from (
    select date_trunc('day', a.timestamp) as day, 'Nomad Bridge' as bridge, token_address, label, max(amount_raw) as token_amount, divisor
    from erc20.""token_balances"" a
    left join tokens t on t.address = a.token_address
    where wallet_address = '\x88a69b4e698a4b090df6cf5bd7b2d47325ad30a3' --nomad
    group by 1, 2, 3, 4, 6
    order by 1
    ) z
),

nomad_tvl as (
    select n.day, bridge, token_address, label, (token_amount::numeric * price::numeric)/divisor as token_amount_usd 
    from nomad n
    left join prices p on n.day = p.day and n.label = p.symbol
    where n.day > '2021-01-01'
),

tvl_tr as (
    select *
    from (
        select day, bridge, sum(token_amount_usd) as TVL_usd from harmony_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from near_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from sol_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from ftm_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from poly_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from opt_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from arb_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from xdai_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from celo_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from bsc_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from moon_any_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from rsk_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from boba_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from zksync_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from ronin_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from synapse_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from nomad_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from ava_tvl group by 1,2
    ) z
    where day >= current_date - interval '30 days'
),

tvl_p as (
    select *
    from (
        select day, bridge, sum(token_amount_usd) as TVL_usd from harmony_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from near_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from sol_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from ftm_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from poly_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from opt_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from arb_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from xdai_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from celo_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from bsc_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from moon_any_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from rsk_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from boba_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from zksync_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from ronin_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from synapse_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from nomad_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from ava_tvl group by 1,2
    ) z
    where day = current_date - interval '7 days'
    and TVL_usd > 1
),

tvl_ttl as (
    select * 
    from (
        select day, bridge, sum(token_amount_usd) as TVL_usd from harmony_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from near_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from sol_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from ftm_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from poly_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from opt_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from arb_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from xdai_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from celo_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from bsc_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from moon_any_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from rsk_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from boba_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from zksync_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from ronin_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from synapse_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from nomad_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from ava_tvl group by 1,2
    ) z
    where day = current_date - interval '1 day'
)

select 
    row_number() over (order by TVL_usd desc) as ranking, 
    z.bridge, 
    TVL_usd, 
    relative_TVL_change
from (
    select 
        tvl_p.bridge, 
        tvl_ttl.TVL_usd, 
        (tvl_ttl.TVL_usd / tvl_p.TVL_usd) - 1 as relative_TVL_change
    from tvl_p
    left join tvl_ttl on tvl_ttl.bridge = tvl_p.bridge
    order by 2 desc
) z"
145521,Ethereum bridge unique depositors 30d 🧍🏻,,"[{""id"": 286790, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-09-10T07:10:02.753674+00:00"", ""__typename"": ""visualizations""}, {""id"": 286803, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""counterLabel"": ""30d unique addrs'\ud83e\uddcd\ud83c\udffb"", ""counterColName"": ""unique_depositors""}, ""created_at"": ""2021-09-10T07:17:55.906609+00:00"", ""__typename"": ""visualizations""}, {""id"": 296714, ""type"": ""counter"", ""name"": ""Counter"", ""options"": {""rowNumber"": 1, ""counterColName"": ""unique_depositors""}, ""created_at"": ""2021-09-14T14:00:34.622644+00:00"", ""__typename"": ""visualizations""}]","with ad(address,label) AS (VALUES
    ('\xe78388b4ce79068e89bf8aa7f218ef6b9ab0e9d0'::bytea, 'Avalanche'::text),
    ('\xf92cD566Ea4864356C5491c177A430C222d7e678'::bytea, 'Solana'::text),
    ('\x23ddd3e3692d1861ed57ede224608875809e127f'::bytea, 'Near'::text),
    ('\x2dccdb493827e15a5dc8f8b72147e6c4a5620857'::bytea, 'Harmony'::text),
    ('\xf9fb1c508ff49f78b60d3a96dea99fa5d7f3a8a6'::bytea, 'Harmony'::text),
    ('\xC564EE9f21Ed8A2d8E7e76c085740d5e4c5FaFbE'::bytea, 'Fantom'::text),
    ('\x40ec5B33f54e0E8A33A975908C5BA1c14e5BbbDf'::bytea, 'PolygonERC'::text),
    ('\x467194771dae2967aef3ecbedd3bf9a310c76c65'::bytea, 'Optimism'::text),
    ('\x99C9fc46f92E8a1c0deC1b1747d010903E884bE1'::bytea, 'Optimism'::text),
    ('\xcEe284F754E854890e311e3280b767F80797180d'::bytea, 'Arbitrum'::text),
    ('\xa3A7B6F88361F48403514059F1F16C8E78d60EeC'::bytea, 'Arbitrum'::text),
    ('\x011B6E24FfB0B5f5fCc564cf4183C5BBBc96D515'::bytea, 'Arbitrum'::text),
    ('\x467194771dae2967aef3ecbedd3bf9a310c76c65'::bytea, 'Optimism'::text),
    ('\x88ad09518695c6c3712AC10a214bE5109a655671'::bytea, 'xDAI'::text),
    ('\x6a39909e805A3eaDd2b61fFf61147796ca6aBB47'::bytea, 'Celo'::text),
    ('\x533e3c0e6b48010873B947bddC4721b1bDFF9648'::bytea, 'BSC'::text),
    ('\x10c6b61DbF44a083Aec3780aCF769C77BE747E23'::bytea, 'Moonriver'::text),
    ('\x1A2a1c938CE3eC39b6D47113c7955bAa9DD454F2'::bytea, 'Ronin'::text),
    ('\x88a69b4e698a4b090df6cf5bd7b2d47325ad30a3'::bytea, 'Nomad'::text),
    ('\x12eD69359919Fc775bC2674860E8Fe2d2b6a7B5D'::bytea, 'RSK'::text)
),

ethereum as (
    select *
    from (
        select block_time, et.""to"", et.""from"" as unique_depositors
        from ethereum.""traces"" et
        where (et.""to"" = '\xe78388b4ce79068e89bf8aa7f218ef6b9ab0e9d0' --Avalanche
            or et.""to"" = '\xf92cD566Ea4864356C5491c177A430C222d7e678' --Sol
            or et.""to"" = '\x23ddd3e3692d1861ed57ede224608875809e127f' --Near
            or et.""to"" = '\xf9fb1c508ff49f78b60d3a96dea99fa5d7f3a8a6' --Harmonyeth
            or et.""to"" = '\xC564EE9f21Ed8A2d8E7e76c085740d5e4c5FaFbE' --Fantom Bridge
            or et.""to"" = '\x40ec5B33f54e0E8A33A975908C5BA1c14e5BbbDf' --PolygonERC
            or et.""to"" = '\x467194771dae2967aef3ecbedd3bf9a310c76c65' --Optimism DAI bridge
            or et.""to"" = '\x99C9fc46f92E8a1c0deC1b1747d010903E884bE1' --Optimism bridge
            or et.""to"" = '\xcEe284F754E854890e311e3280b767F80797180d' --Arbitrum Custom Gateway
            or et.""to"" = '\xa3A7B6F88361F48403514059F1F16C8E78d60EeC' --Arbitrum L1 ERC20 Gateway
            or et.""to"" = '\x011B6E24FfB0B5f5fCc564cf4183C5BBBc96D515' --Arbitrum Inbox
            or et.""to"" ='\x467194771dae2967aef3ecbedd3bf9a310c76c65' --Optimism DAI bridge
            or et.""to"" ='\x88ad09518695c6c3712AC10a214bE5109a655671' --xDAI bridge
            or et.""to"" ='\x6a39909e805A3eaDd2b61fFf61147796ca6aBB47' --Celo Optics bridge
            or et.""to"" ='\x533e3c0e6b48010873B947bddC4721b1bDFF9648' --BSC Anyswap bridge
            or et.""to"" ='\x10c6b61DbF44a083Aec3780aCF769C77BE747E23' --Moonriver Anyswap bridge
            or et.""to"" ='\x1A2a1c938CE3eC39b6D47113c7955bAa9DD454F2' --Ronin bridge
            or et.""to"" ='\x88a69b4e698a4b090df6cf5bd7b2d47325ad30a3' --Nomad bridge
            or et.""to"" ='\x12eD69359919Fc775bC2674860E8Fe2d2b6a7B5D') --RSK Token bridge
        and block_time > '2021-06-01'
    ) z
    left join ad on z.""to"" = ad.address
),

erc20 as (
    select *
    from (
        select evt_block_time as block_time, erc.""to"", erc.""from"" as unique_depositors
        from erc20.""ERC20_evt_Transfer"" erc
        where (erc.""to"" = '\xe78388b4ce79068e89bf8aa7f218ef6b9ab0e9d0' --Avalanche
            or erc.""to"" =  '\xf92cD566Ea4864356C5491c177A430C222d7e678' --Sol
            or erc.""to"" = '\x23ddd3e3692d1861ed57ede224608875809e127f' --Near
            or erc.""to"" = '\xf9fb1c508ff49f78b60d3a96dea99fa5d7f3a8a6' --Harmonyeth
            or erc.""to"" = '\xC564EE9f21Ed8A2d8E7e76c085740d5e4c5FaFbE' --Fantom Bridge
            or erc.""to"" = '\x40ec5B33f54e0E8A33A975908C5BA1c14e5BbbDf' --PolygonERC
            or erc.""to"" = '\x467194771dae2967aef3ecbedd3bf9a310c76c65' --Optimism DAI bridge
            or erc.""to"" = '\x99C9fc46f92E8a1c0deC1b1747d010903E884bE1' --Optimism bridge
            or erc.""to"" = '\xcEe284F754E854890e311e3280b767F80797180d' --Arbitrum Custom Gateway
            or erc.""to"" = '\xa3A7B6F88361F48403514059F1F16C8E78d60EeC' --Arbitrum L1 ERC20 Gateway
            or erc.""to"" = '\x011B6E24FfB0B5f5fCc564cf4183C5BBBc96D515' --Arbitrum Inbox
            or erc.""to"" ='\x467194771dae2967aef3ecbedd3bf9a310c76c65' --Optimism DAI bridge
            or erc.""to"" ='\x88ad09518695c6c3712AC10a214bE5109a655671' --xDAI bridge
            or erc.""to"" ='\x6a39909e805A3eaDd2b61fFf61147796ca6aBB47' --Celo Optics bridge
            or erc.""to"" ='\x533e3c0e6b48010873B947bddC4721b1bDFF9648' --BSC Anyswap bridge
            or erc.""to"" ='\x10c6b61DbF44a083Aec3780aCF769C77BE747E23' --Moonriver Anyswap bridge
            or erc.""to"" ='\x1A2a1c938CE3eC39b6D47113c7955bAa9DD454F2' --Ronin bridge
            or erc.""to"" ='\x88a69b4e698a4b090df6cf5bd7b2d47325ad30a3' --Nomad bridge
            or erc.""to"" ='\x12eD69359919Fc775bC2674860E8Fe2d2b6a7B5D') --RSK Token bridge
        and evt_block_time > '2021-06-01'
    ) z
    left join ad on z.""to"" = ad.address
)

select count(distinct unique_depositors) as unique_depositors
from (
select * from erc20 union all
select * from ethereum
) z
where block_time > current_date - interval '30 days'"
145516,Ethereum bridges TVL,,"[{""id"": 286770, ""type"": ""table"", ""name"": ""Market shares \ud83e\udd47\ud83e\udd48\ud83e\udd49"", ""options"": {}, ""created_at"": ""2021-09-10T06:53:24.832921+00:00"", ""__typename"": ""visualizations""}, {""id"": 286804, ""type"": ""chart"", ""name"": ""Market shares \ud83e\udd47\ud83e\udd48\ud83e\udd49"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""$0,0"", ""columnMapping"": {""bridge"": ""x"", ""tvl_usd"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {""Ronin Bridge"": {""color"": ""#C157A5""}, ""Harmony Bridges"": {""color"": ""#FFC933""}, ""Polygon Bridges"": {""color"": ""#FF99F3""}, ""Solana Wormhole"": {""color"": ""#A333CC""}, ""Arbitrum Bridges"": {""color"": ""#6D71F3""}, ""Avalanche Bridge"": {""color"": ""#FF9494""}, ""Near Rainbow Bridge"": {""color"": ""#6B6B6B""}, ""Polygon ERC20 Bridge"": {""color"": ""#FEA4F4""}, ""Fantom Anyswap Bridge"": {""color"": ""#6D78B0""}}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2021-09-10T07:19:42.166899+00:00"", ""__typename"": ""visualizations""}]","with tokens(address,label,divisor) as (
    select address, label, 10^decimals as divisor
    from (
    select ""contract_address"" as address, symbol as label, CAST (decimals AS numeric) as decimals
    from erc20.""tokens""
    ) z
),

prices as (
    select date_trunc('day', minute) as day, avg(price) as price, symbol, contract_address
    from prices.""usd""
    where minute > '2021-01-01'
    group by 1, 3, 4
),

ava as (
    select *
    from (
    select date_trunc('day', a.timestamp) as day, 'Avalanche Bridge' as bridge, token_address, label, max(amount_raw) as token_amount, divisor
    from erc20.""token_balances"" a
    left join tokens t on t.address = a.token_address
    where wallet_address = '\xe78388b4ce79068e89bf8aa7f218ef6b9ab0e9d0' --Avalanche
    group by 1, 2, 3, 4, 6
    order by 1
    ) z
),

weth_ava as (
    select day, bridge, token_address, label, avg(token_amount) as token_amount, divisor
    from (
    SELECT day, 'Avalanche Bridge' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, SUM(transfer) over (order by day) as token_amount, 1 as divisor 
    FROM ( 
        SELECT date_trunc('day', evt_block_time) as day, sum(-value/1e18) as transfer
        FROM erc20.""ERC20_evt_Transfer""
        WHERE contract_address = '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' --WETH
        AND ""from"" = '\xe78388b4ce79068e89bf8aa7f218ef6b9ab0e9d0' --Avalanche
        GROUP BY 1
        
        UNION all
        
        SELECT
        date_trunc('day', evt_block_time) as day, sum(value/1e18) as transfer
        FROM erc20.""ERC20_evt_Transfer""
        WHERE contract_address = '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' --WETH
        AND ""to"" = '\xe78388b4ce79068e89bf8aa7f218ef6b9ab0e9d0' --Avalanche
        GROUP BY 1
    ) as net
    ) w
    group by 1, 2 ,3, 4, 6
),

ava_full as(
    select * from ava
),

ava_tvl as (
    select n.day, bridge, token_address, label, token_amount*price/divisor as token_amount_usd
    from ava_full n
    left join prices p on n.day = p.day and n.label = p.symbol
),

usd_miss as (
select 'USDK' as symbol_d, 1 as price_d union all
select 'FRAX' as symbol_d, 1 as price_d union all
select 'UST' as symbol_d, 1 as price_d union all
select 'HUSD' as symbol_d, 1 as price_d union all
select 'LUNA' as symbol_d, 20 as price_d
),

sol as (
select z.day, bridge, token_address, label, avg(token_amount/divisor) as token_amount
    from (
    select date_trunc('day', a.timestamp) as day, 'Solana Wormhole' as bridge, token_address, label, max(amount_raw) as token_amount, divisor
    from erc20.""token_balances"" a
    left join tokens t on t.address = a.token_address
    where wallet_address = '\xf92cD566Ea4864356C5491c177A430C222d7e678' --Sol
    and date_trunc('day', a.timestamp) > '2021-07-01'
    group by 1, 2, 3, 4, 6
    order by 1
    ) z
    group by 1, 2, 3, 4
),

sol_label_swap as (
    select day, bridge, token_address, REPLACE(replace::text, 'renBTC', 'WBTC') as label, token_amount
    from (
        select day, bridge, token_address, token_amount, REPLACE(replace::text, 'WBTC', 'WBTC')
        from (
            select day, bridge, token_address, token_amount, REPLACE(replace::text, 'ibBTC', 'WBTC') 
            from (
                select day, bridge, token_address, token_amount, REPLACE(replace::text, 'BBTC', 'WBTC')
                from (
                    select day, bridge, token_address, token_amount, REPLACE(label::text, 'HBTC', 'WBTC')
                    from sol
                ) z
            ) w
        ) x
    ) m
),

sol_tvl as (
select day, bridge, label, sum(token_amount*price) as token_amount_usd
from (
    select 
        s.day, 
        bridge, 
        token_address, 
        label, 
        token_amount, 
        COALESCE(p.price, 0) + COALESCE(u.price_d, 0) as price
    from sol_label_swap s
    left join prices p on p.day = s.day and p.symbol = s.label
    left join usd_miss u on s.label = u.symbol_d
) w
group by 1, 2, 3
),

near as (
    select *
    from (
    select date_trunc('day', a.timestamp) as day, 'Near Rainbow Bridge' as bridge, token_address, label, max(amount_raw) as token_amount, divisor
    from erc20.""token_balances"" a
    left join tokens t on t.address = a.token_address
    where wallet_address = '\x23ddd3e3692d1861ed57ede224608875809e127f' --Near
    group by 1, 2, 3, 4, 6
    order by 1
    ) z
),

weth_near as (
    select day, bridge, token_address, label, avg(token_amount) as token_amount, divisor
    from (
    SELECT day, 'Near Rainbow Bridge' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, SUM(transfer) over (order by day) as token_amount, 1 as divisor 
    FROM ( 
        SELECT date_trunc('day', evt_block_time) as day, sum(-value/1e18) as transfer
        FROM erc20.""ERC20_evt_Transfer""
        WHERE contract_address = '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' --WETH
        AND ""from"" = '\x23ddd3e3692d1861ed57ede224608875809e127f' --Near
        GROUP BY 1
        
        UNION all
        
        SELECT
        date_trunc('day', evt_block_time) as day, sum(value/1e18) as transfer
        FROM erc20.""ERC20_evt_Transfer""
        WHERE contract_address = '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' --WETH
        AND ""to"" = '\x23ddd3e3692d1861ed57ede224608875809e127f' --Near
        GROUP BY 1
    ) as net
    ) w
    group by 1, 2 ,3, 4, 6
),

near_full as(
    select * from near
),

near_tvl as (
    select n.day, bridge, token_address, label, token_amount*price/divisor as token_amount_usd
    from near_full n
    left join prices p on n.day = p.day and n.label = p.symbol
),

harmony as (
    select *
    from (
    select date_trunc('day', a.timestamp) as day, 'Harmony Bridges' as bridge, token_address, label, max(amount_raw) as token_amount, divisor
    from erc20.""token_balances"" a
    left join tokens t on t.address = a.token_address
    where wallet_address = '\x2dccdb493827e15a5dc8f8b72147e6c4a5620857' --harmony
    group by 1, 2, 3, 4, 6
    order by 1
    ) z
),

eth_harmony as (
    select day, bridge, token_address, label, avg(token_amount) as token_amount, divisor
    from (
    SELECT day, 'Harmony Bridges' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, SUM(transfer) over (order by day) as token_amount, 1 as divisor 
    FROM ( 
        SELECT date_trunc('day', block_time) as day, sum(-value/1e18) as transfer
        FROM ethereum.""traces""
        WHERE ""from"" = '\xf9fb1c508ff49f78b60d3a96dea99fa5d7f3a8a6' --Harmony
        GROUP BY 1
        
        UNION all
        
        SELECT
        date_trunc('day', block_time) as day, sum(value/1e18) as transfer
        FROM ethereum.""traces""
        WHERE ""to"" = '\xf9fb1c508ff49f78b60d3a96dea99fa5d7f3a8a6' --Harmony
        GROUP BY 1
    ) as net
    ) w
    group by 1, 2 ,3, 4, 6
),

harmony_full as(
    select * from harmony union all
    select * from eth_harmony
),

harmony_tvl as (
    select n.day, bridge, token_address, label, (token_amount::numeric * price::numeric)/divisor as token_amount_usd 
    from harmony_full n
    left join prices p on n.day = p.day and n.label = p.symbol
    where n.day > '2021-01-01'
),

ftm as (
    select *
    from (
    select date_trunc('day', a.timestamp) as day, 'Fantom Anyswap Bridge' as bridge, token_address, label, max(amount_raw) as token_amount, divisor
    from erc20.""token_balances"" a
    left join tokens t on t.address = a.token_address
    where wallet_address = '\xC564EE9f21Ed8A2d8E7e76c085740d5e4c5FaFbE' --Fantom Bridge
    group by 1, 2, 3, 4, 6
    order by 1
    ) z
),

weth_ftm as (
    select day, bridge, token_address, label, avg(token_amount) as token_amount, divisor
    from (
    SELECT day, 'Fantom Anyswap Bridge' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, SUM(transfer) over (order by day) as token_amount, 1 as divisor 
    FROM ( 
        SELECT date_trunc('day', evt_block_time) as day, sum(-value/1e18) as transfer
        FROM erc20.""ERC20_evt_Transfer""
        WHERE contract_address = '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' --WETH
        AND ""from"" = '\xC564EE9f21Ed8A2d8E7e76c085740d5e4c5FaFbE' --Fantom Bridge
        GROUP BY 1
        
        UNION all
        
        SELECT
        date_trunc('day', evt_block_time) as day, sum(value/1e18) as transfer
        FROM erc20.""ERC20_evt_Transfer""
        WHERE contract_address = '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' --WETH
        AND ""to"" = '\xC564EE9f21Ed8A2d8E7e76c085740d5e4c5FaFbE' --Fantom Bridge
        GROUP BY 1
    ) as net
    ) w
    group by 1, 2 ,3, 4, 6
),

ftm_full as(
    select * from ftm
),

ftm_tvl as (
    select n.day, bridge, token_address, label, token_amount*price/divisor as token_amount_usd
    from ftm_full n
    left join prices p on n.day = p.day and n.label = p.symbol
),

poly_erc as(
    select day, 'Polygon Bridges' as bridge, token_address, token_symbol as label, amount_usd as token_amount_usd
    from erc20.""view_token_balances_daily""
    where (wallet_address = '\x40ec5B33f54e0E8A33A975908C5BA1c14e5BbbDf'
    or wallet_address = '\x401F6c983eA34274ec46f84D70b31C151321188b')
    and day > '2021-04-01'
    and amount_usd > 5000
),

eth_poly as (
    select p.day, bridge, token_address, label, token_amount * price as token_amount_usd
    from (
    select day, bridge, token_address, label, avg(token_amount) as token_amount, divisor
    from (
    SELECT day, 'Polygon Bridges' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, balance as token_amount, 1 as divisor 
    FROM ( 
        select day, sum (balance) over (order by day) as balance -- h/t to MSilb7 for cracking this one
            from (
                select day, sum(transfer) as balance 
                from (
                    select date_trunc('day', block_time) as day, sum(-value/1e18) as transfer
                    from ethereum.""traces""
                    where ""from"" = '\x8484Ef722627bf18ca5Ae6BcF031c23E6e922B30' --Polygon Eth bridge
                    and (LOWER(call_type) not in ('delegatecall', 'callcode', 'staticcall') or call_type is null)
                    and ""tx_success"" = true
                    and success = true
                    group by 1
                    
                    union all
                    
                    select  date_trunc('day', block_time) as day, sum(value/1e18) as transfer
                    from ethereum.""traces""
                    where ""to"" = '\x8484Ef722627bf18ca5Ae6BcF031c23E6e922B30' --Polygon Eth bridge
                    and (LOWER(call_type) not in ('delegatecall', 'callcode', 'staticcall') or call_type is null)
                    and ""tx_success"" = true
                    and success = true
                    group by 1
                    
                    union all --gas costs
                    
                    select date_trunc('day', block_time) as day, -SUM(gas_price*""gas_used"")/1e18 as transfer
                    from ethereum.""transactions""
                    where ""from"" = '\x8484Ef722627bf18ca5Ae6BcF031c23E6e922B30' --Polygon Eth bridge
                    group by 1
                ) z
                group by 1
                order by 1
            ) w
    ) as net
    ) w
    group by 1, 2 ,3, 4, 6
    ) n
    left join prices p on n.day = p.day and n.label = p.symbol
),

poly_tvl as (
    select * from poly_erc union all
    select * from eth_poly
),

opt_erc as(
    select day, 'Optimism Bridges' as bridge, token_address, token_symbol as label, amount_usd as token_amount_usd
    from erc20.""view_token_balances_daily""
    where (wallet_address = '\x467194771dae2967aef3ecbedd3bf9a310c76c65' --Optimism DAI bridge
    or wallet_address = '\x99C9fc46f92E8a1c0deC1b1747d010903E884bE1' --Optimism bridge
    or wallet_address = '\x5Fd79D46EBA7F351fe49BFF9E87cdeA6c821eF9f') -- Optimism SNX escrow
    and day > '2021-05-01'
    and amount_usd > 5000
),

eth_opt as (
    select p.day, bridge, token_address, label, token_amount * price as token_amount_usd
    from (
    select day, bridge, token_address, label, avg(token_amount) as token_amount, divisor
    from (
    SELECT day, 'Optimism Bridges' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, balance as token_amount, 1 as divisor 
    FROM ( 
        select day, sum (balance) over (order by day) as balance -- h/t to MSilb7 for cracking this one
        from (
            select day, sum(transfer) as balance 
            from (
                select date_trunc('day', block_time) as day, sum(-value/1e18) as transfer
                from ethereum.""traces""
                where ""from"" = '\x99C9fc46f92E8a1c0deC1b1747d010903E884bE1' --optimism bridge
                and (LOWER(call_type) not in ('delegatecall', 'callcode', 'staticcall') or call_type is null)
                and ""tx_success"" = true
                and success = true
                group by 1
                
                union all
                
                select  date_trunc('day', block_time) as day, sum(value/1e18) as transfer
                from ethereum.""traces""
                where ""to"" = '\x99C9fc46f92E8a1c0deC1b1747d010903E884bE1' --optimism bridge
                and (LOWER(call_type) not in ('delegatecall', 'callcode', 'staticcall') or call_type is null)
                and ""tx_success"" = true
                and success = true
                group by 1
                
                union all --gas costs
                
                select date_trunc('day', block_time) as day, -SUM(gas_price*""gas_used"")/1e18 as transfer
                from ethereum.""transactions""
                where ""from"" = '\x99C9fc46f92E8a1c0deC1b1747d010903E884bE1' --optimism bridge
                group by 1
            ) z
            group by 1
            order by 1
        ) w
    ) as net
    ) w
    group by 1, 2 ,3, 4, 6
    ) n
    left join prices p on n.day = p.day and n.label = p.symbol
),

opt_tvl as (
    select * from opt_erc union all
    select * from eth_opt
),

arb_erc as(
    select day, 'Arbitrum Bridges' as bridge, token_address, token_symbol as label, amount_usd as token_amount_usd
    from erc20.""view_token_balances_daily""
    where (wallet_address = '\xcEe284F754E854890e311e3280b767F80797180d' --Arbitrum Custom Gateway
    or wallet_address = '\xa3A7B6F88361F48403514059F1F16C8E78d60EeC') --Arbitrum L1 ERC20 Gateway
    and day > '2021-05-01'
    and amount_usd > 5000
),

eth_arbitrum as (
    select p.day, bridge, token_address, label, token_amount * price as token_amount_usd
    from (
    select day, bridge, token_address, label, avg(token_amount) as token_amount, divisor
    from (
    SELECT day, 'Arbitrum Bridges' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, SUM(transfer) over (order by day) as token_amount, 1 as divisor 
    FROM ( 
         SELECT date_trunc('day', block_time) as day ,
            sum(
                CASE WHEN ""to"" != '\x2f06e43d850ac75926fa2866e40139475b58cb16' AND ""to"" != '\xcb0da32914a683286ed2d4890e8157ffecc9bd06' 
                THEN -value/1e18 
                WHEN ""to"" = '\x2f06e43d850ac75926fa2866e40139475b58cb16' OR ""to"" = '\xcb0da32914a683286ed2d4890e8157ffecc9bd06' 
                THEN value/1e18 
            END) as transfer
        FROM ethereum.""traces""
        WHERE ""from"" = '\x011B6E24FfB0B5f5fCc564cf4183C5BBBc96D515' --Arbitrum Inbox
        GROUP BY 1
    ) as net
    ) w
    group by 1, 2 ,3, 4, 6
    ) n
    left join prices p on n.day = p.day and n.label = p.symbol
),

arb_tvl as (
    select * from arb_erc union all
    select * from eth_arbitrum
),

xdai_erc as (
    select *
    from (
    select date_trunc('day', a.timestamp) as day, 'xDAI Bridges' as bridge, token_address, label, max(amount_raw) as token_amount, divisor
    from erc20.""token_balances"" a
    left join tokens t on t.address = a.token_address
    where wallet_address = '\x88ad09518695c6c3712AC10a214bE5109a655671' OR  wallet_address = '\x4aa42145Aa6Ebf72e164C9bBC74fbD3788045016'
    group by 1, 2, 3, 4, 6
    order by 1
    ) z
),

xdai_tvl as (
    select n.day, bridge, token_address, label, token_amount*price/divisor as token_amount_usd
    from xdai_erc n
    left join prices p on n.day = p.day and n.label = p.symbol
),

weth_celo as (
    select z.day, bridge, token_address, label, token_amount * price as token_amount_usd
    from (
        select day, bridge, token_address, label, avg(token_amount) as token_amount
        from (
            SELECT day, 'Celo Optics Bridge' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, SUM(transfer) over (order by day) as token_amount 
            FROM ( 
                SELECT date_trunc('day', evt_block_time) as day, sum(-value/1e18) as transfer
                FROM erc20.""ERC20_evt_Transfer""
                WHERE contract_address = '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' --WETH
                AND ""from"" = '\x6a39909e805A3eaDd2b61fFf61147796ca6aBB47' --Fantom Bridge
                GROUP BY 1
                
                UNION all
                
                SELECT
                date_trunc('day', evt_block_time) as day, sum(value/1e18) as transfer
                FROM erc20.""ERC20_evt_Transfer""
                WHERE contract_address = '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' --WETH
                AND ""to"" = '\x6a39909e805A3eaDd2b61fFf61147796ca6aBB47' --Fantom Bridge
                GROUP BY 1
            ) as net
        ) w
        group by 1, 2 ,3, 4
    ) z 
    left join prices p on z.day = p.day and z.label = p.symbol
),

celo_erc as(
    select day, 'Optics Bridge' as bridge, token_address, token_symbol as label, amount_usd as token_amount_usd
    from erc20.""view_token_balances_daily""
    where wallet_address = '\x6a39909e805A3eaDd2b61fFf61147796ca6aBB47'
    and day > '2021-04-01'
    and amount_usd > 5000
),

celo_tvl as(
    select * from celo_erc
),

bsc_tvl as(
    select day, 'BSC Anyswap Bridge' as bridge, token_address, token_symbol as label, amount_usd as token_amount_usd
    from erc20.""view_token_balances_daily""
    where wallet_address = '\x533e3c0e6b48010873B947bddC4721b1bDFF9648'
    and day > '2021-04-01'
    and amount_usd > 5000
),

moon_any_tvl as(
    select day, 'Moonriver Anyswap Bridge' as bridge, token_address, token_symbol as label, amount_usd as token_amount_usd
    from erc20.""view_token_balances_daily""
    where wallet_address = '\x10c6b61DbF44a083Aec3780aCF769C77BE747E23'
    and day > '2021-04-01'
    and amount_usd > 5000
),

rsk_tvl as(
    select day, 'RSK Token Bridge' as bridge, token_address, token_symbol as label, amount_usd as token_amount_usd
    from erc20.""view_token_balances_daily""
    where wallet_address = '\x12eD69359919Fc775bC2674860E8Fe2d2b6a7B5D'
    and day > '2021-04-01'
    and amount_usd > 5000
),

zksync_erc as(
    select  day, 'ZkSync Bridge' as bridge, token_address, token_symbol as label, amount_usd as token_amount_usd
    from erc20.""view_token_balances_daily"" a
    left join tokens t on t.address = a.token_address
    where wallet_address = '\xaBEA9132b05A70803a4E85094fD0e1800777fBEF'
    and day > '2021-04-01'
    and amount_usd > 5000
),

weth_zksync as (
    select p.day, bridge, token_address, label, token_amount * price as token_amount_usd
    from (
    select day, bridge, token_address, label, avg(token_amount) as token_amount, divisor
    from (
    SELECT day, 'ZkSync Bridge' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, SUM(transfer) over (order by day) as token_amount, 1 as divisor 
    FROM ( 
        SELECT date_trunc('day', block_time) as day, sum(value/1e18) as transfer
        FROM ethereum.""traces""
        WHERE ""from"" = '\xaBEA9132b05A70803a4E85094fD0e1800777fBEF'
        GROUP BY 1
        
        UNION all
        
        SELECT
        date_trunc('day', block_time) as day, sum(-value/1e18) as transfer
        FROM ethereum.""transactions""
        WHERE ""to"" = '\xaBEA9132b05A70803a4E85094fD0e1800777fBEF' 
        GROUP BY 1
    ) as net
    ) w
    group by 1, 2 ,3, 4, 6
    ) n
    left join prices p on n.day = p.day and n.label = p.symbol
),

zksync_tvl as(
    select * from zksync_erc
),

boba_erc as(
    select day, 'Boba Network Bridge' as bridge, token_address, token_symbol as label, amount_usd as token_amount_usd
    from erc20.""view_token_balances_daily""
    where wallet_address = '\xdc1664458d2f0B6090bEa60A8793A4E66c2F1c00'
    and day > '2021-04-01'
    and amount_usd > 5000
),

weth_boba as (
    select p.day, bridge, token_address, label, token_amount * price as token_amount_usd
    from (
    select day, bridge, token_address, label, avg(token_amount) as token_amount, divisor
    from (
    SELECT day, 'Boba Network Bridge' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, SUM(transfer) over (order by day) as token_amount, 1 as divisor 
    FROM ( 
        SELECT date_trunc('day', block_time) as day, sum(value/1e18) as transfer,""to"",""from""
        FROM ethereum.""traces""
        WHERE ""from"" = '\xdc1664458d2f0B6090bEa60A8793A4E66c2F1c00'
        AND ""to"" = '\x4828900eb9db5346dfe33ccf884984d8014c7b4b'
        AND value > 0
        GROUP BY 1,3,4
        
        UNION all
        
        SELECT date_trunc('day', block_time) as day, sum(-value/1e18) as transfer, ""to"",""from""
        FROM ethereum.""traces""
        WHERE ""from"" = '\x4828900eb9db5346dfe33ccf884984d8014c7b4b'
        AND ""to"" = '\xdc1664458d2f0B6090bEa60A8793A4E66c2F1c00'
        AND value > 0
        GROUP BY 1,3,4
    ) as net
    ) w
    group by 1, 2 ,3, 4, 6
    ) n
    left join prices p on n.day = p.day and n.label = p.symbol
),

boba_tvl as(
    select * from boba_erc
),

ronin as (
    select *
    from (
    select date_trunc('day', a.timestamp) as day, 'Ronin Bridge' as bridge, token_address, label, max(amount_raw) as token_amount, divisor
    from erc20.""token_balances"" a
    left join tokens t on t.address = a.token_address
    where wallet_address = '\x1A2a1c938CE3eC39b6D47113c7955bAa9DD454F2' --Ronin Bridge
    group by 1, 2, 3, 4, 6
    order by 1
    ) z
),

ronin_full as(
    select * from ronin
),

ronin_tvl as (
    select n.day, bridge, token_address, label, avg(token_amount*price/divisor) as token_amount_usd
    from ronin_full n
    left join prices p on n.day = p.day and n.label = p.symbol
    group by 1, 2, 3, 4
),

synapse as (
    select *
    from (
    select date_trunc('day', a.timestamp) as day, 'Synapse Bridge' as bridge, token_address, label, max(amount_raw) as token_amount, divisor
    from erc20.""token_balances"" a
    left join tokens t on t.address = a.token_address
    where wallet_address = '\x2796317b0fF8538F253012862c06787Adfb8cEb6' --synapse
    group by 1, 2, 3, 4, 6
    order by 1
    ) z
),

synapse_tvl as (
    select n.day, bridge, token_address, label, (token_amount::numeric * price::numeric)/divisor as token_amount_usd 
    from synapse n
    left join prices p on n.day = p.day and n.label = p.symbol
    where n.day > '2021-01-01'
),

nomad as (
    select *
    from (
    select date_trunc('day', a.timestamp) as day, 'Nomad Bridge' as bridge, token_address, label, max(amount_raw) as token_amount, divisor
    from erc20.""token_balances"" a
    left join tokens t on t.address = a.token_address
    where wallet_address = '\x88a69b4e698a4b090df6cf5bd7b2d47325ad30a3' --nomad
    group by 1, 2, 3, 4, 6
    order by 1
    ) z
),

nomad_tvl as (
    select n.day, bridge, token_address, label, (token_amount::numeric * price::numeric)/divisor as token_amount_usd 
    from nomad n
    left join prices p on n.day = p.day and n.label = p.symbol
    where n.day > '2021-01-01'
)

select * from (
    select day, bridge, sum(token_amount_usd) as TVL_usd from harmony_tvl group by 1,2 union all
    select day, bridge, sum(token_amount_usd) as TVL_usd from near_tvl group by 1,2 union all
    select day, bridge, sum(token_amount_usd) as TVL_usd from sol_tvl group by 1,2 union all
    select day, bridge, sum(token_amount_usd) as TVL_usd from ftm_tvl group by 1,2 union all
    select day, bridge, sum(token_amount_usd) as TVL_usd from poly_tvl group by 1,2 union all
    select day, bridge, sum(token_amount_usd) as TVL_usd from opt_tvl group by 1,2 union all
    select day, bridge, sum(token_amount_usd) as TVL_usd from arb_tvl group by 1,2 union all
    select day, bridge, sum(token_amount_usd) as TVL_usd from xdai_tvl group by 1,2 union all
    select day, bridge, sum(token_amount_usd) as TVL_usd from celo_tvl group by 1,2 union all
    select day, bridge, sum(token_amount_usd) as TVL_usd from bsc_tvl group by 1,2 union all
    select day, bridge, sum(token_amount_usd) as TVL_usd from moon_any_tvl group by 1,2 union all
    select day, bridge, sum(token_amount_usd) as TVL_usd from rsk_tvl group by 1,2 union all
    select day, bridge, sum(token_amount_usd) as TVL_usd from boba_tvl group by 1,2 union all
    select day, bridge, sum(token_amount_usd) as TVL_usd from zksync_tvl group by 1,2 union all
    select day, bridge, sum(token_amount_usd) as TVL_usd from ronin_tvl group by 1,2 union all
    select day, bridge, sum(token_amount_usd) as TVL_usd from synapse_tvl group by 1,2 union all
    select day, bridge, sum(token_amount_usd) as TVL_usd from nomad_tvl group by 1,2 union all
    select day, bridge, sum(token_amount_usd) as TVL_usd from ava_tvl group by 1,2
) z
where day = current_date - interval '1 days'"
118245,Ethereum bridges TVL over time 📈,,"[{""id"": 238498, ""type"": ""table"", ""name"": ""Query results"", ""options"": {""columns"": [{""name"": ""token_amount"", ""numberFormat"": ""0,0""}, {""name"": ""token_amount_usd"", ""numberFormat"": ""0,0""}, {""name"": ""tvl_usd"", ""numberFormat"": ""0,0""}]}, ""created_at"": ""2021-08-24T20:08:41.291635+00:00"", ""__typename"": ""visualizations""}, {""id"": 238623, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""tickFormat"": ""0,0""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""numberFormat"": ""$0,0"", ""columnMapping"": {"""": ""y"", ""avg"": ""y"", ""day"": ""x"", ""label"": ""series"", ""bridge"": ""series"", ""tvl_usd"": ""y"", ""token_amount"": ""y"", ""token_amount_usd"": ""y""}, ""seriesOptions"": {""Near Rainbow"": {""type"": ""column"", ""color"": ""#6B6B6B"", ""yAxis"": 0, ""zIndex"": 1}, ""Harmony Bridge"": {""type"": ""column"", ""color"": ""#F6C928"", ""yAxis"": 0, ""zIndex"": 0}, ""Solana Wormhole"": {""type"": ""column"", ""color"": ""#CF66FF"", ""yAxis"": 0, ""zIndex"": 2}, ""Avalanche Bridge"": {""type"": ""column"", ""color"": ""#FF7575"", ""yAxis"": 0, ""zIndex"": 4}, ""Fantom Anyswap Bridge"": {""type"": ""column"", ""color"": ""#77DFD8"", ""yAxis"": 0, ""zIndex"": 3}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2021-08-24T20:44:25.84221+00:00"", ""__typename"": ""visualizations""}, {""id"": 284803, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""-""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""columnMapping"": {""day"": ""x"", ""bridge"": ""series"", ""tvl_usd"": ""y""}, ""seriesOptions"": {""Harmony Bridges"": {""type"": ""line"", ""yAxis"": 0, ""zIndex"": 0}, ""Solana Wormhole"": {""type"": ""line"", ""color"": ""#D35DFE"", ""yAxis"": 0, ""zIndex"": 2}, ""Arbitrum Bridges"": {""type"": ""line"", ""yAxis"": 0, ""zIndex"": 6}, ""Avalanche Bridge"": {""type"": ""line"", ""color"": ""#FF7575"", ""yAxis"": 0, ""zIndex"": 4}, ""Near Rainbow Bridge"": {""type"": ""line"", ""yAxis"": 0, ""zIndex"": 1}, ""Polygon ERC20 Bridge"": {""type"": ""line"", ""color"": ""#FE90DB"", ""yAxis"": 0, ""zIndex"": 4}, ""Fantom Anyswap Bridge"": {""type"": ""line"", ""color"": ""#6DD2F3"", ""yAxis"": 0, ""zIndex"": 3}, ""Optimism ERC20 Bridges"": {""type"": ""line"", ""yAxis"": 0, ""zIndex"": 5}}, ""valuesOptions"": {}, ""globalSeriesType"": ""line""}, ""created_at"": ""2021-09-09T14:14:03.190017+00:00"", ""__typename"": ""visualizations""}, {""id"": 284806, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""numberFormat"": ""$0,0"", ""columnMapping"": {""day"": ""x"", ""bridge"": ""series"", ""tvl_usd"": ""y""}, ""seriesOptions"": {""Ronin Bridge"": {""type"": ""area"", ""color"": ""#C1539E"", ""yAxis"": 0, ""zIndex"": 14}, ""xDAI Bridges"": {""type"": ""area"", ""yAxis"": 0, ""zIndex"": 7}, ""Optics Bridge"": {""type"": ""area"", ""yAxis"": 0, ""zIndex"": 8}, ""ZkSync Bridge"": {""type"": ""area"", ""yAxis"": 0, ""zIndex"": 13}, ""Harmony Bridges"": {""type"": ""area"", ""yAxis"": 0, ""zIndex"": 0}, ""Polygon Bridges"": {""type"": ""area"", ""color"": ""#FF9EEA"", ""yAxis"": 0, ""zIndex"": 4}, ""Solana Wormhole"": {""type"": ""area"", ""color"": ""#AA62E4"", ""yAxis"": 0, ""zIndex"": 2}, ""Arbitrum Bridges"": {""type"": ""area"", ""color"": ""#574ED4"", ""yAxis"": 0, ""zIndex"": 6}, ""Avalanche Bridge"": {""type"": ""area"", ""color"": ""#FF8A8A"", ""yAxis"": 0, ""zIndex"": 4}, ""Optimism Bridges"": {""type"": ""area"", ""yAxis"": 0, ""zIndex"": 5}, ""RSK Token Bridge"": {""type"": ""area"", ""yAxis"": 0, ""zIndex"": 11}, ""BSC Anyswap Bridge"": {""type"": ""area"", ""yAxis"": 0, ""zIndex"": 9}, ""Boba Network Bridge"": {""type"": ""area"", ""yAxis"": 0, ""zIndex"": 12}, ""Near Rainbow Bridge"": {""type"": ""area"", ""yAxis"": 0, ""zIndex"": 1}, ""Fantom Anyswap Bridge"": {""type"": ""area"", ""color"": ""#6DBCCA"", ""yAxis"": 0, ""zIndex"": 3}, ""Moonriver Anyswap Bridge"": {""type"": ""area"", ""yAxis"": 0, ""zIndex"": 10}}, ""valuesOptions"": {}, ""globalSeriesType"": ""area""}, ""created_at"": ""2021-09-09T14:15:08.952197+00:00"", ""__typename"": ""visualizations""}]","with tokens(address,label,divisor) as (
    select address, label, 10^decimals as divisor
    from (
    select ""contract_address"" as address, symbol as label, CAST (decimals AS numeric) as decimals
    from erc20.""tokens""
    ) z
),

prices as (
    select date_trunc('day', minute) as day, avg(price) as price, symbol, contract_address
    from prices.""usd""
    where minute > '2021-01-01'
    group by 1, 3, 4
),

ava as (
    select *
    from (
    select date_trunc('day', a.timestamp) as day, 'Avalanche Bridge' as bridge, token_address, label, max(amount_raw) as token_amount, divisor
    from erc20.""token_balances"" a
    left join tokens t on t.address = a.token_address
    where wallet_address = '\xe78388b4ce79068e89bf8aa7f218ef6b9ab0e9d0' --Avalanche
    group by 1, 2, 3, 4, 6
    order by 1
    ) z
),

weth_ava as (
    select day, bridge, token_address, label, avg(token_amount) as token_amount, divisor
    from (
    SELECT day, 'Avalanche Bridge' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, SUM(transfer) over (order by day) as token_amount, 1 as divisor 
    FROM ( 
        SELECT date_trunc('day', evt_block_time) as day, sum(-value/1e18) as transfer
        FROM erc20.""ERC20_evt_Transfer""
        WHERE contract_address = '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' --WETH
        AND ""from"" = '\xe78388b4ce79068e89bf8aa7f218ef6b9ab0e9d0' --Avalanche
        GROUP BY 1
        
        UNION all
        
        SELECT
        date_trunc('day', evt_block_time) as day, sum(value/1e18) as transfer
        FROM erc20.""ERC20_evt_Transfer""
        WHERE contract_address = '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' --WETH
        AND ""to"" = '\xe78388b4ce79068e89bf8aa7f218ef6b9ab0e9d0' --Avalanche
        GROUP BY 1
    ) as net
    ) w
    group by 1, 2 ,3, 4, 6
),

ava_full as(
    select * from ava
),

ava_tvl as (
    select n.day, bridge, token_address, label, token_amount*price/divisor as token_amount_usd
    from ava_full n
    left join prices p on n.day = p.day and n.label = p.symbol
),

usd_miss as (
select 'USDK' as symbol_d, 1 as price_d union all
select 'FRAX' as symbol_d, 1 as price_d union all
select 'UST' as symbol_d, 1 as price_d union all
select 'HUSD' as symbol_d, 1 as price_d union all
select 'LUNA' as symbol_d, 20 as price_d
),

sol as (
select z.day, bridge, token_address, label, avg(token_amount/divisor) as token_amount
    from (
    select date_trunc('day', a.timestamp) as day, 'Solana Wormhole' as bridge, token_address, label, max(amount_raw) as token_amount, divisor
    from erc20.""token_balances"" a
    left join tokens t on t.address = a.token_address
    where wallet_address = '\xf92cD566Ea4864356C5491c177A430C222d7e678' --Sol
    and date_trunc('day', a.timestamp) > '2021-07-01'
    group by 1, 2, 3, 4, 6
    order by 1
    ) z
    group by 1, 2, 3, 4
),

sol_label_swap as (
    select day, bridge, token_address, REPLACE(replace::text, 'renBTC', 'WBTC') as label, token_amount
    from (
        select day, bridge, token_address, token_amount, REPLACE(replace::text, 'WBTC', 'WBTC')
        from (
            select day, bridge, token_address, token_amount, REPLACE(replace::text, 'ibBTC', 'WBTC') 
            from (
                select day, bridge, token_address, token_amount, REPLACE(replace::text, 'BBTC', 'WBTC')
                from (
                    select day, bridge, token_address, token_amount, REPLACE(label::text, 'HBTC', 'WBTC')
                    from sol
                ) z
            ) w
        ) x
    ) m
),

sol_tvl as (
select day, bridge, label, sum(token_amount*price) as token_amount_usd
from (
    select 
        s.day, 
        bridge, 
        token_address, 
        label, 
        token_amount, 
        COALESCE(p.price, 0) + COALESCE(u.price_d, 0) as price
    from sol_label_swap s
    left join prices p on p.day = s.day and p.symbol = s.label
    left join usd_miss u on s.label = u.symbol_d
) w
group by 1, 2, 3
),

near as (
    select *
    from (
    select date_trunc('day', a.timestamp) as day, 'Near Rainbow Bridge' as bridge, token_address, label, max(amount_raw) as token_amount, divisor
    from erc20.""token_balances"" a
    left join tokens t on t.address = a.token_address
    where wallet_address = '\x23ddd3e3692d1861ed57ede224608875809e127f' --Near
    group by 1, 2, 3, 4, 6
    order by 1
    ) z
),

weth_near as (
    select day, bridge, token_address, label, avg(token_amount) as token_amount, divisor
    from (
    SELECT day, 'Near Rainbow Bridge' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, SUM(transfer) over (order by day) as token_amount, 1 as divisor 
    FROM ( 
        SELECT date_trunc('day', evt_block_time) as day, sum(-value/1e18) as transfer
        FROM erc20.""ERC20_evt_Transfer""
        WHERE contract_address = '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' --WETH
        AND ""from"" = '\x23ddd3e3692d1861ed57ede224608875809e127f' --Near
        GROUP BY 1
        
        UNION all
        
        SELECT
        date_trunc('day', evt_block_time) as day, sum(value/1e18) as transfer
        FROM erc20.""ERC20_evt_Transfer""
        WHERE contract_address = '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' --WETH
        AND ""to"" = '\x23ddd3e3692d1861ed57ede224608875809e127f' --Near
        GROUP BY 1
    ) as net
    ) w
    group by 1, 2 ,3, 4, 6
),

near_full as(
    select * from near
),

near_tvl as (
    select n.day, bridge, token_address, label, token_amount*price/divisor as token_amount_usd
    from near_full n
    left join prices p on n.day = p.day and n.label = p.symbol
),

harmony as (
    select *
    from (
    select date_trunc('day', a.timestamp) as day, 'Harmony Bridges' as bridge, token_address, label, max(amount_raw) as token_amount, divisor
    from erc20.""token_balances"" a
    left join tokens t on t.address = a.token_address
    where wallet_address = '\x2dccdb493827e15a5dc8f8b72147e6c4a5620857' --harmony
    group by 1, 2, 3, 4, 6
    order by 1
    ) z
),

eth_harmony as (
    select day, bridge, token_address, label, avg(token_amount) as token_amount, divisor
    from (
    SELECT day, 'Harmony Bridges' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, SUM(transfer) over (order by day) as token_amount, 1 as divisor 
    FROM ( 
        SELECT date_trunc('day', block_time) as day, sum(-value/1e18) as transfer
        FROM ethereum.""traces""
        WHERE ""from"" = '\xf9fb1c508ff49f78b60d3a96dea99fa5d7f3a8a6' --Harmony
        GROUP BY 1
        
        UNION all
        
        SELECT
        date_trunc('day', block_time) as day, sum(value/1e18) as transfer
        FROM ethereum.""traces""
        WHERE ""to"" = '\xf9fb1c508ff49f78b60d3a96dea99fa5d7f3a8a6' --Harmony
        GROUP BY 1
    ) as net
    ) w
    group by 1, 2 ,3, 4, 6
),

harmony_full as(
    select * from harmony union all
    select * from eth_harmony
),

harmony_tvl as (
    select n.day, bridge, token_address, label, (token_amount::numeric * price::numeric)/divisor as token_amount_usd 
    from harmony_full n
    left join prices p on n.day = p.day and n.label = p.symbol
    where n.day > '2021-01-01'
),

ftm as (
    select *
    from (
    select date_trunc('day', a.timestamp) as day, 'Fantom Anyswap Bridge' as bridge, token_address, label, max(amount_raw) as token_amount, divisor
    from erc20.""token_balances"" a
    left join tokens t on t.address = a.token_address
    where wallet_address = '\xC564EE9f21Ed8A2d8E7e76c085740d5e4c5FaFbE' --Fantom Bridge
    group by 1, 2, 3, 4, 6
    order by 1
    ) z
),

weth_ftm as (
    select day, bridge, token_address, label, avg(token_amount) as token_amount, divisor
    from (
    SELECT day, 'Fantom Anyswap Bridge' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, SUM(transfer) over (order by day) as token_amount, 1 as divisor 
    FROM ( 
        SELECT date_trunc('day', evt_block_time) as day, sum(-value/1e18) as transfer
        FROM erc20.""ERC20_evt_Transfer""
        WHERE contract_address = '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' --WETH
        AND ""from"" = '\xC564EE9f21Ed8A2d8E7e76c085740d5e4c5FaFbE' --Fantom Bridge
        GROUP BY 1
        
        UNION all
        
        SELECT
        date_trunc('day', evt_block_time) as day, sum(value/1e18) as transfer
        FROM erc20.""ERC20_evt_Transfer""
        WHERE contract_address = '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' --WETH
        AND ""to"" = '\xC564EE9f21Ed8A2d8E7e76c085740d5e4c5FaFbE' --Fantom Bridge
        GROUP BY 1
    ) as net
    ) w
    group by 1, 2 ,3, 4, 6
),

ftm_full as(
    select * from ftm
),

ftm_tvl as (
    select n.day, bridge, token_address, label, token_amount*price/divisor as token_amount_usd
    from ftm_full n
    left join prices p on n.day = p.day and n.label = p.symbol
),

poly_erc as(
    select day, 'Polygon Bridges' as bridge, token_address, token_symbol as label, amount_usd as token_amount_usd
    from erc20.""view_token_balances_daily""
    where (wallet_address = '\x40ec5B33f54e0E8A33A975908C5BA1c14e5BbbDf'
    or wallet_address = '\x401F6c983eA34274ec46f84D70b31C151321188b')
    and day > '2021-04-01'
    and amount_usd > 5000
),

eth_poly as (
    select p.day, bridge, token_address, label, token_amount * price as token_amount_usd
    from (
    select day, bridge, token_address, label, avg(token_amount) as token_amount, divisor
    from (
    SELECT day, 'Polygon Bridges' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, balance as token_amount, 1 as divisor 
    FROM ( 
        select day, sum (balance) over (order by day) as balance -- h/t to MSilb7 for cracking this one
            from (
                select day, sum(transfer) as balance 
                from (
                    select date_trunc('day', block_time) as day, sum(-value/1e18) as transfer
                    from ethereum.""traces""
                    where ""from"" = '\x8484Ef722627bf18ca5Ae6BcF031c23E6e922B30' --Polygon Eth bridge
                    and (LOWER(call_type) not in ('delegatecall', 'callcode', 'staticcall') or call_type is null)
                    and ""tx_success"" = true
                    and success = true
                    group by 1
                    
                    union all
                    
                    select  date_trunc('day', block_time) as day, sum(value/1e18) as transfer
                    from ethereum.""traces""
                    where ""to"" = '\x8484Ef722627bf18ca5Ae6BcF031c23E6e922B30' --Polygon Eth bridge
                    and (LOWER(call_type) not in ('delegatecall', 'callcode', 'staticcall') or call_type is null)
                    and ""tx_success"" = true
                    and success = true
                    group by 1
                    
                    union all --gas costs
                    
                    select date_trunc('day', block_time) as day, -SUM(gas_price*""gas_used"")/1e18 as transfer
                    from ethereum.""transactions""
                    where ""from"" = '\x8484Ef722627bf18ca5Ae6BcF031c23E6e922B30' --Polygon Eth bridge
                    group by 1
                ) z
                group by 1
                order by 1
            ) w
    ) as net
    ) w
    group by 1, 2 ,3, 4, 6
    ) n
    left join prices p on n.day = p.day and n.label = p.symbol
),

poly_tvl as (
    select * from poly_erc union all
    select * from eth_poly
),

opt_erc as(
    select day, 'Optimism Bridges' as bridge, token_address, token_symbol as label, amount_usd as token_amount_usd
    from erc20.""view_token_balances_daily""
    where (wallet_address = '\x467194771dae2967aef3ecbedd3bf9a310c76c65' --Optimism DAI bridge
    or wallet_address = '\x99C9fc46f92E8a1c0deC1b1747d010903E884bE1' --Optimism bridge
    or wallet_address = '\x5Fd79D46EBA7F351fe49BFF9E87cdeA6c821eF9f') -- Optimism SNX escrow
    and day > '2021-05-01'
    and amount_usd > 5000
),

eth_opt as (
    select p.day, bridge, token_address, label, token_amount * price as token_amount_usd
    from (
    select day, bridge, token_address, label, avg(token_amount) as token_amount, divisor
    from (
    SELECT day, 'Optimism Bridges' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, balance as token_amount, 1 as divisor 
    FROM ( 
        select day, sum (balance) over (order by day) as balance -- h/t to MSilb7 for cracking this one
        from (
            select day, sum(transfer) as balance 
            from (
                select date_trunc('day', block_time) as day, sum(-value/1e18) as transfer
                from ethereum.""traces""
                where ""from"" = '\x99C9fc46f92E8a1c0deC1b1747d010903E884bE1' --optimism bridge
                and (LOWER(call_type) not in ('delegatecall', 'callcode', 'staticcall') or call_type is null)
                and ""tx_success"" = true
                and success = true
                group by 1
                
                union all
                
                select  date_trunc('day', block_time) as day, sum(value/1e18) as transfer
                from ethereum.""traces""
                where ""to"" = '\x99C9fc46f92E8a1c0deC1b1747d010903E884bE1' --optimism bridge
                and (LOWER(call_type) not in ('delegatecall', 'callcode', 'staticcall') or call_type is null)
                and ""tx_success"" = true
                and success = true
                group by 1
                
                union all --gas costs
                
                select date_trunc('day', block_time) as day, -SUM(gas_price*""gas_used"")/1e18 as transfer
                from ethereum.""transactions""
                where ""from"" = '\x99C9fc46f92E8a1c0deC1b1747d010903E884bE1' --optimism bridge
                group by 1
            ) z
            group by 1
            order by 1
        ) w
    ) as net
    ) w
    group by 1, 2 ,3, 4, 6
    ) n
    left join prices p on n.day = p.day and n.label = p.symbol
),

opt_tvl as (
    select * from opt_erc union all
    select * from eth_opt
),

arb_erc as(
    select day, 'Arbitrum Bridges' as bridge, token_address, token_symbol as label, amount_usd as token_amount_usd
    from erc20.""view_token_balances_daily""
    where (wallet_address = '\xcEe284F754E854890e311e3280b767F80797180d' --Arbitrum Custom Gateway
    or wallet_address = '\xa3A7B6F88361F48403514059F1F16C8E78d60EeC') --Arbitrum L1 ERC20 Gateway
    and day > '2021-05-01'
    and amount_usd > 5000
),

eth_arbitrum as (
    select p.day, bridge, token_address, label, token_amount * price as token_amount_usd
    from (
    select day, bridge, token_address, label, avg(token_amount) as token_amount, divisor
    from (
    SELECT day, 'Arbitrum Bridges' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, SUM(transfer) over (order by day) as token_amount, 1 as divisor 
    FROM ( 
         SELECT date_trunc('day', block_time) as day ,
            sum(
                CASE WHEN ""to"" != '\x2f06e43d850ac75926fa2866e40139475b58cb16' AND ""to"" != '\xcb0da32914a683286ed2d4890e8157ffecc9bd06' 
                THEN -value/1e18 
                WHEN ""to"" = '\x2f06e43d850ac75926fa2866e40139475b58cb16' OR ""to"" = '\xcb0da32914a683286ed2d4890e8157ffecc9bd06' 
                THEN value/1e18 
            END) as transfer
        FROM ethereum.""traces""
        WHERE ""from"" = '\x011B6E24FfB0B5f5fCc564cf4183C5BBBc96D515' --Arbitrum Inbox
        GROUP BY 1
    ) as net
    ) w
    group by 1, 2 ,3, 4, 6
    ) n
    left join prices p on n.day = p.day and n.label = p.symbol
),

arb_tvl as (
    select * from arb_erc union all
    select * from eth_arbitrum
),

xdai_erc as (
    select *
    from (
    select date_trunc('day', a.timestamp) as day, 'xDAI Bridges' as bridge, token_address, label, max(amount_raw) as token_amount, divisor
    from erc20.""token_balances"" a
    left join tokens t on t.address = a.token_address
    where wallet_address = '\x88ad09518695c6c3712AC10a214bE5109a655671' OR  wallet_address = '\x4aa42145Aa6Ebf72e164C9bBC74fbD3788045016'
    group by 1, 2, 3, 4, 6
    order by 1
    ) z
),

xdai_tvl as (
    select n.day, bridge, token_address, label, token_amount*price/divisor as token_amount_usd
    from xdai_erc n
    left join prices p on n.day = p.day and n.label = p.symbol
),

weth_celo as (
    select z.day, bridge, token_address, label, token_amount * price as token_amount_usd
    from (
        select day, bridge, token_address, label, avg(token_amount) as token_amount
        from (
            SELECT day, 'Celo Optics Bridge' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, SUM(transfer) over (order by day) as token_amount 
            FROM ( 
                SELECT date_trunc('day', evt_block_time) as day, sum(-value/1e18) as transfer
                FROM erc20.""ERC20_evt_Transfer""
                WHERE contract_address = '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' --WETH
                AND ""from"" = '\x6a39909e805A3eaDd2b61fFf61147796ca6aBB47' --Fantom Bridge
                GROUP BY 1
                
                UNION all
                
                SELECT
                date_trunc('day', evt_block_time) as day, sum(value/1e18) as transfer
                FROM erc20.""ERC20_evt_Transfer""
                WHERE contract_address = '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' --WETH
                AND ""to"" = '\x6a39909e805A3eaDd2b61fFf61147796ca6aBB47' --Fantom Bridge
                GROUP BY 1
            ) as net
        ) w
        group by 1, 2 ,3, 4
    ) z 
    left join prices p on z.day = p.day and z.label = p.symbol
),

celo_erc as(
    select day, 'Optics Bridge' as bridge, token_address, token_symbol as label, amount_usd as token_amount_usd
    from erc20.""view_token_balances_daily""
    where wallet_address = '\x6a39909e805A3eaDd2b61fFf61147796ca6aBB47'
    and day > '2021-04-01'
    and amount_usd > 5000
),

celo_tvl as(
    select * from celo_erc
),

bsc_tvl as(
    select day, 'BSC Anyswap Bridge' as bridge, token_address, token_symbol as label, amount_usd as token_amount_usd
    from erc20.""view_token_balances_daily""
    where wallet_address = '\x533e3c0e6b48010873B947bddC4721b1bDFF9648'
    and day > '2021-04-01'
    and amount_usd > 5000
),

moon_any_tvl as(
    select day, 'Moonriver Anyswap Bridge' as bridge, token_address, token_symbol as label, amount_usd as token_amount_usd
    from erc20.""view_token_balances_daily""
    where wallet_address = '\x10c6b61DbF44a083Aec3780aCF769C77BE747E23'
    and day > '2021-04-01'
    and amount_usd > 5000
),

rsk_tvl as(
    select day, 'RSK Token Bridge' as bridge, token_address, token_symbol as label, amount_usd as token_amount_usd
    from erc20.""view_token_balances_daily""
    where wallet_address = '\x12eD69359919Fc775bC2674860E8Fe2d2b6a7B5D'
    and day > '2021-04-01'
    and amount_usd > 5000
),

zksync_erc as(
    select  day, 'ZkSync Bridge' as bridge, token_address, token_symbol as label, amount_usd as token_amount_usd
    from erc20.""view_token_balances_daily"" a
    left join tokens t on t.address = a.token_address
    where wallet_address = '\xaBEA9132b05A70803a4E85094fD0e1800777fBEF'
    and day > '2021-04-01'
    and amount_usd > 5000
),

weth_zksync as (
    select p.day, bridge, token_address, label, token_amount * price as token_amount_usd
    from (
    select day, bridge, token_address, label, avg(token_amount) as token_amount, divisor
    from (
    SELECT day, 'ZkSync Bridge' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, SUM(transfer) over (order by day) as token_amount, 1 as divisor 
    FROM ( 
        SELECT date_trunc('day', block_time) as day, sum(value/1e18) as transfer
        FROM ethereum.""traces""
        WHERE ""from"" = '\xaBEA9132b05A70803a4E85094fD0e1800777fBEF'
        GROUP BY 1
        
        UNION all
        
        SELECT
        date_trunc('day', block_time) as day, sum(-value/1e18) as transfer
        FROM ethereum.""transactions""
        WHERE ""to"" = '\xaBEA9132b05A70803a4E85094fD0e1800777fBEF' 
        GROUP BY 1
    ) as net
    ) w
    group by 1, 2 ,3, 4, 6
    ) n
    left join prices p on n.day = p.day and n.label = p.symbol
),

zksync_tvl as(
    select * from zksync_erc
),

boba_erc as(
    select day, 'Boba Network Bridge' as bridge, token_address, token_symbol as label, amount_usd as token_amount_usd
    from erc20.""view_token_balances_daily""
    where wallet_address = '\xdc1664458d2f0B6090bEa60A8793A4E66c2F1c00'
    and day > '2021-04-01'
    and amount_usd > 5000
),

weth_boba as (
    select p.day, bridge, token_address, label, token_amount * price as token_amount_usd
    from (
    select day, bridge, token_address, label, avg(token_amount) as token_amount, divisor
    from (
    SELECT day, 'Boba Network Bridge' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, SUM(transfer) over (order by day) as token_amount, 1 as divisor 
    FROM ( 
        SELECT date_trunc('day', block_time) as day, sum(value/1e18) as transfer,""to"",""from""
        FROM ethereum.""traces""
        WHERE ""from"" = '\xdc1664458d2f0B6090bEa60A8793A4E66c2F1c00'
        AND ""to"" = '\x4828900eb9db5346dfe33ccf884984d8014c7b4b'
        AND value > 0
        GROUP BY 1,3,4
        
        UNION all
        
        SELECT date_trunc('day', block_time) as day, sum(-value/1e18) as transfer, ""to"",""from""
        FROM ethereum.""traces""
        WHERE ""from"" = '\x4828900eb9db5346dfe33ccf884984d8014c7b4b'
        AND ""to"" = '\xdc1664458d2f0B6090bEa60A8793A4E66c2F1c00'
        AND value > 0
        GROUP BY 1,3,4
    ) as net
    ) w
    group by 1, 2 ,3, 4, 6
    ) n
    left join prices p on n.day = p.day and n.label = p.symbol
),

boba_tvl as(
    select * from boba_erc
),

ronin as (
    select *
    from (
    select date_trunc('day', a.timestamp) as day, 'Ronin Bridge' as bridge, token_address, label, max(amount_raw) as token_amount, divisor
    from erc20.""token_balances"" a
    left join tokens t on t.address = a.token_address
    where wallet_address = '\x1A2a1c938CE3eC39b6D47113c7955bAa9DD454F2' --Ronin Bridge
    or wallet_address = '\x64192819Ac13Ef72bF6b5AE239AC672B43a9AF08' --Ronin Bridge 2
    group by 1, 2, 3, 4, 6
    order by 1
    ) z
),

ronin_full as(
    select * from ronin
),

ronin_tvl as (
    select n.day, bridge, token_address, label, avg(token_amount*price/divisor) as token_amount_usd
    from ronin_full n
    left join prices p on n.day = p.day and n.label = p.symbol
    group by 1, 2, 3, 4
),

synapse as (
    select *
    from (
    select date_trunc('day', a.timestamp) as day, 'Synapse Bridge' as bridge, token_address, label, max(amount_raw) as token_amount, divisor
    from erc20.""token_balances"" a
    left join tokens t on t.address = a.token_address
    where wallet_address = '\x2796317b0fF8538F253012862c06787Adfb8cEb6' --synapse
    group by 1, 2, 3, 4, 6
    order by 1
    ) z
),

synapse_tvl as (
    select n.day, bridge, token_address, label, (token_amount::numeric * price::numeric)/divisor as token_amount_usd 
    from synapse n
    left join prices p on n.day = p.day and n.label = p.symbol
    where n.day > '2021-01-01'
),

nomad as (
    select *
    from (
    select date_trunc('day', a.timestamp) as day, 'Nomad Bridge' as bridge, token_address, label, max(amount_raw) as token_amount, divisor
    from erc20.""token_balances"" a
    left join tokens t on t.address = a.token_address
    where wallet_address = '\x88a69b4e698a4b090df6cf5bd7b2d47325ad30a3' --nomad
    group by 1, 2, 3, 4, 6
    order by 1
    ) z
),

nomad_tvl as (
    select n.day, bridge, token_address, label, (token_amount::numeric * price::numeric)/divisor as token_amount_usd 
    from nomad n
    left join prices p on n.day = p.day and n.label = p.symbol
    where n.day > '2021-01-01'
)

select * from (
    select * from (
        select day, bridge, sum(token_amount_usd) as TVL_usd from harmony_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from near_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from sol_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from ftm_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from poly_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from opt_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from arb_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from xdai_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from celo_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from bsc_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from moon_any_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from rsk_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from boba_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from zksync_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from ronin_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from synapse_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from nomad_tvl group by 1,2 union all
        select day, bridge, sum(token_amount_usd) as TVL_usd from ava_tvl group by 1,2
    ) z
    where (day > '2021-04-15')
) w
where day > '{{start_day_tvl}}'"
144559,Ethereum Bridges Asset Distribution,,"[{""id"": 284802, ""type"": ""table"", ""name"": ""Asset ranking \ud83c\udfc6"", ""options"": {""columns"": [{""name"": ""tvl_usd"", ""numberFormat"": ""$0,0""}, {""name"": ""asset_share"", ""numberFormat"": ""0.00""}]}, ""created_at"": ""2021-09-09T14:11:59.219374+00:00"", ""__typename"": ""visualizations""}, {""id"": 284822, ""type"": ""chart"", ""name"": ""Asset distribution \ud83e\udd67"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""$0,0"", ""columnMapping"": {""label"": ""x"", ""tvl_usd"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {""USDC"": {""color"": ""#6485E8""}, ""USDT"": {""color"": ""#63D47A""}, ""WBTC"": {""color"": ""#F09642""}, ""WETH"": {""color"": ""#45E8BA""}, ""MATIC"": {""color"": ""#FF9EEA""}, ""WETH or ETH"": {""color"": ""#F5C27A""}}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2021-09-09T14:26:45.109324+00:00"", ""__typename"": ""visualizations""}]","with tokens(address,label,divisor) as (
    select address, label, 10^decimals as divisor
    from (
    select ""contract_address"" as address, symbol as label, CAST (decimals AS numeric) as decimals
    from erc20.""tokens""
    ) z
),

prices as (
    select date_trunc('day', minute) as day, avg(price) as price, symbol, contract_address
    from prices.""usd""
    where minute > '2021-01-01'
    group by 1, 3, 4
),

ava as (
    select *
    from (
    select date_trunc('day', a.timestamp) as day, 'Avalanche Bridge' as bridge, token_address, label, max(amount_raw) as token_amount, divisor
    from erc20.""token_balances"" a
    left join tokens t on t.address = a.token_address
    where wallet_address = '\xe78388b4ce79068e89bf8aa7f218ef6b9ab0e9d0' --Avalanche
    group by 1, 2, 3, 4, 6
    order by 1
    ) z
),

weth_ava as (
    select day, bridge, token_address, label, avg(token_amount) as token_amount, divisor
    from (
    SELECT day, 'Avalanche Bridge' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, SUM(transfer) over (order by day) as token_amount, 1 as divisor 
    FROM ( 
        SELECT date_trunc('day', evt_block_time) as day, sum(-value/1e18) as transfer
        FROM erc20.""ERC20_evt_Transfer""
        WHERE contract_address = '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' --WETH
        AND ""from"" = '\xe78388b4ce79068e89bf8aa7f218ef6b9ab0e9d0' --Avalanche
        GROUP BY 1
        
        UNION all
        
        SELECT
        date_trunc('day', evt_block_time) as day, sum(value/1e18) as transfer
        FROM erc20.""ERC20_evt_Transfer""
        WHERE contract_address = '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' --WETH
        AND ""to"" = '\xe78388b4ce79068e89bf8aa7f218ef6b9ab0e9d0' --Avalanche
        GROUP BY 1
    ) as net
    ) w
    group by 1, 2 ,3, 4, 6
),

ava_full as(
    select * from ava
),

ava_tvl as (
    select n.day, bridge, token_address, label, token_amount*price/divisor as token_amount_usd
    from ava_full n
    left join prices p on n.day = p.day and n.label = p.symbol
),

usd_miss as (
select 'USDK' as symbol_d, 1 as price_d union all
select 'FRAX' as symbol_d, 1 as price_d union all
select 'UST' as symbol_d, 1 as price_d union all
select 'HUSD' as symbol_d, 1 as price_d union all
select 'LUNA' as symbol_d, 20 as price_d
),

sol as (
select z.day, bridge, token_address, label, avg(token_amount/divisor) as token_amount
    from (
    select date_trunc('day', a.timestamp) as day, 'Solana Wormhole' as bridge, token_address, label, max(amount_raw) as token_amount, divisor
    from erc20.""token_balances"" a
    left join tokens t on t.address = a.token_address
    where wallet_address = '\xf92cD566Ea4864356C5491c177A430C222d7e678' --Sol
    and date_trunc('day', a.timestamp) > '2021-07-01'
    group by 1, 2, 3, 4, 6
    order by 1
    ) z
    group by 1, 2, 3, 4
),

sol_label_swap as (
    select day, bridge, token_address, REPLACE(replace::text, 'renBTC', 'WBTC') as label, token_amount
    from (
        select day, bridge, token_address, token_amount, REPLACE(replace::text, 'WBTC', 'WBTC')
        from (
            select day, bridge, token_address, token_amount, REPLACE(replace::text, 'ibBTC', 'WBTC') 
            from (
                select day, bridge, token_address, token_amount, REPLACE(replace::text, 'BBTC', 'WBTC')
                from (
                    select day, bridge, token_address, token_amount, REPLACE(label::text, 'HBTC', 'WBTC')
                    from sol
                ) z
            ) w
        ) x
    ) m
),

sol_tvl as (
select day, bridge, label, sum(token_amount*price) as token_amount_usd
from (
    select 
        s.day, 
        bridge, 
        token_address, 
        label, 
        token_amount, 
        COALESCE(p.price, 0) + COALESCE(u.price_d, 0) as price
    from sol_label_swap s
    left join prices p on p.day = s.day and p.symbol = s.label
    left join usd_miss u on s.label = u.symbol_d
) w
group by 1, 2, 3
),

near as (
    select *
    from (
    select date_trunc('day', a.timestamp) as day, 'Near Rainbow Bridge' as bridge, token_address, label, max(amount_raw) as token_amount, divisor
    from erc20.""token_balances"" a
    left join tokens t on t.address = a.token_address
    where wallet_address = '\x23ddd3e3692d1861ed57ede224608875809e127f' --Near
    group by 1, 2, 3, 4, 6
    order by 1
    ) z
),

weth_near as (
    select day, bridge, token_address, label, avg(token_amount) as token_amount, divisor
    from (
    SELECT day, 'Near Rainbow Bridge' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, SUM(transfer) over (order by day) as token_amount, 1 as divisor 
    FROM ( 
        SELECT date_trunc('day', evt_block_time) as day, sum(-value/1e18) as transfer
        FROM erc20.""ERC20_evt_Transfer""
        WHERE contract_address = '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' --WETH
        AND ""from"" = '\x23ddd3e3692d1861ed57ede224608875809e127f' --Near
        GROUP BY 1
        
        UNION all
        
        SELECT
        date_trunc('day', evt_block_time) as day, sum(value/1e18) as transfer
        FROM erc20.""ERC20_evt_Transfer""
        WHERE contract_address = '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' --WETH
        AND ""to"" = '\x23ddd3e3692d1861ed57ede224608875809e127f' --Near
        GROUP BY 1
    ) as net
    ) w
    group by 1, 2 ,3, 4, 6
),

near_full as(
    select * from near
),

near_tvl as (
    select n.day, bridge, token_address, label, token_amount*price/divisor as token_amount_usd
    from near_full n
    left join prices p on n.day = p.day and n.label = p.symbol
),

harmony as (
    select *
    from (
    select date_trunc('day', a.timestamp) as day, 'Harmony Bridges' as bridge, token_address, label, max(amount_raw) as token_amount, divisor
    from erc20.""token_balances"" a
    left join tokens t on t.address = a.token_address
    where wallet_address = '\x2dccdb493827e15a5dc8f8b72147e6c4a5620857' --harmony
    group by 1, 2, 3, 4, 6
    order by 1
    ) z
),

eth_harmony as (
    select day, bridge, token_address, label, avg(token_amount) as token_amount, divisor
    from (
    SELECT day, 'Harmony Bridges' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, SUM(transfer) over (order by day) as token_amount, 1 as divisor 
    FROM ( 
        SELECT date_trunc('day', block_time) as day, sum(-value/1e18) as transfer
        FROM ethereum.""traces""
        WHERE ""from"" = '\xf9fb1c508ff49f78b60d3a96dea99fa5d7f3a8a6' --Harmony
        GROUP BY 1
        
        UNION all
        
        SELECT
        date_trunc('day', block_time) as day, sum(value/1e18) as transfer
        FROM ethereum.""traces""
        WHERE ""to"" = '\xf9fb1c508ff49f78b60d3a96dea99fa5d7f3a8a6' --Harmony
        GROUP BY 1
    ) as net
    ) w
    group by 1, 2 ,3, 4, 6
),

harmony_full as(
    select * from harmony union all
    select * from eth_harmony
),

harmony_tvl as (
    select n.day, bridge, token_address, label, (token_amount::numeric * price::numeric)/divisor as token_amount_usd 
    from harmony_full n
    left join prices p on n.day = p.day and n.label = p.symbol
    where n.day > '2021-01-01'
),

ftm as (
    select *
    from (
    select date_trunc('day', a.timestamp) as day, 'Fantom Anyswap Bridge' as bridge, token_address, label, max(amount_raw) as token_amount, divisor
    from erc20.""token_balances"" a
    left join tokens t on t.address = a.token_address
    where wallet_address = '\xC564EE9f21Ed8A2d8E7e76c085740d5e4c5FaFbE' --Fantom Bridge
    group by 1, 2, 3, 4, 6
    order by 1
    ) z
),

weth_ftm as (
    select day, bridge, token_address, label, avg(token_amount) as token_amount, divisor
    from (
    SELECT day, 'Fantom Anyswap Bridge' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, SUM(transfer) over (order by day) as token_amount, 1 as divisor 
    FROM ( 
        SELECT date_trunc('day', evt_block_time) as day, sum(-value/1e18) as transfer
        FROM erc20.""ERC20_evt_Transfer""
        WHERE contract_address = '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' --WETH
        AND ""from"" = '\xC564EE9f21Ed8A2d8E7e76c085740d5e4c5FaFbE' --Fantom Bridge
        GROUP BY 1
        
        UNION all
        
        SELECT
        date_trunc('day', evt_block_time) as day, sum(value/1e18) as transfer
        FROM erc20.""ERC20_evt_Transfer""
        WHERE contract_address = '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' --WETH
        AND ""to"" = '\xC564EE9f21Ed8A2d8E7e76c085740d5e4c5FaFbE' --Fantom Bridge
        GROUP BY 1
    ) as net
    ) w
    group by 1, 2 ,3, 4, 6
),

ftm_full as(
    select * from ftm
),

ftm_tvl as (
    select n.day, bridge, token_address, label, token_amount*price/divisor as token_amount_usd
    from ftm_full n
    left join prices p on n.day = p.day and n.label = p.symbol
),

poly_erc as(
    select day, 'Polygon Bridges' as bridge, token_address, token_symbol as label, amount_usd as token_amount_usd
    from erc20.""view_token_balances_daily""
    where (wallet_address = '\x40ec5B33f54e0E8A33A975908C5BA1c14e5BbbDf'
    or wallet_address = '\x401F6c983eA34274ec46f84D70b31C151321188b')
    and day > '2021-04-01'
    and amount_usd > 5000
),

eth_poly as (
    select p.day, bridge, token_address, label, token_amount * price as token_amount_usd
    from (
    select day, bridge, token_address, label, avg(token_amount) as token_amount, divisor
    from (
    SELECT day, 'Polygon Bridges' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, balance as token_amount, 1 as divisor 
    FROM ( 
        select day, sum (balance) over (order by day) as balance -- h/t to MSilb7 for cracking this one
            from (
                select day, sum(transfer) as balance 
                from (
                    select date_trunc('day', block_time) as day, sum(-value/1e18) as transfer
                    from ethereum.""traces""
                    where ""from"" = '\x8484Ef722627bf18ca5Ae6BcF031c23E6e922B30' --Polygon Eth bridge
                    and (LOWER(call_type) not in ('delegatecall', 'callcode', 'staticcall') or call_type is null)
                    and ""tx_success"" = true
                    and success = true
                    group by 1
                    
                    union all
                    
                    select  date_trunc('day', block_time) as day, sum(value/1e18) as transfer
                    from ethereum.""traces""
                    where ""to"" = '\x8484Ef722627bf18ca5Ae6BcF031c23E6e922B30' --Polygon Eth bridge
                    and (LOWER(call_type) not in ('delegatecall', 'callcode', 'staticcall') or call_type is null)
                    and ""tx_success"" = true
                    and success = true
                    group by 1
                    
                    union all --gas costs
                    
                    select date_trunc('day', block_time) as day, -SUM(gas_price*""gas_used"")/1e18 as transfer
                    from ethereum.""transactions""
                    where ""from"" = '\x8484Ef722627bf18ca5Ae6BcF031c23E6e922B30' --Polygon Eth bridge
                    group by 1
                ) z
                group by 1
                order by 1
            ) w
    ) as net
    ) w
    group by 1, 2 ,3, 4, 6
    ) n
    left join prices p on n.day = p.day and n.label = p.symbol
),

poly_tvl as (
    select * from poly_erc union all
    select * from eth_poly
),

opt_erc as(
    select day, 'Optimism Bridges' as bridge, token_address, token_symbol as label, amount_usd as token_amount_usd
    from erc20.""view_token_balances_daily""
    where (wallet_address = '\x467194771dae2967aef3ecbedd3bf9a310c76c65' --Optimism DAI bridge
    or wallet_address = '\x99C9fc46f92E8a1c0deC1b1747d010903E884bE1' --Optimism bridge
    or wallet_address = '\x5Fd79D46EBA7F351fe49BFF9E87cdeA6c821eF9f') -- Optimism SNX escrow
    and day > '2021-05-01'
    and amount_usd > 5000
),

eth_opt as (
    select p.day, bridge, token_address, label, token_amount * price as token_amount_usd
    from (
    select day, bridge, token_address, label, avg(token_amount) as token_amount, divisor
    from (
    SELECT day, 'Optimism Bridges' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, balance as token_amount, 1 as divisor 
    FROM ( 
        select day, sum (balance) over (order by day) as balance -- h/t to MSilb7 for cracking this one
        from (
            select day, sum(transfer) as balance 
            from (
                select date_trunc('day', block_time) as day, sum(-value/1e18) as transfer
                from ethereum.""traces""
                where ""from"" = '\x99C9fc46f92E8a1c0deC1b1747d010903E884bE1' --optimism bridge
                and (LOWER(call_type) not in ('delegatecall', 'callcode', 'staticcall') or call_type is null)
                and ""tx_success"" = true
                and success = true
                group by 1
                
                union all
                
                select  date_trunc('day', block_time) as day, sum(value/1e18) as transfer
                from ethereum.""traces""
                where ""to"" = '\x99C9fc46f92E8a1c0deC1b1747d010903E884bE1' --optimism bridge
                and (LOWER(call_type) not in ('delegatecall', 'callcode', 'staticcall') or call_type is null)
                and ""tx_success"" = true
                and success = true
                group by 1
                
                union all --gas costs
                
                select date_trunc('day', block_time) as day, -SUM(gas_price*""gas_used"")/1e18 as transfer
                from ethereum.""transactions""
                where ""from"" = '\x99C9fc46f92E8a1c0deC1b1747d010903E884bE1' --optimism bridge
                group by 1
            ) z
            group by 1
            order by 1
        ) w
    ) as net
    ) w
    group by 1, 2 ,3, 4, 6
    ) n
    left join prices p on n.day = p.day and n.label = p.symbol
),

opt_tvl as (
    select * from opt_erc union all
    select * from eth_opt
),

arb_erc as(
    select day, 'Arbitrum Bridges' as bridge, token_address, token_symbol as label, amount_usd as token_amount_usd
    from erc20.""view_token_balances_daily""
    where (wallet_address = '\xcEe284F754E854890e311e3280b767F80797180d' --Arbitrum Custom Gateway
    or wallet_address = '\xa3A7B6F88361F48403514059F1F16C8E78d60EeC') --Arbitrum L1 ERC20 Gateway
    and day > '2021-05-01'
    and amount_usd > 5000
),

eth_arbitrum as (
    select p.day, bridge, token_address, label, token_amount * price as token_amount_usd
    from (
    select day, bridge, token_address, label, avg(token_amount) as token_amount, divisor
    from (
    SELECT day, 'Arbitrum Bridges' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, SUM(transfer) over (order by day) as token_amount, 1 as divisor 
    FROM ( 
         SELECT date_trunc('day', block_time) as day ,
            sum(
                CASE WHEN ""to"" != '\x2f06e43d850ac75926fa2866e40139475b58cb16' AND ""to"" != '\xcb0da32914a683286ed2d4890e8157ffecc9bd06' 
                THEN -value/1e18 
                WHEN ""to"" = '\x2f06e43d850ac75926fa2866e40139475b58cb16' OR ""to"" = '\xcb0da32914a683286ed2d4890e8157ffecc9bd06' 
                THEN value/1e18 
            END) as transfer
        FROM ethereum.""traces""
        WHERE ""from"" = '\x011B6E24FfB0B5f5fCc564cf4183C5BBBc96D515' --Arbitrum Inbox
        GROUP BY 1
    ) as net
    ) w
    group by 1, 2 ,3, 4, 6
    ) n
    left join prices p on n.day = p.day and n.label = p.symbol
),

arb_tvl as (
    select * from arb_erc union all
    select * from eth_arbitrum
),

xdai_erc as (
    select *
    from (
    select date_trunc('day', a.timestamp) as day, 'xDAI Bridges' as bridge, token_address, label, max(amount_raw) as token_amount, divisor
    from erc20.""token_balances"" a
    left join tokens t on t.address = a.token_address
    where wallet_address = '\x88ad09518695c6c3712AC10a214bE5109a655671' OR  wallet_address = '\x4aa42145Aa6Ebf72e164C9bBC74fbD3788045016'
    group by 1, 2, 3, 4, 6
    order by 1
    ) z
),

xdai_tvl as (
    select n.day, bridge, token_address, label, token_amount*price/divisor as token_amount_usd
    from xdai_erc n
    left join prices p on n.day = p.day and n.label = p.symbol
),

weth_celo as (
    select z.day, bridge, token_address, label, token_amount * price as token_amount_usd
    from (
        select day, bridge, token_address, label, avg(token_amount) as token_amount
        from (
            SELECT day, 'Celo Optics Bridge' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, SUM(transfer) over (order by day) as token_amount 
            FROM ( 
                SELECT date_trunc('day', evt_block_time) as day, sum(-value/1e18) as transfer
                FROM erc20.""ERC20_evt_Transfer""
                WHERE contract_address = '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' --WETH
                AND ""from"" = '\x6a39909e805A3eaDd2b61fFf61147796ca6aBB47' --Fantom Bridge
                GROUP BY 1
                
                UNION all
                
                SELECT
                date_trunc('day', evt_block_time) as day, sum(value/1e18) as transfer
                FROM erc20.""ERC20_evt_Transfer""
                WHERE contract_address = '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' --WETH
                AND ""to"" = '\x6a39909e805A3eaDd2b61fFf61147796ca6aBB47' --Fantom Bridge
                GROUP BY 1
            ) as net
        ) w
        group by 1, 2 ,3, 4
    ) z 
    left join prices p on z.day = p.day and z.label = p.symbol
),

celo_erc as(
    select day, 'Optics Bridge' as bridge, token_address, token_symbol as label, amount_usd as token_amount_usd
    from erc20.""view_token_balances_daily""
    where wallet_address = '\x6a39909e805A3eaDd2b61fFf61147796ca6aBB47'
    and day > '2021-04-01'
    and amount_usd > 5000
),

celo_tvl as(
    select * from celo_erc
),

bsc_tvl as(
    select day, 'BSC Anyswap Bridge' as bridge, token_address, token_symbol as label, amount_usd as token_amount_usd
    from erc20.""view_token_balances_daily""
    where wallet_address = '\x533e3c0e6b48010873B947bddC4721b1bDFF9648'
    and day > '2021-04-01'
    and amount_usd > 5000
),

moon_any_tvl as(
    select day, 'Moonriver Anyswap Bridge' as bridge, token_address, token_symbol as label, amount_usd as token_amount_usd
    from erc20.""view_token_balances_daily""
    where wallet_address = '\x10c6b61DbF44a083Aec3780aCF769C77BE747E23'
    and day > '2021-04-01'
    and amount_usd > 5000
),

rsk_tvl as(
    select day, 'RSK Token Bridge' as bridge, token_address, token_symbol as label, amount_usd as token_amount_usd
    from erc20.""view_token_balances_daily""
    where wallet_address = '\x12eD69359919Fc775bC2674860E8Fe2d2b6a7B5D'
    and day > '2021-04-01'
    and amount_usd > 5000
),

zksync_erc as(
    select  day, 'ZkSync Bridge' as bridge, token_address, token_symbol as label, amount_usd as token_amount_usd
    from erc20.""view_token_balances_daily"" a
    left join tokens t on t.address = a.token_address
    where wallet_address = '\xaBEA9132b05A70803a4E85094fD0e1800777fBEF'
    and day > '2021-04-01'
    and amount_usd > 5000
),

weth_zksync as (
    select p.day, bridge, token_address, label, token_amount * price as token_amount_usd
    from (
    select day, bridge, token_address, label, avg(token_amount) as token_amount, divisor
    from (
    SELECT day, 'ZkSync Bridge' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, SUM(transfer) over (order by day) as token_amount, 1 as divisor 
    FROM ( 
        SELECT date_trunc('day', block_time) as day, sum(value/1e18) as transfer
        FROM ethereum.""traces""
        WHERE ""from"" = '\xaBEA9132b05A70803a4E85094fD0e1800777fBEF'
        GROUP BY 1
        
        UNION all
        
        SELECT
        date_trunc('day', block_time) as day, sum(-value/1e18) as transfer
        FROM ethereum.""transactions""
        WHERE ""to"" = '\xaBEA9132b05A70803a4E85094fD0e1800777fBEF' 
        GROUP BY 1
    ) as net
    ) w
    group by 1, 2 ,3, 4, 6
    ) n
    left join prices p on n.day = p.day and n.label = p.symbol
),

zksync_tvl as(
    select * from zksync_erc
),

boba_erc as(
    select day, 'Boba Network Bridge' as bridge, token_address, token_symbol as label, amount_usd as token_amount_usd
    from erc20.""view_token_balances_daily""
    where wallet_address = '\xdc1664458d2f0B6090bEa60A8793A4E66c2F1c00'
    and day > '2021-04-01'
    and amount_usd > 5000
),

weth_boba as (
    select p.day, bridge, token_address, label, token_amount * price as token_amount_usd
    from (
    select day, bridge, token_address, label, avg(token_amount) as token_amount, divisor
    from (
    SELECT day, 'Boba Network Bridge' as bridge, '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'::bytea as token_address, 'WETH' as label, SUM(transfer) over (order by day) as token_amount, 1 as divisor 
    FROM ( 
        SELECT date_trunc('day', block_time) as day, sum(value/1e18) as transfer,""to"",""from""
        FROM ethereum.""traces""
        WHERE ""from"" = '\xdc1664458d2f0B6090bEa60A8793A4E66c2F1c00'
        AND ""to"" = '\x4828900eb9db5346dfe33ccf884984d8014c7b4b'
        AND value > 0
        GROUP BY 1,3,4
        
        UNION all
        
        SELECT date_trunc('day', block_time) as day, sum(-value/1e18) as transfer, ""to"",""from""
        FROM ethereum.""traces""
        WHERE ""from"" = '\x4828900eb9db5346dfe33ccf884984d8014c7b4b'
        AND ""to"" = '\xdc1664458d2f0B6090bEa60A8793A4E66c2F1c00'
        AND value > 0
        GROUP BY 1,3,4
    ) as net
    ) w
    group by 1, 2 ,3, 4, 6
    ) n
    left join prices p on n.day = p.day and n.label = p.symbol
),

boba_tvl as(
    select * from boba_erc
),

ronin as (
    select *
    from (
    select date_trunc('day', a.timestamp) as day, 'Ronin Bridge' as bridge, token_address, label, max(amount_raw) as token_amount, divisor
    from erc20.""token_balances"" a
    left join tokens t on t.address = a.token_address
    where wallet_address = '\x1A2a1c938CE3eC39b6D47113c7955bAa9DD454F2' --Ronin Bridge
    group by 1, 2, 3, 4, 6
    order by 1
    ) z
),

ronin_full as(
    select * from ronin
),

ronin_tvl as (
    select n.day, bridge, token_address, label, avg(token_amount*price/divisor) as token_amount_usd
    from ronin_full n
    left join prices p on n.day = p.day and n.label = p.symbol
    group by 1, 2, 3, 4
),

nomad as (
    select *
    from (
    select date_trunc('day', a.timestamp) as day, 'Nomad Bridge' as bridge, token_address, label, max(amount_raw) as token_amount, divisor
    from erc20.""token_balances"" a
    left join tokens t on t.address = a.token_address
    where wallet_address = '\x88a69b4e698a4b090df6cf5bd7b2d47325ad30a3' --nomad
    group by 1, 2, 3, 4, 6
    order by 1
    ) z
),

nomad_tvl as (
    select n.day, bridge, token_address, label, (token_amount::numeric * price::numeric)/divisor as token_amount_usd 
    from nomad n
    left join prices p on n.day = p.day and n.label = p.symbol
    where n.day > '2021-01-01'
)

select 
    row_number() over (order by TVL_usd desc) as ranking, 
    replace (label, 'WETH', 'WETH or ETH') as label, 
    TVL_usd
from (
    select *
    from (
        select day, label, sum(TVL_usd) as TVL_usd 
        from (
            select day, label, sum(token_amount_usd) as TVL_usd from harmony_tvl group by 1,2 union all
            select day, label, sum(token_amount_usd) as TVL_usd from near_tvl group by 1,2 union all
            select day, label, sum(token_amount_usd) as TVL_usd from sol_tvl group by 1,2 union all
            select day, label, sum(token_amount_usd) as TVL_usd from ftm_tvl group by 1,2 union all
            select day, label, sum(token_amount_usd) as TVL_usd from poly_tvl group by 1,2 union all
            select day, label, sum(token_amount_usd) as TVL_usd from opt_tvl group by 1,2 union all
            select day, label, sum(token_amount_usd) as TVL_usd from arb_tvl group by 1,2 union all
            select day, label, sum(token_amount_usd) as TVL_usd from xdai_tvl group by 1,2 union all
            select day, label, sum(token_amount_usd) as TVL_usd from celo_tvl group by 1,2 union all
            select day, label, sum(token_amount_usd) as TVL_usd from bsc_tvl group by 1,2 union all
            select day, label, sum(token_amount_usd) as TVL_usd from moon_any_tvl group by 1,2 union all
            select day, label, sum(token_amount_usd) as TVL_usd from rsk_tvl group by 1,2 union all
            select day, label, sum(token_amount_usd) as TVL_usd from boba_tvl group by 1,2 union all
            select day, label, sum(token_amount_usd) as TVL_usd from zksync_tvl group by 1,2 union all
            select day, label, sum(token_amount_usd) as TVL_usd from ronin_tvl group by 1,2 union all
            select day, label, sum(token_amount_usd) as TVL_usd from nomad_tvl group by 1,2 union all
            select day, label, sum(token_amount_usd) as TVL_usd from ava_tvl group by 1,2
        ) z
        where day = current_date - interval '1 days'
        group by 1, 2
    ) w
where TVL_usd != 0
) n"
145529,Ethereum bridge daily unique depositors 🧍🏻🧍🏻,,"[{""id"": 286818, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-09-10T07:35:46.60323+00:00"", ""__typename"": ""visualizations""}, {""id"": 297103, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""columnMapping"": {""day"": ""x"", ""unique_depositors"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""scatter""}, ""created_at"": ""2021-09-14T18:40:18.575664+00:00"", ""__typename"": ""visualizations""}, {""id"": 286819, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""columnMapping"": {""day"": ""x"", ""count"": ""y"", ""bridge"": ""series"", ""unique_depositors"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2021-09-10T07:39:07.610626+00:00"", ""__typename"": ""visualizations""}, {""id"": 286844, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""-""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""columnMapping"": {""day"": ""x"", ""bridge"": ""series"", ""unique_depositors"": ""y"", ""unique_depositors_ma30"": ""y""}, ""seriesOptions"": {""BSC"": {""type"": ""line"", ""yAxis"": 0, ""zIndex"": 1}, ""RSK"": {""type"": ""line"", ""yAxis"": 0, ""zIndex"": 6}, ""Celo"": {""type"": ""line"", ""yAxis"": 0, ""zIndex"": 13}, ""Near"": {""type"": ""line"", ""color"": ""#656161"", ""yAxis"": 0, ""zIndex"": 3}, ""xDAI"": {""type"": ""line"", ""yAxis"": 0, ""zIndex"": 9}, ""Ronin"": {""type"": ""line"", ""color"": ""#C752B1"", ""yAxis"": 0, ""zIndex"": 7}, ""Fantom"": {""type"": ""line"", ""color"": ""#5E4ED4"", ""yAxis"": 0, ""zIndex"": 1}, ""Solana"": {""type"": ""line"", ""color"": ""#7F40DD"", ""yAxis"": 0, ""zIndex"": 5}, ""Harmony"": {""type"": ""line"", ""color"": ""#F7BF5F"", ""yAxis"": 0, ""zIndex"": 2}, ""Arbitrum"": {""type"": ""line"", ""color"": ""#72F1F3"", ""yAxis"": 0, ""zIndex"": 0}, ""Optimism"": {""type"": ""line"", ""color"": ""#F31616"", ""yAxis"": 0, ""zIndex"": 6}, ""Avalanche"": {""type"": ""line"", ""color"": ""#F08F8F"", ""yAxis"": 0, ""zIndex"": 7}, ""Moonriver"": {""type"": ""line"", ""yAxis"": 0, ""zIndex"": 12}, ""PolygonERC"": {""type"": ""line"", ""color"": ""#FF94F3"", ""yAxis"": 0, ""zIndex"": 4}}, ""valuesOptions"": {}, ""globalSeriesType"": ""line""}, ""created_at"": ""2021-09-10T07:48:15.917704+00:00"", ""__typename"": ""visualizations""}]","with ad(address,label) AS (VALUES
    ('\xe78388b4ce79068e89bf8aa7f218ef6b9ab0e9d0'::bytea, 'Avalanche'::text),
    ('\xf92cD566Ea4864356C5491c177A430C222d7e678'::bytea, 'Solana'::text),
    ('\x23ddd3e3692d1861ed57ede224608875809e127f'::bytea, 'Near'::text),
    ('\x2dccdb493827e15a5dc8f8b72147e6c4a5620857'::bytea, 'Harmony'::text),
    ('\xf9fb1c508ff49f78b60d3a96dea99fa5d7f3a8a6'::bytea, 'Harmony'::text),
    ('\xC564EE9f21Ed8A2d8E7e76c085740d5e4c5FaFbE'::bytea, 'Fantom'::text),
    ('\x40ec5B33f54e0E8A33A975908C5BA1c14e5BbbDf'::bytea, 'PolygonERC'::text),
    ('\x467194771dae2967aef3ecbedd3bf9a310c76c65'::bytea, 'Optimism'::text),
    ('\x99C9fc46f92E8a1c0deC1b1747d010903E884bE1'::bytea, 'Optimism'::text),
    ('\xcEe284F754E854890e311e3280b767F80797180d'::bytea, 'Arbitrum'::text),
    ('\xa3A7B6F88361F48403514059F1F16C8E78d60EeC'::bytea, 'Arbitrum'::text),
    ('\x011B6E24FfB0B5f5fCc564cf4183C5BBBc96D515'::bytea, 'Arbitrum'::text),
    ('\x467194771dae2967aef3ecbedd3bf9a310c76c65'::bytea, 'Optimism'::text),
    ('\x88ad09518695c6c3712AC10a214bE5109a655671'::bytea, 'xDAI'::text),
    ('\x6a39909e805A3eaDd2b61fFf61147796ca6aBB47'::bytea, 'Celo'::text),
    ('\x533e3c0e6b48010873B947bddC4721b1bDFF9648'::bytea, 'BSC'::text),
    ('\x10c6b61DbF44a083Aec3780aCF769C77BE747E23'::bytea, 'Moonriver'::text),
    ('\x1A2a1c938CE3eC39b6D47113c7955bAa9DD454F2'::bytea, 'Ronin'::text),
    ('\x88a69b4e698a4b090df6cf5bd7b2d47325ad30a3'::bytea, 'Nomad'::text),
    ('\x12eD69359919Fc775bC2674860E8Fe2d2b6a7B5D'::bytea, 'RSK'::text)
),

ethereum as (
    select *
    from (
        select block_time, et.""to"", et.""from"" as unique_depositors
        from ethereum.""traces"" et
        where (et.""to"" = '\xe78388b4ce79068e89bf8aa7f218ef6b9ab0e9d0' --Avalanche
            or et.""to"" = '\xf92cD566Ea4864356C5491c177A430C222d7e678' --Sol
            or et.""to"" = '\x23ddd3e3692d1861ed57ede224608875809e127f' --Near
            or et.""to"" = '\xf9fb1c508ff49f78b60d3a96dea99fa5d7f3a8a6' --Harmonyeth
            or et.""to"" = '\xC564EE9f21Ed8A2d8E7e76c085740d5e4c5FaFbE' --Fantom Bridge
            or et.""to"" = '\x40ec5B33f54e0E8A33A975908C5BA1c14e5BbbDf' --PolygonERC
            or et.""to"" = '\x467194771dae2967aef3ecbedd3bf9a310c76c65' --Optimism DAI bridge
            or et.""to"" = '\x99C9fc46f92E8a1c0deC1b1747d010903E884bE1' --Optimism bridge
            or et.""to"" = '\xcEe284F754E854890e311e3280b767F80797180d' --Arbitrum Custom Gateway
            or et.""to"" = '\xa3A7B6F88361F48403514059F1F16C8E78d60EeC' --Arbitrum L1 ERC20 Gateway
            or et.""to"" = '\x011B6E24FfB0B5f5fCc564cf4183C5BBBc96D515' --Arbitrum Inbox
            or et.""to"" ='\x467194771dae2967aef3ecbedd3bf9a310c76c65' --Optimism DAI bridge
            or et.""to"" ='\x88ad09518695c6c3712AC10a214bE5109a655671' --xDAI bridge
            or et.""to"" ='\x6a39909e805A3eaDd2b61fFf61147796ca6aBB47' --Celo Optics bridge
            or et.""to"" ='\x533e3c0e6b48010873B947bddC4721b1bDFF9648' --BSC Anyswap bridge
            or et.""to"" ='\x10c6b61DbF44a083Aec3780aCF769C77BE747E23' --Moonriver Anyswap bridge
            or et.""to"" ='\x1A2a1c938CE3eC39b6D47113c7955bAa9DD454F2' --Ronin bridge
            or et.""to"" ='\x88a69b4e698a4b090df6cf5bd7b2d47325ad30a3' --Nomad bridge
            or et.""to"" ='\x12eD69359919Fc775bC2674860E8Fe2d2b6a7B5D') --RSK Token bridge
        and block_time > '2021-06-01'
    ) z
    left join ad on z.""to"" = ad.address
),

erc20 as (
    select *
    from (
        select evt_block_time as block_time, erc.""to"", erc.""from"" as unique_depositors
        from erc20.""ERC20_evt_Transfer"" erc
        where (erc.""to"" = '\xe78388b4ce79068e89bf8aa7f218ef6b9ab0e9d0' --Avalanche
            or erc.""to"" =  '\xf92cD566Ea4864356C5491c177A430C222d7e678' --Sol
            or erc.""to"" = '\x23ddd3e3692d1861ed57ede224608875809e127f' --Near
            or erc.""to"" = '\xf9fb1c508ff49f78b60d3a96dea99fa5d7f3a8a6' --Harmonyeth
            or erc.""to"" = '\xC564EE9f21Ed8A2d8E7e76c085740d5e4c5FaFbE' --Fantom Bridge
            or erc.""to"" = '\x40ec5B33f54e0E8A33A975908C5BA1c14e5BbbDf' --PolygonERC
            or erc.""to"" = '\x467194771dae2967aef3ecbedd3bf9a310c76c65' --Optimism DAI bridge
            or erc.""to"" = '\x99C9fc46f92E8a1c0deC1b1747d010903E884bE1' --Optimism bridge
            or erc.""to"" = '\xcEe284F754E854890e311e3280b767F80797180d' --Arbitrum Custom Gateway
            or erc.""to"" = '\xa3A7B6F88361F48403514059F1F16C8E78d60EeC' --Arbitrum L1 ERC20 Gateway
            or erc.""to"" = '\x011B6E24FfB0B5f5fCc564cf4183C5BBBc96D515' --Arbitrum Inbox
            or erc.""to"" ='\x467194771dae2967aef3ecbedd3bf9a310c76c65' --Optimism DAI bridge
            or erc.""to"" ='\x88ad09518695c6c3712AC10a214bE5109a655671' --xDAI bridge
            or erc.""to"" ='\x6a39909e805A3eaDd2b61fFf61147796ca6aBB47' --Celo Optics bridge
            or erc.""to"" ='\x533e3c0e6b48010873B947bddC4721b1bDFF9648' --BSC Anyswap bridge
            or erc.""to"" ='\x10c6b61DbF44a083Aec3780aCF769C77BE747E23' --Moonriver Anyswap bridge
            or erc.""to"" ='\x1A2a1c938CE3eC39b6D47113c7955bAa9DD454F2' --Ronin bridge
            or erc.""to"" ='\x88a69b4e698a4b090df6cf5bd7b2d47325ad30a3' --Nomad bridge
            or erc.""to"" ='\x12eD69359919Fc775bC2674860E8Fe2d2b6a7B5D') --RSK Token bridge
        and evt_block_time > '2021-06-01'
    ) z
    left join ad on z.""to"" = ad.address
)

select *
from (
select date_trunc('day', block_time) as day, label as bridge, count(distinct unique_depositors) as unique_depositors
from (
select * from erc20 union all
select * from ethereum
) z
group by 1, 2
) w
where day > '{{start_day_unique_depositors}}'"
4649,BTC on Ethereum,,"[{""id"": 9103, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2020-06-16T10:27:58.033217+00:00"", ""__typename"": ""visualizations""}, {""id"": 9107, ""type"": ""chart"", ""name"": ""Balances Over Time (Stacked) \ud83d\udcc8"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": ""stack""}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0[.]00000"", ""columnMapping"": {"""": ""y"", ""day"": ""x"", ""week"": ""x"", ""token"": ""series"", ""supply"": ""y"", ""hbtc_supply"": ""y"", ""pbtc_supply"": ""y"", ""tbtc_supply"": ""y"", ""wbtc_supply"": ""y"", ""imbtc_supply"": ""y"", ""renbtc_supply"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""hbtc_supply"": {""type"": ""area"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 5}, ""pbtc_supply"": {""type"": ""area"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 3}, ""tbtc_supply"": {""type"": ""area"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 1}, ""wbtc_supply"": {""type"": ""area"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 2}, ""imbtc_supply"": {""type"": ""area"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}, ""renbtc_supply"": {""type"": ""area"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 4}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""area""}, ""created_at"": ""2020-06-16T11:57:33.018+00:00"", ""__typename"": ""visualizations""}, {""id"": 9131, ""type"": ""chart"", ""name"": ""Balances Over Time (Parallel) \ud83d\udcca"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": """"}}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": null}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0[.]00000"", ""columnMapping"": {""day"": ""x"", ""week"": ""x"", ""token"": ""series"", ""supply"": ""y"", ""hbtc_supply"": ""y"", ""pbtc_supply"": ""y"", ""sbtc_supply"": ""y"", ""tbtc_supply"": ""y"", ""wbtc_supply"": ""y"", ""imbtc_supply"": ""y"", ""renbtc_supply"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""hBTC"": {""type"": ""line"", ""yAxis"": 0, ""zIndex"": 5}, ""pBTC"": {""type"": ""line"", ""yAxis"": 0, ""zIndex"": 3}, ""sBTC"": {""type"": ""line"", ""yAxis"": 0, ""zIndex"": 1}, ""tBTC"": {""type"": ""line"", ""color"": ""#2E2E2E"", ""yAxis"": 0, ""zIndex"": 0}, ""wBTC"": {""type"": ""line"", ""color"": ""#3BD973"", ""yAxis"": 0, ""zIndex"": 4}, ""imBTC"": {""type"": ""line"", ""yAxis"": 0, ""zIndex"": 2}, ""renBTC"": {""type"": ""line"", ""color"": ""#F3C239"", ""yAxis"": 0, ""zIndex"": 6}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""line""}, ""created_at"": ""2020-06-16T16:31:03.136+00:00"", ""__typename"": ""visualizations""}]","WITH imSUP_pre AS (

    SELECT day, SUM(transfer) over (order by day) as imbtc_supply, 'imBTC' as token
    FROM ( 
        SELECT date_trunc('day', evt_block_time) as day,sum(value/1e8) as transfer
        FROM erc20.""ERC20_evt_Transfer""
        WHERE contract_address = '\x3212b29E33587A00FB1C83346f5dBFA69A458923' -- imBTC token contract address
        AND ""from"" = '\x0000000000000000000000000000000000000000'
        GROUP BY 1
        
        UNION
        
        SELECT
        date_trunc('day', evt_block_time) as day, sum(-value/1e8) as transfer
        FROM erc20.""ERC20_evt_Transfer""
        WHERE contract_address = '\x3212b29E33587A00FB1C83346f5dBFA69A458923' -- imBTC token contract address
        AND ""to"" = '\x0000000000000000000000000000000000000000'
        GROUP BY 1
    ) as net
),

wSUP_pre AS (
    SELECT day, SUM(transfer) over (order by day) wbtc_supply, 'wBTC' as token
    FROM (
      SELECT date_trunc('day', evt_block_time) as day, sum(value/1e8) as transfer
      FROM erc20.""ERC20_evt_Transfer""
      WHERE contract_address = '\x2260fac5e5542a773aa44fbcfedf7c193bc2c599' -- wBTC contract address
      AND ""from"" = '\x0000000000000000000000000000000000000000'
      GROUP BY 1
      
    UNION
    
      SELECT
      date_trunc('day', evt_block_time) as day,
      sum(-value/1e8) as transfer
      FROM erc20.""ERC20_evt_Transfer""
      WHERE contract_address = '\x2260fac5e5542a773aa44fbcfedf7c193bc2c599' -- wBTC contract address
      AND ""to"" = '\x0000000000000000000000000000000000000000'
      GROUP BY 1
    ) as net
),

tSUP_pre AS (
    SELECT day, SUM(transfer) over (order by day) as tbtc_supply, 'tBTC' as token
    FROM ( 
        SELECT date_trunc('day', evt_block_time) as day,sum(value/1e18) as transfer
        FROM erc20.""ERC20_evt_Transfer""
        WHERE contract_address = '\x8daebade922df735c38c80c7ebd708af50815faa' -- tBTC token contract address
        AND ""from"" = '\x0000000000000000000000000000000000000000'
        GROUP BY 1
        
        UNION
        
        SELECT date_trunc('day', evt_block_time) as day, sum(-value/1e18) as transfer
        FROM erc20.""ERC20_evt_Transfer""
        WHERE contract_address = '\x8daebade922df735c38c80c7ebd708af50815faa' -- tBTC token contract address
        AND ""to"" = '\x0000000000000000000000000000000000000000'
        GROUP BY 1
    ) as net
),

renSUP_pre AS (
    SELECT day, SUM(transfer) over (order by day) as renbtc_supply, 'renBTC' as token
    FROM ( 
        SELECT date_trunc('day', evt_block_time) as day,sum(value/1e8) as transfer
        FROM erc20.""ERC20_evt_Transfer""
        WHERE contract_address = '\xeb4c2781e4eba804ce9a9803c67d0893436bb27d' -- renBTC token contract address
        AND ""from"" = '\x0000000000000000000000000000000000000000'
        GROUP BY 1
        
        UNION
        
        SELECT date_trunc('day', evt_block_time) as day, sum(-value/1e8) as transfer
        FROM erc20.""ERC20_evt_Transfer""
        WHERE contract_address = '\xeb4c2781e4eba804ce9a9803c67d0893436bb27d' -- renBTC token contract address
        AND ""to"" = '\x0000000000000000000000000000000000000000'
        GROUP BY 1
    ) as net
),

pSUP_pre AS (
    SELECT day,SUM(transfer) over (order by day) as pbtc_supply, 'pBTC' as token
    FROM (
        SELECT date_trunc('day', evt_block_time) as day, sum(amount/1e18) as transfer
        FROM ptokens.""pBTC_evt_Minted"" tr
        GROUP BY 1
        
        UNION
        
        SELECT
        date_trunc('day', evt_block_time) as day,
        sum(-amount/1e18) as transfer
        FROM ptokens.""pBTC_evt_Burned"" tr
        GROUP BY 1
    ) as net
),

sSUP_pre AS (
    SELECT day, SUM(transfer) over (order by day) as sbtc_supply, 'sBTC' as token
    FROM ( 
        SELECT date_trunc('day', evt_block_time) as day, sum(value/1e18) as transfer
        FROM erc20.""ERC20_evt_Transfer""
        WHERE contract_address = '\xfe18be6b3bd88a2d2a7f928d00292e7a9963cfc6' -- sBTC token contract address
        AND ""from"" = '\x0000000000000000000000000000000000000000'
        GROUP BY 1
        
        UNION
        
        SELECT date_trunc('day', evt_block_time) as week, sum(-value/1e18) as transfer
        FROM erc20.""ERC20_evt_Transfer""
        WHERE contract_address = '\xfe18be6b3bd88a2d2a7f928d00292e7a9963cfc6' -- sBTC token contract address
        AND ""to"" = '\x0000000000000000000000000000000000000000'
        GROUP BY 1
        ) as net
),
                
hSUP_pre AS (
    SELECT day, SUM(transfer) over (order by day) as hbtc_supply, 'hBTC' as token
    FROM ( 
        SELECT date_trunc('day', evt_block_time) as day, sum(value/1e18) as transfer
        FROM erc20.""ERC20_evt_Transfer""
        WHERE contract_address = '\x0316EB71485b0Ab14103307bf65a021042c6d380' -- hBTC token contract address
        AND ""from"" = '\x0000000000000000000000000000000000000000'
        GROUP BY 1
        
        UNION
        
        SELECT
        date_trunc('day', evt_block_time) as day,
        sum(-value/1e18) as transfer
        FROM erc20.""ERC20_evt_Transfer""
        WHERE contract_address = '\x0316EB71485b0Ab14103307bf65a021042c6d380' -- hBTC token contract address
        AND ""to"" = '\x0000000000000000000000000000000000000000'
        GROUP BY 1
    ) as net
),

days as (
    select generate_series ('2019-01-01'::timestamp, date_trunc('day', now()), '1day') as day
),

tSUP_full as (
    select d.day, tbtc_supply, token
    from days d
    left join tsup_pre t on d.day = t.day
),

tSUP as (
    select x.day, COALESCE(x.tbtc_supply, z.tbtc_supply) as tbtc_supply, 'tBTC' as token
    from tSUP_full x
    left join lateral (
        select  * 
        from tSUP_full y 
        where y.day <= x.day 
        and y.tbtc_supply IS not null
        order by y.day desc limit 1
    )z on true
),

wSUP_full as (
    select d.day, wbtc_supply, token
    from days d
    left join wsup_pre t on d.day = t.day
),

wSUP as (
    select x.day, COALESCE(x.wbtc_supply, z.wbtc_supply) as wbtc_supply, 'wBTC' as token
    from wSUP_full x
    left join lateral (
        select  * 
        from wSUP_full y 
        where y.day <= x.day 
        and y.wbtc_supply IS not null
        order by y.day desc limit 1
    )z on true
),

sSUP_full as (
    select d.day, sbtc_supply, token
    from days d
    left join ssup_pre t on d.day = t.day
),

sSUP as (
    select x.day, COALESCE(x.sbtc_supply, z.sbtc_supply) as sbtc_supply, 'sBTC' as token
    from sSUP_full x
    left join lateral (
        select  * 
        from sSUP_full y 
        where y.day <= x.day 
        and y.sbtc_supply IS not null
        order by y.day desc limit 1
    )z on true
),

hSUP_full as (
    select d.day, hbtc_supply, token
    from days d
    left join hsup_pre t on d.day = t.day
),

hSUP as (
    select x.day, COALESCE(x.hbtc_supply, z.hbtc_supply) as hbtc_supply, 'hBTC' as token
    from hSUP_full x
    left join lateral (
        select  * 
        from hSUP_full y 
        where y.day <= x.day 
        and y.hbtc_supply IS not null
        order by y.day desc limit 1
    )z on true
),

pSUP_full as (
    select d.day, pbtc_supply, token
    from days d
    left join psup_pre t on d.day = t.day
),

pSUP as (
    select x.day, COALESCE(x.pbtc_supply, z.pbtc_supply) as pbtc_supply, 'pBTC' as token
    from pSUP_full x
    left join lateral (
        select  * 
        from pSUP_full y 
        where y.day <= x.day 
        and y.pbtc_supply IS not null
        order by y.day desc limit 1
    )z on true
),

imSUP_full as (
    select d.day, imbtc_supply, token
    from days d
    left join imsup_pre t on d.day = t.day
),

imSUP as (
    select x.day, COALESCE(x.imbtc_supply, z.imbtc_supply) as imbtc_supply, 'imBTC' as token
    from imSUP_full x
    left join lateral (
        select  * 
        from imSUP_full y 
        where y.day <= x.day 
        and y.imbtc_supply IS not null
        order by y.day desc limit 1
    )z on true
),

renSUP_full as (
    select d.day, renbtc_supply, token
    from days d
    left join rensup_pre t on d.day = t.day
),

renSUP as (
    select x.day, COALESCE(x.renbtc_supply, z.renbtc_supply) as renbtc_supply, 'renBTC' as token
    from renSUP_full x
    left join lateral (
        select  * 
        from renSUP_full y 
        where y.day <= x.day 
        and y.renbtc_supply IS not null
        order by y.day desc limit 1
    )z on true
),

aggregate as (
    select day, avg(tbtc_supply) as supply, token
    from tSUP
    group by 1, 3
    
    union all
    
    select day, avg(sbtc_supply) as supply, token
    from ssup
    group by 1, 3
    
    union all
    
    select day, avg(wbtc_supply) as supply, token
    from wsup
    group by 1, 3
    
    union all
    
    select day, avg(imbtc_supply) as supply, token
    from imsup
    group by 1, 3
    
    union all
    
    select day, avg(pbtc_supply) as supply, token
    from psup
    group by 1, 3
    
    union all
    
    select day, avg(hbtc_supply) as supply, token
    from hsup
    group by 1, 3
    
    union all
    
    select day, avg(renbtc_supply) as supply, token
    from rensup
    group by 1, 3
)

select *
from aggregate
where day > '2020-01-01'
order by 1"
892365,Ethereum Gas Used,,"[{""id"": 1559703, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-06-08T14:49:12.674003+00:00"", ""__typename"": ""visualizations""}, {""id"": 1559737, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""tickFormat"": """"}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Total""}}, {""type"": ""linear"", ""title"": {""text"": ""Median""}}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""###,###"", ""columnMapping"": {"""": ""y"", ""time"": ""x"", ""total_gas_used"": ""y"", ""median_gas_used"": ""y""}, ""seriesOptions"": {""avg_gas_used"": {""type"": ""line"", ""yAxis"": 1, ""zIndex"": 1}, ""total_gas_used"": {""name"": ""Total"", ""type"": ""column"", ""color"": ""#ffb480"", ""yAxis"": 0, ""zIndex"": 0}, ""median_gas_used"": {""name"": ""Median"", ""type"": ""line"", ""color"": ""#000000"", ""yAxis"": 1, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""line"", ""numberFormatRightYAxisSeries"": ""###,###""}, ""created_at"": ""2022-06-08T14:51:18.938149+00:00"", ""__typename"": ""visualizations""}]","SELECT date_trunc('week', block_time) AS time
, SUM(gas_used) AS total_gas_used
, AVG(gas_used) AS avg_gas_used
, percentile_cont(.5) within GROUP (ORDER BY gas_used) AS median_gas_used
FROM ethereum.transactions
WHERE block_time >= '2015-10-01'
GROUP BY time"
663019,Ethereum Price,,"[{""id"": 1231424, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-05-02T10:37:16.57865+00:00"", ""__typename"": ""visualizations""}, {""id"": 1231425, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Ethereum Price \ud83d\udcb5"", ""stringPrefix"": ""$"", ""counterColName"": ""eth_price""}, ""created_at"": ""2022-05-02T10:37:22.226825+00:00"", ""__typename"": ""visualizations""}]","SELECT price AS eth_price
FROM prices.usd
WHERE symbol='ETH'
ORDER BY minute DESC
LIMIT 1"
651474,Ethereum Addresses,,"[{""id"": 1210722, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-04-29T00:00:39.785193+00:00"", ""__typename"": ""visualizations""}, {""id"": 1210762, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Ethereum Addresses \ud83d\udc65"", ""stringSuffix"": "" Million"", ""counterColName"": ""users""}, ""created_at"": ""2022-04-29T00:16:00.841573+00:00"", ""__typename"": ""visualizations""}]","SELECT COUNT(distinct `to`)/1e6 AS users
FROM ethereum.traces
WHERE success"
651463,Ethereum Gas,Over Time (Weekly),"[{""id"": 1210708, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""###,###"", ""columnMapping"": {"""": ""y"", ""time"": ""x"", ""avg_gas_price"": ""y"", ""median_gas_price"": ""y""}, ""seriesOptions"": {""avg_gas_price"": {""name"": ""Average"", ""type"": ""line"", ""color"": ""#ff6961"", ""yAxis"": 0, ""zIndex"": 0}, ""median_gas_price"": {""name"": ""Median"", ""type"": ""line"", ""color"": ""#c780e8"", ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""line""}, ""created_at"": ""2022-04-28T23:49:17.445806+00:00"", ""__typename"": ""visualizations""}, {""id"": 1210702, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-04-28T23:47:29.517982+00:00"", ""__typename"": ""visualizations""}]","SELECT date_trunc('week', block_time) AS time
, AVG(gas_price)/1e9 AS avg_gas_price
, percentile_cont(.5) within GROUP (ORDER BY gas_price)/1e9 AS median_gas_price
FROM ethereum.transactions
WHERE block_time >= '2015-10-01'
GROUP BY time"
650188,Smart Contracts Created on Ethereum,,"[{""id"": 1208427, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-04-28T16:33:27.367724+00:00"", ""__typename"": ""visualizations""}, {""id"": 1208455, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Created Smart Contracts \ud83e\udde0\ud83d\udcc4"", ""stringSuffix"": "" Million"", ""stringDecimal"": 1, ""counterColName"": ""contracts""}, ""created_at"": ""2022-04-28T16:37:30.058698+00:00"", ""__typename"": ""visualizations""}]","SELECT COUNT(*)/1e6 AS contracts
FROM ethereum.traces
WHERE `type` = 'create'"
651398,Ethereum Transaction Count,Over Time (Weekly),"[{""id"": 1210563, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-04-28T23:00:08.964184+00:00"", ""__typename"": ""visualizations""}, {""id"": 1210569, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Weekly""}}, {""type"": ""linear"", ""title"": {""text"": ""Cumulative""}}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""###,###"", ""columnMapping"": {""time"": ""x"", ""tx_count"": ""y"", ""cum_tx_count"": ""y"", ""created_contracts"": ""y""}, ""seriesOptions"": {""tx_count"": {""name"": ""Weekly"", ""type"": ""column"", ""color"": ""#58ADF6"", ""yAxis"": 0, ""zIndex"": 0}, ""cum_tx_count"": {""name"": ""Cumulated"", ""type"": ""line"", ""color"": ""#000000"", ""yAxis"": 1, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column"", ""numberFormatRightYAxisSeries"": ""###,###""}, ""created_at"": ""2022-04-28T23:01:36.130053+00:00"", ""__typename"": ""visualizations""}]","SELECT time
, SUM(tx_count) AS tx_count
, SUM(SUM(tx_count)) OVER (ORDER BY time RANGE UNBOUNDED PRECEDING) AS cum_tx_count
FROM (
    SELECT date_trunc('week', block_time) AS time
    , COUNT(*) AS tx_count
    FROM `ethereum`.`transactions`
    WHERE block_time < date_trunc('week', NOW())
    GROUP BY time
    ) non_cum
GROUP BY time"
650240,Existing Ethereum Blocks,,"[{""id"": 1208507, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-04-28T16:43:42.326745+00:00"", ""__typename"": ""visualizations""}, {""id"": 1208510, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Total Ethereum Blocks \ud83e\uddf1"", ""stringSuffix"": "" Million"", ""stringDecimal"": 1, ""counterColName"": ""blocks""}, ""created_at"": ""2022-04-28T16:43:53.205597+00:00"", ""__typename"": ""visualizations""}]","SELECT MAX(`number`)/1e6 AS blocks
FROM ethereum.blocks"
661258,Ethereum Gas Used & Gas Limit,Over Time (Weekly),"[{""id"": 1228418, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-05-01T21:52:06.376472+00:00"", ""__typename"": ""visualizations""}, {""id"": 1228421, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": null}, ""reverseX"": false, ""numberFormat"": ""###,###"", ""columnMapping"": {""time_"": ""x"", ""gas_used"": ""y"", ""gas_limit"": ""y""}, ""seriesOptions"": {""gas_used"": {""name"": ""Gas Used"", ""type"": ""area"", ""color"": ""#08cad1"", ""yAxis"": 0, ""zIndex"": 1}, ""gas_limit"": {""name"": ""Gas Limit"", ""type"": ""line"", ""color"": ""#ff6961"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""area""}, ""created_at"": ""2022-05-01T21:52:21.071663+00:00"", ""__typename"": ""visualizations""}]","SELECT date_trunc('week', time) AS time_
, PERCENTILE_CONT(.5) WITHIN GROUP (ORDER BY gas_limit) AS gas_limit
, PERCENTILE_CONT(.5) WITHIN GROUP (ORDER BY gas_used) AS gas_used
FROM ethereum.blocks
GROUP BY time_"
649454,Ethereum Smart Contracts Creation,Over Time (Weekly),"[{""id"": 1207174, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Weekly""}}, {""type"": ""linear"", ""title"": {""text"": ""Cumulative""}}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""###,###"", ""columnMapping"": {""time"": ""x"", ""created_contracts"": ""y"", ""cum_created_contracts"": ""y""}, ""seriesOptions"": {""created_contracts"": {""name"": ""Weekly"", ""type"": ""column"", ""color"": ""#42D6A4"", ""yAxis"": 0, ""zIndex"": 0}, ""cum_created_contracts"": {""name"": ""Cumulated"", ""type"": ""line"", ""color"": ""#000000"", ""yAxis"": 1, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""line"", ""numberFormatRightYAxisSeries"": ""###,###""}, ""created_at"": ""2022-04-28T13:21:09.429674+00:00"", ""__typename"": ""visualizations""}, {""id"": 1207086, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-04-28T13:04:31.86708+00:00"", ""__typename"": ""visualizations""}]","SELECT time
, SUM(created_contracts) AS created_contracts
, SUM(SUM(created_contracts)) OVER (ORDER BY time RANGE UNBOUNDED PRECEDING) AS cum_created_contracts
FROM (
    SELECT date_trunc('week', block_time) AS time
    , COUNT(*) AS created_contracts
    FROM ethereum.traces
    WHERE `type` = 'create'
    AND block_time < date_trunc('week', NOW())
    GROUP BY time
    ) non_cum
GROUP BY time"
889300,Ethereum Users,Over Time (Weekly),"[{""id"": 1553754, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-06-07T15:39:06.791654+00:00"", ""__typename"": ""visualizations""}, {""id"": 1553755, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""###,###"", ""columnMapping"": {""time"": ""x"", ""users"": ""y""}, ""seriesOptions"": {""users"": {""type"": ""column"", ""color"": ""#9d94ff"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-06-07T15:39:11.724252+00:00"", ""__typename"": ""visualizations""}]","SELECT date_trunc('week', block_time) AS time
, COUNT(distinct from) AS users
FROM ethereum.transactions
WHERE block_time < date_trunc('week', (SELECT MAX(block_time) FROM ethereum.transactions))
GROUP BY time"
662981,Ethereum Market Capitalisation,,"[{""id"": 1231338, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-05-02T10:26:25.706509+00:00"", ""__typename"": ""visualizations""}, {""id"": 1231386, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Ethereum Market Cap \ud83d\udcb0"", ""stringPrefix"": ""$"", ""stringSuffix"": "" Billion"", ""stringDecimal"": 0, ""counterColName"": ""eth_mcap""}, ""created_at"": ""2022-05-02T10:33:04.044693+00:00"", ""__typename"": ""visualizations""}]","WITH eth_supply AS (
 /** check for accuracy: https://etherscan.io/chart/ethersupplygrowth
 */
    SELECT 120529053 - SUM(eb.base_fee_per_gas*et.gas_used)/1e18
    -- missing  ETH2 rewards for now, awaiting beacon chain data, using estimated 1600 ETH staking issuance /day for now
    + COUNT(eb.number) * 1600/(24*60*60/12)
    AS eth_supply
    FROM ethereum.transactions et
    INNER JOIN ethereum.blocks eb ON eb.`number` = et.block_number
    WHERE et.block_time >= '2022-09-29'
    )
    
, latest_eth_price AS (
    SELECT price AS eth_price
    FROM prices.usd
    WHERE symbol='ETH'
    ORDER BY minute DESC
    LIMIT 1
    )

SELECT (eth_supply*eth_price)/1e9 AS eth_mcap
FROM eth_supply, latest_eth_price"
889235,Ethereum Blocks Count & Block Time,,"[{""id"": 1553642, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-06-07T15:03:45.238667+00:00"", ""__typename"": ""visualizations""}, {""id"": 1553659, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Block Time""}}, {""type"": ""linear"", ""title"": {""text"": ""Block Count""}, ""tickFormat"": """"}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""###,###.[#]"", ""columnMapping"": {""time_"": ""x"", ""block_count"": ""y"", ""avg_block_time"": ""y""}, ""seriesOptions"": {""block_count"": {""name"": ""Block Count"", ""type"": ""line"", ""color"": ""#42d6a4"", ""yAxis"": 1, ""zIndex"": 0}, ""avg_block_time"": {""name"": ""Block Time"", ""type"": ""line"", ""color"": ""#f1b480"", ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""line"", ""numberFormatRightYAxisSeries"": ""###,###""}, ""created_at"": ""2022-06-07T15:05:52.057954+00:00"", ""__typename"": ""visualizations""}]","SELECT date_trunc('day', time) AS time_
, COUNT(distinct number) AS block_count
, 86400/COUNT(distinct number) AS avg_block_time
FROM ethereum.blocks
WHERE time < date_trunc('day', (SELECT MAX(time) FROM ethereum.blocks))
GROUP BY time_"
650258,Transactions on Ethereum,,"[{""id"": 1208540, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Ethereum Transactions \ud83d\udcb1"", ""stringSuffix"": "" Billion"", ""stringDecimal"": 2, ""counterColName"": ""tx_count""}, ""created_at"": ""2022-04-28T16:47:31.487286+00:00"", ""__typename"": ""visualizations""}, {""id"": 1208536, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-04-28T16:47:07.020147+00:00"", ""__typename"": ""visualizations""}]","SELECT COUNT(*)/1e9 AS tx_count
FROM ethereum.transactions"
441254,"OpenSea, LooksRare & X2Y2 Volumes ",,"[{""id"": 839209, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-02-21T15:39:58.283276+00:00"", ""__typename"": ""visualizations""}, {""id"": 839236, ""type"": ""chart"", ""name"": ""Percentages"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack"", ""percentValues"": true}, ""reverseX"": false, ""columnMapping"": {"""": ""y"", ""Date"": ""x"", ""X2Y2 Volume"": ""y"", ""OpenSea Volume"": ""y"", ""LooksRare Volume"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""showDataLabels"": false, ""globalSeriesType"": ""area""}, ""created_at"": ""2022-02-21T15:48:54.296765+00:00"", ""__typename"": ""visualizations""}, {""id"": 839216, ""type"": ""chart"", ""name"": ""LooksRare & X2Y2"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""tickFormat"": ""$0[.]0a""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""$0[.]0a"", ""columnMapping"": {"""": ""y"", ""Date"": ""x"", ""X2Y2 Volume"": ""y"", ""LooksRare Volume"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-02-21T15:44:21.363173+00:00"", ""__typename"": ""visualizations""}, {""id"": 839225, ""type"": ""chart"", ""name"": ""OpenSea, LooksRare & X2Y2"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""tickFormat"": ""$0[.]0a""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""$0[.]0a"", ""columnMapping"": {""Date"": ""x"", ""X2Y2 Volume"": ""y"", ""OpenSea Volume"": ""y"", ""LooksRare Volume"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-02-21T15:46:04.288765+00:00"", ""__typename"": ""visualizations""}]","WITH x2y2_seller_received_volume AS (WITH x2y2_trade AS (
SELECT amount, contract_address,
CASE -- REPLACE `ETH` WITH `WETH` for ERC20 lookup later
    WHEN currency = '\x0000000000000000000000000000000000000000' THEN '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'
    ELSE currency
END AS currency_token,
evt_block_time AS block_time
FROM x2y2.""X2Y2_r1_evt_EvProfit"")

SELECT date_trunc('day', block_time) AS ""Date"", SUM(x2y2_trade.amount / 10 ^ erc20.decimals * p.price) AS x2y2_amount
FROM x2y2_trade
LEFT JOIN prices.usd p ON p.minute = date_trunc('minute', x2y2_trade.block_time)
    AND p.contract_address = x2y2_trade.currency_token
LEFT JOIN erc20.tokens erc20 ON erc20.contract_address = x2y2_trade.currency_token
GROUP BY 1
ORDER BY 1 DESC),

looksrare_royalty_volume AS (SELECT SUM(usd_amount) AS looksrare_amount, date_trunc('day', block_time) as ""Date""
FROM nft.trades lr_v
LEFT JOIN looksrare.""LooksRareExchange_evt_RoyaltyPayment"" lr_f ON lr_v.tx_hash=lr_f.evt_tx_hash
WHERE platform = 'LooksRare' AND amount > 0
GROUP BY 2),

opensea_volume AS (SELECT SUM(usd_amount) AS opensea_amount, date_trunc('day', block_time) as ""Date"" FROM nft.trades
WHERE platform = 'OpenSea'
AND tx_hash != '\x0831db6af74c935724b82d72f0ccd269bf428004ff3da2b3d90c310ebe886af0' -- remove erroneous tx on 2022-01-30
GROUP BY 2
)

SELECT x2y2_seller_received_volume.""Date"", x2y2_amount as ""X2Y2 Volume"", 
looksrare_amount as ""LooksRare Volume"", 
opensea_amount as ""OpenSea Volume""
FROM x2y2_seller_received_volume
INNER JOIN looksrare_royalty_volume ON looksrare_royalty_volume.""Date"" = x2y2_seller_received_volume.""Date""
INNER JOIN opensea_volume ON opensea_volume.""Date"" = x2y2_seller_received_volume.""Date""
ORDER BY 1 DESC
LIMIT 20;"
441433,X2Y2 & LooksRare Volume by Hour,,"[{""id"": 839417, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-02-21T16:10:29.55557+00:00"", ""__typename"": ""visualizations""}, {""id"": 839418, ""type"": ""chart"", ""name"": ""X2Y2 & LooksRare Trading Volume by Hour"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""tickFormat"": ""$0[.]0a""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""$0[.]0a"", ""columnMapping"": {""Date"": ""x"", ""X2Y2 Volume"": ""y"", ""LooksRare Volume"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-02-21T16:10:58.324541+00:00"", ""__typename"": ""visualizations""}]","WITH x2y2_seller_received_volume AS (WITH x2y2_trade AS (
SELECT amount, contract_address,
CASE -- REPLACE `ETH` WITH `WETH` for ERC20 lookup later
    WHEN currency = '\x0000000000000000000000000000000000000000' THEN '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'
    ELSE currency
END AS currency_token,
evt_block_time AS block_time
FROM x2y2.""X2Y2_r1_evt_EvProfit"")

SELECT date_trunc('hour', block_time) AS ""Date"", SUM(x2y2_trade.amount / 10 ^ erc20.decimals * p.price) AS x2y2_amount
FROM x2y2_trade
LEFT JOIN prices.usd p ON p.minute = date_trunc('minute', x2y2_trade.block_time)
    AND p.contract_address = x2y2_trade.currency_token
LEFT JOIN erc20.tokens erc20 ON erc20.contract_address = x2y2_trade.currency_token
GROUP BY 1
ORDER BY 1 DESC),

looksrare_royalty_volume AS (SELECT SUM(usd_amount) AS looksrare_amount, date_trunc('hour', block_time) as ""Date""
FROM nft.trades lr_v
LEFT JOIN looksrare.""LooksRareExchange_evt_RoyaltyPayment"" lr_f ON lr_v.tx_hash=lr_f.evt_tx_hash
WHERE platform = 'LooksRare' AND amount > 0
GROUP BY 2)

SELECT x2y2_seller_received_volume.""Date"", x2y2_amount as ""X2Y2 Volume"", 
looksrare_amount as ""LooksRare Volume""
FROM x2y2_seller_received_volume
INNER JOIN looksrare_royalty_volume ON looksrare_royalty_volume.""Date"" = x2y2_seller_received_volume.""Date""
ORDER BY 1 DESC
LIMIT 100;"
44600,Uniswap v3 Top Pairs by Volume,,"[{""id"": 87262, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-05-09T00:19:06.290989+00:00"", ""__typename"": ""visualizations""}, {""id"": 87282, ""type"": ""table"", ""name"": ""Last 7 Days - Sorted by USD Volume"", ""options"": {""columns"": [{""name"": ""trading_pair"", ""title"": ""Trading Pair""}, {""name"": ""num_trades"", ""title"": ""# of Trades"", ""numberFormat"": "",""}, {""name"": ""total_usd"", ""title"": ""USD Volume"", ""numberFormat"": ""$0,.00""}, {""name"": ""total_fees_usd"", ""title"": ""Total Fees (USD)"", ""numberFormat"": ""$0,.00""}, {""name"": ""fee_tier"", ""title"": ""Fee Tier"", ""numberFormat"": ""0.00%""}]}, ""created_at"": ""2021-05-09T01:46:05.490355+00:00"", ""__typename"": ""visualizations""}]","WITH all_trades AS
(SELECT
t.block_time,
CASE --filling in missing addresses for coins. Maybe not worth keeping up, some are memes.
WHEN t.token_a_address::text = '\x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce' THEN 'SHIB'
WHEN t.token_a_address::text = '\x761d38e5ddf6ccf6cf7c55759d5210750b5d60f3' THEN 'ELON'
WHEN t.token_a_address::text = '\x3301ee63fb29f863f2333bd4466acb46cd8323e6' THEN 'AKITA'
WHEN t.token_a_address::text = 'x5218e472cfcfe0b64a064f055b43b4cdc9efd3a6' THEN 'eRSDL'
WHEN t.token_a_address::text = '\x1453dbb8a29551ade11d89825ca812e05317eaeb' THEN 'TEND'
WHEN t.token_a_address::text = '\x35a532d376ffd9a705d0bb319532837337a398e7' THEN 'WDOGE'
WHEN t.token_a_address::text = '\x17ef75aa22dd5f6c2763b8304ab24f40ee54d48a' THEN 'RVP'
WHEN t.token_a_address::text = '\x6dea81c8171d0ba574754ef6f8b412f2ed88c54d' THEN 'LQTY'
WHEN t.token_a_address::text = '\x3832d2f059e55934220881f831be501d180671a7' THEN 'renDOGE'
WHEN t.token_a_address::text = '\xf16e4d813f4dcfde4c5b44f305c908742de84ef0' THEN 'ETH2x ADL'
WHEN t.token_a_address::text = '\x77fba179c79de5b7653f68b5039af940ada60ce0' THEN 'FORTH'
WHEN t.token_a_address::text = '\xf65b5c5104c4fafd4b709d9d60a185eae063276c' THEN 'TRU'
WHEN t.token_a_address::text = '\xc7283b66eb1eb5fb86327f08e1b5816b0720212b' THEN 'TRIBE'
WHEN t.token_a_address::text = '\xc8807f0f5ba3fa45ffbdc66928d71c5289249014' THEN 'ISP'
ELSE COALESCE(t.token_a_symbol,t.token_a_address::text)
END AS token_a,
CASE --filling in missing addresses for coins. Maybe not worth keeping up, some are memes.
WHEN t.token_b_address::text = '\x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce' THEN 'SHIB'
WHEN t.token_b_address::text = '\x761d38e5ddf6ccf6cf7c55759d5210750b5d60f3' THEN 'ELON'
WHEN t.token_b_address::text = '\x3301ee63fb29f863f2333bd4466acb46cd8323e6' THEN 'AKITA'
WHEN t.token_b_address::text = 'x5218e472cfcfe0b64a064f055b43b4cdc9efd3a6' THEN 'eRSDL'
WHEN t.token_b_address::text = '\x1453dbb8a29551ade11d89825ca812e05317eaeb' THEN 'TEND'
WHEN t.token_b_address::text = '\x35a532d376ffd9a705d0bb319532837337a398e7' THEN 'WDOGE'
WHEN t.token_b_address::text = '\x17ef75aa22dd5f6c2763b8304ab24f40ee54d48a' THEN 'RVP'
WHEN t.token_b_address::text = '\x6dea81c8171d0ba574754ef6f8b412f2ed88c54d' THEN 'LQTY'
WHEN t.token_b_address::text = '\x3832d2f059e55934220881f831be501d180671a7' THEN 'renDOGE'
WHEN t.token_b_address::text = '\xf16e4d813f4dcfde4c5b44f305c908742de84ef0' THEN 'ETH2x ADL'
WHEN t.token_b_address::text = '\x77fba179c79de5b7653f68b5039af940ada60ce0' THEN 'FORTH'
WHEN t.token_b_address::text = '\xf65b5c5104c4fafd4b709d9d60a185eae063276c' THEN 'TRU'
WHEN t.token_b_address::text = '\xc7283b66eb1eb5fb86327f08e1b5816b0720212b' THEN 'TRIBE'
WHEN t.token_b_address::text = '\xc8807f0f5ba3fa45ffbdc66928d71c5289249014' THEN 'ISP'
ELSE COALESCE(t.token_b_symbol,t.token_b_address::text)
END AS token_b
,t.token_a_amount
,t.token_b_amount
,t.exchange_contract_address -- exchange_contract_address is the v3 LP Position
,t.tx_hash -- transaction addr (for spot checks)
,t.usd_amount --TODO: Find some way to pull in USD of any missing tokens
,c.fee/1e6 AS fee_tier --Converting fee tier to a multiplier (i.e. for 0.3%, 3000 -> 0.003)
,t.usd_amount*(c.fee/1e6) AS fees_collected_usd --USD Amount * %fee = fees collected
FROM dex.""trades"" t

LEFT JOIN uniswap_v3.""Factory_call_createPool"" c --1. Join With Pool creation on LP contract address to pull fee tier
ON t.exchange_contract_address = c.output_pool
WHERE t.project = 'Uniswap'
AND t.version = '3'
AND t.block_time >= (DATE_TRUNC('day',CURRENT_TIMESTAMP) - '6 days'::INTERVAL)
AND t.block_time >= '05-05-2021 17:00' -- Uni v3 launch date/hr
ORDER BY t.block_time DESC
),

sum_pairs AS( -- Using this to decide which trading pair order to pick (i.e WBTC/USDC vs USDC/WBTC). We'll pick the one with the greatest usd volume.
--starting set
SELECT 
CONCAT(token_a,'/',token_b) AS forward_pair -- Trading pair
,CONCAT(token_b,'/',token_a) AS backward_pair -- For joining buys/sells later
,SUM(usd_amount) AS sum_usd
FROM all_trades
GROUP BY 1,2
),

final_trading_pairs AS( --building the mapping table for pairs
SELECT
a.forward_pair, a.backward_pair,
a.sum_usd,b.sum_usd,
CASE
WHEN RIGHT(a.backward_pair,4)='WETH' THEN a.forward_pair -- if the backward version ends in WETH, do forward
WHEN RIGHT(a.forward_pair,4)='WETH' THEN a.backward_pair
WHEN RIGHT(a.backward_pair,4)='WBTC' THEN a.forward_pair
WHEN RIGHT(a.forward_pair,4)='WBTC' THEN a.backward_pair
WHEN (a.sum_usd >= b.sum_usd) -- when a > b
OR b.sum_usd IS NULL -- or if backward usd is null
THEN a.forward_pair -- select forward
ELSE a.backward_pair --else select backward in every other circumstance
END AS trading_pair

FROM sum_pairs a
LEFT JOIN sum_pairs b
ON a.forward_pair = b.backward_pair
),
v3_trades AS (  --clean table of trades to work with for building visuals
SELECT
atx.block_time,
COALESCE(f1.trading_pair,f2.trading_pair) AS trading_pair, --pick the mapped trading pair (see joins)
atx.usd_amount,
atx.fee_tier,
atx.fees_collected_usd,
atx.tx_hash
FROM all_trades atx

LEFT JOIN final_trading_pairs f1 --check if the pair maps with the forward version
ON CONCAT(atx.token_a,'/',atx.token_b) = f1.forward_pair
LEFT JOIN final_trading_pairs f2 --check if the pair maps with the backward version
ON CONCAT(atx.token_a,'/',atx.token_b) = f2.backward_pair
)

SELECT
trading_pair
,COUNT(trading_pair) AS num_trades
,SUM(usd_amount) AS total_usd
FROM v3_trades
WHERE usd_amount IS NOT NULL -- Eventually see if Dune adds new tokens, or we need to manually
GROUP BY trading_pair--, fee_tier
ORDER BY SUM(usd_amount) DESC
"
44617,Uniswap v3 Trading Volume and Fees Data Table,,"[{""id"": 87309, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-05-09T02:26:06.774276+00:00"", ""__typename"": ""visualizations""}, {""id"": 87317, ""type"": ""chart"", ""name"": ""Last 7 Days - Total Trading Volume by Fees Collected"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""USD Volume""}}, ""yAxis"": [{""type"": ""-"", ""title"": {""text"": ""Fees""}}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""$,"", ""columnMapping"": {"""": ""y"", ""total_usd"": ""x"", ""trading_pair"": ""series"", ""total_fees_usd"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""scatter""}, ""created_at"": ""2021-05-09T02:41:43.990411+00:00"", ""__typename"": ""visualizations""}, {""id"": 87319, ""type"": ""chart"", ""name"": ""Last 7 Days - Total Trading Volume by Fee Tier"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""$,"", ""columnMapping"": {""fee_tier"": ""x"", ""total_usd"": ""y""}, ""seriesOptions"": {""total_usd"": {""name"": ""USD Volume"", ""type"": ""pie"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2021-05-09T02:45:13.146031+00:00"", ""__typename"": ""visualizations""}, {""id"": 87328, ""type"": ""chart"", ""name"": ""Total Trading Volume by Fee Tier"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""numberFormat"": ""$,"", ""columnMapping"": {""fee_tier"": ""x"", ""total_usd"": ""y"", ""trading_pair"": ""series""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2021-05-09T02:48:31.424471+00:00"", ""__typename"": ""visualizations""}, {""id"": 87310, ""type"": ""table"", ""name"": ""Last 7 Days - Sorted by Total Fees, Split by Fee Tier"", ""options"": {""columns"": [{""name"": ""trading_pair"", ""title"": ""Trading Pair""}, {""name"": ""num_trades"", ""title"": ""# of Trades"", ""numberFormat"": "",""}, {""name"": ""total_usd"", ""title"": ""USD Volume"", ""numberFormat"": ""$0.00a""}, {""name"": ""total_fees_usd"", ""title"": ""Total Fees (USD)"", ""numberFormat"": ""$0.00a""}, {""name"": ""fee_tier"", ""title"": ""Fee Tier"", ""numberFormat"": ""0.00%""}, {""name"": ""total_value_locked"", ""title"": ""TVL (USD)"", ""numberFormat"": ""$0.00a""}, {""name"": ""fee_to_lp_ratio"", ""title"": ""Fees/TVL"", ""numberFormat"": ""0.0%""}, {""name"": ""fee_to_tvl_ratio"", ""title"": ""Fees/TVL"", ""numberFormat"": ""0.00%""}]}, ""created_at"": ""2021-05-09T02:26:06.774276+00:00"", ""__typename"": ""visualizations""}, {""id"": 87316, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack"", ""percentValues"": true}, ""reverseX"": false, ""columnMapping"": {""fee_tier"": ""series"", ""total_usd"": ""y"", ""trading_pair"": ""x""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2021-05-09T02:41:00.607158+00:00"", ""__typename"": ""visualizations""}]","WITH all_trades AS
(SELECT
t.block_time,
t.token_a_address,
CASE --filling in missing addresses for coins. Maybe not worth keeping up, some are memes.
WHEN t.token_a_address::text = '\x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce' THEN 'SHIB'
WHEN t.token_a_address::text = '\x761d38e5ddf6ccf6cf7c55759d5210750b5d60f3' THEN 'ELON'
WHEN t.token_a_address::text = '\x3301ee63fb29f863f2333bd4466acb46cd8323e6' THEN 'AKITA'
WHEN t.token_a_address::text = 'x5218e472cfcfe0b64a064f055b43b4cdc9efd3a6' THEN 'eRSDL'
WHEN t.token_a_address::text = '\x1453dbb8a29551ade11d89825ca812e05317eaeb' THEN 'TEND'
WHEN t.token_a_address::text = '\x35a532d376ffd9a705d0bb319532837337a398e7' THEN 'WDOGE'
WHEN t.token_a_address::text = '\x17ef75aa22dd5f6c2763b8304ab24f40ee54d48a' THEN 'RVP'
WHEN t.token_a_address::text = '\x6dea81c8171d0ba574754ef6f8b412f2ed88c54d' THEN 'LQTY'
WHEN t.token_a_address::text = '\x3832d2f059e55934220881f831be501d180671a7' THEN 'renDOGE'
WHEN t.token_a_address::text = '\xf16e4d813f4dcfde4c5b44f305c908742de84ef0' THEN 'ETH2x ADL'
WHEN t.token_a_address::text = '\x77fba179c79de5b7653f68b5039af940ada60ce0' THEN 'FORTH'
WHEN t.token_a_address::text = '\xf65b5c5104c4fafd4b709d9d60a185eae063276c' THEN 'TRU'
WHEN t.token_a_address::text = '\xc7283b66eb1eb5fb86327f08e1b5816b0720212b' THEN 'TRIBE'
WHEN t.token_a_address::text = '\xc8807f0f5ba3fa45ffbdc66928d71c5289249014' THEN 'ISP'
 ELSE COALESCE(t.token_a_symbol,
    CONCAT(LEFT(t.token_a_address::text,3),'...',RIGHT(t.token_a_address::text,3)))
END AS token_a,
t.token_b_address,
CASE --filling in missing addresses for coins. Maybe not worth keeping up, some are memes.
WHEN t.token_b_address::text = '\x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce' THEN 'SHIB'
WHEN t.token_b_address::text = '\x761d38e5ddf6ccf6cf7c55759d5210750b5d60f3' THEN 'ELON'
WHEN t.token_b_address::text = '\x3301ee63fb29f863f2333bd4466acb46cd8323e6' THEN 'AKITA'
WHEN t.token_b_address::text = 'x5218e472cfcfe0b64a064f055b43b4cdc9efd3a6' THEN 'eRSDL'
WHEN t.token_b_address::text = '\x1453dbb8a29551ade11d89825ca812e05317eaeb' THEN 'TEND'
WHEN t.token_b_address::text = '\x35a532d376ffd9a705d0bb319532837337a398e7' THEN 'WDOGE'
WHEN t.token_b_address::text = '\x17ef75aa22dd5f6c2763b8304ab24f40ee54d48a' THEN 'RVP'
WHEN t.token_b_address::text = '\x6dea81c8171d0ba574754ef6f8b412f2ed88c54d' THEN 'LQTY'
WHEN t.token_b_address::text = '\x3832d2f059e55934220881f831be501d180671a7' THEN 'renDOGE'
WHEN t.token_b_address::text = '\xf16e4d813f4dcfde4c5b44f305c908742de84ef0' THEN 'ETH2x ADL'
WHEN t.token_b_address::text = '\x77fba179c79de5b7653f68b5039af940ada60ce0' THEN 'FORTH'
WHEN t.token_b_address::text = '\xf65b5c5104c4fafd4b709d9d60a185eae063276c' THEN 'TRU'
WHEN t.token_b_address::text = '\xc7283b66eb1eb5fb86327f08e1b5816b0720212b' THEN 'TRIBE'
WHEN t.token_b_address::text = '\xc8807f0f5ba3fa45ffbdc66928d71c5289249014' THEN 'ISP'
  ELSE COALESCE(t.token_b_symbol,
    CONCAT(LEFT(t.token_b_address::text,3),'...',RIGHT(t.token_b_address::text,3)))
END AS token_b
,t.token_a_amount
,t.token_b_amount
,t.token_a_amount_raw
,t.token_b_amount_raw
,t.exchange_contract_address -- exchange_contract_address is the v3 LP Position
,t.tx_hash -- transaction addr (for spot checks)
,t.usd_amount --TODO: Find some way to pull in USD of any missing tokens
,c.fee/1e6 AS fee_tier --Converting fee tier to a multiplier (i.e. for 0.3%, 3000 -> 0.003)
,t.usd_amount*(c.fee/1e6) AS fees_collected_usd --USD Amount * %fee = fees collected
FROM dex.""trades"" t

LEFT JOIN uniswap_v3.""Factory_call_createPool"" c --1. Join With Pool creation on LP contract address to pull fee tier
ON t.exchange_contract_address = c.output_pool
WHERE t.project = 'Uniswap'
AND t.version = '3'
AND t.block_time >= '05-05-2021 17:00' -- Uni v3 launch date/hr
AND t.block_time >= (DATE_TRUNC('day',CURRENT_TIMESTAMP) - '6 days'::INTERVAL)

ORDER BY t.block_time DESC
),

sum_pairs AS( -- Using this to decide which trading pair order to pick (i.e WBTC/USDC vs USDC/WBTC). We'll pick the one with the greatest usd volume.
--starting set
SELECT 
CONCAT(token_a,'/',token_b) AS forward_pair -- Trading pair
,CONCAT(token_b,'/',token_a) AS backward_pair -- For joining buys/sells later
,SUM(usd_amount) AS sum_usd
FROM all_trades
GROUP BY 1,2
),

most_recent_price AS --get the latest price so we can use it to calculate TVL
(
SELECT last_price.contract_address, last_price.symbol, last_price.decimals, last_price.price, last_price.minute
 FROM (
    SELECT
    minute, contract_address, symbol, decimals, price,
    ROW_NUMBER() OVER(PARTITION BY contract_address ORDER BY minute DESC) AS recency_rank --rank by time, where most recent = 1
    FROM prices.usd
    WHERE minute > (DATE_TRUNC('day',CURRENT_TIMESTAMP) - '1 days'::INTERVAL) -- to help tighten this and not query the history of time
    AND contract_address IN (
                            SELECT * FROM (
                                SELECT token_a_address FROM all_trades GROUP BY 1
                                UNION ALL 
                                SELECT token_b_address FROM all_trades GROUP BY 1
                                ) a
                                GROUP BY 1
                            )
    ) last_price
WHERE last_price.recency_rank = 1 --get the most recent price for liquidity joining
),

final_trading_pairs AS( --building the mapping table for pairs
SELECT
a.forward_pair, a.backward_pair,
a.sum_usd,b.sum_usd,
CASE
WHEN RIGHT(a.backward_pair,4)='WETH' THEN a.forward_pair -- if the backward version ends in WETH, do forward
WHEN RIGHT(a.forward_pair,4)='WETH' THEN a.backward_pair
WHEN RIGHT(a.backward_pair,4)='WBTC' THEN a.forward_pair
WHEN RIGHT(a.forward_pair,4)='WBTC' THEN a.backward_pair
WHEN (a.sum_usd >= b.sum_usd) -- when a > b
OR b.sum_usd IS NULL -- or if backward usd is null
THEN a.forward_pair -- select forward
ELSE a.backward_pair --else select backward in every other circumstance
END AS trading_pair

FROM sum_pairs a
LEFT JOIN sum_pairs b
ON a.forward_pair = b.backward_pair
),
v3_trades AS (--clean table of trades to work with for building visuals
SELECT
atx.block_time,
COALESCE(f1.trading_pair,f2.trading_pair) AS trading_pair,
atx.usd_amount,
atx.fee_tier,
atx.fees_collected_usd,
atx.exchange_contract_address
FROM all_trades atx

LEFT JOIN final_trading_pairs f1--check if the pair maps with the forward version
ON CONCAT(atx.token_a,'/',atx.token_b) = f1.forward_pair
LEFT JOIN final_trading_pairs f2 --check if the pair maps with the backward version
ON CONCAT(atx.token_a,'/',atx.token_b) = f2.backward_pair
),

dex_price AS 
( --this was originally multiple queries - combined for preformance
SELECT 
c.t_one, c.tok,
    CASE WHEN direction = 'forward' THEN (l.usd_amount::decimal)/(l.token_a_amount_raw/(10^18))::decimal --token a price
    ELSE (l.usd_amount::decimal)/(l.token_b_amount_raw/(10^18))::decimal --token b price
    END AS price_18,
    c.exchange_contract_address
FROM
    ( --get most recent price
    SELECT d.*
    FROM (
        SELECT --DISTINCT
        block_time, exchange_contract_address,
        token_a_address, token_b_address,
        token_a_amount_raw, token_b_amount_raw,
        usd_amount,
        ROW_NUMBER() OVER(PARTITION BY exchange_contract_address ORDER BY block_time DESC, usd_amount DESC) AS tr_rank
        FROM all_trades
        WHERE block_time >= (DATE_TRUNC('minute',CURRENT_TIMESTAMP) - '3 days'::INTERVAL)
        AND usd_amount IS NOT NULL
        GROUP BY 1,2,3,4,5,6,7
        ) d
    WHERE d.tr_rank=1
    ) l
INNER JOIN 
    ( --dex_trades AS --get most popular pair, use that for price
    SELECT b.* FROM (
        SELECT
        direction,exchange_contract_address,t_one,t_two, tok,
        ROW_NUMBER() OVER (PARTITION BY t_one ORDER BY total_usd DESC, exchange_contract_address DESC) AS t_rank
        FROM
            (
            SELECT
            'forward' as direction,
            exchange_contract_address,
            ""token_a_address"" as t_one, ""token_b_address"" as t_two, token_a AS tok,

            SUM(usd_amount) AS total_usd
            FROM all_trades
            WHERE block_time >= (DATE_TRUNC('minute',CURRENT_TIMESTAMP) - '6 days'::INTERVAL)
            AND ""token_b_address"" = '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'
            GROUP BY 1,2,3,4,5
            
            UNION
            
            SELECT
            'backward' as direction, --flipping token a and b here, so it's easier to calc what's the best pair for each token
            exchange_contract_address,
            ""token_b_address"" as t_one, ""token_a_address"" AS t_two, token_b AS tok,

            SUM(usd_amount) AS total_usd
            FROM all_trades
            WHERE block_time >= (DATE_TRUNC('minute',CURRENT_TIMESTAMP) - '6 days'::INTERVAL)
            AND ""token_a_address"" = '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'
            GROUP BY 1,2,3,4,5
            ) a
        ) b
    WHERE t_rank = 1
    ) c
ON c.exchange_contract_address = l.exchange_contract_address

),


lp_withdraws AS( --get withdrawals from the lp pool
SELECT
a.exchange_contract_address AS lp_pos,
w.contract_address AS token,
SUM(w.value) AS token_withdraws
FROM (SELECT exchange_contract_address FROM all_trades GROUP BY 1) a
LEFT JOIN erc20.""ERC20_evt_Transfer"" w
ON a.exchange_contract_address = w.""from"" --transactions where the LP is sending tokens
GROUP BY 1,2
ORDER BY 1 DESC
),

lp_deposits AS( --get deposits into the lp pool
SELECT
a.exchange_contract_address AS lp_pos,
d.contract_address AS token,
SUM(d.value) AS token_deposits
FROM (SELECT exchange_contract_address FROM all_trades GROUP BY 1) a
LEFT JOIN erc20.""ERC20_evt_Transfer"" d
ON a.exchange_contract_address = d.""to"" --transactions where the LP is recieving tokens
GROUP BY 1,2
ORDER BY 1 DESC
),

lp_tvl AS( --calculate tvl
SELECT
net.lp_pos, SUM(net.net_usd) AS tvl_usd --combine usd of tokens in each lp position by address
FROM (
    SELECT
    d.lp_pos,
    d.token,
    d.token_deposits - COALESCE(w.token_withdraws,0) AS net_tokens, --# of tokens are in the LP
     CASE WHEN p.decimals IS NOT NULL
     THEN
    (d.token_deposits - COALESCE(w.token_withdraws,0)) / (10^p.decimals) --# of tokens in the LP with appropriate decimals (only Dune logged erc20's)
    ELSE (d.token_deposits - COALESCE(w.token_withdraws,0)) / (10^18)
    END AS net_tokens_erc20,
    
    CASE WHEN p.decimals IS NOT NULL
    THEN ((d.token_deposits - COALESCE(w.token_withdraws,0)) / (10^p.decimals)) * p.price --USD value of each token in the LP (Of the ERC20s that Dune logs)
    ELSE ((d.token_deposits - COALESCE(w.token_withdraws,0)) / (10^18)) * dp.price_18 --assume 18 in dex_price
    END AS net_usd
    
    FROM lp_deposits d
    INNER JOIN lp_withdraws w --join the deposts with the withdraws
    ON d.lp_pos = w.lp_pos
    AND d.token = w.token
    LEFT JOIN most_recent_price p --get the price of each token (erc20)
    ON d.token = p.""contract_address""
    LEFT JOIN dex_price dp --get the price of each token (erc20)
    ON d.token = dp.t_one
    ) net
GROUP BY net.lp_pos
)

SELECT
v.trading_pair
,v.fee_tier
,COUNT(v.trading_pair) AS num_trades
,SUM(v.usd_amount) AS total_usd
,SUM(v.fees_collected_usd) AS total_fees_usd
,lp.tvl_usd AS total_value_locked
,SUM(v.fees_collected_usd) / lp.tvl_usd AS fee_to_tvl_ratio
FROM v3_trades v
LEFT JOIN lp_tvl lp
ON v.exchange_contract_address = lp.lp_pos
WHERE v.block_time >= (DATE_TRUNC('day',CURRENT_TIMESTAMP) - '6 days'::INTERVAL)
AND v.usd_amount IS NOT NULL -- Eventually see if Dune adds new tokens, or we need to manually
GROUP BY v.exchange_contract_address, v.trading_pair, lp.tvl_usd, v.fee_tier
HAVING
SUM(v.usd_amount) >100000 --Filter to remove outlier/small pairs
AND lp.tvl_usd >1000 --remove more outliers / pairs with no prices
ORDER BY SUM(v.fees_collected_usd) DESC"
44614,Uniswap v3 Total Volume and Fees - Counter,,"[{""id"": 87300, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-05-09T02:12:54.949347+00:00"", ""__typename"": ""visualizations""}, {""id"": 89488, ""type"": ""counter"", ""name"": ""Last 7 Days Fees"", ""options"": {""rowNumber"": 1, ""counterLabel"": ""LP Fees in Top 15 Pairs"", ""stringPrefix"": ""$"", ""stringSuffix"": ""M"", ""stringDecimal"": 2, ""counterColName"": ""mil_usd_fees_top15""}, ""created_at"": ""2021-05-10T23:35:44.481776+00:00"", ""__typename"": ""visualizations""}, {""id"": 87302, ""type"": ""counter"", ""name"": ""Last 7 Days Volume"", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Total Trading Volume (All Pairs)"", ""stringPrefix"": ""$"", ""stringSuffix"": ""B"", ""stringDecimal"": 2, ""counterColName"": ""bil_usd_volume""}, ""created_at"": ""2021-05-09T02:12:54.949347+00:00"", ""__typename"": ""visualizations""}, {""id"": 89483, ""type"": ""counter"", ""name"": ""Last 7 Days Fees"", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Total LP Fees (All Pairs)"", ""stringPrefix"": ""$"", ""stringSuffix"": ""M"", ""stringDecimal"": 2, ""counterColName"": ""mil_usd_fees""}, ""created_at"": ""2021-05-10T23:16:00.898466+00:00"", ""__typename"": ""visualizations""}, {""id"": 89487, ""type"": ""counter"", ""name"": ""Last 7 Days Volume"", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Trading Volume in Top 15 Pairs"", ""stringPrefix"": ""$"", ""stringSuffix"": ""B"", ""stringDecimal"": 2, ""counterColName"": ""bil_usd_volume_top15""}, ""created_at"": ""2021-05-10T23:35:15.274242+00:00"", ""__typename"": ""visualizations""}]","WITH all_trades AS
(SELECT
t.block_time,
CASE --filling in missing addresses for coins. Maybe not worth keeping up, some are memes.
WHEN t.token_a_address::text = '\x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce' THEN 'SHIB'
WHEN t.token_a_address::text = '\x761d38e5ddf6ccf6cf7c55759d5210750b5d60f3' THEN 'ELON'
WHEN t.token_a_address::text = '\x3301ee63fb29f863f2333bd4466acb46cd8323e6' THEN 'AKITA'
WHEN t.token_a_address::text = 'x5218e472cfcfe0b64a064f055b43b4cdc9efd3a6' THEN 'eRSDL'
WHEN t.token_a_address::text = '\x1453dbb8a29551ade11d89825ca812e05317eaeb' THEN 'TEND'
WHEN t.token_a_address::text = '\x35a532d376ffd9a705d0bb319532837337a398e7' THEN 'WDOGE'
WHEN t.token_a_address::text = '\x17ef75aa22dd5f6c2763b8304ab24f40ee54d48a' THEN 'RVP'
WHEN t.token_a_address::text = '\x6dea81c8171d0ba574754ef6f8b412f2ed88c54d' THEN 'LQTY'
WHEN t.token_a_address::text = '\x3832d2f059e55934220881f831be501d180671a7' THEN 'renDOGE'
WHEN t.token_a_address::text = '\xf16e4d813f4dcfde4c5b44f305c908742de84ef0' THEN 'ETH2x ADL'
WHEN t.token_a_address::text = '\x77fba179c79de5b7653f68b5039af940ada60ce0' THEN 'FORTH'
WHEN t.token_a_address::text = '\xf65b5c5104c4fafd4b709d9d60a185eae063276c' THEN 'TRU'
WHEN t.token_a_address::text = '\xc7283b66eb1eb5fb86327f08e1b5816b0720212b' THEN 'TRIBE'
WHEN t.token_a_address::text = '\xc8807f0f5ba3fa45ffbdc66928d71c5289249014' THEN 'ISP'
ELSE COALESCE(t.token_a_symbol,t.token_a_address::text)
END AS token_a,
CASE --filling in missing addresses for coins. Maybe not worth keeping up, some are memes.
WHEN t.token_b_address::text = '\x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce' THEN 'SHIB'
WHEN t.token_b_address::text = '\x761d38e5ddf6ccf6cf7c55759d5210750b5d60f3' THEN 'ELON'
WHEN t.token_b_address::text = '\x3301ee63fb29f863f2333bd4466acb46cd8323e6' THEN 'AKITA'
WHEN t.token_b_address::text = 'x5218e472cfcfe0b64a064f055b43b4cdc9efd3a6' THEN 'eRSDL'
WHEN t.token_b_address::text = '\x1453dbb8a29551ade11d89825ca812e05317eaeb' THEN 'TEND'
WHEN t.token_b_address::text = '\x35a532d376ffd9a705d0bb319532837337a398e7' THEN 'WDOGE'
WHEN t.token_b_address::text = '\x17ef75aa22dd5f6c2763b8304ab24f40ee54d48a' THEN 'RVP'
WHEN t.token_b_address::text = '\x6dea81c8171d0ba574754ef6f8b412f2ed88c54d' THEN 'LQTY'
WHEN t.token_b_address::text = '\x3832d2f059e55934220881f831be501d180671a7' THEN 'renDOGE'
WHEN t.token_b_address::text = '\xf16e4d813f4dcfde4c5b44f305c908742de84ef0' THEN 'ETH2x ADL'
WHEN t.token_b_address::text = '\x77fba179c79de5b7653f68b5039af940ada60ce0' THEN 'FORTH'
WHEN t.token_b_address::text = '\xf65b5c5104c4fafd4b709d9d60a185eae063276c' THEN 'TRU'
WHEN t.token_b_address::text = '\xc7283b66eb1eb5fb86327f08e1b5816b0720212b' THEN 'TRIBE'
WHEN t.token_b_address::text = '\xc8807f0f5ba3fa45ffbdc66928d71c5289249014' THEN 'ISP'
ELSE COALESCE(t.token_b_symbol,t.token_b_address::text)
END AS token_b
,t.token_a_amount
,t.token_b_amount
,t.exchange_contract_address -- exchange_contract_address is the v3 NFT LP Position
,t.tx_hash -- transaction addr (for spot checks)
,t.usd_amount --TODO: Find some way to pull in USD of any missing tokens
,c.fee/1e6 AS fee_tier --Converting fee tier to a multiplier (i.e. for 0.3%, 3000 -> 0.003)
,t.usd_amount*(c.fee/1e6) AS fees_collected_usd --USD Amount * %fee = fees collected
FROM dex.""trades"" t
LEFT JOIN uniswap_v3.""Factory_call_createPool"" c --1. Join With Pool creation on LP contract address to pull fee tier
ON t.exchange_contract_address = c.output_pool
WHERE t.project = 'Uniswap'
AND t.version = '3'
AND block_time >= (DATE_TRUNC('day',CURRENT_TIMESTAMP) - '6 days'::INTERVAL)
AND t.block_time >= '05-05-2021 17:00' -- Uni v3 launch date/hr
ORDER BY t.block_time DESC
),
sum_pairs AS( -- Using this to decide which trading pair order to pick (i.e WBTC/USDC vs USDC/WBTC). We'll pick the one with the greatest usd volume.
SELECT 
CONCAT(token_a,'/',token_b) AS forward_pair -- Trading pair
,CONCAT(token_b,'/',token_a) AS backward_pair -- For joining buys/sells later
,SUM(usd_amount) AS sum_usd
FROM all_trades
GROUP BY 1,2
),

final_trading_pairs AS( --building the mapping table for pairs
SELECT
a.forward_pair, a.backward_pair,
a.sum_usd,b.sum_usd,
CASE
WHEN RIGHT(a.backward_pair,4)='WETH' THEN a.forward_pair -- if the backward version ends in WETH, do forward
WHEN RIGHT(a.forward_pair,4)='WETH' THEN a.backward_pair
WHEN RIGHT(a.backward_pair,4)='WBTC' THEN a.forward_pair
WHEN RIGHT(a.forward_pair,4)='WBTC' THEN a.backward_pair
WHEN (a.sum_usd >= b.sum_usd) -- when a > b
OR b.sum_usd IS NULL -- or if backward usd is null
THEN a.forward_pair -- select forward
ELSE a.backward_pair --else select backward in every other circumstance
END AS trading_pair

FROM sum_pairs a
LEFT JOIN sum_pairs b
ON a.forward_pair = b.backward_pair
),
v3_trades AS (
SELECT
atx.block_time,
--f1.trading_pair,
--f2.trading_pair,
COALESCE(f1.trading_pair,f2.trading_pair) AS trading_pair,
atx.usd_amount,
atx.fee_tier,
atx.fees_collected_usd,
atx.tx_hash
FROM all_trades atx

LEFT JOIN final_trading_pairs f1
ON CONCAT(atx.token_a,'/',atx.token_b) = f1.forward_pair
LEFT JOIN final_trading_pairs f2 --check if the pair maps with the backward version
ON CONCAT(atx.token_a,'/',atx.token_b) = f2.backward_pair
),
pairs AS (
SELECT
trading_pair
,COUNT(trading_pair) AS num_trades
,SUM(usd_amount) AS total_usd
,SUM(fees_collected_usd) AS total_fees_usd
,fee_tier
,RANK() OVER(ORDER BY SUM(usd_amount) DESC) AS pair_rank_vol --rank by volume
,RANK() OVER(ORDER BY SUM(fees_collected_usd) DESC) AS pair_rank_fee --rank by fees
FROM v3_trades
WHERE usd_amount IS NOT NULL -- Eventually see if Dune adds new tokens, or we need to manually
GROUP BY trading_pair, fee_tier
ORDER BY SUM(usd_amount) DESC)

SELECT
SUM(total_usd)::decimal /1000000000 AS bil_usd_volume, -- all volume no filter
SUM(total_fees_usd)::decimal /1000000 AS mil_usd_fees, -- all fees no filter
SUM(CASE WHEN pair_rank_vol <=15 THEN total_usd ELSE 0 END)::decimal /1000000000 AS bil_usd_volume_top15, -- volume of top 15 pairs by volume
SUM(CASE WHEN pair_rank_fee <=15 THEN total_fees_usd ELSE 0 END)::decimal /1000000 AS mil_usd_fees_top15 -- fees of top 15 pairs by fees
FROM pairs"
45030,Uniswap v3 Trading Volume and Fees Data Table (1% Tier),,"[{""id"": 88612, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-05-09T19:48:03.670246+00:00"", ""__typename"": ""visualizations""}, {""id"": 88613, ""type"": ""table"", ""name"": ""(1% Fee Tier) Last 7 Days - Sorted by Total Fees"", ""options"": {""columns"": [{""name"": ""trading_pair"", ""title"": ""Trading Pair""}, {""name"": ""num_trades"", ""title"": ""# of Trades"", ""numberFormat"": "",""}, {""name"": ""total_usd"", ""title"": ""USD Volume"", ""numberFormat"": ""$0,""}, {""name"": ""total_fees_usd"", ""title"": ""Total Fees (USD)"", ""numberFormat"": ""$0,""}, {""name"": ""fee_tier"", ""title"": ""Fee Tier"", ""numberFormat"": ""0.00%""}, {""name"": ""total_value_locked"", ""title"": ""TVL (USD)"", ""numberFormat"": ""$0,""}, {""name"": ""fee_to_lp_ratio"", ""title"": ""Fees/TVL"", ""numberFormat"": ""0.0%""}, {""name"": ""fee_to_tvl_ratio"", ""title"": ""Fees/TVL"", ""numberFormat"": ""0.00%""}]}, ""created_at"": ""2021-05-09T19:48:03.670246+00:00"", ""__typename"": ""visualizations""}, {""id"": 88648, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""$,"", ""columnMapping"": {""total_usd"": ""y"", ""trading_pair"": ""x""}, ""seriesOptions"": {""total_usd"": {""name"": ""USD Volume"", ""type"": ""pie"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2021-05-09T20:01:05.682198+00:00"", ""__typename"": ""visualizations""}]","WITH all_trades AS
(SELECT
t.block_time,
t.token_a_address,
CASE --filling in missing addresses for coins. Maybe not worth keeping up, some are memes.
WHEN t.token_a_address::text = '\x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce' THEN 'SHIB'
WHEN t.token_a_address::text = '\x761d38e5ddf6ccf6cf7c55759d5210750b5d60f3' THEN 'ELON'
WHEN t.token_a_address::text = '\x3301ee63fb29f863f2333bd4466acb46cd8323e6' THEN 'AKITA'
WHEN t.token_a_address::text = 'x5218e472cfcfe0b64a064f055b43b4cdc9efd3a6' THEN 'eRSDL'
WHEN t.token_a_address::text = '\x1453dbb8a29551ade11d89825ca812e05317eaeb' THEN 'TEND'
WHEN t.token_a_address::text = '\x35a532d376ffd9a705d0bb319532837337a398e7' THEN 'WDOGE'
WHEN t.token_a_address::text = '\x17ef75aa22dd5f6c2763b8304ab24f40ee54d48a' THEN 'RVP'
WHEN t.token_a_address::text = '\x6dea81c8171d0ba574754ef6f8b412f2ed88c54d' THEN 'LQTY'
WHEN t.token_a_address::text = '\x3832d2f059e55934220881f831be501d180671a7' THEN 'renDOGE'
WHEN t.token_a_address::text = '\xf16e4d813f4dcfde4c5b44f305c908742de84ef0' THEN 'ETH2x ADL'
WHEN t.token_a_address::text = '\x77fba179c79de5b7653f68b5039af940ada60ce0' THEN 'FORTH'
WHEN t.token_a_address::text = '\xf65b5c5104c4fafd4b709d9d60a185eae063276c' THEN 'TRU'
WHEN t.token_a_address::text = '\xc7283b66eb1eb5fb86327f08e1b5816b0720212b' THEN 'TRIBE'
WHEN t.token_a_address::text = '\xc8807f0f5ba3fa45ffbdc66928d71c5289249014' THEN 'ISP'
ELSE COALESCE(t.token_a_symbol,t.token_a_address::text)
END AS token_a,
t.token_b_address,
CASE --filling in missing addresses for coins. Maybe not worth keeping up, some are memes.
WHEN t.token_b_address::text = '\x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce' THEN 'SHIB'
WHEN t.token_b_address::text = '\x761d38e5ddf6ccf6cf7c55759d5210750b5d60f3' THEN 'ELON'
WHEN t.token_b_address::text = '\x3301ee63fb29f863f2333bd4466acb46cd8323e6' THEN 'AKITA'
WHEN t.token_b_address::text = 'x5218e472cfcfe0b64a064f055b43b4cdc9efd3a6' THEN 'eRSDL'
WHEN t.token_b_address::text = '\x1453dbb8a29551ade11d89825ca812e05317eaeb' THEN 'TEND'
WHEN t.token_b_address::text = '\x35a532d376ffd9a705d0bb319532837337a398e7' THEN 'WDOGE'
WHEN t.token_b_address::text = '\x17ef75aa22dd5f6c2763b8304ab24f40ee54d48a' THEN 'RVP'
WHEN t.token_b_address::text = '\x6dea81c8171d0ba574754ef6f8b412f2ed88c54d' THEN 'LQTY'
WHEN t.token_b_address::text = '\x3832d2f059e55934220881f831be501d180671a7' THEN 'renDOGE'
WHEN t.token_b_address::text = '\xf16e4d813f4dcfde4c5b44f305c908742de84ef0' THEN 'ETH2x ADL'
WHEN t.token_b_address::text = '\x77fba179c79de5b7653f68b5039af940ada60ce0' THEN 'FORTH'
WHEN t.token_b_address::text = '\xf65b5c5104c4fafd4b709d9d60a185eae063276c' THEN 'TRU'
WHEN t.token_b_address::text = '\xc7283b66eb1eb5fb86327f08e1b5816b0720212b' THEN 'TRIBE'
WHEN t.token_b_address::text = '\xc8807f0f5ba3fa45ffbdc66928d71c5289249014' THEN 'ISP'
ELSE COALESCE(t.token_b_symbol,t.token_b_address::text)
END AS token_b
,t.token_a_amount
,t.token_b_amount
,t.exchange_contract_address -- exchange_contract_address is the v3 LP Position
,t.tx_hash -- transaction addr (for spot checks)
,t.usd_amount --TODO: Find some way to pull in USD of any missing tokens
,c.fee/1e6 AS fee_tier --Converting fee tier to a multiplier (i.e. for 0.3%, 3000 -> 0.003)
,t.usd_amount*(c.fee/1e6) AS fees_collected_usd --USD Amount * %fee = fees collected
FROM dex.""trades"" t

LEFT JOIN uniswap_v3.""Factory_call_createPool"" c --1. Join With Pool creation on LP contract address to pull fee tier
ON t.exchange_contract_address = c.output_pool
WHERE t.project = 'Uniswap'
AND t.version = '3'
AND t.block_time >= '05-05-2021 17:00' -- Uni v3 launch date/hr
AND t.block_time >= (DATE_TRUNC('day',CURRENT_TIMESTAMP) - '6 days'::INTERVAL)

ORDER BY t.block_time DESC
),

sum_pairs AS( -- Using this to decide which trading pair order to pick (i.e WBTC/USDC vs USDC/WBTC). We'll pick the one with the greatest usd volume.
--starting set
SELECT 
CONCAT(token_a,'/',token_b) AS forward_pair -- Trading pair
,CONCAT(token_b,'/',token_a) AS backward_pair -- For joining buys/sells later
,SUM(usd_amount) AS sum_usd
FROM all_trades
GROUP BY 1,2
),

most_recent_price AS --get the latest price so we can use it to calculate TVL
(
SELECT last_price.contract_address, last_price.symbol, last_price.decimals, last_price.price, last_price.minute
 FROM (
    SELECT
    minute, contract_address, symbol, decimals, price,
    RANK() OVER(PARTITION BY contract_address ORDER BY minute DESC) AS recency_rank --rank by time, where most recent = 1
    FROM prices.usd
    WHERE minute > (DATE_TRUNC('day',CURRENT_TIMESTAMP) - '1 days'::INTERVAL) -- to help tighten this and not query the history of time
    ) last_price
WHERE last_price.recency_rank = 1 --get the most recent price for liquidity joining
),

final_trading_pairs AS( --building the mapping table for pairs
SELECT
a.forward_pair, a.backward_pair,
a.sum_usd,b.sum_usd,
CASE
WHEN RIGHT(a.backward_pair,4)='WETH' THEN a.forward_pair -- if the backward version ends in WETH, do forward
WHEN RIGHT(a.forward_pair,4)='WETH' THEN a.backward_pair
WHEN RIGHT(a.backward_pair,4)='WBTC' THEN a.forward_pair
WHEN RIGHT(a.forward_pair,4)='WBTC' THEN a.backward_pair
WHEN (a.sum_usd >= b.sum_usd) -- when a > b
OR b.sum_usd IS NULL -- or if backward usd is null
THEN a.forward_pair -- select forward
ELSE a.backward_pair --else select backward in every other circumstance
END AS trading_pair

FROM sum_pairs a
LEFT JOIN sum_pairs b
ON a.forward_pair = b.backward_pair
),
v3_trades AS (--clean table of trades to work with for building visuals
SELECT
atx.block_time,
COALESCE(f1.trading_pair,f2.trading_pair) AS trading_pair,
atx.usd_amount,
atx.fee_tier,
atx.fees_collected_usd,
atx.exchange_contract_address
FROM all_trades atx

LEFT JOIN final_trading_pairs f1--check if the pair maps with the forward version
ON CONCAT(atx.token_a,'/',atx.token_b) = f1.forward_pair
LEFT JOIN final_trading_pairs f2 --check if the pair maps with the backward version
ON CONCAT(atx.token_a,'/',atx.token_b) = f2.backward_pair
),

lp_withdraws AS( --get withdrawals from the lp pool
SELECT
a.exchange_contract_address AS lp_pos,
w.contract_address AS token,
SUM(w.value) AS token_withdraws
FROM (SELECT DISTINCT exchange_contract_address FROM all_trades) a
LEFT JOIN erc20.""ERC20_evt_Transfer"" w
ON a.exchange_contract_address = w.""from"" --transactions where the LP is sending tokens
GROUP BY 1,2
ORDER BY 1 DESC
),

lp_deposits AS( --get deposits into the lp pool
SELECT
a.exchange_contract_address AS lp_pos,
d.contract_address AS token,
SUM(d.value) AS token_deposits
FROM (SELECT DISTINCT exchange_contract_address FROM all_trades) a
LEFT JOIN erc20.""ERC20_evt_Transfer"" d
ON a.exchange_contract_address = d.""to"" --transactions where the LP is recieving tokens
GROUP BY 1,2
ORDER BY 1 DESC
),

lp_tvl AS( --calculate tvl
SELECT
net.lp_pos, SUM(net.net_usd) AS tvl_usd --combine usd of tokens in each lp position by address
FROM (
    SELECT
    d.lp_pos,
    d.token,
    d.token_deposits - COALESCE(w.token_withdraws,0) AS net_tokens, --# of tokens are in the LP
    (d.token_deposits - COALESCE(w.token_withdraws,0)) / (10^p.decimals) AS net_tokens_erc20, --# of tokens in the LP with appropriate decimals (only Dune logged erc20's)
    ((d.token_deposits - COALESCE(w.token_withdraws,0)) / (10^p.decimals)) * p.price AS net_usd --USD value of each token in the LP (Of the ERC20s that Dune logs)
    FROM lp_deposits d
    INNER JOIN lp_withdraws w --join the deposts with the withdraws
    ON d.lp_pos = w.lp_pos
    AND d.token = w.token
    LEFT JOIN most_recent_price p --get the price of each token (erc20)
    ON d.token = p.""contract_address""
    ) net
GROUP BY net.lp_pos
)

SELECT
v.trading_pair
--,v.fee_tier
,COUNT(v.trading_pair) AS num_trades
,SUM(v.usd_amount) AS total_usd
,SUM(v.fees_collected_usd) AS total_fees_usd
,lp.tvl_usd AS total_value_locked
,SUM(v.fees_collected_usd) / lp.tvl_usd AS fee_to_tvl_ratio
FROM v3_trades v
LEFT JOIN lp_tvl lp
ON v.exchange_contract_address = lp.lp_pos
WHERE v.block_time >= (DATE_TRUNC('day',CURRENT_TIMESTAMP) - '6 days'::INTERVAL)
AND v.usd_amount IS NOT NULL -- Eventually see if Dune adds new tokens, or we need to manually
AND v.fee_tier = .01
GROUP BY v.exchange_contract_address, v.trading_pair, lp.tvl_usd--, v.fee_tier
HAVING
SUM(v.usd_amount) >100000 --Filter to remove outlier/small pairs
AND lp.tvl_usd >1000 --remove more outliers / pairs with no prices
ORDER BY SUM(v.fees_collected_usd) DESC"
45033,Uniswap v3 Trading Volume and Fees Data Table (0.3% Tier),,"[{""id"": 88622, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-05-09T19:49:49.553325+00:00"", ""__typename"": ""visualizations""}, {""id"": 88623, ""type"": ""table"", ""name"": ""(0.3% Fee Tier) Last 7 Days - Sorted by Total Fees"", ""options"": {""columns"": [{""name"": ""trading_pair"", ""title"": ""Trading Pair""}, {""name"": ""num_trades"", ""title"": ""# of Trades"", ""numberFormat"": "",""}, {""name"": ""total_usd"", ""title"": ""USD Volume"", ""numberFormat"": ""$0,""}, {""name"": ""total_fees_usd"", ""title"": ""Total Fees (USD)"", ""numberFormat"": ""$0,""}, {""name"": ""fee_tier"", ""title"": ""Fee Tier"", ""numberFormat"": ""0.00%""}, {""name"": ""total_value_locked"", ""title"": ""TVL (USD)"", ""numberFormat"": ""$0,""}, {""name"": ""fee_to_lp_ratio"", ""title"": ""Fees/TVL"", ""numberFormat"": ""0.0%""}, {""name"": ""fee_to_tvl_ratio"", ""title"": ""Fees/TVL"", ""numberFormat"": ""0.00%""}]}, ""created_at"": ""2021-05-09T19:49:49.553325+00:00"", ""__typename"": ""visualizations""}, {""id"": 88647, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""$,"", ""columnMapping"": {""total_usd"": ""y"", ""trading_pair"": ""x""}, ""seriesOptions"": {""total_usd"": {""name"": ""USD Volume"", ""type"": ""pie"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2021-05-09T19:59:37.077628+00:00"", ""__typename"": ""visualizations""}]","WITH all_trades AS
(SELECT
t.block_time,
t.token_a_address,
CASE --filling in missing addresses for coins. Maybe not worth keeping up, some are memes.
WHEN t.token_a_address::text = '\x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce' THEN 'SHIB'
WHEN t.token_a_address::text = '\x761d38e5ddf6ccf6cf7c55759d5210750b5d60f3' THEN 'ELON'
WHEN t.token_a_address::text = '\x3301ee63fb29f863f2333bd4466acb46cd8323e6' THEN 'AKITA'
WHEN t.token_a_address::text = 'x5218e472cfcfe0b64a064f055b43b4cdc9efd3a6' THEN 'eRSDL'
WHEN t.token_a_address::text = '\x1453dbb8a29551ade11d89825ca812e05317eaeb' THEN 'TEND'
WHEN t.token_a_address::text = '\x35a532d376ffd9a705d0bb319532837337a398e7' THEN 'WDOGE'
WHEN t.token_a_address::text = '\x17ef75aa22dd5f6c2763b8304ab24f40ee54d48a' THEN 'RVP'
WHEN t.token_a_address::text = '\x6dea81c8171d0ba574754ef6f8b412f2ed88c54d' THEN 'LQTY'
WHEN t.token_a_address::text = '\x3832d2f059e55934220881f831be501d180671a7' THEN 'renDOGE'
WHEN t.token_a_address::text = '\xf16e4d813f4dcfde4c5b44f305c908742de84ef0' THEN 'ETH2x ADL'
WHEN t.token_a_address::text = '\x77fba179c79de5b7653f68b5039af940ada60ce0' THEN 'FORTH'
WHEN t.token_a_address::text = '\xf65b5c5104c4fafd4b709d9d60a185eae063276c' THEN 'TRU'
WHEN t.token_a_address::text = '\xc7283b66eb1eb5fb86327f08e1b5816b0720212b' THEN 'TRIBE'
WHEN t.token_a_address::text = '\xc8807f0f5ba3fa45ffbdc66928d71c5289249014' THEN 'ISP'
ELSE COALESCE(t.token_a_symbol,t.token_a_address::text)
END AS token_a,
t.token_b_address,
CASE --filling in missing addresses for coins. Maybe not worth keeping up, some are memes.
WHEN t.token_b_address::text = '\x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce' THEN 'SHIB'
WHEN t.token_b_address::text = '\x761d38e5ddf6ccf6cf7c55759d5210750b5d60f3' THEN 'ELON'
WHEN t.token_b_address::text = '\x3301ee63fb29f863f2333bd4466acb46cd8323e6' THEN 'AKITA'
WHEN t.token_b_address::text = 'x5218e472cfcfe0b64a064f055b43b4cdc9efd3a6' THEN 'eRSDL'
WHEN t.token_b_address::text = '\x1453dbb8a29551ade11d89825ca812e05317eaeb' THEN 'TEND'
WHEN t.token_b_address::text = '\x35a532d376ffd9a705d0bb319532837337a398e7' THEN 'WDOGE'
WHEN t.token_b_address::text = '\x17ef75aa22dd5f6c2763b8304ab24f40ee54d48a' THEN 'RVP'
WHEN t.token_b_address::text = '\x6dea81c8171d0ba574754ef6f8b412f2ed88c54d' THEN 'LQTY'
WHEN t.token_b_address::text = '\x3832d2f059e55934220881f831be501d180671a7' THEN 'renDOGE'
WHEN t.token_b_address::text = '\xf16e4d813f4dcfde4c5b44f305c908742de84ef0' THEN 'ETH2x ADL'
WHEN t.token_b_address::text = '\x77fba179c79de5b7653f68b5039af940ada60ce0' THEN 'FORTH'
WHEN t.token_b_address::text = '\xf65b5c5104c4fafd4b709d9d60a185eae063276c' THEN 'TRU'
WHEN t.token_b_address::text = '\xc7283b66eb1eb5fb86327f08e1b5816b0720212b' THEN 'TRIBE'
WHEN t.token_b_address::text = '\xc8807f0f5ba3fa45ffbdc66928d71c5289249014' THEN 'ISP'
ELSE COALESCE(t.token_b_symbol,t.token_b_address::text)
END AS token_b
,t.token_a_amount
,t.token_b_amount
,t.exchange_contract_address -- exchange_contract_address is the v3 LP Position
,t.tx_hash -- transaction addr (for spot checks)
,t.usd_amount --TODO: Find some way to pull in USD of any missing tokens
,c.fee/1e6 AS fee_tier --Converting fee tier to a multiplier (i.e. for 0.3%, 3000 -> 0.003)
,t.usd_amount*(c.fee/1e6) AS fees_collected_usd --USD Amount * %fee = fees collected
FROM dex.""trades"" t

LEFT JOIN uniswap_v3.""Factory_call_createPool"" c --1. Join With Pool creation on LP contract address to pull fee tier
ON t.exchange_contract_address = c.output_pool
WHERE t.project = 'Uniswap'
AND t.version = '3'
AND t.block_time >= '05-05-2021 17:00' -- Uni v3 launch date/hr
AND t.block_time >= (DATE_TRUNC('day',CURRENT_TIMESTAMP) - '6 days'::INTERVAL)

ORDER BY t.block_time DESC
),

sum_pairs AS( -- Using this to decide which trading pair order to pick (i.e WBTC/USDC vs USDC/WBTC). We'll pick the one with the greatest usd volume.
--starting set
SELECT 
CONCAT(token_a,'/',token_b) AS forward_pair -- Trading pair
,CONCAT(token_b,'/',token_a) AS backward_pair -- For joining buys/sells later
,SUM(usd_amount) AS sum_usd
FROM all_trades
GROUP BY 1,2
),

most_recent_price AS --get the latest price so we can use it to calculate TVL
(
SELECT last_price.contract_address, last_price.symbol, last_price.decimals, last_price.price, last_price.minute
 FROM (
    SELECT
    minute, contract_address, symbol, decimals, price,
    RANK() OVER(PARTITION BY contract_address ORDER BY minute DESC) AS recency_rank --rank by time, where most recent = 1
    FROM prices.usd
    WHERE minute > (DATE_TRUNC('day',CURRENT_TIMESTAMP) - '1 days'::INTERVAL) -- to help tighten this and not query the history of time
    ) last_price
WHERE last_price.recency_rank = 1 --get the most recent price for liquidity joining
),

final_trading_pairs AS( --building the mapping table for pairs
SELECT
a.forward_pair, a.backward_pair,
a.sum_usd,b.sum_usd,
CASE
WHEN RIGHT(a.backward_pair,4)='WETH' THEN a.forward_pair -- if the backward version ends in WETH, do forward
WHEN RIGHT(a.forward_pair,4)='WETH' THEN a.backward_pair
WHEN RIGHT(a.backward_pair,4)='WBTC' THEN a.forward_pair
WHEN RIGHT(a.forward_pair,4)='WBTC' THEN a.backward_pair
WHEN (a.sum_usd >= b.sum_usd) -- when a > b
OR b.sum_usd IS NULL -- or if backward usd is null
THEN a.forward_pair -- select forward
ELSE a.backward_pair --else select backward in every other circumstance
END AS trading_pair

FROM sum_pairs a
LEFT JOIN sum_pairs b
ON a.forward_pair = b.backward_pair
),
v3_trades AS (--clean table of trades to work with for building visuals
SELECT
atx.block_time,
COALESCE(f1.trading_pair,f2.trading_pair) AS trading_pair,
atx.usd_amount,
atx.fee_tier,
atx.fees_collected_usd,
atx.exchange_contract_address
FROM all_trades atx

LEFT JOIN final_trading_pairs f1--check if the pair maps with the forward version
ON CONCAT(atx.token_a,'/',atx.token_b) = f1.forward_pair
LEFT JOIN final_trading_pairs f2 --check if the pair maps with the backward version
ON CONCAT(atx.token_a,'/',atx.token_b) = f2.backward_pair
),

lp_withdraws AS( --get withdrawals from the lp pool
SELECT
a.exchange_contract_address AS lp_pos,
w.contract_address AS token,
SUM(w.value) AS token_withdraws
FROM (SELECT DISTINCT exchange_contract_address FROM all_trades) a
LEFT JOIN erc20.""ERC20_evt_Transfer"" w
ON a.exchange_contract_address = w.""from"" --transactions where the LP is sending tokens
GROUP BY 1,2
ORDER BY 1 DESC
),

lp_deposits AS( --get deposits into the lp pool
SELECT
a.exchange_contract_address AS lp_pos,
d.contract_address AS token,
SUM(d.value) AS token_deposits
FROM (SELECT DISTINCT exchange_contract_address FROM all_trades) a
LEFT JOIN erc20.""ERC20_evt_Transfer"" d
ON a.exchange_contract_address = d.""to"" --transactions where the LP is recieving tokens
GROUP BY 1,2
ORDER BY 1 DESC
),

lp_tvl AS( --calculate tvl
SELECT
net.lp_pos, SUM(net.net_usd) AS tvl_usd --combine usd of tokens in each lp position by address
FROM (
    SELECT
    d.lp_pos,
    d.token,
    d.token_deposits - COALESCE(w.token_withdraws,0) AS net_tokens, --# of tokens are in the LP
    (d.token_deposits - COALESCE(w.token_withdraws,0)) / (10^p.decimals) AS net_tokens_erc20, --# of tokens in the LP with appropriate decimals (only Dune logged erc20's)
    ((d.token_deposits - COALESCE(w.token_withdraws,0)) / (10^p.decimals)) * p.price AS net_usd --USD value of each token in the LP (Of the ERC20s that Dune logs)
    FROM lp_deposits d
    INNER JOIN lp_withdraws w --join the deposts with the withdraws
    ON d.lp_pos = w.lp_pos
    AND d.token = w.token
    LEFT JOIN most_recent_price p --get the price of each token (erc20)
    ON d.token = p.""contract_address""
    ) net
GROUP BY net.lp_pos
)

SELECT
v.trading_pair
--,v.fee_tier
,COUNT(v.trading_pair) AS num_trades
,SUM(v.usd_amount) AS total_usd
,SUM(v.fees_collected_usd) AS total_fees_usd
,lp.tvl_usd AS total_value_locked
,SUM(v.fees_collected_usd) / lp.tvl_usd AS fee_to_tvl_ratio
FROM v3_trades v
LEFT JOIN lp_tvl lp
ON v.exchange_contract_address = lp.lp_pos
WHERE v.block_time >= (DATE_TRUNC('day',CURRENT_TIMESTAMP) - '6 days'::INTERVAL)
AND v.usd_amount IS NOT NULL -- Eventually see if Dune adds new tokens, or we need to manually
AND v.fee_tier = .003
GROUP BY v.exchange_contract_address, v.trading_pair, lp.tvl_usd--, v.fee_tier
HAVING
SUM(v.usd_amount) >100000 --Filter to remove outlier/small pairs
AND lp.tvl_usd >1000 --remove more outliers / pairs with no prices
ORDER BY SUM(v.fees_collected_usd) DESC"
45035,Uniswap v3 Trading Volume and Fees Data Table (0.05% Tier),,"[{""id"": 88634, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-05-09T19:51:24.027903+00:00"", ""__typename"": ""visualizations""}, {""id"": 88635, ""type"": ""table"", ""name"": ""(0.05% Fee Tier) Last 7 Days - Sorted by Total Fees"", ""options"": {""columns"": [{""name"": ""trading_pair"", ""title"": ""Trading Pair""}, {""name"": ""num_trades"", ""title"": ""# of Trades"", ""numberFormat"": "",""}, {""name"": ""total_usd"", ""title"": ""USD Volume"", ""numberFormat"": ""$0,""}, {""name"": ""total_fees_usd"", ""title"": ""Total Fees (USD)"", ""numberFormat"": ""$0,""}, {""name"": ""fee_tier"", ""title"": ""Fee Tier"", ""numberFormat"": ""0.00%""}, {""name"": ""total_value_locked"", ""title"": ""TVL (USD)"", ""numberFormat"": ""$0,""}, {""name"": ""fee_to_lp_ratio"", ""title"": ""Fees/TVL"", ""numberFormat"": ""0.0%""}, {""name"": ""fee_to_tvl_ratio"", ""title"": ""Fees/TVL"", ""numberFormat"": ""0.00%""}]}, ""created_at"": ""2021-05-09T19:51:24.027903+00:00"", ""__typename"": ""visualizations""}, {""id"": 88646, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""$,"", ""columnMapping"": {""total_usd"": ""y"", ""trading_pair"": ""x""}, ""seriesOptions"": {""total_usd"": {""name"": ""USD Volume"", ""type"": ""pie"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2021-05-09T19:58:31.663481+00:00"", ""__typename"": ""visualizations""}]","WITH all_trades AS
(SELECT
t.block_time,
t.token_a_address,
CASE --filling in missing addresses for coins. Maybe not worth keeping up, some are memes.
WHEN t.token_a_address::text = '\x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce' THEN 'SHIB'
WHEN t.token_a_address::text = '\x761d38e5ddf6ccf6cf7c55759d5210750b5d60f3' THEN 'ELON'
WHEN t.token_a_address::text = '\x3301ee63fb29f863f2333bd4466acb46cd8323e6' THEN 'AKITA'
WHEN t.token_a_address::text = 'x5218e472cfcfe0b64a064f055b43b4cdc9efd3a6' THEN 'eRSDL'
WHEN t.token_a_address::text = '\x1453dbb8a29551ade11d89825ca812e05317eaeb' THEN 'TEND'
WHEN t.token_a_address::text = '\x35a532d376ffd9a705d0bb319532837337a398e7' THEN 'WDOGE'
WHEN t.token_a_address::text = '\x17ef75aa22dd5f6c2763b8304ab24f40ee54d48a' THEN 'RVP'
WHEN t.token_a_address::text = '\x6dea81c8171d0ba574754ef6f8b412f2ed88c54d' THEN 'LQTY'
WHEN t.token_a_address::text = '\x3832d2f059e55934220881f831be501d180671a7' THEN 'renDOGE'
WHEN t.token_a_address::text = '\xf16e4d813f4dcfde4c5b44f305c908742de84ef0' THEN 'ETH2x ADL'
WHEN t.token_a_address::text = '\x77fba179c79de5b7653f68b5039af940ada60ce0' THEN 'FORTH'
WHEN t.token_a_address::text = '\xf65b5c5104c4fafd4b709d9d60a185eae063276c' THEN 'TRU'
WHEN t.token_a_address::text = '\xc7283b66eb1eb5fb86327f08e1b5816b0720212b' THEN 'TRIBE'
WHEN t.token_a_address::text = '\xc8807f0f5ba3fa45ffbdc66928d71c5289249014' THEN 'ISP'
ELSE COALESCE(t.token_a_symbol,t.token_a_address::text)
END AS token_a,
t.token_b_address,
CASE --filling in missing addresses for coins. Maybe not worth keeping up, some are memes.
WHEN t.token_b_address::text = '\x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce' THEN 'SHIB'
WHEN t.token_b_address::text = '\x761d38e5ddf6ccf6cf7c55759d5210750b5d60f3' THEN 'ELON'
WHEN t.token_b_address::text = '\x3301ee63fb29f863f2333bd4466acb46cd8323e6' THEN 'AKITA'
WHEN t.token_b_address::text = 'x5218e472cfcfe0b64a064f055b43b4cdc9efd3a6' THEN 'eRSDL'
WHEN t.token_b_address::text = '\x1453dbb8a29551ade11d89825ca812e05317eaeb' THEN 'TEND'
WHEN t.token_b_address::text = '\x35a532d376ffd9a705d0bb319532837337a398e7' THEN 'WDOGE'
WHEN t.token_b_address::text = '\x17ef75aa22dd5f6c2763b8304ab24f40ee54d48a' THEN 'RVP'
WHEN t.token_b_address::text = '\x6dea81c8171d0ba574754ef6f8b412f2ed88c54d' THEN 'LQTY'
WHEN t.token_b_address::text = '\x3832d2f059e55934220881f831be501d180671a7' THEN 'renDOGE'
WHEN t.token_b_address::text = '\xf16e4d813f4dcfde4c5b44f305c908742de84ef0' THEN 'ETH2x ADL'
WHEN t.token_b_address::text = '\x77fba179c79de5b7653f68b5039af940ada60ce0' THEN 'FORTH'
WHEN t.token_b_address::text = '\xf65b5c5104c4fafd4b709d9d60a185eae063276c' THEN 'TRU'
WHEN t.token_b_address::text = '\xc7283b66eb1eb5fb86327f08e1b5816b0720212b' THEN 'TRIBE'
WHEN t.token_b_address::text = '\xc8807f0f5ba3fa45ffbdc66928d71c5289249014' THEN 'ISP'
ELSE COALESCE(t.token_b_symbol,t.token_b_address::text)
END AS token_b
,t.token_a_amount
,t.token_b_amount
,t.exchange_contract_address -- exchange_contract_address is the v3 LP Position
,t.tx_hash -- transaction addr (for spot checks)
,t.usd_amount --TODO: Find some way to pull in USD of any missing tokens
,c.fee/1e6 AS fee_tier --Converting fee tier to a multiplier (i.e. for 0.3%, 3000 -> 0.003)
,t.usd_amount*(c.fee/1e6) AS fees_collected_usd --USD Amount * %fee = fees collected
FROM dex.""trades"" t

LEFT JOIN uniswap_v3.""Factory_call_createPool"" c --1. Join With Pool creation on LP contract address to pull fee tier
ON t.exchange_contract_address = c.output_pool
WHERE t.project = 'Uniswap'
AND t.version = '3'
AND t.block_time >= '05-05-2021 17:00' -- Uni v3 launch date/hr
AND t.block_time >= (DATE_TRUNC('day',CURRENT_TIMESTAMP) - '6 days'::INTERVAL)

ORDER BY t.block_time DESC
),

sum_pairs AS( -- Using this to decide which trading pair order to pick (i.e WBTC/USDC vs USDC/WBTC). We'll pick the one with the greatest usd volume.
--starting set
SELECT 
CONCAT(token_a,'/',token_b) AS forward_pair -- Trading pair
,CONCAT(token_b,'/',token_a) AS backward_pair -- For joining buys/sells later
,SUM(usd_amount) AS sum_usd
FROM all_trades
GROUP BY 1,2
),

most_recent_price AS --get the latest price so we can use it to calculate TVL
(
SELECT last_price.contract_address, last_price.symbol, last_price.decimals, last_price.price, last_price.minute
 FROM (
    SELECT
    minute, contract_address, symbol, decimals, price,
    RANK() OVER(PARTITION BY contract_address ORDER BY minute DESC) AS recency_rank --rank by time, where most recent = 1
    FROM prices.usd
    WHERE minute > (DATE_TRUNC('day',CURRENT_TIMESTAMP) - '1 days'::INTERVAL) -- to help tighten this and not query the history of time
    ) last_price
WHERE last_price.recency_rank = 1 --get the most recent price for liquidity joining
),

final_trading_pairs AS( --building the mapping table for pairs
SELECT
a.forward_pair, a.backward_pair,
a.sum_usd,b.sum_usd,
CASE
WHEN RIGHT(a.backward_pair,4)='WETH' THEN a.forward_pair -- if the backward version ends in WETH, do forward
WHEN RIGHT(a.forward_pair,4)='WETH' THEN a.backward_pair
WHEN RIGHT(a.backward_pair,4)='WBTC' THEN a.forward_pair
WHEN RIGHT(a.forward_pair,4)='WBTC' THEN a.backward_pair
WHEN (a.sum_usd >= b.sum_usd) -- when a > b
OR b.sum_usd IS NULL -- or if backward usd is null
THEN a.forward_pair -- select forward
ELSE a.backward_pair --else select backward in every other circumstance
END AS trading_pair

FROM sum_pairs a
LEFT JOIN sum_pairs b
ON a.forward_pair = b.backward_pair
),
v3_trades AS (--clean table of trades to work with for building visuals
SELECT
atx.block_time,
COALESCE(f1.trading_pair,f2.trading_pair) AS trading_pair,
atx.usd_amount,
atx.fee_tier,
atx.fees_collected_usd,
atx.exchange_contract_address
FROM all_trades atx

LEFT JOIN final_trading_pairs f1--check if the pair maps with the forward version
ON CONCAT(atx.token_a,'/',atx.token_b) = f1.forward_pair
LEFT JOIN final_trading_pairs f2 --check if the pair maps with the backward version
ON CONCAT(atx.token_a,'/',atx.token_b) = f2.backward_pair
),

lp_withdraws AS( --get withdrawals from the lp pool
SELECT
a.exchange_contract_address AS lp_pos,
w.contract_address AS token,
SUM(w.value) AS token_withdraws
FROM (SELECT DISTINCT exchange_contract_address FROM all_trades) a
LEFT JOIN erc20.""ERC20_evt_Transfer"" w
ON a.exchange_contract_address = w.""from"" --transactions where the LP is sending tokens
GROUP BY 1,2
ORDER BY 1 DESC
),

lp_deposits AS( --get deposits into the lp pool
SELECT
a.exchange_contract_address AS lp_pos,
d.contract_address AS token,
SUM(d.value) AS token_deposits
FROM (SELECT DISTINCT exchange_contract_address FROM all_trades) a
LEFT JOIN erc20.""ERC20_evt_Transfer"" d
ON a.exchange_contract_address = d.""to"" --transactions where the LP is recieving tokens
GROUP BY 1,2
ORDER BY 1 DESC
),

lp_tvl AS( --calculate tvl
SELECT
net.lp_pos, SUM(net.net_usd) AS tvl_usd --combine usd of tokens in each lp position by address
FROM (
    SELECT
    d.lp_pos,
    d.token,
    d.token_deposits - COALESCE(w.token_withdraws,0) AS net_tokens, --# of tokens are in the LP
    (d.token_deposits - COALESCE(w.token_withdraws,0)) / (10^p.decimals) AS net_tokens_erc20, --# of tokens in the LP with appropriate decimals (only Dune logged erc20's)
    ((d.token_deposits - COALESCE(w.token_withdraws,0)) / (10^p.decimals)) * p.price AS net_usd --USD value of each token in the LP (Of the ERC20s that Dune logs)
    FROM lp_deposits d
    INNER JOIN lp_withdraws w --join the deposts with the withdraws
    ON d.lp_pos = w.lp_pos
    AND d.token = w.token
    LEFT JOIN most_recent_price p --get the price of each token (erc20)
    ON d.token = p.""contract_address""
    ) net
GROUP BY net.lp_pos
)

SELECT
v.trading_pair
--,v.fee_tier
,COUNT(v.trading_pair) AS num_trades
,SUM(v.usd_amount) AS total_usd
,SUM(v.fees_collected_usd) AS total_fees_usd
,lp.tvl_usd AS total_value_locked
,SUM(v.fees_collected_usd) / lp.tvl_usd AS fee_to_tvl_ratio
FROM v3_trades v
LEFT JOIN lp_tvl lp
ON v.exchange_contract_address = lp.lp_pos
WHERE v.block_time >= (DATE_TRUNC('day',CURRENT_TIMESTAMP) - '6 days'::INTERVAL)
AND v.usd_amount IS NOT NULL -- Eventually see if Dune adds new tokens, or we need to manually
AND v.fee_tier = .0005
GROUP BY v.exchange_contract_address, v.trading_pair, lp.tvl_usd--, v.fee_tier
HAVING
SUM(v.usd_amount) >100000 --Filter to remove outlier/small pairs
AND lp.tvl_usd >1000 --remove more outliers / pairs with no prices
ORDER BY SUM(v.fees_collected_usd) DESC"
44612,Uniswap v3 Top Pairs by Fees,,"[{""id"": 87295, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-05-09T02:00:00.870336+00:00"", ""__typename"": ""visualizations""}, {""id"": 87296, ""type"": ""table"", ""name"": ""Last 7 Days - Sorted by Total Fees"", ""options"": {""columns"": [{""name"": ""trading_pair"", ""title"": ""Trading Pair""}, {""name"": ""num_trades"", ""title"": ""# of Trades"", ""numberFormat"": "",""}, {""name"": ""total_usd"", ""title"": ""USD Volume"", ""numberFormat"": ""$0,.00""}, {""name"": ""total_fees_usd"", ""title"": ""Total Fees (USD)"", ""numberFormat"": ""$0,.00""}, {""name"": ""fee_tier"", ""title"": ""Fee Tier"", ""numberFormat"": ""0.00%""}]}, ""created_at"": ""2021-05-09T02:00:00.870336+00:00"", ""__typename"": ""visualizations""}]","WITH all_trades AS
(SELECT
t.block_time,
CASE --filling in missing addresses for coins. Maybe not worth keeping up, some are memes.
WHEN t.token_a_address::text = '\x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce' THEN 'SHIB'
WHEN t.token_a_address::text = '\x761d38e5ddf6ccf6cf7c55759d5210750b5d60f3' THEN 'ELON'
WHEN t.token_a_address::text = '\x3301ee63fb29f863f2333bd4466acb46cd8323e6' THEN 'AKITA'
WHEN t.token_a_address::text = 'x5218e472cfcfe0b64a064f055b43b4cdc9efd3a6' THEN 'eRSDL'
WHEN t.token_a_address::text = '\x1453dbb8a29551ade11d89825ca812e05317eaeb' THEN 'TEND'
WHEN t.token_a_address::text = '\x35a532d376ffd9a705d0bb319532837337a398e7' THEN 'WDOGE'
WHEN t.token_a_address::text = '\x17ef75aa22dd5f6c2763b8304ab24f40ee54d48a' THEN 'RVP'
WHEN t.token_a_address::text = '\x6dea81c8171d0ba574754ef6f8b412f2ed88c54d' THEN 'LQTY'
WHEN t.token_a_address::text = '\x3832d2f059e55934220881f831be501d180671a7' THEN 'renDOGE'
WHEN t.token_a_address::text = '\xf16e4d813f4dcfde4c5b44f305c908742de84ef0' THEN 'ETH2x ADL'
WHEN t.token_a_address::text = '\x77fba179c79de5b7653f68b5039af940ada60ce0' THEN 'FORTH'
WHEN t.token_a_address::text = '\xf65b5c5104c4fafd4b709d9d60a185eae063276c' THEN 'TRU'
WHEN t.token_a_address::text = '\xc7283b66eb1eb5fb86327f08e1b5816b0720212b' THEN 'TRIBE'
WHEN t.token_a_address::text = '\xc8807f0f5ba3fa45ffbdc66928d71c5289249014' THEN 'ISP'
ELSE COALESCE(t.token_a_symbol,t.token_a_address::text)
END AS token_a,
CASE --filling in missing addresses for coins. Maybe not worth keeping up, some are memes.
WHEN t.token_b_address::text = '\x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce' THEN 'SHIB'
WHEN t.token_b_address::text = '\x761d38e5ddf6ccf6cf7c55759d5210750b5d60f3' THEN 'ELON'
WHEN t.token_b_address::text = '\x3301ee63fb29f863f2333bd4466acb46cd8323e6' THEN 'AKITA'
WHEN t.token_b_address::text = 'x5218e472cfcfe0b64a064f055b43b4cdc9efd3a6' THEN 'eRSDL'
WHEN t.token_b_address::text = '\x1453dbb8a29551ade11d89825ca812e05317eaeb' THEN 'TEND'
WHEN t.token_b_address::text = '\x35a532d376ffd9a705d0bb319532837337a398e7' THEN 'WDOGE'
WHEN t.token_b_address::text = '\x17ef75aa22dd5f6c2763b8304ab24f40ee54d48a' THEN 'RVP'
WHEN t.token_b_address::text = '\x6dea81c8171d0ba574754ef6f8b412f2ed88c54d' THEN 'LQTY'
WHEN t.token_b_address::text = '\x3832d2f059e55934220881f831be501d180671a7' THEN 'renDOGE'
WHEN t.token_b_address::text = '\xf16e4d813f4dcfde4c5b44f305c908742de84ef0' THEN 'ETH2x ADL'
WHEN t.token_b_address::text = '\x77fba179c79de5b7653f68b5039af940ada60ce0' THEN 'FORTH'
WHEN t.token_b_address::text = '\xf65b5c5104c4fafd4b709d9d60a185eae063276c' THEN 'TRU'
WHEN t.token_b_address::text = '\xc7283b66eb1eb5fb86327f08e1b5816b0720212b' THEN 'TRIBE'
WHEN t.token_b_address::text = '\xc8807f0f5ba3fa45ffbdc66928d71c5289249014' THEN 'ISP'
ELSE COALESCE(t.token_b_symbol,t.token_b_address::text)
END AS token_b
,t.token_a_amount
,t.token_b_amount
,t.exchange_contract_address -- exchange_contract_address is the v3 LP Position
,t.tx_hash -- transaction addr (for spot checks)
,t.usd_amount --TODO: Find some way to pull in USD of any missing tokens
,c.fee/1e6 AS fee_tier --Converting fee tier to a multiplier (i.e. for 0.3%, 3000 -> 0.003)
,t.usd_amount*(c.fee/1e6) AS fees_collected_usd --USD Amount * %fee = fees collected
FROM dex.""trades"" t

LEFT JOIN uniswap_v3.""Factory_call_createPool"" c --1. Join With Pool creation on LP contract address to pull fee tier
ON t.exchange_contract_address = c.output_pool
WHERE t.project = 'Uniswap'
AND t.version = '3'
AND block_time >= (DATE_TRUNC('day',CURRENT_TIMESTAMP) - '6 days'::INTERVAL)
AND t.block_time >= '05-05-2021 17:00' -- Uni v3 launch date/hr

ORDER BY t.block_time DESC
),

sum_pairs AS( -- Using this to decide which trading pair order to pick (i.e WBTC/USDC vs USDC/WBTC). We'll pick the one with the greatest usd volume.
--starting set
SELECT 
CONCAT(token_a,'/',token_b) AS forward_pair -- Trading pair
,CONCAT(token_b,'/',token_a) AS backward_pair -- For joining buys/sells later
,SUM(usd_amount) AS sum_usd
FROM all_trades
GROUP BY 1,2
),

final_trading_pairs AS( --building the mapping table for pairs
SELECT
a.forward_pair, a.backward_pair,
a.sum_usd,b.sum_usd,
CASE
WHEN RIGHT(a.backward_pair,4)='WETH' THEN a.forward_pair -- if the backward version ends in WETH, do forward
WHEN RIGHT(a.forward_pair,4)='WETH' THEN a.backward_pair
WHEN RIGHT(a.backward_pair,4)='WBTC' THEN a.forward_pair
WHEN RIGHT(a.forward_pair,4)='WBTC' THEN a.backward_pair
WHEN (a.sum_usd >= b.sum_usd) -- when a > b
OR b.sum_usd IS NULL -- or if backward usd is null
THEN a.forward_pair -- select forward
ELSE a.backward_pair --else select backward in every other circumstance
END AS trading_pair

FROM sum_pairs a
LEFT JOIN sum_pairs b
ON a.forward_pair = b.backward_pair
),

v3_trades AS (  --clean table of trades to work with for building visuals
SELECT
atx.block_time,
COALESCE(f1.trading_pair,f2.trading_pair) AS trading_pair,
atx.usd_amount,
atx.fee_tier,
atx.fees_collected_usd,
atx.tx_hash
FROM all_trades atx

LEFT JOIN final_trading_pairs f1 --check if the pair maps with the forward version
ON CONCAT(atx.token_a,'/',atx.token_b) = f1.forward_pair
LEFT JOIN final_trading_pairs f2 --check if the pair maps with the backward version
ON CONCAT(atx.token_a,'/',atx.token_b) = f2.backward_pair
)

SELECT
trading_pair
,COUNT(trading_pair) AS num_trades
--,SUM(usd_amount) AS total_usd
,SUM(fees_collected_usd) AS total_fees_usd
--,fee_tier
FROM v3_trades
WHERE usd_amount IS NOT NULL -- Eventually see if Dune adds new tokens, or we need to manually
GROUP BY trading_pair--, fee_tier
ORDER BY SUM(fees_collected_usd) DESC
"
44630,Uniswap v3 Fees Formatted,,"[{""id"": 87334, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-05-09T02:59:33.855248+00:00"", ""__typename"": ""visualizations""}, {""id"": 87335, ""type"": ""table"", ""name"": ""Last 7 Days - Sorted by Total Fees, Split by Fee Tier"", ""options"": {""columns"": [{""name"": ""trading_pair"", ""title"": ""Trading Pair""}, {""name"": ""num_trades"", ""title"": ""# of Trades"", ""numberFormat"": "",""}, {""name"": ""total_usd"", ""title"": ""USD Volume"", ""numberFormat"": ""$0,.00""}, {""name"": ""total_fees_usd"", ""title"": ""Total Fees (USD)"", ""numberFormat"": ""$0,.00""}, {""name"": ""fee_tier"", ""title"": ""Fee Tier"", ""numberFormat"": ""0.00%""}]}, ""created_at"": ""2021-05-09T02:59:33.855248+00:00"", ""__typename"": ""visualizations""}, {""id"": 87336, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack"", ""percentValues"": true}, ""reverseX"": false, ""columnMapping"": {""fee_tier"": ""series"", ""total_usd"": ""y"", ""trading_pair"": ""x""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2021-05-09T02:59:33.855248+00:00"", ""__typename"": ""visualizations""}, {""id"": 87337, ""type"": ""chart"", ""name"": ""Total Trading Volume by Fees Collected (Last 7 Days)"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""USD Volume""}}, ""yAxis"": [{""type"": ""-"", ""title"": {""text"": ""Fees""}}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""$,"", ""columnMapping"": {"""": ""y"", ""total_usd"": ""x"", ""trading_pair"": ""series"", ""total_fees_usd"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""scatter""}, ""created_at"": ""2021-05-09T02:59:33.855248+00:00"", ""__typename"": ""visualizations""}, {""id"": 87338, ""type"": ""chart"", ""name"": ""Last 7 Days - Total Trading Volume by Fee Tier"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""$,"", ""columnMapping"": {""fee_tier"": ""x"", ""total_usd"": ""y"", ""fee_tier_format"": ""x""}, ""seriesOptions"": {""total_usd"": {""name"": ""USD Volume"", ""type"": ""pie"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2021-05-09T02:59:33.855248+00:00"", ""__typename"": ""visualizations""}, {""id"": 87339, ""type"": ""chart"", ""name"": ""Total Trading Volume by Fee Tier"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""numberFormat"": ""$,"", ""columnMapping"": {""fee_tier"": ""x"", ""total_usd"": ""y"", ""trading_pair"": ""series""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2021-05-09T02:59:33.855248+00:00"", ""__typename"": ""visualizations""}]","WITH all_trades AS
(SELECT
t.block_time,
CASE --filling in missing addresses for coins. Maybe not worth keeping up, some are memes.
WHEN t.token_a_address::text = '\x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce' THEN 'SHIB'
WHEN t.token_a_address::text = '\x761d38e5ddf6ccf6cf7c55759d5210750b5d60f3' THEN 'ELON'
WHEN t.token_a_address::text = '\x3301ee63fb29f863f2333bd4466acb46cd8323e6' THEN 'AKITA'
WHEN t.token_a_address::text = 'x5218e472cfcfe0b64a064f055b43b4cdc9efd3a6' THEN 'eRSDL'
WHEN t.token_a_address::text = '\x1453dbb8a29551ade11d89825ca812e05317eaeb' THEN 'TEND'
WHEN t.token_a_address::text = '\x35a532d376ffd9a705d0bb319532837337a398e7' THEN 'WDOGE'
WHEN t.token_a_address::text = '\x17ef75aa22dd5f6c2763b8304ab24f40ee54d48a' THEN 'RVP'
WHEN t.token_a_address::text = '\x6dea81c8171d0ba574754ef6f8b412f2ed88c54d' THEN 'LQTY'
WHEN t.token_a_address::text = '\x3832d2f059e55934220881f831be501d180671a7' THEN 'renDOGE'
WHEN t.token_a_address::text = '\xf16e4d813f4dcfde4c5b44f305c908742de84ef0' THEN 'ETH2x ADL'
WHEN t.token_a_address::text = '\x77fba179c79de5b7653f68b5039af940ada60ce0' THEN 'FORTH'
WHEN t.token_a_address::text = '\xf65b5c5104c4fafd4b709d9d60a185eae063276c' THEN 'TRU'
WHEN t.token_a_address::text = '\xc7283b66eb1eb5fb86327f08e1b5816b0720212b' THEN 'TRIBE'
WHEN t.token_a_address::text = '\xc8807f0f5ba3fa45ffbdc66928d71c5289249014' THEN 'ISP'
ELSE COALESCE(t.token_a_symbol,t.token_a_address::text)
END AS token_a,
CASE --filling in missing addresses for coins. Maybe not worth keeping up, some are memes.
WHEN t.token_b_address::text = '\x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce' THEN 'SHIB'
WHEN t.token_b_address::text = '\x761d38e5ddf6ccf6cf7c55759d5210750b5d60f3' THEN 'ELON'
WHEN t.token_b_address::text = '\x3301ee63fb29f863f2333bd4466acb46cd8323e6' THEN 'AKITA'
WHEN t.token_b_address::text = 'x5218e472cfcfe0b64a064f055b43b4cdc9efd3a6' THEN 'eRSDL'
WHEN t.token_b_address::text = '\x1453dbb8a29551ade11d89825ca812e05317eaeb' THEN 'TEND'
WHEN t.token_b_address::text = '\x35a532d376ffd9a705d0bb319532837337a398e7' THEN 'WDOGE'
WHEN t.token_b_address::text = '\x17ef75aa22dd5f6c2763b8304ab24f40ee54d48a' THEN 'RVP'
WHEN t.token_b_address::text = '\x6dea81c8171d0ba574754ef6f8b412f2ed88c54d' THEN 'LQTY'
WHEN t.token_b_address::text = '\x3832d2f059e55934220881f831be501d180671a7' THEN 'renDOGE'
WHEN t.token_b_address::text = '\xf16e4d813f4dcfde4c5b44f305c908742de84ef0' THEN 'ETH2x ADL'
WHEN t.token_b_address::text = '\x77fba179c79de5b7653f68b5039af940ada60ce0' THEN 'FORTH'
WHEN t.token_b_address::text = '\xf65b5c5104c4fafd4b709d9d60a185eae063276c' THEN 'TRU'
WHEN t.token_b_address::text = '\xc7283b66eb1eb5fb86327f08e1b5816b0720212b' THEN 'TRIBE'
WHEN t.token_b_address::text = '\xc8807f0f5ba3fa45ffbdc66928d71c5289249014' THEN 'ISP'
ELSE COALESCE(t.token_b_symbol,t.token_b_address::text)
END AS token_b
,t.token_a_amount
,t.token_b_amount
,t.exchange_contract_address -- exchange_contract_address is the v3 LP Position
,t.tx_hash -- transaction addr (for spot checks)
,t.usd_amount --TODO: Find some way to pull in USD of any missing tokens
,c.fee/1e6 AS fee_tier --Converting fee tier to a multiplier (i.e. for 0.3%, 3000 -> 0.003)
,t.usd_amount*(c.fee/1e6) AS fees_collected_usd --USD Amount * %fee = fees collected
FROM dex.""trades"" t

LEFT JOIN uniswap_v3.""Factory_call_createPool"" c --1. Join With Pool creation on LP contract address to pull fee tier
ON t.exchange_contract_address = c.output_pool
WHERE t.project = 'Uniswap'
AND t.version = '3'
AND t.block_time >= (DATE_TRUNC('day',CURRENT_TIMESTAMP) - '6 days'::INTERVAL)
AND t.block_time >= '05-05-2021 17:00' -- Uni v3 launch date/hr

ORDER BY t.block_time DESC
),
sum_pairs AS( -- Using this to decide which trading pair order to pick (i.e WBTC/USDC vs USDC/WBTC). We'll pick the one with the greatest usd volume.
--starting set
SELECT 
CONCAT(token_a,'/',token_b) AS forward_pair -- Trading pair
,CONCAT(token_b,'/',token_a) AS backward_pair -- For joining buys/sells later
,SUM(usd_amount) AS sum_usd
FROM all_trades
GROUP BY 1,2
),
final_trading_pairs AS( --building the mapping table for pairs
SELECT
a.forward_pair, a.backward_pair,
a.sum_usd,b.sum_usd,
CASE
WHEN RIGHT(a.backward_pair,4)='WETH' THEN a.forward_pair -- if the backward version ends in WETH, do forward
WHEN RIGHT(a.forward_pair,4)='WETH' THEN a.backward_pair
WHEN RIGHT(a.backward_pair,4)='WBTC' THEN a.forward_pair
WHEN RIGHT(a.forward_pair,4)='WBTC' THEN a.backward_pair
WHEN (a.sum_usd >= b.sum_usd) -- when a > b
OR b.sum_usd IS NULL -- or if backward usd is null
THEN a.forward_pair -- select forward
ELSE a.backward_pair --else select backward in every other circumstance
END AS trading_pair

FROM sum_pairs a
LEFT JOIN sum_pairs b
ON a.forward_pair = b.backward_pair
),
v3_trades AS (  --clean table of trades to work with for building visuals
SELECT
atx.block_time,
COALESCE(f1.trading_pair,f2.trading_pair) AS trading_pair,
atx.usd_amount,
atx.fee_tier,
atx.fees_collected_usd,
atx.tx_hash
FROM all_trades atx

LEFT JOIN final_trading_pairs f1 --check if the pair maps with the forward version
ON CONCAT(atx.token_a,'/',atx.token_b) = f1.forward_pair
LEFT JOIN final_trading_pairs f2 --check if the pair maps with the backward version
ON CONCAT(atx.token_a,'/',atx.token_b) = f2.backward_pair
)

SELECT
trading_pair
,COUNT(trading_pair) AS num_trades
,SUM(usd_amount) AS total_usd
,SUM(fees_collected_usd) AS total_fees_usd
,
CASE WHEN fee_tier = 0.01 THEN '1.00%'
WHEN fee_tier = 0.003 THEN '0.30%'
WHEN fee_tier = 0.0005 THEN '0.05%'
ELSE 'n/a'
END AS fee_tier_format
FROM v3_trades
WHERE usd_amount IS NOT NULL -- Eventually see if Dune adds new tokens, or we need to manually
GROUP BY trading_pair, fee_tier
ORDER BY SUM(fees_collected_usd) DESC
"
44618,Uniswap v3 Time Series,,"[{""id"": 87311, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-05-09T02:29:03.28922+00:00"", ""__typename"": ""visualizations""}, {""id"": 87312, ""type"": ""table"", ""name"": ""Last 7 Days - Sorted by USD Volume"", ""options"": {""columns"": [{""name"": ""trading_pair"", ""title"": ""Trading Pair""}, {""name"": ""num_trades"", ""title"": ""# of Trades"", ""numberFormat"": "",""}, {""name"": ""total_usd"", ""title"": ""USD Volume"", ""numberFormat"": ""$0,.00""}, {""name"": ""total_fees_usd"", ""title"": ""Total Fees (USD)"", ""numberFormat"": ""$0,.00""}, {""name"": ""fee_tier"", ""title"": ""Fee Tier"", ""numberFormat"": ""0.00%""}]}, ""created_at"": ""2021-05-09T02:29:03.28922+00:00"", ""__typename"": ""visualizations""}, {""id"": 87313, ""type"": ""chart"", ""name"": ""Hourly Volume and Fees"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""USD Volume""}}], ""legend"": {""enabled"": false}, ""series"": {""stacking"": null}, ""reverseX"": false, ""numberFormat"": ""$,"", ""columnMapping"": {"""": ""y"", ""day_hr"": ""x"", ""total_usd"": ""y"", ""total_fees_usd"": ""y""}, ""seriesOptions"": {""total_usd"": {""name"": ""Volume"", ""type"": ""area"", ""yAxis"": 0, ""zIndex"": 0}, ""total_fees_usd"": {""name"": ""Fees"", ""type"": ""area"", ""yAxis"": 1, ""zIndex"": 1}}, ""valuesOptions"": {}, ""showDataLabels"": false, ""globalSeriesType"": ""area""}, ""created_at"": ""2021-05-09T02:31:34.595885+00:00"", ""__typename"": ""visualizations""}]","WITH all_trades AS
(SELECT
t.block_time,
CASE --filling in missing addresses for coins. Maybe not worth keeping up, some are memes.
WHEN t.token_a_address::text = '\x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce' THEN 'SHIB'
WHEN t.token_a_address::text = '\x761d38e5ddf6ccf6cf7c55759d5210750b5d60f3' THEN 'ELON'
WHEN t.token_a_address::text = '\x3301ee63fb29f863f2333bd4466acb46cd8323e6' THEN 'AKITA'
WHEN t.token_a_address::text = 'x5218e472cfcfe0b64a064f055b43b4cdc9efd3a6' THEN 'eRSDL'
WHEN t.token_a_address::text = '\x1453dbb8a29551ade11d89825ca812e05317eaeb' THEN 'TEND'
WHEN t.token_a_address::text = '\x35a532d376ffd9a705d0bb319532837337a398e7' THEN 'WDOGE'
WHEN t.token_a_address::text = '\x17ef75aa22dd5f6c2763b8304ab24f40ee54d48a' THEN 'RVP'
WHEN t.token_a_address::text = '\x6dea81c8171d0ba574754ef6f8b412f2ed88c54d' THEN 'LQTY'
WHEN t.token_a_address::text = '\x3832d2f059e55934220881f831be501d180671a7' THEN 'renDOGE'
WHEN t.token_a_address::text = '\xf16e4d813f4dcfde4c5b44f305c908742de84ef0' THEN 'ETH2x ADL'
WHEN t.token_a_address::text = '\x77fba179c79de5b7653f68b5039af940ada60ce0' THEN 'FORTH'
WHEN t.token_a_address::text = '\xf65b5c5104c4fafd4b709d9d60a185eae063276c' THEN 'TRU'
WHEN t.token_a_address::text = '\xc7283b66eb1eb5fb86327f08e1b5816b0720212b' THEN 'TRIBE'
WHEN t.token_a_address::text = '\xc8807f0f5ba3fa45ffbdc66928d71c5289249014' THEN 'ISP'
ELSE COALESCE(t.token_a_symbol,t.token_a_address::text)
END AS token_a,
CASE --filling in missing addresses for coins. Maybe not worth keeping up, some are memes.
WHEN t.token_b_address::text = '\x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce' THEN 'SHIB'
WHEN t.token_b_address::text = '\x761d38e5ddf6ccf6cf7c55759d5210750b5d60f3' THEN 'ELON'
WHEN t.token_b_address::text = '\x3301ee63fb29f863f2333bd4466acb46cd8323e6' THEN 'AKITA'
WHEN t.token_b_address::text = 'x5218e472cfcfe0b64a064f055b43b4cdc9efd3a6' THEN 'eRSDL'
WHEN t.token_b_address::text = '\x1453dbb8a29551ade11d89825ca812e05317eaeb' THEN 'TEND'
WHEN t.token_b_address::text = '\x35a532d376ffd9a705d0bb319532837337a398e7' THEN 'WDOGE'
WHEN t.token_b_address::text = '\x17ef75aa22dd5f6c2763b8304ab24f40ee54d48a' THEN 'RVP'
WHEN t.token_b_address::text = '\x6dea81c8171d0ba574754ef6f8b412f2ed88c54d' THEN 'LQTY'
WHEN t.token_b_address::text = '\x3832d2f059e55934220881f831be501d180671a7' THEN 'renDOGE'
WHEN t.token_b_address::text = '\xf16e4d813f4dcfde4c5b44f305c908742de84ef0' THEN 'ETH2x ADL'
WHEN t.token_b_address::text = '\x77fba179c79de5b7653f68b5039af940ada60ce0' THEN 'FORTH'
WHEN t.token_b_address::text = '\xf65b5c5104c4fafd4b709d9d60a185eae063276c' THEN 'TRU'
WHEN t.token_b_address::text = '\xc7283b66eb1eb5fb86327f08e1b5816b0720212b' THEN 'TRIBE'
WHEN t.token_b_address::text = '\xc8807f0f5ba3fa45ffbdc66928d71c5289249014' THEN 'ISP'
ELSE COALESCE(t.token_b_symbol,t.token_b_address::text)
END AS token_b
,t.token_a_amount
,t.token_b_amount
,t.exchange_contract_address -- exchange_contract_address is the v3 LP Position
,t.tx_hash -- transaction addr (for spot checks)
,t.usd_amount --TODO: Find some way to pull in USD of any missing tokens
,c.fee/1e6 AS fee_tier --Converting fee tier to a multiplier (i.e. for 0.3%, 3000 -> 0.003)
,t.usd_amount*(c.fee/1e6) AS fees_collected_usd --USD Amount * %fee = fees collected
FROM dex.""trades"" t

LEFT JOIN uniswap_v3.""Factory_call_createPool"" c --1. Join With Pool creation on LP contract address to pull fee tier
ON t.exchange_contract_address = c.output_pool
WHERE t.project = 'Uniswap'
AND t.version = '3'
AND t.block_time >= (DATE_TRUNC('day',CURRENT_TIMESTAMP) - '6 days'::INTERVAL)
AND t.block_time >= '05-05-2021 17:00' -- Uni v3 launch date/hr
ORDER BY t.block_time DESC
),
sum_pairs AS( -- Using this to decide which trading pair order to pick (i.e WBTC/USDC vs USDC/WBTC). We'll pick the one with the greatest usd volume.
--starting set
SELECT 
CONCAT(token_a,'/',token_b) AS forward_pair -- Trading pair
,CONCAT(token_b,'/',token_a) AS backward_pair -- For joining buys/sells later
,SUM(usd_amount) AS sum_usd
FROM all_trades
GROUP BY 1,2
),

final_trading_pairs AS( --building the mapping table for pairs
SELECT
a.forward_pair, a.backward_pair,
a.sum_usd,b.sum_usd,
CASE
WHEN RIGHT(a.backward_pair,4)='WETH' THEN a.forward_pair -- if the backward version ends in WETH, do forward
WHEN RIGHT(a.forward_pair,4)='WETH' THEN a.backward_pair
WHEN RIGHT(a.backward_pair,4)='WBTC' THEN a.forward_pair
WHEN RIGHT(a.forward_pair,4)='WBTC' THEN a.backward_pair
WHEN (a.sum_usd >= b.sum_usd) -- when a > b
OR b.sum_usd IS NULL -- or if backward usd is null
THEN a.forward_pair -- select forward
ELSE a.backward_pair --else select backward in every other circumstance
END AS trading_pair

FROM sum_pairs a
LEFT JOIN sum_pairs b
ON a.forward_pair = b.backward_pair
),

v3_trades AS ( --clean table of trades to work with for building visuals
SELECT
atx.block_time,
COALESCE(f1.trading_pair,f2.trading_pair) AS trading_pair, --pick the mapped trading pair (see joins)
atx.usd_amount,
atx.fee_tier,
atx.fees_collected_usd,
atx.tx_hash
FROM all_trades atx

LEFT JOIN final_trading_pairs f1 --check if the pair maps with the forward version
ON CONCAT(atx.token_a,'/',atx.token_b) = f1.forward_pair
LEFT JOIN final_trading_pairs f2 --check if the pair maps with the backward version
ON CONCAT(atx.token_a,'/',atx.token_b) = f2.backward_pair
)

SELECT
DATE_TRUNC('hour',block_time) AS day_hr
--trading_pair
,COUNT(trading_pair) AS num_trades
,SUM(usd_amount) AS total_usd
,SUM(fees_collected_usd) AS total_fees_usd
--,fee_tier
FROM v3_trades
WHERE usd_amount IS NOT NULL -- Eventually see if Dune adds new tokens, or we need to manually
GROUP BY DATE_TRUNC('hour',block_time)--,trading_pair--, fee_tier
ORDER BY SUM(usd_amount) DESC
"
1074868,Loot Overview,,"[{""id"": 1843977, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""Floor (Approx)"", ""alignContent"": ""center"", ""numberFormat"": ""0.00""}, {""name"": ""Floor"", ""alignContent"": ""center"", ""numberFormat"": ""0.00""}]}, ""created_at"": ""2022-07-20T18:36:38.206807+00:00"", ""__typename"": ""visualizations""}, {""id"": 1843978, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-07-20T18:36:38.206807+00:00"", ""__typename"": ""visualizations""}, {""id"": 1843979, ""type"": ""chart"", ""name"": """", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}}, ""yAxis"": [{""type"": ""-"", ""title"": {""text"": ""Volume (ETH)""}, ""tickFormat"": """"}, {""type"": ""-"", ""title"": {""text"": ""Floor Price (ETH)""}, ""tickFormat"": """"}], ""legend"": {""enabled"": false}, ""series"": {""stacking"": null, ""percentValues"": false}, ""reverseX"": false, ""numberFormat"": ""#,#.##"", ""columnMapping"": {"""": ""y"", ""Day"": ""x"", ""Floor"": ""y"", ""Floor \u2666"": ""y"", ""Volume \u039e"": ""y"", ""Volume \u2666"": ""y"", ""Floor Price \u039e"": ""y"", ""Median Price \u039e"": ""y"", ""10% Percentile Price \u039e"": ""y"", ""90% Percentile Price \u039e"": ""y""}, ""seriesOptions"": {""Volume \u039e"": {""name"": ""Volume (ETH)"", ""type"": ""column"", ""color"": ""#b8b8f8"", ""yAxis"": 0, ""zIndex"": 2}, ""Median Price \u039e"": {""name"": ""Median Price (ETH)"", ""type"": ""line"", ""color"": ""#f80bd6"", ""yAxis"": 1, ""zIndex"": 1}, ""10% Percentile Price \u039e"": {""name"": ""10% Percentile Price (ETH)"", ""type"": ""line"", ""color"": ""#000fff"", ""yAxis"": 1, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": false, ""globalSeriesType"": ""column"", ""numberFormatRightYAxisSeries"": ""#,#.##""}, ""created_at"": ""2022-07-20T18:36:38.206807+00:00"", ""__typename"": ""visualizations""}]","--Loot 10% percentile price, Median Price and Volume--
SELECT 
    date_trunc('day', block_time) as ""Day"",
    percentile_cont(.1) within group (order by original_amount) as ""10% Percentile Price Ξ"",
    percentile_cont(.5) within group (order by original_amount) as ""Median Price Ξ"",
    sum(original_amount) as ""Volume Ξ""
FROM nft.trades nftt

WHERE nftt.""original_currency"" IN ('ETH', 'WETH') AND number_of_items = 1 
AND nft_contract_address = CONCAT('\x', substring('0xff9c1b15b16263c61d017ee9f65c50e4ae0113d7' from 3))::bytea 
AND block_time >  NOW() - INTERVAL '{{Days}} DAY' 
group by ""Day""
order by ""Day"" DESC"
1045736,Invisible Friends Overview,,"[{""id"": 1802901, ""type"": ""chart"", ""name"": """", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}}, ""yAxis"": [{""type"": ""-"", ""title"": {""text"": ""Volume (ETH)""}, ""tickFormat"": """"}, {""type"": ""-"", ""title"": {""text"": ""Floor Price (ETH)""}, ""tickFormat"": """"}], ""legend"": {""enabled"": false}, ""series"": {""stacking"": null, ""percentValues"": false}, ""reverseX"": false, ""numberFormat"": ""#,#.##"", ""columnMapping"": {"""": ""y"", ""Day"": ""x"", ""Floor"": ""y"", ""Floor \u2666"": ""y"", ""Volume \u039e"": ""y"", ""Volume \u2666"": ""y"", ""Floor Price \u039e"": ""y"", ""Median Price \u039e"": ""y"", ""10% Percentile Price \u039e"": ""y"", ""90% Percentile Price \u039e"": ""y""}, ""seriesOptions"": {""Volume \u039e"": {""name"": ""Volume (ETH)"", ""type"": ""column"", ""color"": ""#b8b8f8"", ""yAxis"": 0, ""zIndex"": 2}, ""Median Price \u039e"": {""name"": ""Median Price (ETH)"", ""type"": ""line"", ""color"": ""#f80bd6"", ""yAxis"": 1, ""zIndex"": 1}, ""10% Percentile Price \u039e"": {""name"": ""10% Percentile Price (ETH)"", ""type"": ""line"", ""color"": ""#000fff"", ""yAxis"": 1, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": false, ""globalSeriesType"": ""column"", ""numberFormatRightYAxisSeries"": ""#,#.##""}, ""created_at"": ""2022-07-15T17:52:54.40413+00:00"", ""__typename"": ""visualizations""}, {""id"": 1802899, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-07-15T17:52:54.40413+00:00"", ""__typename"": ""visualizations""}, {""id"": 1802900, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""Floor (Approx)"", ""alignContent"": ""center"", ""numberFormat"": ""0.00""}, {""name"": ""Floor"", ""alignContent"": ""center"", ""numberFormat"": ""0.00""}]}, ""created_at"": ""2022-07-15T17:52:54.40413+00:00"", ""__typename"": ""visualizations""}]","--Invisible Friends 10% percentile price, Median Price and Volume--
SELECT 
    date_trunc('day', block_time) as ""Day"",
    percentile_cont(.1) within group (order by original_amount) as ""10% Percentile Price Ξ"",
    percentile_cont(.5) within group (order by original_amount) as ""Median Price Ξ"",
    sum(original_amount) as ""Volume Ξ""
FROM nft.trades nftt

WHERE nftt.""original_currency"" IN ('ETH', 'WETH') AND number_of_items = 1 
AND nft_contract_address = CONCAT('\x', substring('0x59468516a8259058bad1ca5f8f4bff190d30e066' from 3))::bytea 
AND block_time >  NOW() - INTERVAL '{{Days}} DAY' 
group by ""Day""
order by ""Day"" DESC"
1074687,Sandbox Overview,,"[{""id"": 1843720, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-07-20T17:57:54.215821+00:00"", ""__typename"": ""visualizations""}, {""id"": 1843721, ""type"": ""chart"", ""name"": """", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}}, ""yAxis"": [{""type"": ""-"", ""title"": {""text"": ""Volume (ETH)""}, ""tickFormat"": """"}, {""type"": ""-"", ""title"": {""text"": ""Floor Price (ETH)""}, ""tickFormat"": """"}], ""legend"": {""enabled"": false}, ""series"": {""stacking"": null, ""percentValues"": false}, ""reverseX"": false, ""numberFormat"": ""#,#.##"", ""columnMapping"": {"""": ""y"", ""Day"": ""x"", ""Floor"": ""y"", ""Floor \u2666"": ""y"", ""Volume \u039e"": ""y"", ""Volume \u2666"": ""y"", ""Floor Price \u039e"": ""y"", ""Median Price \u039e"": ""y"", ""10% Percentile Price \u039e"": ""y"", ""90% Percentile Price \u039e"": ""y""}, ""seriesOptions"": {""Volume \u039e"": {""name"": ""Volume (ETH)"", ""type"": ""column"", ""color"": ""#b8b8f8"", ""yAxis"": 0, ""zIndex"": 2}, ""Median Price \u039e"": {""name"": ""Median Price (ETH)"", ""type"": ""line"", ""color"": ""#f80bd6"", ""yAxis"": 1, ""zIndex"": 1}, ""10% Percentile Price \u039e"": {""name"": ""10% Percentile Price (ETH)"", ""type"": ""line"", ""color"": ""#000fff"", ""yAxis"": 1, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": false, ""globalSeriesType"": ""column"", ""numberFormatRightYAxisSeries"": ""#,#.##""}, ""created_at"": ""2022-07-20T17:57:54.215821+00:00"", ""__typename"": ""visualizations""}, {""id"": 1843722, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""Floor (Approx)"", ""alignContent"": ""center"", ""numberFormat"": ""0.00""}, {""name"": ""Floor"", ""alignContent"": ""center"", ""numberFormat"": ""0.00""}]}, ""created_at"": ""2022-07-20T17:57:54.215821+00:00"", ""__typename"": ""visualizations""}]","--Sandbox 10% percentile price, Median Price and Volume--
SELECT 
    date_trunc('day', block_time) as ""Day"",
    percentile_cont(.1) within group (order by original_amount) as ""10% Percentile Price Ξ"",
    percentile_cont(.5) within group (order by original_amount) as ""Median Price Ξ"",
    sum(original_amount) as ""Volume Ξ""
FROM nft.trades nftt

WHERE nftt.""original_currency"" IN ('ETH', 'WETH') AND number_of_items = 1 
AND nft_contract_address = CONCAT('\x', substring('0x5cc5b05a8a13e3fbdb0bb9fccd98d38e50f90c38' from 3))::bytea 
AND block_time >  NOW() - INTERVAL '{{Days}} DAY' 
group by ""Day""
order by ""Day"" DESC"
1074680,BAKC Overview,,"[{""id"": 1843706, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-07-20T17:56:03.561755+00:00"", ""__typename"": ""visualizations""}, {""id"": 1843707, ""type"": ""chart"", ""name"": """", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}}, ""yAxis"": [{""type"": ""-"", ""title"": {""text"": ""Volume (ETH)""}, ""tickFormat"": """"}, {""type"": ""-"", ""title"": {""text"": ""Floor Price (ETH)""}, ""tickFormat"": """"}], ""legend"": {""enabled"": false}, ""series"": {""stacking"": null, ""percentValues"": false}, ""reverseX"": false, ""numberFormat"": ""#,#.##"", ""columnMapping"": {"""": ""y"", ""Day"": ""x"", ""Floor"": ""y"", ""Floor \u2666"": ""y"", ""Volume \u039e"": ""y"", ""Volume \u2666"": ""y"", ""Floor Price \u039e"": ""y"", ""Median Price \u039e"": ""y"", ""10% Percentile Price \u039e"": ""y"", ""90% Percentile Price \u039e"": ""y""}, ""seriesOptions"": {""Volume \u039e"": {""name"": ""Volume (ETH)"", ""type"": ""column"", ""color"": ""#b8b8f8"", ""yAxis"": 0, ""zIndex"": 2}, ""Median Price \u039e"": {""name"": ""Median Price (ETH)"", ""type"": ""line"", ""color"": ""#f80bd6"", ""yAxis"": 1, ""zIndex"": 1}, ""10% Percentile Price \u039e"": {""name"": ""10% Percentile Price (ETH)"", ""type"": ""line"", ""color"": ""#000fff"", ""yAxis"": 1, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": false, ""globalSeriesType"": ""column"", ""numberFormatRightYAxisSeries"": ""#,#.##""}, ""created_at"": ""2022-07-20T17:56:03.561755+00:00"", ""__typename"": ""visualizations""}, {""id"": 1843708, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""Floor (Approx)"", ""alignContent"": ""center"", ""numberFormat"": ""0.00""}, {""name"": ""Floor"", ""alignContent"": ""center"", ""numberFormat"": ""0.00""}]}, ""created_at"": ""2022-07-20T17:56:03.561755+00:00"", ""__typename"": ""visualizations""}]","--BAKC 10% percentile price, Median Price and Volume--
SELECT 
    date_trunc('day', block_time) as ""Day"",
    percentile_cont(.1) within group (order by original_amount) as ""10% Percentile Price Ξ"",
    percentile_cont(.5) within group (order by original_amount) as ""Median Price Ξ"",
    sum(original_amount) as ""Volume Ξ""
FROM nft.trades nftt

WHERE nftt.""original_currency"" IN ('ETH', 'WETH') AND number_of_items = 1 
AND nft_contract_address = CONCAT('\x', substring('0xba30e5f9bb24caa003e9f2f0497ad287fdf95623' from 3))::bytea 
AND block_time >  NOW() - INTERVAL '{{Days}} DAY' 
group by ""Day""
order by ""Day"" DESC"
1045724, BAYC Overview,,"[{""id"": 1802883, ""type"": ""chart"", ""name"": """", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}}, ""yAxis"": [{""type"": ""-"", ""title"": {""text"": ""Volume (ETH)""}, ""tickFormat"": """"}, {""type"": ""-"", ""title"": {""text"": ""Floor Price (ETH)""}, ""tickFormat"": """"}], ""legend"": {""enabled"": false}, ""series"": {""stacking"": null, ""percentValues"": false}, ""reverseX"": false, ""numberFormat"": ""#,#.##"", ""columnMapping"": {"""": ""y"", ""Day"": ""x"", ""Floor"": ""y"", ""Floor \u2666"": ""y"", ""Volume \u039e"": ""y"", ""Volume \u2666"": ""y"", ""Floor Price \u039e"": ""y"", ""Median Price \u039e"": ""y"", ""10% Percentile Price \u039e"": ""y"", ""90% Percentile Price \u039e"": ""y""}, ""seriesOptions"": {""Volume \u039e"": {""name"": ""Volume (ETH)"", ""type"": ""column"", ""color"": ""#b8b8f8"", ""yAxis"": 0, ""zIndex"": 2}, ""Median Price \u039e"": {""name"": ""Median Price (ETH)"", ""type"": ""line"", ""color"": ""#f80bd6"", ""yAxis"": 1, ""zIndex"": 1}, ""10% Percentile Price \u039e"": {""name"": ""10% Percentile Price (ETH)"", ""type"": ""line"", ""color"": ""#000fff"", ""yAxis"": 1, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": false, ""globalSeriesType"": ""column"", ""numberFormatRightYAxisSeries"": ""#,#.##""}, ""created_at"": ""2022-07-15T17:49:17.472049+00:00"", ""__typename"": ""visualizations""}, {""id"": 1802881, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""Floor (Approx)"", ""alignContent"": ""center"", ""numberFormat"": ""0.00""}, {""name"": ""Floor"", ""alignContent"": ""center"", ""numberFormat"": ""0.00""}]}, ""created_at"": ""2022-07-15T17:49:17.472049+00:00"", ""__typename"": ""visualizations""}, {""id"": 1802882, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-07-15T17:49:17.472049+00:00"", ""__typename"": ""visualizations""}]","--BAYC 10% percentile price, Median Price and Volume--
SELECT 
    date_trunc('day', block_time) as ""Day"",
    percentile_cont(.1) within group (order by original_amount) as ""10% Percentile Price Ξ"",
    percentile_cont(.5) within group (order by original_amount) as ""Median Price Ξ"",
    sum(original_amount) as ""Volume Ξ""
FROM nft.trades nftt

WHERE nftt.""original_currency"" IN ('ETH', 'WETH') AND number_of_items = 1 
AND nft_contract_address = CONCAT('\x', substring('0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d' from 3))::bytea 
AND block_time >  NOW() - INTERVAL '{{Days}} DAY' 
group by ""Day""
order by ""Day"" DESC"
1074794,CryptoPunks Overview,,"[{""id"": 1843861, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""Floor (Approx)"", ""alignContent"": ""center"", ""numberFormat"": ""0.00""}, {""name"": ""Floor"", ""alignContent"": ""center"", ""numberFormat"": ""0.00""}]}, ""created_at"": ""2022-07-20T18:17:14.654324+00:00"", ""__typename"": ""visualizations""}, {""id"": 1843862, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-07-20T18:17:14.654324+00:00"", ""__typename"": ""visualizations""}, {""id"": 1843863, ""type"": ""chart"", ""name"": """", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}}, ""yAxis"": [{""type"": ""-"", ""title"": {""text"": ""Volume (ETH)""}, ""tickFormat"": """"}, {""type"": ""-"", ""title"": {""text"": ""Floor Price (ETH)""}, ""tickFormat"": """"}], ""legend"": {""enabled"": false}, ""series"": {""stacking"": null, ""percentValues"": false}, ""reverseX"": false, ""numberFormat"": ""#,#.##"", ""columnMapping"": {"""": ""y"", ""Day"": ""x"", ""Floor"": ""y"", ""Floor \u2666"": ""y"", ""Volume \u039e"": ""y"", ""Volume \u2666"": ""y"", ""Floor Price \u039e"": ""y"", ""Median Price \u039e"": ""y"", ""10% Percentile Price \u039e"": ""y"", ""90% Percentile Price \u039e"": ""y""}, ""seriesOptions"": {""Volume \u039e"": {""name"": ""Volume (ETH)"", ""type"": ""column"", ""color"": ""#b8b8f8"", ""yAxis"": 0, ""zIndex"": 2}, ""Median Price \u039e"": {""name"": ""Median Price (ETH)"", ""type"": ""line"", ""color"": ""#f80bd6"", ""yAxis"": 1, ""zIndex"": 1}, ""10% Percentile Price \u039e"": {""name"": ""10% Percentile Price (ETH)"", ""type"": ""line"", ""color"": ""#000fff"", ""yAxis"": 1, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": false, ""globalSeriesType"": ""column"", ""numberFormatRightYAxisSeries"": ""#,#.##""}, ""created_at"": ""2022-07-20T18:17:14.654324+00:00"", ""__typename"": ""visualizations""}]","--CryptoPunks 10% percentile price, Median Price and Volume--
SELECT 
    date_trunc('day', block_time) as ""Day"",
    percentile_cont(.1) within group (order by original_amount) as ""10% Percentile Price Ξ"",
    percentile_cont(.5) within group (order by original_amount) as ""Median Price Ξ"",
    sum(original_amount) as ""Volume Ξ""
FROM nft.trades nftt

WHERE nftt.""original_currency"" IN ('ETH', 'WETH') AND number_of_items = 1 
AND nft_contract_address = CONCAT('\x', substring('0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb' from 3))::bytea 
AND block_time >  NOW() - INTERVAL '{{Days}} DAY' 
group by ""Day""
order by ""Day"" DESC"
1074652, Azuki Overview,,"[{""id"": 1843645, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-07-20T17:51:46.063916+00:00"", ""__typename"": ""visualizations""}, {""id"": 1843643, ""type"": ""chart"", ""name"": """", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}}, ""yAxis"": [{""type"": ""-"", ""title"": {""text"": ""Volume (ETH)""}, ""tickFormat"": """"}, {""type"": ""-"", ""title"": {""text"": ""Floor Price (ETH)""}, ""tickFormat"": """"}], ""legend"": {""enabled"": false}, ""series"": {""stacking"": null, ""percentValues"": false}, ""reverseX"": false, ""numberFormat"": ""#,#.##"", ""columnMapping"": {"""": ""y"", ""Day"": ""x"", ""Floor"": ""y"", ""Floor \u2666"": ""y"", ""Volume \u039e"": ""y"", ""Volume \u2666"": ""y"", ""Floor Price \u039e"": ""y"", ""Median Price \u039e"": ""y"", ""10% Percentile Price \u039e"": ""y"", ""90% Percentile Price \u039e"": ""y""}, ""seriesOptions"": {""Volume \u039e"": {""name"": ""Volume (ETH)"", ""type"": ""column"", ""color"": ""#b8b8f8"", ""yAxis"": 0, ""zIndex"": 2}, ""Median Price \u039e"": {""name"": ""Median Price (ETH)"", ""type"": ""line"", ""color"": ""#f80bd6"", ""yAxis"": 1, ""zIndex"": 1}, ""10% Percentile Price \u039e"": {""name"": ""10% Percentile Price (ETH)"", ""type"": ""line"", ""color"": ""#000fff"", ""yAxis"": 1, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": false, ""globalSeriesType"": ""column"", ""numberFormatRightYAxisSeries"": ""#,#.##""}, ""created_at"": ""2022-07-20T17:51:46.063916+00:00"", ""__typename"": ""visualizations""}, {""id"": 1843644, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""Floor (Approx)"", ""alignContent"": ""center"", ""numberFormat"": ""0.00""}, {""name"": ""Floor"", ""alignContent"": ""center"", ""numberFormat"": ""0.00""}]}, ""created_at"": ""2022-07-20T17:51:46.063916+00:00"", ""__typename"": ""visualizations""}]","--Azuki 10% percentile price, Median Price and Volume--
SELECT 
    date_trunc('day', block_time) as ""Day"",
    percentile_cont(.1) within group (order by original_amount) as ""10% Percentile Price Ξ"",
    percentile_cont(.5) within group (order by original_amount) as ""Median Price Ξ"",
    sum(original_amount) as ""Volume Ξ""
FROM nft.trades nftt

WHERE nftt.""original_currency"" IN ('ETH', 'WETH') AND number_of_items = 1 
AND nft_contract_address = CONCAT('\x', substring('0xed5af388653567af2f388e6224dc7c4b3241c544' from 3))::bytea 
AND block_time >  NOW() - INTERVAL '{{Days}} DAY' 
group by ""Day""
order by ""Day"" DESC"
1074670,Meebits Overview,,"[{""id"": 1843689, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-07-20T17:54:22.972955+00:00"", ""__typename"": ""visualizations""}, {""id"": 1843690, ""type"": ""chart"", ""name"": """", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}}, ""yAxis"": [{""type"": ""-"", ""title"": {""text"": ""Volume (ETH)""}, ""tickFormat"": """"}, {""type"": ""-"", ""title"": {""text"": ""Floor Price (ETH)""}, ""tickFormat"": """"}], ""legend"": {""enabled"": false}, ""series"": {""stacking"": null, ""percentValues"": false}, ""reverseX"": false, ""numberFormat"": ""#,#.##"", ""columnMapping"": {"""": ""y"", ""Day"": ""x"", ""Floor"": ""y"", ""Floor \u2666"": ""y"", ""Volume \u039e"": ""y"", ""Volume \u2666"": ""y"", ""Floor Price \u039e"": ""y"", ""Median Price \u039e"": ""y"", ""10% Percentile Price \u039e"": ""y"", ""90% Percentile Price \u039e"": ""y""}, ""seriesOptions"": {""Volume \u039e"": {""name"": ""Volume (ETH)"", ""type"": ""column"", ""color"": ""#b8b8f8"", ""yAxis"": 0, ""zIndex"": 2}, ""Median Price \u039e"": {""name"": ""Median Price (ETH)"", ""type"": ""line"", ""color"": ""#f80bd6"", ""yAxis"": 1, ""zIndex"": 1}, ""10% Percentile Price \u039e"": {""name"": ""10% Percentile Price (ETH)"", ""type"": ""line"", ""color"": ""#000fff"", ""yAxis"": 1, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": false, ""globalSeriesType"": ""column"", ""numberFormatRightYAxisSeries"": ""#,#.##""}, ""created_at"": ""2022-07-20T17:54:22.972955+00:00"", ""__typename"": ""visualizations""}, {""id"": 1843691, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""Floor (Approx)"", ""alignContent"": ""center"", ""numberFormat"": ""0.00""}, {""name"": ""Floor"", ""alignContent"": ""center"", ""numberFormat"": ""0.00""}]}, ""created_at"": ""2022-07-20T17:54:22.972955+00:00"", ""__typename"": ""visualizations""}]","--Meebits 10% percentile price, Median Price and Volume--
SELECT 
    date_trunc('day', block_time) as ""Day"",
    percentile_cont(.1) within group (order by original_amount) as ""10% Percentile Price Ξ"",
    percentile_cont(.5) within group (order by original_amount) as ""Median Price Ξ"",
    sum(original_amount) as ""Volume Ξ""
FROM nft.trades nftt

WHERE nftt.""original_currency"" IN ('ETH', 'WETH') AND number_of_items = 1 
AND nft_contract_address = CONCAT('\x', substring('0x7bd29408f11d2bfc23c34f18275bbf23bb716bc7' from 3))::bytea 
AND block_time >  NOW() - INTERVAL '{{Days}} DAY' 
group by ""Day""
order by ""Day"" DESC"
1074831,NFT Worlds Overview,,"[{""id"": 1843914, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""Floor (Approx)"", ""alignContent"": ""center"", ""numberFormat"": ""0.00""}, {""name"": ""Floor"", ""alignContent"": ""center"", ""numberFormat"": ""0.00""}]}, ""created_at"": ""2022-07-20T18:24:47.317466+00:00"", ""__typename"": ""visualizations""}, {""id"": 1843915, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-07-20T18:24:47.317466+00:00"", ""__typename"": ""visualizations""}, {""id"": 1843916, ""type"": ""chart"", ""name"": """", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}}, ""yAxis"": [{""type"": ""-"", ""title"": {""text"": ""Volume (ETH)""}, ""tickFormat"": """"}, {""type"": ""-"", ""title"": {""text"": ""Floor Price (ETH)""}, ""tickFormat"": """"}], ""legend"": {""enabled"": false}, ""series"": {""stacking"": null, ""percentValues"": false}, ""reverseX"": false, ""numberFormat"": ""#,#.##"", ""columnMapping"": {"""": ""y"", ""Day"": ""x"", ""Floor"": ""y"", ""Floor \u2666"": ""y"", ""Volume \u039e"": ""y"", ""Volume \u2666"": ""y"", ""Floor Price \u039e"": ""y"", ""Median Price \u039e"": ""y"", ""10% Percentile Price \u039e"": ""y"", ""90% Percentile Price \u039e"": ""y""}, ""seriesOptions"": {""Volume \u039e"": {""name"": ""Volume (ETH)"", ""type"": ""column"", ""color"": ""#b8b8f8"", ""yAxis"": 0, ""zIndex"": 2}, ""Median Price \u039e"": {""name"": ""Median Price (ETH)"", ""type"": ""line"", ""color"": ""#f80bd6"", ""yAxis"": 1, ""zIndex"": 1}, ""10% Percentile Price \u039e"": {""name"": ""10% Percentile Price (ETH)"", ""type"": ""line"", ""color"": ""#000fff"", ""yAxis"": 1, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": false, ""globalSeriesType"": ""column"", ""numberFormatRightYAxisSeries"": ""#,#.##""}, ""created_at"": ""2022-07-20T18:24:47.317466+00:00"", ""__typename"": ""visualizations""}]","--NFT Worlds 10% percentile price, Median Price and Volume--
SELECT 
    date_trunc('day', block_time) as ""Day"",
    percentile_cont(.1) within group (order by original_amount) as ""10% Percentile Price Ξ"",
    percentile_cont(.5) within group (order by original_amount) as ""Median Price Ξ"",
    sum(original_amount) as ""Volume Ξ""
FROM nft.trades nftt

WHERE nftt.""original_currency"" IN ('ETH', 'WETH') AND number_of_items = 1 
AND nft_contract_address = CONCAT('\x', substring('0xbd4455da5929d5639ee098abfaa3241e9ae111af' from 3))::bytea 
AND block_time >  NOW() - INTERVAL '{{Days}} DAY' 
group by ""Day""
order by ""Day"" DESC"
1074684,Moonbirds Overview,,"[{""id"": 1843713, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-07-20T17:56:47.433401+00:00"", ""__typename"": ""visualizations""}, {""id"": 1843714, ""type"": ""chart"", ""name"": """", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}}, ""yAxis"": [{""type"": ""-"", ""title"": {""text"": ""Volume (ETH)""}, ""tickFormat"": """"}, {""type"": ""-"", ""title"": {""text"": ""Floor Price (ETH)""}, ""tickFormat"": """"}], ""legend"": {""enabled"": false}, ""series"": {""stacking"": null, ""percentValues"": false}, ""reverseX"": false, ""numberFormat"": ""#,#.##"", ""columnMapping"": {"""": ""y"", ""Day"": ""x"", ""Floor"": ""y"", ""Floor \u2666"": ""y"", ""Volume \u039e"": ""y"", ""Volume \u2666"": ""y"", ""Floor Price \u039e"": ""y"", ""Median Price \u039e"": ""y"", ""10% Percentile Price \u039e"": ""y"", ""90% Percentile Price \u039e"": ""y""}, ""seriesOptions"": {""Volume \u039e"": {""name"": ""Volume (ETH)"", ""type"": ""column"", ""color"": ""#b8b8f8"", ""yAxis"": 0, ""zIndex"": 2}, ""Median Price \u039e"": {""name"": ""Median Price (ETH)"", ""type"": ""line"", ""color"": ""#f80bd6"", ""yAxis"": 1, ""zIndex"": 1}, ""10% Percentile Price \u039e"": {""name"": ""10% Percentile Price (ETH)"", ""type"": ""line"", ""color"": ""#000fff"", ""yAxis"": 1, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": false, ""globalSeriesType"": ""column"", ""numberFormatRightYAxisSeries"": ""#,#.##""}, ""created_at"": ""2022-07-20T17:56:47.433401+00:00"", ""__typename"": ""visualizations""}, {""id"": 1843715, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""Floor (Approx)"", ""alignContent"": ""center"", ""numberFormat"": ""0.00""}, {""name"": ""Floor"", ""alignContent"": ""center"", ""numberFormat"": ""0.00""}]}, ""created_at"": ""2022-07-20T17:56:47.433401+00:00"", ""__typename"": ""visualizations""}]","--Moonbirds 10% percentile price, Median Price and Volume--
SELECT 
    date_trunc('day', block_time) as ""Day"",
    percentile_cont(.1) within group (order by original_amount) as ""10% Percentile Price Ξ"",
    percentile_cont(.5) within group (order by original_amount) as ""Median Price Ξ"",
    sum(original_amount) as ""Volume Ξ""
FROM nft.trades nftt

WHERE nftt.""original_currency"" IN ('ETH', 'WETH') AND number_of_items = 1 
AND nft_contract_address = CONCAT('\x', substring('0x23581767a106ae21c074b2276D25e5C3e136a68b' from 3))::bytea 
AND block_time >  NOW() - INTERVAL '{{Days}} DAY' 
group by ""Day""
order by ""Day"" DESC"
1074737,CoolCats Overview,,"[{""id"": 1843783, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-07-20T18:03:49.212383+00:00"", ""__typename"": ""visualizations""}, {""id"": 1843785, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""Floor (Approx)"", ""alignContent"": ""center"", ""numberFormat"": ""0.00""}, {""name"": ""Floor"", ""alignContent"": ""center"", ""numberFormat"": ""0.00""}]}, ""created_at"": ""2022-07-20T18:03:49.212383+00:00"", ""__typename"": ""visualizations""}, {""id"": 1843784, ""type"": ""chart"", ""name"": """", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}}, ""yAxis"": [{""type"": ""-"", ""title"": {""text"": ""Volume (ETH)""}, ""tickFormat"": """"}, {""type"": ""-"", ""title"": {""text"": ""Floor Price (ETH)""}, ""tickFormat"": """"}], ""legend"": {""enabled"": false}, ""series"": {""stacking"": null, ""percentValues"": false}, ""reverseX"": false, ""numberFormat"": ""#,#.##"", ""columnMapping"": {"""": ""y"", ""Day"": ""x"", ""Floor"": ""y"", ""Floor \u2666"": ""y"", ""Volume \u039e"": ""y"", ""Volume \u2666"": ""y"", ""Floor Price \u039e"": ""y"", ""Median Price \u039e"": ""y"", ""10% Percentile Price \u039e"": ""y"", ""90% Percentile Price \u039e"": ""y""}, ""seriesOptions"": {""Volume \u039e"": {""name"": ""Volume (ETH)"", ""type"": ""column"", ""color"": ""#b8b8f8"", ""yAxis"": 0, ""zIndex"": 2}, ""Median Price \u039e"": {""name"": ""Median Price (ETH)"", ""type"": ""line"", ""color"": ""#f80bd6"", ""yAxis"": 1, ""zIndex"": 1}, ""10% Percentile Price \u039e"": {""name"": ""10% Percentile Price (ETH)"", ""type"": ""line"", ""color"": ""#000fff"", ""yAxis"": 1, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": false, ""globalSeriesType"": ""column"", ""numberFormatRightYAxisSeries"": ""#,#.##""}, ""created_at"": ""2022-07-20T18:03:49.212383+00:00"", ""__typename"": ""visualizations""}]","--CoolCats 10% percentile price, Median Price and Volume--
SELECT 
    date_trunc('day', block_time) as ""Day"",
    percentile_cont(.1) within group (order by original_amount) as ""10% Percentile Price Ξ"",
    percentile_cont(.5) within group (order by original_amount) as ""Median Price Ξ"",
    sum(original_amount) as ""Volume Ξ""
FROM nft.trades nftt

WHERE nftt.""original_currency"" IN ('ETH', 'WETH') AND number_of_items = 1 
AND nft_contract_address = CONCAT('\x', substring('0x1a92f7381b9f03921564a437210bb9396471050c' from 3))::bytea 
AND block_time >  NOW() - INTERVAL '{{Days}} DAY' 
group by ""Day""
order by ""Day"" DESC"
515747,Top NFT Collections (30 Days),,"[{""id"": 973409, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-03-18T12:19:09.965858+00:00"", ""__typename"": ""visualizations""}, {""id"": 973410, ""type"": ""table"", ""name"": """", ""options"": {""columns"": [{""name"": ""Dune Link"", ""alignContent"": ""center""}, {""name"": ""Total Volume (ETH)"", ""title"": ""Total"", ""alignContent"": ""right"", ""numberFormat"": ""0,000""}, {""name"": ""1 day Volume (ETH)"", ""title"": ""\u039e 1 Day"", ""alignContent"": ""right"", ""numberFormat"": ""0,0.0""}, {""name"": ""1W Volume (ETH)"", ""title"": ""\u039e 1 Week"", ""alignContent"": ""right"", ""numberFormat"": ""0,000.0""}, {""name"": ""Floor Price"", ""title"": ""FLOOR (ETH) "", ""alignContent"": ""center"", ""numberFormat"": ""0.00""}, {""name"": ""Today's Median Sale"", ""title"": ""Median"", ""alignContent"": ""right"", ""numberFormat"": ""0.0""}, {""name"": ""Ranking"", ""title"": ""Rank"", ""alignContent"": ""center""}, {""name"": ""Project / Address"", ""alignContent"": ""left""}, {""name"": ""Rank"", ""title"": ""RANK"", ""alignContent"": ""center""}, {""name"": ""Day Rank"", ""alignContent"": ""right""}, {""name"": ""1 Week"", ""alignContent"": ""right"", ""numberFormat"": ""0,0""}, {""name"": ""1 Day Sales"", ""alignContent"": ""right""}, {""name"": ""1 Week (ETH)"", ""alignContent"": ""right"", ""numberFormat"": ""0,0.0""}, {""name"": ""1 Day (ETH)"", ""alignContent"": ""right"", ""numberFormat"": ""0,0.0""}, {""name"": ""Sale Count Rank"", ""alignContent"": ""right""}, {""name"": ""1 Day"", ""alignContent"": ""right"", ""numberFormat"": ""0,0""}, {""name"": ""Sales Count"", ""alignContent"": ""right"", ""numberFormat"": ""0,""}, {""name"": ""Volume ETH"", ""title"": ""VOLUME (ETH)"", ""alignContent"": ""center"", ""numberFormat"": ""0,0.0""}, {""name"": ""Sales"", ""title"": ""SALES COUNT"", ""alignContent"": ""center"", ""numberFormat"": ""0,""}, {""name"": ""Median"", ""title"": ""MEDIAN (ETH)"", ""alignContent"": ""center"", ""numberFormat"": ""0.00""}, {""name"": ""Owners"", ""title"": ""OWNERS"", ""alignContent"": ""right"", ""numberFormat"": ""0,""}, {""name"": ""Items"", ""title"": ""ITEMS"", ""alignContent"": ""right"", ""numberFormat"": ""0,""}, {""name"": ""Dashboard Link"", ""title"": ""PROJECT DASHBOARD""}, {""name"": ""dune_link"", ""title"": ""DUNE LINK"", ""alignContent"": ""center""}, {""name"": ""OPENSEA"", ""alignContent"": ""center""}]}, ""created_at"": ""2022-03-18T12:19:09.965858+00:00"", ""__typename"": ""visualizations""}]","SELECT 
    ROW_NUMBER() OVER (ORDER BY SUM(original_amount) DESC) AS ""Rank"",
    CASE WHEN nftp.""nft_collection"" IS NOT NULL THEN CONCAT('<a href=""',nftp.url,'"" target=""_blank"">',nftp.nft_collection,'</a>') 
    ELSE CONCAT('<a href=""https://etherscan.io/token/0',SUBSTRING(""nft_contract_address""::text, 2),'"">',CONCAT('0',SUBSTRING(""nft_contract_address""::text, 2)),'</a>') END AS ""OPENSEA"",
    COUNT(tx_hash) AS ""Sales"",
    SUM(original_amount) AS ""Volume ETH"", 
    percentile_cont(.1) within GROUP (ORDER BY original_amount) AS ""Floor Price"",
    percentile_cont(.5) within GROUP (ORDER BY original_amount) AS ""Median""
FROM nft.trades n 
    LEFT JOIN dune_user_generated.""cryptuschrist_nft_projects2"" nftp on nftp.""nft_contract"" = n.nft_contract_address
        WHERE  (block_time > now() - interval  '30 day')  
            AND number_of_items = 1 
            AND original_currency in ('ETH','WETH')  
            AND nft_contract_address NOT IN ('\xc36cf0cfcb5d905b8b513860db0cfe63f6cf9f5c', '\x4e1f41613c9084fdb9e34e11fae9412427480e56', '\x7bd29408f11d2bfc23c34f18275bbf23bb716bc7', '\xce25e60a89f200b1fa40f6c313047ffe386992c3', '\xfb3765e0e7ac73e736566af913fa58c3cfd686b7','\x495f947276749ce646f68ac8c248420045cb7b5e','\xc99f70bfd82fb7c8f8191fdfbfb735606b15e5c5','\xb932a70a57673d89f4acffbe830e8ed7f75fb9e0', '\x3b3ee1931dc30c1957379fac9aba94d1c48a5405')
                GROUP BY nft_contract_address , nftp.nft_collection, nftp.url
                ORDER BY 4 DESC
                LIMIT '30'            "
1074657,CloneX Overview,,"[{""id"": 1843651, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-07-20T17:52:43.07011+00:00"", ""__typename"": ""visualizations""}, {""id"": 1843652, ""type"": ""chart"", ""name"": """", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}}, ""yAxis"": [{""type"": ""-"", ""title"": {""text"": ""Volume (ETH)""}, ""tickFormat"": """"}, {""type"": ""-"", ""title"": {""text"": ""Floor Price (ETH)""}, ""tickFormat"": """"}], ""legend"": {""enabled"": false}, ""series"": {""stacking"": null, ""percentValues"": false}, ""reverseX"": false, ""numberFormat"": ""#,#.##"", ""columnMapping"": {"""": ""y"", ""Day"": ""x"", ""Floor"": ""y"", ""Floor \u2666"": ""y"", ""Volume \u039e"": ""y"", ""Volume \u2666"": ""y"", ""Floor Price \u039e"": ""y"", ""Median Price \u039e"": ""y"", ""10% Percentile Price \u039e"": ""y"", ""90% Percentile Price \u039e"": ""y""}, ""seriesOptions"": {""Volume \u039e"": {""name"": ""Volume (ETH)"", ""type"": ""column"", ""color"": ""#b8b8f8"", ""yAxis"": 0, ""zIndex"": 2}, ""Median Price \u039e"": {""name"": ""Median Price (ETH)"", ""type"": ""line"", ""color"": ""#f80bd6"", ""yAxis"": 1, ""zIndex"": 1}, ""10% Percentile Price \u039e"": {""name"": ""10% Percentile Price (ETH)"", ""type"": ""line"", ""color"": ""#000fff"", ""yAxis"": 1, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": false, ""globalSeriesType"": ""column"", ""numberFormatRightYAxisSeries"": ""#,#.##""}, ""created_at"": ""2022-07-20T17:52:43.07011+00:00"", ""__typename"": ""visualizations""}, {""id"": 1843653, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""Floor (Approx)"", ""alignContent"": ""center"", ""numberFormat"": ""0.00""}, {""name"": ""Floor"", ""alignContent"": ""center"", ""numberFormat"": ""0.00""}]}, ""created_at"": ""2022-07-20T17:52:43.07011+00:00"", ""__typename"": ""visualizations""}]","--CloneX 10% percentile price, Median Price and Volume--
SELECT 
    date_trunc('day', block_time) as ""Day"",
    percentile_cont(.1) within group (order by original_amount) as ""10% Percentile Price Ξ"",
    percentile_cont(.5) within group (order by original_amount) as ""Median Price Ξ"",
    sum(original_amount) as ""Volume Ξ""
FROM nft.trades nftt

WHERE nftt.""original_currency"" IN ('ETH', 'WETH') AND number_of_items = 1 
AND nft_contract_address = CONCAT('\x', substring('0x49cf6f5d44e70224e2e23fdcdd2c053f30ada28b' from 3))::bytea 
AND block_time >  NOW() - INTERVAL '{{Days}} DAY' 
group by ""Day""
order by ""Day"" DESC"
1074676,Doodles Overview,,"[{""id"": 1843699, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-07-20T17:55:18.631148+00:00"", ""__typename"": ""visualizations""}, {""id"": 1843701, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""Floor (Approx)"", ""alignContent"": ""center"", ""numberFormat"": ""0.00""}, {""name"": ""Floor"", ""alignContent"": ""center"", ""numberFormat"": ""0.00""}]}, ""created_at"": ""2022-07-20T17:55:18.631148+00:00"", ""__typename"": ""visualizations""}, {""id"": 1843700, ""type"": ""chart"", ""name"": """", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}}, ""yAxis"": [{""type"": ""-"", ""title"": {""text"": ""Volume (ETH)""}, ""tickFormat"": """"}, {""type"": ""-"", ""title"": {""text"": ""Floor Price (ETH)""}, ""tickFormat"": """"}], ""legend"": {""enabled"": false}, ""series"": {""stacking"": null, ""percentValues"": false}, ""reverseX"": false, ""numberFormat"": ""#,#.##"", ""columnMapping"": {"""": ""y"", ""Day"": ""x"", ""Floor"": ""y"", ""Floor \u2666"": ""y"", ""Volume \u039e"": ""y"", ""Volume \u2666"": ""y"", ""Floor Price \u039e"": ""y"", ""Median Price \u039e"": ""y"", ""10% Percentile Price \u039e"": ""y"", ""90% Percentile Price \u039e"": ""y""}, ""seriesOptions"": {""Volume \u039e"": {""name"": ""Volume (ETH)"", ""type"": ""column"", ""color"": ""#b8b8f8"", ""yAxis"": 0, ""zIndex"": 2}, ""Median Price \u039e"": {""name"": ""Median Price (ETH)"", ""type"": ""line"", ""color"": ""#f80bd6"", ""yAxis"": 1, ""zIndex"": 1}, ""10% Percentile Price \u039e"": {""name"": ""10% Percentile Price (ETH)"", ""type"": ""line"", ""color"": ""#000fff"", ""yAxis"": 1, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": false, ""globalSeriesType"": ""column"", ""numberFormatRightYAxisSeries"": ""#,#.##""}, ""created_at"": ""2022-07-20T17:55:18.631148+00:00"", ""__typename"": ""visualizations""}]","--Doodles 10% percentile price, Median Price and Volume--
SELECT 
    date_trunc('day', block_time) as ""Day"",
    percentile_cont(.1) within group (order by original_amount) as ""10% Percentile Price Ξ"",
    percentile_cont(.5) within group (order by original_amount) as ""Median Price Ξ"",
    sum(original_amount) as ""Volume Ξ""
FROM nft.""trades_v2_beta"" nftt

WHERE nftt.""original_currency"" IN ('ETH', 'WETH') AND number_of_items = 1 
AND nft_contract_address = CONCAT('\x', substring('0x8a90cab2b38dba80c64b7734e58ee1db38b8992e' from 3))::bytea 
AND block_time >  NOW() - INTERVAL '{{Days}} DAY' 
group by ""Day""
order by ""Day"" DESC"
1074854,Decentraland Overview,,"[{""id"": 1843951, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""Floor (Approx)"", ""alignContent"": ""center"", ""numberFormat"": ""0.00""}, {""name"": ""Floor"", ""alignContent"": ""center"", ""numberFormat"": ""0.00""}]}, ""created_at"": ""2022-07-20T18:34:01.815549+00:00"", ""__typename"": ""visualizations""}, {""id"": 1843952, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-07-20T18:34:01.815549+00:00"", ""__typename"": ""visualizations""}, {""id"": 1843953, ""type"": ""chart"", ""name"": """", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}}, ""yAxis"": [{""type"": ""-"", ""title"": {""text"": ""Volume (ETH)""}, ""tickFormat"": """"}, {""type"": ""-"", ""title"": {""text"": ""Floor Price (ETH)""}, ""tickFormat"": """"}], ""legend"": {""enabled"": false}, ""series"": {""stacking"": null, ""percentValues"": false}, ""reverseX"": false, ""numberFormat"": ""#,#.##"", ""columnMapping"": {"""": ""y"", ""Day"": ""x"", ""Floor"": ""y"", ""Floor \u2666"": ""y"", ""Volume \u039e"": ""y"", ""Volume \u2666"": ""y"", ""Floor Price \u039e"": ""y"", ""Median Price \u039e"": ""y"", ""10% Percentile Price \u039e"": ""y"", ""90% Percentile Price \u039e"": ""y""}, ""seriesOptions"": {""Volume \u039e"": {""name"": ""Volume (ETH)"", ""type"": ""column"", ""color"": ""#b8b8f8"", ""yAxis"": 0, ""zIndex"": 2}, ""Median Price \u039e"": {""name"": ""Median Price (ETH)"", ""type"": ""line"", ""color"": ""#f80bd6"", ""yAxis"": 1, ""zIndex"": 1}, ""10% Percentile Price \u039e"": {""name"": ""10% Percentile Price (ETH)"", ""type"": ""line"", ""color"": ""#000fff"", ""yAxis"": 1, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": false, ""globalSeriesType"": ""column"", ""numberFormatRightYAxisSeries"": ""#,#.##""}, ""created_at"": ""2022-07-20T18:34:01.815549+00:00"", ""__typename"": ""visualizations""}]","--Decentraland 10% percentile price, Median Price and Volume--
SELECT 
    date_trunc('day', block_time) as ""Day"",
    percentile_cont(.1) within group (order by original_amount) as ""10% Percentile Price Ξ"",
    percentile_cont(.5) within group (order by original_amount) as ""Median Price Ξ"",
    sum(original_amount) as ""Volume Ξ""
FROM nft.trades nftt

WHERE nftt.""original_currency"" IN ('ETH', 'WETH') AND number_of_items = 1 
AND nft_contract_address = CONCAT('\x', substring('0xf87e31492faf9a91b02ee0deaad50d51d56d5d4d' from 3))::bytea 
AND block_time >  NOW() - INTERVAL '{{Days}} DAY' 
group by ""Day""
order by ""Day"" DESC"
1074752,Otherdeed for Otherside Overview,,"[{""id"": 1843805, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""Floor (Approx)"", ""alignContent"": ""center"", ""numberFormat"": ""0.00""}, {""name"": ""Floor"", ""alignContent"": ""center"", ""numberFormat"": ""0.00""}]}, ""created_at"": ""2022-07-20T18:06:49.356911+00:00"", ""__typename"": ""visualizations""}, {""id"": 1843804, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-07-20T18:06:49.356911+00:00"", ""__typename"": ""visualizations""}, {""id"": 1843806, ""type"": ""chart"", ""name"": """", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}}, ""yAxis"": [{""type"": ""-"", ""title"": {""text"": ""Volume (ETH)""}, ""tickFormat"": """"}, {""type"": ""-"", ""title"": {""text"": ""Floor Price (ETH)""}, ""tickFormat"": """"}], ""legend"": {""enabled"": false}, ""series"": {""stacking"": null, ""percentValues"": false}, ""reverseX"": false, ""numberFormat"": ""#,#.##"", ""columnMapping"": {"""": ""y"", ""Day"": ""x"", ""Floor"": ""y"", ""Floor \u2666"": ""y"", ""Volume \u039e"": ""y"", ""Volume \u2666"": ""y"", ""Floor Price \u039e"": ""y"", ""Median Price \u039e"": ""y"", ""10% Percentile Price \u039e"": ""y"", ""90% Percentile Price \u039e"": ""y""}, ""seriesOptions"": {""Volume \u039e"": {""name"": ""Volume (ETH)"", ""type"": ""column"", ""color"": ""#b8b8f8"", ""yAxis"": 0, ""zIndex"": 2}, ""Median Price \u039e"": {""name"": ""Median Price (ETH)"", ""type"": ""line"", ""color"": ""#f80bd6"", ""yAxis"": 1, ""zIndex"": 1}, ""10% Percentile Price \u039e"": {""name"": ""10% Percentile Price (ETH)"", ""type"": ""line"", ""color"": ""#000fff"", ""yAxis"": 1, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": false, ""globalSeriesType"": ""column"", ""numberFormatRightYAxisSeries"": ""#,#.##""}, ""created_at"": ""2022-07-20T18:06:49.356911+00:00"", ""__typename"": ""visualizations""}]","--Otherdeed 10% percentile price, Median Price and Volume--
SELECT 
    date_trunc('day', block_time) as ""Day"",
    percentile_cont(.1) within group (order by original_amount) as ""10% Percentile Price Ξ"",
    percentile_cont(.5) within group (order by original_amount) as ""Median Price Ξ"",
    sum(original_amount) as ""Volume Ξ""
FROM nft.trades nftt

WHERE nftt.""original_currency"" IN ('ETH', 'WETH') AND number_of_items = 1 
AND nft_contract_address = CONCAT('\x', substring('0x34d85c9cdeb23fa97cb08333b511ac86e1c4e258' from 3))::bytea 
AND block_time >  NOW() - INTERVAL '{{Days}} DAY' 
group by ""Day""
order by ""Day"" DESC"
1074755,Ethereum Name Service Overview,,"[{""id"": 1843810, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""Floor (Approx)"", ""alignContent"": ""center"", ""numberFormat"": ""0.00""}, {""name"": ""Floor"", ""alignContent"": ""center"", ""numberFormat"": ""0.00""}]}, ""created_at"": ""2022-07-20T18:07:48.826036+00:00"", ""__typename"": ""visualizations""}, {""id"": 1843811, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-07-20T18:07:48.826036+00:00"", ""__typename"": ""visualizations""}, {""id"": 1843812, ""type"": ""chart"", ""name"": """", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}}, ""yAxis"": [{""type"": ""-"", ""title"": {""text"": ""Volume (ETH)""}, ""tickFormat"": """"}, {""type"": ""-"", ""title"": {""text"": ""Floor Price (ETH)""}, ""tickFormat"": """"}], ""legend"": {""enabled"": false}, ""series"": {""stacking"": null, ""percentValues"": false}, ""reverseX"": false, ""numberFormat"": ""#,#.##"", ""columnMapping"": {"""": ""y"", ""Day"": ""x"", ""Floor"": ""y"", ""Floor \u2666"": ""y"", ""Volume \u039e"": ""y"", ""Volume \u2666"": ""y"", ""Floor Price \u039e"": ""y"", ""Median Price \u039e"": ""y"", ""10% Percentile Price \u039e"": ""y"", ""90% Percentile Price \u039e"": ""y""}, ""seriesOptions"": {""Volume \u039e"": {""name"": ""Volume (ETH)"", ""type"": ""column"", ""color"": ""#b8b8f8"", ""yAxis"": 0, ""zIndex"": 2}, ""Median Price \u039e"": {""name"": ""Median Price (ETH)"", ""type"": ""line"", ""color"": ""#f80bd6"", ""yAxis"": 1, ""zIndex"": 1}, ""10% Percentile Price \u039e"": {""name"": ""10% Percentile Price (ETH)"", ""type"": ""line"", ""color"": ""#000fff"", ""yAxis"": 1, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": false, ""globalSeriesType"": ""column"", ""numberFormatRightYAxisSeries"": ""#,#.##""}, ""created_at"": ""2022-07-20T18:07:48.826036+00:00"", ""__typename"": ""visualizations""}]","--ENS 10% percentile price, Median Price and Volume--
SELECT 
    date_trunc('day', block_time) as ""Day"",
    percentile_cont(.1) within group (order by original_amount) as ""10% Percentile Price Ξ"",
    percentile_cont(.5) within group (order by original_amount) as ""Median Price Ξ"",
    sum(original_amount) as ""Volume Ξ""
FROM nft.trades nftt

WHERE nftt.""original_currency"" IN ('ETH', 'WETH') AND number_of_items = 1 
AND nft_contract_address = CONCAT('\x', substring('0x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85' from 3))::bytea 
AND block_time >  NOW() - INTERVAL '{{Days}} DAY' 
group by ""Day""
order by ""Day"" DESC"
1045728,MAYC Overview,,"[{""id"": 1802890, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-07-15T17:50:10.336368+00:00"", ""__typename"": ""visualizations""}, {""id"": 1802889, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""Floor (Approx)"", ""alignContent"": ""center"", ""numberFormat"": ""0.00""}, {""name"": ""Floor"", ""alignContent"": ""center"", ""numberFormat"": ""0.00""}]}, ""created_at"": ""2022-07-15T17:50:10.336368+00:00"", ""__typename"": ""visualizations""}, {""id"": 1802888, ""type"": ""chart"", ""name"": """", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}}, ""yAxis"": [{""type"": ""-"", ""title"": {""text"": ""Volume (ETH)""}, ""tickFormat"": """"}, {""type"": ""-"", ""title"": {""text"": ""Floor Price (ETH)""}, ""tickFormat"": """"}], ""legend"": {""enabled"": false}, ""series"": {""stacking"": null, ""percentValues"": false}, ""reverseX"": false, ""numberFormat"": ""#,#.##"", ""columnMapping"": {"""": ""y"", ""Day"": ""x"", ""Floor"": ""y"", ""Floor \u2666"": ""y"", ""Volume \u039e"": ""y"", ""Volume \u2666"": ""y"", ""Floor Price \u039e"": ""y"", ""Median Price \u039e"": ""y"", ""10% Percentile Price \u039e"": ""y"", ""90% Percentile Price \u039e"": ""y""}, ""seriesOptions"": {""Volume \u039e"": {""name"": ""Volume (ETH)"", ""type"": ""column"", ""color"": ""#b8b8f8"", ""yAxis"": 0, ""zIndex"": 2}, ""Median Price \u039e"": {""name"": ""Median Price (ETH)"", ""type"": ""line"", ""color"": ""#f80bd6"", ""yAxis"": 1, ""zIndex"": 1}, ""10% Percentile Price \u039e"": {""name"": ""10% Percentile Price (ETH)"", ""type"": ""line"", ""color"": ""#000fff"", ""yAxis"": 1, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": false, ""globalSeriesType"": ""column"", ""numberFormatRightYAxisSeries"": ""#,#.##""}, ""created_at"": ""2022-07-15T17:50:10.336368+00:00"", ""__typename"": ""visualizations""}]","--MAYC 10% percentile price, Median Price and Volume--
SELECT 
    date_trunc('day', block_time) as ""Day"",
    percentile_cont(.1) within group (order by original_amount) as ""10% Percentile Price Ξ"",
    percentile_cont(.5) within group (order by original_amount) as ""Median Price Ξ"",
    sum(original_amount) as ""Volume Ξ""
FROM nft.trades nftt

WHERE nftt.""original_currency"" IN ('ETH', 'WETH') AND number_of_items = 1 
AND nft_contract_address = CONCAT('\x', substring('0x60e4d786628fea6478f785a6d7e704777c86a7c6' from 3))::bytea 
AND block_time >  NOW() - INTERVAL '{{Days}} DAY' 
group by ""Day""
order by ""Day"" DESC"
1074667,mfers Overview,,"[{""id"": 1843682, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-07-20T17:53:53.747546+00:00"", ""__typename"": ""visualizations""}, {""id"": 1843683, ""type"": ""chart"", ""name"": """", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}}, ""yAxis"": [{""type"": ""-"", ""title"": {""text"": ""Volume (ETH)""}, ""tickFormat"": """"}, {""type"": ""-"", ""title"": {""text"": ""Floor Price (ETH)""}, ""tickFormat"": """"}], ""legend"": {""enabled"": false}, ""series"": {""stacking"": null, ""percentValues"": false}, ""reverseX"": false, ""numberFormat"": ""#,#.##"", ""columnMapping"": {"""": ""y"", ""Day"": ""x"", ""Floor"": ""y"", ""Floor \u2666"": ""y"", ""Volume \u039e"": ""y"", ""Volume \u2666"": ""y"", ""Floor Price \u039e"": ""y"", ""Median Price \u039e"": ""y"", ""10% Percentile Price \u039e"": ""y"", ""90% Percentile Price \u039e"": ""y""}, ""seriesOptions"": {""Volume \u039e"": {""name"": ""Volume (ETH)"", ""type"": ""column"", ""color"": ""#b8b8f8"", ""yAxis"": 0, ""zIndex"": 2}, ""Median Price \u039e"": {""name"": ""Median Price (ETH)"", ""type"": ""line"", ""color"": ""#f80bd6"", ""yAxis"": 1, ""zIndex"": 1}, ""10% Percentile Price \u039e"": {""name"": ""10% Percentile Price (ETH)"", ""type"": ""line"", ""color"": ""#000fff"", ""yAxis"": 1, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": false, ""globalSeriesType"": ""column"", ""numberFormatRightYAxisSeries"": ""#,#.##""}, ""created_at"": ""2022-07-20T17:53:53.747546+00:00"", ""__typename"": ""visualizations""}, {""id"": 1843684, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""Floor (Approx)"", ""alignContent"": ""center"", ""numberFormat"": ""0.00""}, {""name"": ""Floor"", ""alignContent"": ""center"", ""numberFormat"": ""0.00""}]}, ""created_at"": ""2022-07-20T17:53:53.747546+00:00"", ""__typename"": ""visualizations""}]","--mfers 10% percentile price, Median Price and Volume--
SELECT 
    date_trunc('day', block_time) as ""Day"",
    percentile_cont(.1) within group (order by original_amount) as ""10% Percentile Price Ξ"",
    percentile_cont(.5) within group (order by original_amount) as ""Median Price Ξ"",
    sum(original_amount) as ""Volume Ξ""
FROM nft.trades nftt

WHERE nftt.""original_currency"" IN ('ETH', 'WETH') AND number_of_items = 1 
AND nft_contract_address = CONCAT('\x', substring('0x79fcdef22feed20eddacbb2587640e45491b757f' from 3))::bytea 
AND block_time >  NOW() - INTERVAL '{{Days}} DAY' 
group by ""Day""
order by ""Day"" DESC"
388834,LooksRare (>0% Royalty) vs. OpenSea,,"[{""id"": 741338, ""type"": ""chart"", ""name"": ""LooksRare (Royalty) Volume"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": """"}, ""tickFormat"": ""$0a""}], ""legend"": {""enabled"": true}, ""series"": {""percentValues"": false}, ""reverseX"": false, ""numberFormat"": ""0a"", ""columnMapping"": {"""": ""y"", ""Date"": ""x"", ""Ratio"": ""y"", ""Royalty > 0%"": ""y""}, ""seriesOptions"": {""Predicted"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 1}, ""Royalty > 0%"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""line""}, ""created_at"": ""2022-02-01T02:14:26.293259+00:00"", ""__typename"": ""visualizations""}, {""id"": 1215086, ""type"": ""chart"", ""name"": ""LooksRare (>0% Royalty) vs. OpenSea"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""tickFormat"": """"}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""numberFormat"": ""$0a"", ""columnMapping"": {""Date"": ""x"", ""Predicted"": ""y"", ""Royalty > 0%"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-04-29T14:22:33.185607+00:00"", ""__typename"": ""visualizations""}, {""id"": 741308, ""type"": ""table"", ""name"": ""Query results"", ""options"": {""columns"": [{""name"": ""Wash Sales Volume"", ""numberFormat"": ""$0,""}, {""name"": ""All Sales Volume"", ""numberFormat"": ""$0,""}, {""name"": ""Real Volume"", ""numberFormat"": ""$0,""}]}, ""created_at"": ""2022-02-01T02:03:31.031992+00:00"", ""__typename"": ""visualizations""}, {""id"": 749071, ""type"": ""chart"", ""name"": ""LR/OS %"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""-"", ""tickFormat"": ""0%""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""0%"", ""columnMapping"": {""Date"": ""x"", ""LR/OS %"": ""y""}, ""seriesOptions"": {""LR/OS %"": {""type"": ""area"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""line""}, ""created_at"": ""2022-02-02T15:31:57.920893+00:00"", ""__typename"": ""visualizations""}]","WITH looksrare AS (SELECT DISTINCT(tx_hash), block_time, usd_amount AS lr_vol,
        CASE WHEN amount > 0 THEN usd_amount ELSE 0 END AS royalties,
        CASE WHEN amount = 0 OR amount IS NULL THEN usd_amount ELSE 0 END AS no_royalties
    FROM nft.trades lr_v
        LEFT JOIN looksrare.""LooksRareExchange_evt_RoyaltyPayment"" lr_f ON lr_v.tx_hash=lr_f.evt_tx_hash
    WHERE platform = 'LooksRare' AND block_time > '2022-03-01' 
),
opensea as (SELECT DISTINCT(tx_hash), block_time, usd_amount AS os_vol
    FROM nft.trades
    WHERE platform = 'OpenSea' AND block_time > '2022-03-01'
        AND tx_hash != '\x92488a00dfa0746c300c66a716e6cc11ba9c0f9d40d8c58e792cc7fcebf432d0'
        AND tx_hash != '\x0831db6af74c935724b82d72f0ccd269bf428004ff3da2b3d90c310ebe886af0'
        AND tx_hash != '\xe1ae8d3d31303f4007ab3e7aa99ede8f5878b4e0db7377a3504114469ccf1c83'
        AND tx_hash != '\x4d69387041e0cef473b2b6bbbedadb025a7ec67d08b115b784a6517a0a976739'
        AND tx_hash != '\x855e6720a2d34341401ff88baaa72a0ca9a7832dbad2b682c460cb51b5e30a96'
        AND tx_hash != '\x61a44e01fbe690e6a6b2db0b0c1f0a7cc242ea199b5a0b6fee216fc5aa5a1ba8'
        AND tx_hash != '\x3347858e4c5c3c737a0e4929e38edc37683fe0deff474130ac8452d276339098'
        AND tx_hash != '\x1f2ee7113b20ba126fdc6cfff0fc9a9b6c6f92a9aef22daa179a999af448a747'
        AND tx_hash != '\xe607a4ee571ce94856fe2b178257acdef7c6eb30e5bd0f34b1ea52ce153310ba'
        AND tx_hash != '\x4948753c0af0cc39f0e44a9a614f62bd237a8003b7034f9bf9103040ae78d65b'
        AND tx_hash != '\x7379b7bf6344cb069e3bdac2d5b893696ea0c182b60ce3d4aecf1522ee4e2da5'
        AND tx_hash != '\x0bffc7955c9b587d0bd8bb3db8e6ec13f0c6685e2d56353cd3d0ddfe57b94ce6'
        AND tx_hash != '\xedae6744e335364be09b234591d367117c2322598a6bc67d89b6fdd432efe7ec'
        AND tx_hash != '\xfce005dfeb6b12e668e2de44c13d3b941db101326819e5818745e186ed1581f4'
        AND tx_hash != '\x5302a80abc4fe8660c19cee5cd5b0aec6437b9672157383debcf28d6f89a34ef'
        AND tx_hash != '\x07e9763e9930f8671ef03853e039f0ae0728e62ef9e60e017f20d1a524866914'
),
lr_sum AS (
    SELECT time, royalty, no, volume,
    (CASE WHEN time::timestamp + '1 day'::interval > NOW()
            THEN 1*24 / extract(epoch from (MAX(last_time)::timestamp - time::timestamp)/3600) - 1 ELSE 0 END) * SUM(royalty) as predicted
    FROM (
        SELECT date_trunc('day', block_time) AS time, SUM(royalties) AS royalty, SUM(no_royalties) AS no, SUM(lr_vol) AS volume,  MAX(block_time) AS last_time
        FROM looksrare
        GROUP BY 1
    ) zzz
    GROUP BY 1, 2, 3, 4
    ORDER BY 1 DESC
),
os_sum AS (
    SELECT date_trunc('day', block_time) AS time, SUM(os_vol) AS opensea
    FROM opensea
    GROUP BY 1
)

SELECT a.time AS ""Date"", a.royalty AS ""Royalty > 0%"", b.opensea AS ""OpenSea"", (a.royalty / b.opensea) AS ""LR/OS %"" , a.predicted AS ""Predicted""
FROM lr_sum a
JOIN os_sum b ON a.time = b.time
ORDER BY a.time DESC"
548483,LOOKS Auto-Compound,,"[{""id"": 1029907, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-03-29T20:05:22.385543+00:00"", ""__typename"": ""visualizations""}, {""id"": 1029928, ""type"": ""chart"", ""name"": ""USD Value of WETH sold for LOOKS"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""tickFormat"": """"}, ""yAxis"": [{""type"": ""linear"", ""tickFormat"": ""$0.a""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""$0.a"", ""columnMapping"": {""sum"": ""y"", ""date_trunc"": ""x"", ""LOOKS to WETH"": ""y"", ""LOOKS --> WETH"": ""y"", ""WETH --> LOOKS"": ""y""}, ""seriesOptions"": {""WETH --> LOOKS"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": false, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-03-29T20:11:38.157789+00:00"", ""__typename"": ""visualizations""}]","SELECT date_trunc('day', block_time), sum(usd_amount) as ""WETH --> LOOKS""
FROM dex.""trades""
WHERE tx_to = '\x3ab16Af1315dc6C95F83Cbf522fecF98D00fd9ba'
    AND token_a_symbol = 'LOOKS'
    AND token_b_symbol = 'WETH'
GROUP BY 1
ORDER BY 1 DESC"
548534,LOOKS Auto-Compound (Cumulative),,"[{""id"": 1029981, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-03-29T20:28:00.157939+00:00"", ""__typename"": ""visualizations""}, {""id"": 1029982, ""type"": ""chart"", ""name"": ""Cumulative USD Value of WETH sold for LOOKS"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""tickFormat"": ""$0.0a""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""$0.a00"", ""columnMapping"": {""sum"": ""y"", ""Cumulative"": ""y"", ""block_time"": ""x"", ""date_trunc"": ""x"", ""LOOKS to WETH"": ""y"", ""LOOKS --> WETH"": ""y"", ""WETH --> LOOKS"": ""y""}, ""seriesOptions"": {""Cumulative"": {""type"": ""area"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": false, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-03-29T20:28:00.157939+00:00"", ""__typename"": ""visualizations""}]","SELECT date_trunc('hour', block_time), sum(usd_amount) over(order by date_trunc('hour', block_time)) as ""Cumulative""
FROM dex.""trades""
WHERE tx_to = '\x3ab16Af1315dc6C95F83Cbf522fecF98D00fd9ba'
    AND token_a_symbol = 'LOOKS'
    AND token_b_symbol = 'WETH'
ORDER BY 1 DESC"
516367,LooksRare VS OpenSea DAUs,,"[{""id"": 974377, ""type"": ""chart"", ""name"": ""LooksRare Daily Active Users"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""tickFormat"": """"}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""0.0a"", ""columnMapping"": {"""": ""y"", ""Date"": ""x"", ""LooksRare"": ""y""}, ""seriesOptions"": {""LooksRare"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": false, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-03-18T15:53:30.925806+00:00"", ""__typename"": ""visualizations""}, {""id"": 974376, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-03-18T15:53:30.925806+00:00"", ""__typename"": ""visualizations""}, {""id"": 974448, ""type"": ""chart"", ""name"": ""LR/OS %"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""tickFormat"": ""0%""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""0.0%"", ""columnMapping"": {""Date"": ""x"", ""LR/OS %"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""showDataLabels"": false, ""globalSeriesType"": ""area""}, ""created_at"": ""2022-03-18T16:04:09.333062+00:00"", ""__typename"": ""visualizations""}]","WITH opensea AS         (SELECT date_trunc('day', block_time) AS day,COUNT(distinct users) AS opensea
                        FROM (
                            SELECT block_time, buyer AS users
                            FROM nft.trades
                            WHERE platform = 'OpenSea'
                            AND tx_hash != '\x92488a00dfa0746c300c66a716e6cc11ba9c0f9d40d8c58e792cc7fcebf432d0' AND tx_hash != '\x0831db6af74c935724b82d72f0ccd269bf428004ff3da2b3d90c310ebe886af0' AND tx_hash != '\xe1ae8d3d31303f4007ab3e7aa99ede8f5878b4e0db7377a3504114469ccf1c83' AND tx_hash != '\x4d69387041e0cef473b2b6bbbedadb025a7ec67d08b115b784a6517a0a976739'
                            AND block_time >= '2022-05-01'
                                UNION ALL
                            SELECT block_time, seller AS users
                            FROM nft.trades
                            WHERE platform = 'OpenSea'
                            AND tx_hash != '\x92488a00dfa0746c300c66a716e6cc11ba9c0f9d40d8c58e792cc7fcebf432d0' AND tx_hash != '\x0831db6af74c935724b82d72f0ccd269bf428004ff3da2b3d90c310ebe886af0' AND tx_hash != '\xe1ae8d3d31303f4007ab3e7aa99ede8f5878b4e0db7377a3504114469ccf1c83' AND tx_hash != '\x4d69387041e0cef473b2b6bbbedadb025a7ec67d08b115b784a6517a0a976739'
                            AND block_time >= '2022-05-01') os_txs
                        GROUP BY 1),
                        
raw_looksrare AS        (SELECT date_trunc('day', block_time) AS day, COUNT(distinct users) AS raw_looksrare
                            FROM (
                            SELECT block_time, buyer AS users
                            FROM nft.trades
                            WHERE platform = 'LooksRare'
                            AND block_time >= '2022-05-01'
                                UNION ALL
                            SELECT block_time, seller AS users
                            FROM nft.trades
                            WHERE platform = 'LooksRare'
                            AND block_time >= '2022-05-01') lr_txs
                        GROUP BY 1)
                        
SELECT os.day AS ""Date"",
    SUM(opensea) AS ""OpenSea"",
    SUM(raw_looksrare) AS ""LooksRare"",
    SUM(raw_looksrare) / SUM(opensea) AS ""LR/OS %""
FROM opensea os
LEFT JOIN raw_looksrare rlr ON os.day=rlr.day
GROUP BY 1"
95576,Uniswap v3 Pair Deep-Dive (all versions),,"[{""id"": 191007, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-08-03T02:57:57.454653+00:00"", ""__typename"": ""visualizations""}, {""id"": 191010, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""counterLabel"": ""All DEXs # Trades (In Period)"", ""stringDecimal"": 0, ""counterColName"": ""running_trades""}, ""created_at"": ""2021-08-03T02:57:57.454653+00:00"", ""__typename"": ""visualizations""}, {""id"": 191009, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""counterLabel"": ""All DEXs Trading Volume (In Period)"", ""stringPrefix"": ""$"", ""stringDecimal"": 2, ""counterColName"": ""running_usd""}, ""created_at"": ""2021-08-03T02:57:57.454653+00:00"", ""__typename"": ""visualizations""}, {""id"": 191501, ""type"": ""chart"", ""name"": ""Share of TVL by DEX"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Time""}}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack"", ""percentValues"": true}, ""reverseX"": false, ""columnMapping"": {""dt"": ""x"", ""proj_v"": ""series"", ""running_tvl"": ""y""}, ""seriesOptions"": {""1inch"": {""type"": ""area"", ""yAxis"": 0, ""zIndex"": 0}, ""Sushiswap"": {""type"": ""area"", ""color"": ""#0F0F22"", ""yAxis"": 0, ""zIndex"": 1}, ""Uniswap V3 - 1.00%"": {""type"": ""area"", ""color"": ""#EA337A"", ""yAxis"": 0, ""zIndex"": 2}}, ""valuesOptions"": {}, ""globalSeriesType"": ""area""}, ""created_at"": ""2021-08-03T06:43:05.763747+00:00"", ""__typename"": ""visualizations""}, {""id"": 191517, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""counterLabel"": ""All DEXs TVL"", ""stringPrefix"": ""$"", ""stringDecimal"": 2, ""counterColName"": ""running_tvl_all""}, ""created_at"": ""2021-08-03T06:58:49.222414+00:00"", ""__typename"": ""visualizations""}, {""id"": 191008, ""type"": ""chart"", ""name"": ""Trading Volume by DEX"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Time""}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""$ USD Volume""}, ""tickFormat"": ""$0a""}, {""type"": ""linear"", ""title"": {""text"": ""Cumulative""}}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""numberFormat"": ""$0.00a"", ""columnMapping"": {"""": ""y"", ""dt"": ""x"", ""proj_v"": ""series"", ""usd_traded"": ""y"", ""sum_usd_amount"": ""y""}, ""seriesOptions"": {""1inch"": {""type"": ""column"", ""color"": ""#4478E2"", ""yAxis"": 0, ""zIndex"": 0}, ""Sushiswap"": {""type"": ""column"", ""color"": ""#0F0F22"", ""yAxis"": 0, ""zIndex"": 1}, ""Uniswap V3 - 1.00%"": {""type"": ""column"", ""color"": ""#EA337A"", ""yAxis"": 0, ""zIndex"": 2}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2021-08-03T02:57:57.454653+00:00"", ""__typename"": ""visualizations""}, {""id"": 191073, ""type"": ""chart"", ""name"": ""All DEXs Trading Volume Share"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Time""}}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack"", ""percentValues"": true}, ""reverseX"": false, ""columnMapping"": {""dt"": ""x"", ""proj_v"": ""series"", ""usd_traded"": ""y"", ""sum_usd_amount"": ""y""}, ""seriesOptions"": {""1inch"": {""type"": ""column"", ""color"": ""#4478E2"", ""yAxis"": 0, ""zIndex"": 0}, ""Sushiswap"": {""type"": ""column"", ""color"": ""#0F0F22"", ""yAxis"": 0, ""zIndex"": 1}, ""Uniswap V3 - 1.00%"": {""type"": ""column"", ""color"": ""#EA337A"", ""yAxis"": 0, ""zIndex"": 2}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2021-08-03T03:41:55.984123+00:00"", ""__typename"": ""visualizations""}, {""id"": 194622, ""type"": ""chart"", ""name"": ""Share Trade Volume by DEX"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""$0.00a"", ""columnMapping"": {""proj_v"": ""x"", ""usd_traded"": ""y""}, ""seriesOptions"": {""usd_traded"": {""name"": ""USD Traded"", ""type"": ""pie"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2021-08-04T19:59:30.084508+00:00"", ""__typename"": ""visualizations""}, {""id"": 198893, ""type"": ""chart"", ""name"": ""TVL by DEX"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Time""}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""TVL $""}}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""$0.00a"", ""columnMapping"": {""dt"": ""x"", ""proj_v"": ""series"", ""running_tvl"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""line""}, ""created_at"": ""2021-08-07T04:09:10.51054+00:00"", ""__typename"": ""visualizations""}]","WITH univ3 AS
(
    SELECT 
    DATE_TRUNC('{{Time-Series Granularity}}',t.""block_time"") AS dt,
    ""exchange_contract_address"",
    project, version,
    CASE WHEN version = '1' OR version IS NULL THEN project
    ELSE project || ' V' || version || ' - ' || ( ROUND(p.fee/1e4,2) )::text || '%'
    END as proj_v,
    t.category,
    t.""token_a_address"",
    t.""token_b_address"",
    t.""token_a_symbol"",
    t.""token_b_symbol"",
    t.""token_a_symbol"" || '/' || t.""token_b_symbol"" AS pair,
    t.""token_a_symbol"" || '/' || t.""token_b_symbol"" || ' - ' || ( ROUND(p.fee/1e4,2) )::text || '%' AS pool,
    SUM(t.token_a_amount) AS token_a_amount,
    SUM(t.token_b_amount) AS token_b_amount,
    --t.trader_a AS user,
    SUM(t.usd_amount) AS usd_traded,
    COUNT(t.usd_amount) AS num_trades,
    COUNT(DISTINCT t.trader_a) AS num_users
    
    FROM dex.trades t
    INNER JOIN uniswap_v3.""Factory_evt_PoolCreated"" p
    ON t.exchange_contract_address = p.pool
    
    WHERE t.project = 'Uniswap'
    AND t.version = '3'
    AND t.""block_time"" > DATE_TRUNC('{{Time-Series Granularity}}',LEAST('{{Reference Date}}',NOW()) ) - '{{Trailing Num Days}} days'::interval - '{{UTC Offset}} hours'::interval
    AND t.""exchange_contract_address"" = REPLACE(LOWER('{{Pool Address}}'),'0x','\x')::bytea
    
    GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12

) --uni v3
, dex AS (

SELECT 
    DATE_TRUNC('{{Time-Series Granularity}}',o.""block_time"") AS dt,
    ""exchange_contract_address"",
    project, version,
    CASE WHEN version = '1' OR (version IS NULL) THEN project
    WHEN project = 'Uniswap' AND version = '3'
        THEN project || ' V' || version || ' - ' || ( ROUND(p.fee/1e4,2) )::text || '%'
    ELSE project || ' V' || version
    END as proj_v,
    o.category,
    uv.""token_a_address"",
    uv.""token_b_address"",
    uv.""token_a_symbol"",
    uv.""token_b_symbol"",
    uv.""token_a_symbol"" || '/' || uv.""token_b_symbol"" AS pair,
    uv.""token_a_symbol"" || '/' || uv.""token_b_symbol"" /*|| ' - ' || ( ROUND(p.fee/1e4,2) )::text || '%'*/ AS pool,
    SUM(o.token_a_amount) AS token_a_amount,
    SUM(o.token_b_amount) AS token_b_amount,
    --t.trader_a AS user,
    SUM(o.usd_amount) AS usd_traded,
    COUNT(o.usd_amount) AS num_trades,
    COUNT(DISTINCT o.trader_a) AS num_users
    
    FROM
    dex.trades o --others
    INNER JOIN (SELECT DISTINCT token_a_address, token_a_symbol, token_b_address, token_b_symbol FROM univ3) uv ON
        (
        (uv.token_a_address = o.token_a_address) AND (uv.token_b_address = o.token_b_address) --forwards
        OR
        (uv.token_a_address = o.token_b_address) AND (uv.token_b_address = o.token_a_address) --backwards
        )
    LEFT JOIN uniswap_v3.""Factory_evt_PoolCreated"" p
    ON o.project = 'Uniswap' AND o.version = '3'
    AND p.""pool"" = o.""exchange_contract_address""
    
    WHERE o.""exchange_contract_address"" != REPLACE(LOWER('{{Pool Address}}'),'0x','\x')::bytea
    AND o.""block_time"" > DATE_TRUNC('{{Time-Series Granularity}}',LEAST('{{Reference Date}}',NOW()) ) - '{{Trailing Num Days}} days'::interval - '{{UTC Offset}} hours'::interval
    AND o.category = 'DEX'
    
    GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12

)
/*, aggs AS (
SELECT 
    DATE_TRUNC('{{Time-Series Granularity}}',o.""block_time"") AS dt,
    ""exchange_contract_address"",
    project, version,
    CASE WHEN version = '1' OR version IS NULL THEN project
    ELSE project || ' V' || version
    END as proj_v,
    o.category,
    o.""token_a_address"",
    o.""token_b_address"",
    o.""token_a_symbol"",
    o.""token_b_symbol"",
    o.""token_a_symbol"" || '/' || o.""token_b_symbol"" AS pair,
    o.""token_a_symbol"" || '/' || o.""token_b_symbol"" AS pool,
    SUM(o.token_a_amount) AS token_a_amount,
    SUM(o.token_b_amount) AS token_b_amount,
    --t.trader_a AS user,
    SUM(o.usd_amount) AS usd_traded,
    COUNT(o.usd_amount) AS num_trades,
    COUNT(DISTINCT o.trader_a) AS num_users
    
    FROM
    dex.trades o --others
    INNER JOIN (SELECT DISTINCT token_a_symbol, token_b_symbol FROM univ3) uv ON
    (
    (uv.token_a_symbol = o.token_a_symbol) AND (uv.token_b_symbol = o.token_b_symbol) --forwards
    OR
    (uv.token_a_symbol = o.token_a_symbol) AND (uv.token_b_symbol = o.token_b_symbol) --backwards
    )
    WHERE o.""exchange_contract_address"" != REPLACE(LOWER('{{Pool Address}}'),'0x','\x')::bytea
    AND o.""block_time"" > DATE_TRUNC('{{Time-Series Granularity}}',LEAST('{{Reference Date}}',NOW()) ) - '{{Trailing Num Days}} days'::interval - '{{UTC Offset}} hours'::interval
    AND o.category = 'Aggregator'
    AND NOT EXISTS
        (SELECT 1 FROM dex.trades d WHERE d.""category""='DEX' AND d.""tx_hash"" = o.""tx_hash"")
    
    GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12

)*/

, trades
AS (
    SELECT * FROM univ3
    UNION
    SELECT * FROM dex
    --UNION
    --SELECT * FROM aggs
)

,projects AS --so I can pull in info even when there aren't any trades to match
(
    SELECT DISTINCT
    ""exchange_contract_address"", proj_v, pair, pool, category,
    token_a_address, token_b_address, token_a_symbol, token_b_symbol
    FROM trades
)

,prices AS
(
SELECT *,
DENSE_RANK() OVER (PARTITION BY ""contract_address"" ORDER BY minute DESC) AS p_rank
FROM prices.""usd"" p
WHERE p.minute > DATE_TRUNC('{{Time-Series Granularity}}',LEAST('{{Reference Date}}',NOW()) ) - '{{Trailing Num Days}} days'::interval - '{{UTC Offset}} hours'::interval
AND (
    ""contract_address"" IN (SELECT DISTINCT ""token_b_address"" FROM projects)
    OR ""contract_address"" IN (SELECT DISTINCT ""token_a_address"" FROM projects)
    )
)

,gs AS
(
SELECT generate_series(DATE_TRUNC('hour',NOW() ) - interval '{{Trailing Num Days}} day', date_trunc('hour', NOW() ), '1 hour') AS hour
)
/*
,gs AS
(
SELECT DISTINCT d.token_a_address AS token, gs.hour FROM trades d
INNER JOIN 
(SELECT generate_series(DATE_TRUNC('hour',LEAST(('{{Reference Date}}'::date - '{{UTC Offset}} hours'::interval),NOW()) ) - interval '{{Trailing Num Days}} day', date_trunc('hour', LEAST(('{{Reference Date}}'::date - '{{UTC Offset}} hours'::interval),NOW()) ), '1 hour') AS hour) gs -- Generate all days since the first contract
ON 1=1
UNION
SELECT DISTINCT d.token_b_address AS token, gs.hour FROM trades d
INNER JOIN 
(SELECT generate_series(DATE_TRUNC('hour',LEAST(('{{Reference Date}}'::date - '{{UTC Offset}} hours'::interval),NOW()) ) - interval '{{Trailing Num Days}} day', date_trunc('hour', LEAST(('{{Reference Date}}'::date - '{{UTC Offset}} hours'::interval),NOW()) ), '1 hour') AS hour) gs -- Generate all days since the first contract
ON 1=1
)*/

,dex_price AS(
--for tokens where dune doesn't have the price, calculate the avg price in it's last hour of swaps (6 hr if no swaps in the last hour)
--since we don't have an amount field for unmapped tokens, I'll calc it based on... raw amount
-- through a few queries, this gets the unit price of each token (assuming 18 decimals)
-- DO NOT USE THIS FOR KNOWN TOKENS - only for the ones we don't have, we'll assume 18 decimals
SELECT
gs.hour, c.token, 
symbol, decimals, median_price
FROM
(
SELECT *,
lead(hour, 1, LEAST('{{Reference Date}}'::date - '{{UTC Offset}} hours'::interval,NOW())  ) OVER (PARTITION BY token
                            ORDER BY hour asc) AS next_hour
FROM
(
SELECT

DATE_TRUNC('hour',hour) AS hour,
t.contract_address AS token, ea.symbol AS symbol, ea.decimals AS decimals,
percentile_cont(0.5) WITHIN GROUP (ORDER BY ""median_price"") AS median_price

FROM dex.""view_token_prices"" t

INNER JOIN (SELECT DISTINCT token_a_address AS token FROM projects UNION SELECT DISTINCT token_b_address AS token FROM projects) c
ON t.contract_address = c.token
INNER JOIN erc20.""tokens"" ea --both need to have known decimals, we're not going to assume anything.
ON ea.""contract_address"" = t.contract_address

WHERE
(ea.decimals IS NOT NULL)
AND median_price > 0

AND DATE_TRUNC('hour',hour) > 
(DATE_TRUNC('{{Time-Series Granularity}}',LEAST('{{Reference Date}}'::date,NOW()) ) - '{{Trailing Num Days}} days'::interval - '{{UTC Offset}} hours'::interval)
AND DATE_TRUNC('hour',hour) <= LEAST('{{Reference Date}}'::date - '{{UTC Offset}} hours'::interval,NOW()) + interval '1 day'

GROUP BY 1,2,3,4
) b
) c
INNER JOIN gs
ON c.hour <= gs.hour
AND gs.hour < c.next_hour
)

, tvl AS (

SELECT DISTINCT
dt, 
exchange_contract_address,
token_a_address,token_b_address,
SUM(delta_tvl) OVER (PARTITION BY dt, exchange_contract_address)
    AS delta_tvl,
SUM(add_tvl) OVER (PARTITION BY dt, exchange_contract_address)
    AS add_tvl,
LAST_VALUE(running_tvl) OVER (PARTITION BY dt, exchange_contract_address 
                            ORDER BY hour::timestamp ASC
                            ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
                            )
    AS running_tvl

FROM
(
SELECT
hour,
DATE_TRUNC('{{Time-Series Granularity}}',hour) AS dt,
a.exchange_contract_address,
pr.token_a_address,pr.token_b_address,
COALESCE(SUM(val_usd),0) AS delta_tvl,
COALESCE(SUM(addval_usd),0) AS add_tvl,
COALESCE(SUM(sumval_usd),0) AS running_tvl

FROM
(
SELECT 
gs.hour, c.token, exchange_contract_address,
CASE WHEN gs.hour = c.hour THEN val ELSE 0 END AS val,
CASE WHEN gs.hour = c.hour THEN val/(10^COALESCE(p.decimals,dp.decimals)) ELSE 0 END AS val_tokens,
CASE WHEN gs.hour = c.hour THEN COALESCE(p.price,dp.median_price)*(val/(10^COALESCE(p.decimals,dp.decimals))) ELSE 0 END AS val_usd,

CASE WHEN gs.hour = c.hour THEN addval ELSE 0 END AS addval,
CASE WHEN gs.hour = c.hour THEN addval/(10^COALESCE(p.decimals,dp.decimals)) ELSE 0 END AS addval_tokens,
CASE WHEN gs.hour = c.hour THEN COALESCE(p.price,dp.median_price)*(addval/(10^COALESCE(p.decimals,dp.decimals))) ELSE 0 END AS addval_usd,

sumval,
sumval/(10^COALESCE(p.decimals,dp.decimals)) AS sumval_tokens,
COALESCE(p.price,dp.median_price)*(sumval/(10^COALESCE(p.decimals,dp.decimals))) AS sumval_usd

FROM
(
    SELECT
    *, contract_address AS token,
    lead(hour, 1, LEAST('{{Reference Date}}',NOW())  ) OVER (PARTITION BY contract_address, exchange_contract_address
                            ORDER BY hour asc) AS next_hour,
    SUM(val) OVER (PARTITION BY contract_address, exchange_contract_address ORDER BY hour ASC) AS sumval
    FROM
    (
    SELECT
    hour,
    contract_address,
    exchange_contract_address,
    SUM(val) AS val,
    SUM(CASE WHEN val >0 THEN val ELSE 0 END) AS addval
    --SUM(val) OVER (PARTITION BY contract_address, exchange_contract_address ORDER BY hour ASC) AS sumval
    --SUM( price*(val/(10^decimals)) ) AS usd_tvl
    
    FROM (
        SELECT 
        CASE WHEN DATE_TRUNC('{{Time-Series Granularity}}',e.""evt_block_time"") >= (DATE_TRUNC('{{Time-Series Granularity}}',NOW() ) - '{{Trailing Num Days}} days'::interval)
            THEN DATE_TRUNC('{{Time-Series Granularity}}',e.""evt_block_time"")
            ELSE DATE_TRUNC('{{Time-Series Granularity}}',NOW() ) - '{{Trailing Num Days}} days'::interval - '1 {{Time-Series Granularity}}'::interval
            END AS hour,
        ""to"" AS exchange_contract_address,
        e.""contract_address"", SUM(value) AS val
        FROM erc20.""ERC20_evt_Transfer"" e
        
        INNER JOIN (SELECT DISTINCT exchange_contract_address, token_a_address, token_b_address FROM projects) t --dex id causes duplication
        ON ""to"" = t.exchange_contract_address
        AND e.""contract_address"" IN (t.token_a_address, t.token_b_address) --only get tvl of the 2 tokens

        GROUP BY 1,2,3
        
        UNION ALL
        
        SELECT 
        CASE WHEN DATE_TRUNC('{{Time-Series Granularity}}',e.""evt_block_time"") >= (DATE_TRUNC('{{Time-Series Granularity}}',NOW() ) - '{{Trailing Num Days}} days'::interval)
            THEN DATE_TRUNC('{{Time-Series Granularity}}',e.""evt_block_time"")
            ELSE DATE_TRUNC('{{Time-Series Granularity}}',NOW() ) - '{{Trailing Num Days}} days'::interval - '1 {{Time-Series Granularity}}'::interval
            END AS hour,
        ""from"" AS exchange_contract_address,
        e.""contract_address"", SUM(-value) AS val
        FROM erc20.""ERC20_evt_Transfer"" e
        
        INNER JOIN (SELECT DISTINCT exchange_contract_address, token_a_address, token_b_address FROM projects) t --dex id causes duplication
        ON ""from"" = t.exchange_contract_address
        AND e.""contract_address"" IN (t.token_a_address, t.token_b_address) --only get tvl of the 2 tokens
        
        GROUP BY 1,2,3

        UNION ALL --balancer v2 token a
        
        SELECT
        CASE WHEN DATE_TRUNC('{{Time-Series Granularity}}',ba.""evt_block_time"") >= (DATE_TRUNC('{{Time-Series Granularity}}',NOW() ) - '{{Trailing Num Days}} days'::interval)
            THEN DATE_TRUNC('{{Time-Series Granularity}}',ba.""evt_block_time"")
            ELSE DATE_TRUNC('{{Time-Series Granularity}}',NOW() ) - '{{Trailing Num Days}} days'::interval - '1 {{Time-Series Granularity}}'::interval
            END AS hour,
        ba.""poolId"" AS exchange_contract_address,
        ba.tokens[1] AS ""contract_address"", SUM(deltas[1]) AS val
        FROM balancer_v2.""Vault_evt_PoolBalanceChanged"" ba
        
        INNER JOIN projects t
        ON ba.""poolId"" = t.exchange_contract_address
        AND ba.tokens[1] IN (t.token_a_address, t.token_b_address) --only get tvl of the 2 tokens
        
        GROUP BY 1,2,3
        
        UNION ALL --balancer v2 token b
        
        SELECT
        CASE WHEN DATE_TRUNC('{{Time-Series Granularity}}',ba.""evt_block_time"") >= (DATE_TRUNC('{{Time-Series Granularity}}',NOW() ) - '{{Trailing Num Days}} days'::interval)
            THEN DATE_TRUNC('{{Time-Series Granularity}}',ba.""evt_block_time"")
            ELSE DATE_TRUNC('{{Time-Series Granularity}}',NOW() ) - '{{Trailing Num Days}} days'::interval - '1 {{Time-Series Granularity}}'::interval
            END AS hour,
        ba.""poolId"" AS exchange_contract_address,
        ba.tokens[2] AS ""contract_address"", SUM(deltas[2]) AS val
        FROM balancer_v2.""Vault_evt_PoolBalanceChanged"" ba
        
        INNER JOIN projects t
        ON ba.""poolId"" = t.exchange_contract_address
        AND ba.tokens[2] IN (t.token_a_address, t.token_b_address) --only get tvl of the 2 tokens
        
        GROUP BY 1,2,3
        
        UNION ALL --balancer v2 swaps token out
        
        SELECT
        CASE WHEN DATE_TRUNC('{{Time-Series Granularity}}',bas.""evt_block_time"") >= (DATE_TRUNC('{{Time-Series Granularity}}',NOW() ) - '{{Trailing Num Days}} days'::interval)
            THEN DATE_TRUNC('{{Time-Series Granularity}}',bas.""evt_block_time"")
            ELSE DATE_TRUNC('{{Time-Series Granularity}}',NOW() ) - '{{Trailing Num Days}} days'::interval - '1 {{Time-Series Granularity}}'::interval
            END AS hour,
        bas.""poolId"" AS ""contract_address"",
        bas.""tokenOut"" AS ""contract_address"", SUM(-bas.""amountOut"") AS val
        FROM balancer_v2.""Vault_evt_Swap"" bas
        INNER JOIN projects t
        ON bas.""poolId"" = t.exchange_contract_address
        AND bas.""tokenOut"" IN (t.token_a_address, t.token_b_address) --only get tvl of the 2 tokens
        
        GROUP BY 1,2,3
        
        UNION ALL --balancer v2 swaps token in
        
        SELECT
        CASE WHEN DATE_TRUNC('{{Time-Series Granularity}}',bas2.""evt_block_time"") >= (DATE_TRUNC('{{Time-Series Granularity}}',NOW() ) - '{{Trailing Num Days}} days'::interval)
            THEN DATE_TRUNC('{{Time-Series Granularity}}',bas2.""evt_block_time"")
            ELSE DATE_TRUNC('{{Time-Series Granularity}}',NOW() ) - '{{Trailing Num Days}} days'::interval - '1 {{Time-Series Granularity}}'::interval
            END AS hour,
        bas2.""poolId"" AS ""contract_address"",
        bas2.""tokenIn"" AS ""contract_address"", SUM(bas2.""amountIn"") AS val
        FROM balancer_v2.""Vault_evt_Swap"" bas2
        INNER JOIN projects t
        ON bas2.""poolId"" = t.exchange_contract_address
        AND bas2.""tokenIn"" IN (t.token_a_address, t.token_b_address) --only get tvl of the 2 tokens
        
        GROUP BY 1,2,3
        
        ) tr
        GROUP BY 1,2,3
    ) mod

) c
INNER JOIN gs
ON c.hour <= gs.hour
AND gs.hour < c.next_hour

LEFT JOIN prices p
        ON p.""contract_address"" = c.token
        AND
        CASE WHEN DATE_TRUNC('hour',gs.hour) = DATE_TRUNC('hour',LEAST('{{Reference Date}}',NOW()) )
        THEN p.p_rank = 1 --p.""minute"" = DATE_TRUNC('hour',LEAST('{{Reference Date}}',NOW()) - interval '15 minutes')
        ELSE p.""minute"" = DATE_TRUNC('hour',gs.hour) + interval '59 minutes'
        END
    LEFT JOIN dex_price dp
        ON c.token = dp.token
        AND dp.hour = gs.hour     
        AND p.price IS NULL
        
WHERE gs.hour > DATE_TRUNC('{{Time-Series Granularity}}',LEAST('{{Reference Date}}',NOW()) ) - '{{Trailing Num Days}} days'::interval - '{{UTC Offset}} hours'::interval
    
) a
INNER JOIN projects pr
ON a.""exchange_contract_address"" = pr.""exchange_contract_address""

GROUP BY 1,2,3, 4, 5
) b

)
SELECT *,
SUM(usd_traded) OVER (ORDER BY dt ASC) AS running_usd, --no partition all dexs
SUM(num_trades) OVER (ORDER BY dt ASC) AS running_trades,
SUM(CASE WHEN running_tvl <0 THEN NULL WHEN category = 'DEX' THEN running_tvl ELSE NULL END) OVER (PARTITION BY dt) AS running_tvl_all

FROM (
    SELECT
    tvl.dt + '{{UTC Offset}} hours'::interval AS dt, 
    --tvl.exchange_contract_address, --DEXs like balancer have many pools per pair
    pr.proj_v, pr.pair, pr.pool, pr.category,
    pr.token_a_address, pr.token_b_address, pr.token_a_symbol, pr.token_b_symbol,
    SUM(CASE WHEN pr.category = 'DEX' THEN tvl.delta_tvl ELSE NULL END) AS delta_tvl,
    SUM(CASE WHEN pr.category = 'DEX' THEN tvl.add_tvl ELSE NULL END) AS add_tvl,
    SUM(CASE WHEN tvl.running_tvl <0 THEN NULL WHEN pr.category = 'DEX' THEN tvl.running_tvl ELSE NULL END) AS running_tvl,
    COALESCE(SUM(tr.usd_traded),0) AS usd_traded, COALESCE(SUM(tr.num_trades),0) AS num_trades
    FROM tvl
    INNER JOIN projects pr
    ON pr.exchange_contract_address = tvl.exchange_contract_address
    LEFT JOIN trades tr
    ON tr.""exchange_contract_address"" = tvl.exchange_contract_address
    AND tr.dt = tvl.dt
    GROUP BY 1,2,3,4,5,6,7,8,9
) a

    
ORDER BY dt DESC --this is important for counters
"
98815,Uniswap v3 Pair Deep-Dive (Depth Table),,"[{""id"": 198582, ""type"": ""chart"", ""name"": ""Liquidity Depth (All)"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Price (TokenB / TokenA)""}, ""tickFormat"": ""0.00a""}, ""yAxis"": [{""type"": ""-"", ""title"": {""text"": ""(Liquidity) USD per Tick $""}, ""tickFormat"": ""$0.00a""}, {""type"": ""linear"", ""title"": {""text"": ""Current Price (B/A)""}, ""tickFormat"": ""$0a""}], ""legend"": {""enabled"": false}, ""series"": {""stacking"": null}, ""reverseX"": false, ""numberFormat"": ""$0.00a"", ""columnMapping"": {"""": ""y"", ""price_flip"": ""x"", ""current_price"": ""y"", ""sum_usd_per_tick"": ""y"", ""total_usd_per_tick"": ""y""}, ""seriesOptions"": {""current_price"": {""name"": ""Current Price (B / A)"", ""type"": ""scatter"", ""color"": ""#E5347C"", ""yAxis"": 1, ""zIndex"": 1}, ""sum_usd_per_tick"": {""name"": ""USD per Tick (Liquidity)"", ""type"": ""column"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": false, ""globalSeriesType"": ""column""}, ""created_at"": ""2021-08-07T01:28:39.504428+00:00"", ""__typename"": ""visualizations""}, {""id"": 198581, ""type"": ""table"", ""name"": ""Liquidity Depth vs Last Price (WIP)"", ""options"": {""columns"": [{""name"": ""sum_usd_per_tick_p1"", ""title"": ""+"", ""alignContent"": ""right"", ""numberFormat"": ""$0.00a""}, {""name"": ""sum_usd_per_tick_n1"", ""title"": ""-"", ""alignContent"": ""right"", ""numberFormat"": ""$0.00a""}, {""name"": ""sum_usd_per_tick_abs1"", ""title"": ""+/-"", ""alignContent"": ""right"", ""numberFormat"": ""$0.00a""}, {""name"": ""range"", ""title"": ""% Range"", ""numberFormat"": """"}, {""name"": ""sum_usd_per_tick_p1 (1)"", ""numberFormat"": ""$0.00a""}, {""name"": ""sum_usd_per_tick_p"", ""title"": ""| + Range"", ""alignContent"": ""right"", ""numberFormat"": ""$0.00a""}, {""name"": ""p_pct"", ""title"": ""% of TVL"", ""alignContent"": ""center"", ""numberFormat"": ""0.00%""}, {""name"": ""sum_usd_per_tick_n"", ""title"": ""| - Range"", ""alignContent"": ""right"", ""numberFormat"": ""$0.00a""}, {""name"": ""n_pct"", ""title"": ""% of TVL"", ""alignContent"": ""center"", ""numberFormat"": ""0.00%""}, {""name"": ""sum_usd_per_tick_abs"", ""title"": ""| +/- Range"", ""alignContent"": ""right"", ""numberFormat"": ""$0.00a""}, {""name"": ""a_pct"", ""title"": ""% of TVL"", ""alignContent"": ""center"", ""numberFormat"": ""0.00%""}, {""name"": ""a_pct_100"", ""title"": ""% * 100"", ""numberFormat"": ""0.00""}]}, ""created_at"": ""2021-08-07T01:28:39.504428+00:00"", ""__typename"": ""visualizations""}, {""id"": 198598, ""type"": ""chart"", ""name"": ""WIP"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Range""}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""USD""}}, {""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": null}, ""reverseX"": false, ""numberFormat"": ""$0.00a"", ""columnMapping"": {"""": ""y"", ""range"": ""x"", ""sum_usd_per_tick_n"": ""y"", ""sum_usd_per_tick_p"": ""y""}, ""seriesOptions"": {""n_pct"": {""name"": ""- %"", ""type"": ""line"", ""yAxis"": 1, ""zIndex"": 3}, ""p_pct"": {""name"": ""+ %"", ""type"": ""line"", ""yAxis"": 1, ""zIndex"": 1}, ""sum_usd_per_tick_n"": {""name"": ""- Range"", ""type"": ""column"", ""yAxis"": 0, ""zIndex"": 1}, ""sum_usd_per_tick_p"": {""name"": ""+ Range"", ""type"": ""column"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2021-08-07T01:42:54.251241+00:00"", ""__typename"": ""visualizations""}, {""id"": 215754, ""type"": ""chart"", ""name"": ""Liquidity Depth"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Distance from Current Price (Two-Sided)""}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Liquidity (TVL) USD""}, ""tickFormat"": ""$0[.]00a""}, {""type"": ""linear"", ""title"": {""text"": ""Share of TVL (%)""}, ""tickFormat"": ""0[.]00a""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""0[.]00a"", ""columnMapping"": {""range"": ""x"", ""a_pct_100"": ""y"", ""sum_usd_per_tick_n"": ""y"", ""sum_usd_per_tick_p"": ""y"", ""sum_usd_per_tick_abs"": ""y""}, ""seriesOptions"": {""a_pct_100"": {""name"": ""Total Share of Pool TVL (%)"", ""type"": ""line"", ""yAxis"": 1, ""zIndex"": 1}, ""sum_usd_per_tick_n"": {""name"": ""- Range ($)"", ""type"": ""column"", ""yAxis"": 0, ""zIndex"": 0}, ""sum_usd_per_tick_p"": {""name"": ""+ Range ($)"", ""type"": ""column"", ""yAxis"": 0, ""zIndex"": 0}, ""sum_usd_per_tick_abs"": {""name"": ""Total Liquidity in Range ($)"", ""type"": ""scatter"", ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2021-08-16T00:45:27.171802+00:00"", ""__typename"": ""visualizations""}]","WITH get_liquidity AS ( --this is to find the liquidity of each position at trade time
SELECT *
FROM
(
SELECT *,
    LAST_VALUE(a.next_lp_amount) OVER(PARTITION BY ""tokenId"" ORDER BY call_block_time ASC) AS last_lp_amount
    FROM
    (
    SELECT *,
    lead(running_amount, 1, running_amount) OVER (PARTITION BY ""tokenId"" ORDER BY call_block_time asc) AS next_lp_amount
    FROM
    (
        SELECT amount, amount0, amount1, contract_address,call_block_time, call_tx_hash,
        ""tickLower"",""tickUpper"", /*liquidity,*/ ""tokenId"", tr_type,
        lead(call_block_time, 1, now()) OVER (PARTITION BY ""tokenId"" ORDER BY call_block_time asc) AS next_lp, --to help key in on the right lp when joining - for preformance
        lag(call_block_time, 1, '01-01-2000') OVER (PARTITION BY ""tokenId"" ORDER BY call_block_time asc) AS previous_lp,
        SUM(amount) OVER(PARTITION BY ""tokenId"" ORDER BY call_block_time ASC) AS running_amount,
        SUM(amount0) OVER(PARTITION BY ""tokenId"" ORDER BY call_block_time ASC) AS running_amount0,
        SUM(amount1) OVER(PARTITION BY ""tokenId"" ORDER BY call_block_time ASC) AS running_amount1,
        MIN(call_block_time) OVER(PARTITION BY ""tokenId"") AS liq_start
        
        FROM ( --this is a mess. We union new mints + adds to liquidity + new burns + removals from liquidity. eesh
            -- NEW MINTS
            SELECT
            m.amount, m.output_amount0 AS amount0, m.output_amount1 AS amount1, m.contract_address,
            m.call_block_time, m.call_tx_hash, m.""tickLower"", m.""tickUpper"",
            /*l.liquidity,*/ l.""output_tokenId""::text AS ""tokenId"", 'Mint' AS tr_type
            FROM uniswap_v3.""Pair_call_mint"" m
           
            INNER JOIN uniswap_v3.""NonfungibleTokenPositionManager_call_mint"" l
            ON m.call_tx_hash = l.call_tx_hash
            AND m.call_block_time = l.call_block_time
            
            WHERE l.""output_tokenId""::text IS NOT NULL --Some of these are blank, but the transactions are batched/kind of weird or have 0 amount. Maybe revisit, but these seem like duplicates/multiples within a larger transaction that we catch
            AND (m.amount != 0) --only events that do something
            AND m.contract_address = REPLACE('{{Pool Address}}','0x','\x')::bytea
            AND m.call_success = 'true' AND l.call_success = 'true'
            AND m.""call_block_time"" <= LEAST('{{Reference Date}}',NOW())
    
            
            UNION
            --ADDITIONS TO LIQUIDITY INCREASE
            SELECT
            m.amount, m.output_amount0 AS amount0, m.output_amount1 AS amount1, m.contract_address,
            m.call_block_time, m.call_tx_hash, m.""tickLower"", m.""tickUpper"",
            /*l.liquidity,*/ (l.params->'tokenId')::text AS ""tokenId"", 'Mint' AS tr_type
            FROM uniswap_v3.""Pair_call_mint"" m
           
            INNER JOIN uniswap_v3.""NonfungibleTokenPositionManager_call_increaseLiquidity"" l
            ON m.call_tx_hash = l.call_tx_hash
            AND m.call_block_time = l.call_block_time
            
            WHERE (l.params->'tokenId')::text IS NOT NULL --Some of these are blank, but the transactions are batched/kind of weird or have 0 amount. Maybe revisit, but these seem like duplicates/multiples within a larger transaction that we catch
            AND (m.amount != 0) --only events that do something
            AND m.contract_address = REPLACE('{{Pool Address}}','0x','\x')::bytea
            AND m.call_success = 'true' AND l.call_success = 'true'
            AND m.""call_block_time"" < LEAST('{{Reference Date}}',NOW())
            
            UNION
            -- NEW BURNS // uniswap_v3.""NonfungibleTokenPositionManager_call_burn"" doesn't do anything so jsut decrease liq
            SELECT --negate because these are burns
            (-1)*b.amount AS amount, (-1)*b.output_amount0 AS amount0, (-1)*b.output_amount1 AS amount1, b.contract_address,
            b.call_block_time, b.call_tx_hash, b.""tickLower"", b.""tickUpper"",
            /*l.liquidity,*/ (l.params->'tokenId')::text AS tokenId, 'Burn' AS tr_type
            FROM uniswap_v3.""Pair_call_burn"" b
            
            INNER JOIN uniswap_v3.""NonfungibleTokenPositionManager_call_decreaseLiquidity"" l
            ON b.call_tx_hash = l.call_tx_hash
            AND b.call_block_time = l.call_block_time
            
            WHERE (l.params->'tokenId')::text IS NOT NULL --Some of these are blank, but the transactions are batched/kind of weird or have 0 amount. Maybe revisit, but these seem like duplicates/multiples within a larger transaction that we catch
            AND (b.amount != 0) --only events that do something
            AND b.contract_address = REPLACE('{{Pool Address}}','0x','\x')::bytea
            AND b.call_success = 'true'
            AND l.call_success = 'true'
            AND l.""call_block_time"" < LEAST('{{Reference Date}}',NOW())
            
            ) lq
        ) la
    --Since we already calc'd running amounts, we can ditch all LP events besides the last one before the 2 day / stuff within the 2 day.
    -- We'll use 'next LP' to do this
    WHERE next_lp = NOW() -- to make sure we're grabbing the latest LP
        -->= (DATE_TRUNC('minute',CURRENT_TIMESTAMP) - '2 days'::INTERVAL)
) a
WHERE running_amount >0 --check this later, but we should be able to ditch these too since matching is on block time and next lp

) b
WHERE last_lp_amount >0
),


trades
AS (
    SELECT pool, ""token0"" AS ""token_a_address"", ""token1"" AS ""token_b_address""
    FROM uniswap_v3.""Factory_evt_PoolCreated"" p
        WHERE p.pool = REPLACE('{{Pool Address}}','0x','\x')::bytea
)

,prices AS
(
SELECT *
FROM
(
    SELECT *,
    DENSE_RANK() OVER(PARTITION BY ""contract_address"" ORDER BY minute DESC) as trank
    FROM prices.""usd"" p
    WHERE p.minute > DATE_TRUNC('{{Time-Series Granularity}}',LEAST('{{Reference Date}}',NOW()) ) - '2 days'::interval
    AND (
        ""contract_address"" = (SELECT DISTINCT ""token_b_address"" FROM trades)
        OR ""contract_address"" = (SELECT DISTINCT ""token_a_address"" FROM trades)
        )
) a
WHERE trank = 1
)

,gs AS
(
SELECT DISTINCT d.token_a_address AS token, gs.hour FROM trades d
INNER JOIN 
(SELECT generate_series(DATE_TRUNC('hour',LEAST('{{Reference Date}}',NOW()) ) - interval '3 days', date_trunc('hour', LEAST('{{Reference Date}}',NOW()) ), '1 hour') AS hour) gs -- Generate all days since the first contract
ON 1=1

UNION

SELECT DISTINCT d.token_b_address AS token, gs.hour FROM trades d
INNER JOIN 
(SELECT generate_series(DATE_TRUNC('hour',LEAST('{{Reference Date}}',NOW()) ) - interval '3 days', date_trunc('hour', LEAST('{{Reference Date}}',NOW()) ), '1 hour') AS hour) gs -- Generate all days since the first contract
ON 1=1
)

,dex_price AS(
--for tokens where dune doesn't have the price, calculate the avg price in it's last hour of swaps (6 hr if no swaps in the last hour)
--since we don't have an amount field for unmapped tokens, I'll calc it based on... raw amount
-- through a few queries, this gets the unit price of each token (assuming 18 decimals)
-- DO NOT USE THIS FOR KNOWN TOKENS - only for the ones we don't have, we'll assume 18 decimals
SELECT
hour, token, 
symbol, decimals, median_price
FROM
(
SELECT *,
lead(hour, 1, LEAST('{{Reference Date}}',NOW())  ) OVER (PARTITION BY token
                            ORDER BY hour asc) AS next_hour,
    DENSE_RANK() OVER (PARTITION BY token ORDER BY hour DESC) AS trank
FROM
(
SELECT

DATE_TRUNC('hour',hour) AS hour,
t.contract_address AS token, ea.symbol AS symbol, ea.decimals AS decimals,
percentile_cont(0.5) WITHIN GROUP (ORDER BY ""median_price"") AS median_price

FROM dex.""view_token_prices"" t

INNER JOIN (SELECT DISTINCT token FROM gs) c
ON t.contract_address = c.token
INNER JOIN erc20.""tokens"" ea --both need to have known decimals, we're not going to assume anything.
ON ea.""contract_address"" = t.contract_address

WHERE
(ea.decimals IS NOT NULL)
AND median_price > 0

AND DATE_TRUNC('hour',hour) > 
(DATE_TRUNC('{{Time-Series Granularity}}',LEAST('{{Reference Date}}',NOW()) ) - '2 days'::interval)
AND DATE_TRUNC('hour',hour) <= LEAST('{{Reference Date}}',NOW()) + interval '1 day'

GROUP BY 1,2,3,4
) b
) c
WHERE trank = 1

),


last_trade AS
(
SELECT tick, ""contract_address"" FROM
uniswap_v3.""Pair_evt_Swap""
WHERE ""contract_address"" = REPLACE('{{Pool Address}}','0x','\x')::bytea
AND ""evt_block_time"" > 
(DATE_TRUNC('{{Time-Series Granularity}}',LEAST('{{Reference Date}}',NOW()) ) - '90 days'::interval)
ORDER BY ""evt_block_time"" DESC
LIMIT 1
)

,liq_gs_minmax AS
(
SELECT 
ticks,
ticks - ptick AS tickdiff,
100 * ( ( (1.0001)^(ticks - ptick) ) - 1 ) AS tickdiff_pct
/* Formula based on section 4 governance 

"".... The initial fee tiers and tick spacings supported
are 0.05% (with a tick spacing of 10, approximately 0.10% between
initializable ticks), 0.30% (with a tick spacing of 60, approximately
0.60% between initializable ticks), and 1% (with a tick spacing of
200, approximately 2.02% between ticks.""

link: https://uniswap.org/whitepaper-v3.pdf */
FROM
    (
    SELECT
    generate_series(lq.minl, lq.max1, ""tickSpacing"") AS ticks
    , ""tickSpacing"" AS space
    , tick AS ptick
    FROM
    (SELECT tick, ""contract_address"" FROM last_trade) l
    INNER JOIN uniswap_v3.""Factory_evt_PoolCreated"" p
        ON p.""pool"" = l.contract_address
    INNER JOIN (SELECT
            contract_address,
            MIN(""tickLower"") AS minl,
            MAX(""tickUpper"") AS max1 FROM get_liquidity GROUP BY 1) lq
        ON p.""pool"" = lq.contract_address
    
    ) lg
)



, stats AS (
SELECT ticks,
price,
sum_usd_per_tick,
CASE WHEN '{{Price Shown}}' = 'B / A' AND price > 0 THEN
1.0/(price::decimal)
WHEN '{{Price Shown}}' = 'A / B' THEN price
ELSE NULL
END AS price,
CASE WHEN '{{Price Shown}}' = 'B / A' THEN
tickdiff_pct*(-1) ELSE tickdiff_pct
END AS tickdiff_pct


FROM
(
SELECT
ticks,
price,
tickdiff_pct,
--price_flip,
SUM(total_usd_per_tick) AS sum_usd_per_tick,

NULL AS current_price
FROM
(

SELECT 
lg.ticks,
lg.tickdiff_pct,
--1.0001^lg.ticks AS price,
 CASE  --assuming 18 for decimals if null
        WHEN lg.ticks < 0 THEN (1.0001^(lg.ticks)) * (10^(ABS(COALESCE(pa.decimals, dpa.decimals,18)-COALESCE(pb.decimals, dpb.decimals,18))))
        ELSE (1.0001^(lg.ticks)) / (10^(ABS(COALESCE(pa.decimals, dpa.decimals,18)-COALESCE(pb.decimals, dpb.decimals,18))))
    END AS price,
--1/(1.0001^(lg.ticks)) AS price_flip,
--""tokenId"",
amount_per_tick,
token_a_usd,
token_b_usd,
( COALESCE(pa.price, dpa.median_price)*(""amount0""/10^(COALESCE(pa.decimals, dpa.decimals))) )
    /tick_breaks AS a_usd_per_tick,
    
( COALESCE(pb.price, dpb.median_price)*(""amount1""/10^(COALESCE(pb.decimals, dpb.decimals))) )
    /tick_breaks AS b_usd_per_tick,

( -- a per tick
( COALESCE(pa.price, dpa.median_price)*(""amount0""/10^(COALESCE(pa.decimals, dpa.decimals))) )
    /tick_breaks
)
+
( -- a per tick
( COALESCE(pb.price, dpb.median_price)*(""amount1""/10^(COALESCE(pb.decimals, dpb.decimals))) )
    /tick_breaks
)
AS total_usd_per_tick

,NULL AS current_price

FROM
(
    
    SELECT l.*, p.""tickSpacing"", ((l.""tickUpper"" - l.""tickLower"")/p.""tickSpacing"")+1 AS tick_breaks, --we add 1 because the LP is initialized on a tick (i.e. 0-20 with a 10 space supports 0, 10, and 20 ticks)
    l.amount / ( (l.""tickUpper"" - l.""tickLower"")/p.""tickSpacing"" ) AS amount_per_tick,
    l.""amount0""/10^(COALESCE(pa.decimals, dpa.decimals)) AS token_a_num,
    COALESCE(pa.price, dpa.median_price)*(l.""amount0""/10^(COALESCE(pa.decimals, dpa.decimals))) AS token_a_usd,
    l.""amount1""/10^(COALESCE(pb.decimals, dpb.decimals)) AS token_b_num,
    COALESCE(pb.price, dpb.median_price)*(l.""amount1""/10^(COALESCE(pb.decimals, dpb.decimals))) AS token_b_usd
    ,p.""token0"",p.""token1""
    FROM get_liquidity l
    INNER JOIN uniswap_v3.""Factory_evt_PoolCreated"" p
    ON p.""pool"" = l.contract_address

    -- idk a better way to do this join
    LEFT JOIN prices pa
    ON pa.contract_address = p.""token0""
    LEFT JOIN prices pb
    ON pb.contract_address = p.""token1""
    LEFT JOIN dex_price dpa
    ON dpa.token = p.""token0""
    LEFT JOIN dex_price dpb
    ON dpb.token = p.""token1""
    
    WHERE p.""tickSpacing"" > 0

) ta
INNER JOIN liq_gs_minmax lg
ON lg.ticks <= ta.""tickUpper""
AND lg.ticks >= ta.""tickLower""

    -- idk a better way to do this join
    LEFT JOIN prices pa
    ON pa.contract_address = ta.""token0""
    LEFT JOIN prices pb
    ON pb.contract_address = ta.""token1""
    LEFT JOIN dex_price dpa
    ON dpa.token = ta.""token0""
    LEFT JOIN dex_price dpb
    ON dpb.token = ta.""token1""

) ap

GROUP BY 1,2,3

UNION ALL

SELECT
lt.tick /*1.0001^(lt.tick),*/
, CASE  --assuming 18 for decimals if null
        WHEN lt.tick < 0 THEN (1.0001^(lt.tick)) * (10^(ABS(COALESCE(pa.decimals, dpa.decimals,18)-COALESCE(pb.decimals, dpb.decimals,18))))
        ELSE (1.0001^(lt.tick)) / (10^(ABS(COALESCE(pa.decimals, dpa.decimals,18)-COALESCE(pb.decimals, dpb.decimals,18))))
    END AS price
,NULL, NULL
, CASE  --assuming 18 for decimals if null
        WHEN lt.tick < 0 THEN (1.0001^(lt.tick)) * (10^(ABS(COALESCE(pa.decimals, dpa.decimals,18)-COALESCE(pb.decimals, dpb.decimals,18))))
        ELSE (1.0001^(lt.tick)) / (10^(ABS(COALESCE(pa.decimals, dpa.decimals,18)-COALESCE(pb.decimals, dpb.decimals,18))))
    END AS price
FROM last_trade lt
INNER JOIN uniswap_v3.""Factory_evt_PoolCreated"" p
    ON p.""pool"" = lt.contract_address
    LEFT JOIN prices pa
    ON pa.contract_address = p.""token0""
    LEFT JOIN prices pb
    ON pb.contract_address = p.""token1""
    LEFT JOIN dex_price dpa
    ON dpa.token = p.""token0""
    LEFT JOIN dex_price dpb
    ON dpb.token = p.""token1""
) eh
)


SELECT 

range,
sum_usd_per_tick_p,
sum_usd_per_tick_p/sum_all AS p_pct,

sum_usd_per_tick_n,
sum_usd_per_tick_n/sum_all AS n_pct,

sum_usd_per_tick_abs,
sum_usd_per_tick_abs/sum_all AS a_pct,
100*(sum_usd_per_tick_abs/sum_all) AS a_pct_100

FROM
(
    SELECT
    '0.5%' AS range,
    SUM(CASE WHEN tickdiff_pct BETWEEN 0 AND 0.5 THEN sum_usd_per_tick ELSE 0 END) AS sum_usd_per_tick_p,
    SUM(CASE WHEN tickdiff_pct BETWEEN -0.5 AND 0 THEN sum_usd_per_tick ELSE 0 END) AS sum_usd_per_tick_n,
    SUM(CASE WHEN tickdiff_pct BETWEEN -0.5 AND 0.5 THEN sum_usd_per_tick ELSE 0 END) AS sum_usd_per_tick_abs,
    SUM(sum_usd_per_tick) AS sum_all
    FROM stats
    
    UNION ALL
    
    SELECT
    '1%' AS range,
    SUM(CASE WHEN tickdiff_pct BETWEEN 0 AND 1 THEN sum_usd_per_tick ELSE 0 END) AS sum_usd_per_tick_p,
    SUM(CASE WHEN tickdiff_pct BETWEEN -1 AND 0 THEN sum_usd_per_tick ELSE 0 END) AS sum_usd_per_tick_n,
    SUM(CASE WHEN tickdiff_pct BETWEEN -1 AND 1 THEN sum_usd_per_tick ELSE 0 END) AS sum_usd_per_tick_abs,
    SUM(sum_usd_per_tick) AS sum_all
    FROM stats
    
    UNION ALL
    
    SELECT
    '2%' AS range,
    SUM(CASE WHEN tickdiff_pct BETWEEN 0 AND 2 THEN sum_usd_per_tick ELSE 0 END) AS sum_usd_per_tick_p,
    SUM(CASE WHEN tickdiff_pct BETWEEN -2 AND 0 THEN sum_usd_per_tick ELSE 0 END) AS sum_usd_per_tick_n,
    SUM(CASE WHEN tickdiff_pct BETWEEN -2 AND 2 THEN sum_usd_per_tick ELSE 0 END) AS sum_usd_per_tick_abs,
    SUM(sum_usd_per_tick) AS sum_all
    FROM stats
    
    UNION ALL
    
    SELECT
    '3%' AS range,
    SUM(CASE WHEN tickdiff_pct BETWEEN 0 AND 3 THEN sum_usd_per_tick ELSE 0 END) AS sum_usd_per_tick_p,
    SUM(CASE WHEN tickdiff_pct BETWEEN -3 AND 0 THEN sum_usd_per_tick ELSE 0 END) AS sum_usd_per_tick_n,
    SUM(CASE WHEN tickdiff_pct BETWEEN -3 AND 3 THEN sum_usd_per_tick ELSE 0 END) AS sum_usd_per_tick_abs,
    SUM(sum_usd_per_tick) AS sum_all
    FROM stats
    
    UNION ALL
    
    SELECT
    '4%' AS range,
    SUM(CASE WHEN tickdiff_pct BETWEEN 0 AND 4 THEN sum_usd_per_tick ELSE 0 END) AS sum_usd_per_tick_p,
    SUM(CASE WHEN tickdiff_pct BETWEEN -4 AND 0 THEN sum_usd_per_tick ELSE 0 END) AS sum_usd_per_tick_n,
    SUM(CASE WHEN tickdiff_pct BETWEEN -4 AND 4 THEN sum_usd_per_tick ELSE 0 END) AS sum_usd_per_tick_abs,
    SUM(sum_usd_per_tick) AS sum_all
    FROM stats
    
    UNION ALL
    
    SELECT 
    '5%' AS range,
    SUM(CASE WHEN tickdiff_pct BETWEEN 0 AND 5 THEN sum_usd_per_tick ELSE 0 END) AS sum_usd_per_tick_p,
    SUM(CASE WHEN tickdiff_pct BETWEEN -5 AND 0 THEN sum_usd_per_tick ELSE 0 END) AS sum_usd_per_tick_n,
    SUM(CASE WHEN tickdiff_pct BETWEEN -5 AND 5 THEN sum_usd_per_tick ELSE 0 END) AS sum_usd_per_tick_abs,
    SUM(sum_usd_per_tick) AS sum_all
    FROM stats
) form_table"
95555,Uniswap v3 Pair Deep-Dive,,"[{""id"": 191509, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Uni V3 Pool"", ""counterColName"": ""pool""}, ""created_at"": ""2021-08-03T06:54:08.227086+00:00"", ""__typename"": ""visualizations""}, {""id"": 191482, ""type"": ""counter"", ""name"": ""Counter"", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Uniswap v3 TVL"", ""stringPrefix"": ""$"", ""stringDecimal"": 2, ""counterColName"": ""running_tvl""}, ""created_at"": ""2021-08-03T06:03:42.192798+00:00"", ""__typename"": ""visualizations""}, {""id"": 191678, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Pool URL"", ""counterColName"": ""pool_url""}, ""created_at"": ""2021-08-03T08:23:59.400455+00:00"", ""__typename"": ""visualizations""}, {""id"": 190980, ""type"": ""chart"", ""name"": ""Uniswap v3 Trading Volume"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Time""}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""$ USD Volume""}, ""tickFormat"": ""$0a""}, {""type"": ""linear"", ""title"": {""text"": ""Cumulative""}}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""$0.00a"", ""columnMapping"": {"""": ""y"", ""dt"": ""x"", ""usd_traded"": ""y""}, ""seriesOptions"": {""usd_traded"": {""name"": ""USD Volume (Uni v3)"", ""type"": ""column"", ""color"": ""#EA337A"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2021-08-03T02:46:44.940708+00:00"", ""__typename"": ""visualizations""}, {""id"": 191000, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Uni V3 Trading Volume (In Period)"", ""stringPrefix"": ""$"", ""stringDecimal"": 2, ""counterColName"": ""running_usd""}, ""created_at"": ""2021-08-03T02:55:53.353619+00:00"", ""__typename"": ""visualizations""}, {""id"": 191002, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Uni v3 #Trades (In Period)"", ""stringDecimal"": 0, ""counterColName"": ""running_trades""}, ""created_at"": ""2021-08-03T02:56:30.428078+00:00"", ""__typename"": ""visualizations""}, {""id"": 190965, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-08-03T02:35:26.717869+00:00"", ""__typename"": ""visualizations""}, {""id"": 193121, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""dt"", ""title"": ""Time""}, {""name"": ""proj_v"", ""title"": ""Project""}, {""name"": ""usd_traded"", ""title"": ""USD Traded"", ""alignContent"": ""right"", ""numberFormat"": ""$0.00a""}, {""name"": ""running_tvl"", ""title"": ""TVL"", ""alignContent"": ""right"", ""numberFormat"": ""$0.00a""}, {""name"": ""num_trades"", ""title"": ""# Trades"", ""alignContent"": ""right"", ""numberFormat"": ""0.00a""}, {""name"": ""delta_tvl"", ""title"": ""\u0394 TVL"", ""alignContent"": ""right"", ""numberFormat"": ""$0.00a""}, {""name"": ""add_tvl"", ""title"": ""Added TVL"", ""alignContent"": ""right"", ""numberFormat"": ""$0.00a""}, {""name"": ""running_usd"", ""title"": ""Running USD Volume"", ""alignContent"": ""right"", ""numberFormat"": ""$0.00a""}, {""name"": ""running_trades"", ""title"": ""Running # Trades"", ""alignContent"": ""right"", ""numberFormat"": ""0.00a""}, {""name"": ""pool_url"", ""title"": ""Pool"", ""alignContent"": ""left""}, {""name"": ""exchange_contract_address"", ""title"": ""Contract Address""}, {""name"": ""pair"", ""title"": ""Pair""}, {""name"": ""pool"", ""title"": ""Pool""}, {""name"": ""token_a_address"", ""title"": ""Token A Address""}, {""name"": ""token_b_address"", ""title"": ""Token B Address""}, {""name"": ""token_a_symbol"", ""title"": ""Token A Symbol""}, {""name"": ""token_b_symbol"", ""title"": ""Token B Symbol""}]}, ""created_at"": ""2021-08-03T23:17:14.789056+00:00"", ""__typename"": ""visualizations""}, {""id"": 191330, ""type"": ""chart"", ""name"": ""Volume x TVL"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Time""}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""TVL $""}, ""tickFormat"": ""$0[.]00a""}, {""type"": ""-"", ""title"": {""text"": ""Trade Volume $""}, ""tickFormat"": ""$0[.]00a""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""$0.00a"", ""columnMapping"": {""dt"": ""x"", ""delta_tvl"": ""y"", ""usd_traded"": ""y"", ""running_tvl"": ""y""}, ""seriesOptions"": {""delta_tvl"": {""name"": ""\u0394 TVL"", ""type"": ""line"", ""yAxis"": 0, ""zIndex"": 0}, ""usd_traded"": {""name"": ""Trade Volume"", ""type"": ""column"", ""color"": ""#EA337A"", ""yAxis"": 1, ""zIndex"": 2}, ""running_tvl"": {""name"": ""TVL"", ""type"": ""area"", ""color"": ""#E1E1E1"", ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""area""}, ""created_at"": ""2021-08-03T05:20:31.812776+00:00"", ""__typename"": ""visualizations""}, {""id"": 191508, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""columnMapping"": {""dt"": ""x"", ""pair"": ""series"", ""exchange_contract_address"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""line""}, ""created_at"": ""2021-08-03T06:53:47.722961+00:00"", ""__typename"": ""visualizations""}]","WITH trades
AS (
    SELECT 
    DATE_TRUNC('{{Time-Series Granularity}}',t.""block_time"") AS dt,
    project, version,
    CASE WHEN version = '1' THEN project
    ELSE project || ' V' || version || ' - ' || ( ROUND(p.fee/1e4,2) )::text || '%'
    END as proj_v,
    ""exchange_contract_address"",
    t.""token_a_address"",
    t.""token_b_address"",
    t.""token_a_symbol"",
    t.""token_b_symbol"",
    t.""token_a_symbol"" || '/' || t.""token_b_symbol"" AS pair,
    t.""token_a_symbol"" || '/' || t.""token_b_symbol"" || ' - ' || ( ROUND(p.fee/1e4,2) )::text || '%' AS pool,
    SUM(t.token_a_amount) AS token_a_amount,
    SUM(t.token_b_amount) AS token_b_amount,
    --t.trader_a AS user,
    SUM(t.usd_amount) AS usd_traded,
    COUNT(t.usd_amount) AS num_trades,
    COUNT(DISTINCT t.trader_a) AS num_users
    
    FROM dex.trades t
    INNER JOIN uniswap_v3.""Factory_evt_PoolCreated"" p
    ON t.exchange_contract_address = p.pool
    
    WHERE t.project = 'Uniswap'
    AND t.version = '3'
    AND t.""block_time"" > LEAST('{{Reference Date}}',NOW()) - '{{Trailing Num Days}} days'::interval  - '{{UTC Offset}} hours'::interval
    AND t.""exchange_contract_address"" = REPLACE(LOWER('{{Pool Address}}'),'0x','\x')::bytea
    
    GROUP BY 1,2,3,4,5,6,7,8,9,10,11
)
,prices AS
(
SELECT * FROM prices.""usd"" p
WHERE p.minute > LEAST('{{Reference Date}}',NOW()) - '{{Trailing Num Days}} days'::interval  - '{{UTC Offset}} hours'::interval
AND (
    ""contract_address"" IN (SELECT ""token_b_address"" FROM trades GROUP BY 1)
    OR ""contract_address"" IN (SELECT ""token_a_address"" FROM trades GROUP BY 1)
    )
)

,projects AS
(
    SELECT DISTINCT
    ""exchange_contract_address"", proj_v, pair, pool,
    token_a_address, token_b_address, token_a_symbol, token_b_symbol
    FROM trades
)

,gs AS
(
SELECT DISTINCT d.token_a_address AS token, gs.hour FROM trades d
INNER JOIN 
(SELECT generate_series(DATE_TRUNC('hour',LEAST(('{{Reference Date}}'::date - '{{UTC Offset}} hours'::interval),NOW()) ) - interval '{{Trailing Num Days}} day', date_trunc('hour', LEAST(('{{Reference Date}}'::date - '{{UTC Offset}} hours'::interval),NOW()) ), '1 hour') AS hour) gs -- Generate all days since the first contract
ON 1=1

UNION

SELECT DISTINCT d.token_b_address AS token, gs.hour FROM trades d
INNER JOIN 
(SELECT generate_series(DATE_TRUNC('hour',LEAST(('{{Reference Date}}'::date - '{{UTC Offset}} hours'::interval),NOW()) ) - interval '{{Trailing Num Days}} day', date_trunc('hour', LEAST(('{{Reference Date}}'::date - '{{UTC Offset}} hours'::interval),NOW()) ), '1 hour') AS hour) gs -- Generate all days since the first contract
ON 1=1
)

,dex_price AS(
--for tokens where dune doesn't have the price, calculate the avg price in it's last hour of swaps (6 hr if no swaps in the last hour)
--since we don't have an amount field for unmapped tokens, I'll calc it based on... raw amount
-- through a few queries, this gets the unit price of each token (assuming 18 decimals)
-- DO NOT USE THIS FOR KNOWN TOKENS - only for the ones we don't have, we'll assume 18 decimals
SELECT
gs.hour, gs.token, 
symbol, decimals, median_price
FROM
(
SELECT *,
lead(hour, 1, LEAST('{{Reference Date}}'::date - '{{UTC Offset}} hours'::interval,NOW())  ) OVER (PARTITION BY token
                            ORDER BY hour asc) AS next_hour
FROM
(
SELECT

DATE_TRUNC('hour',hour) AS hour,
t.contract_address AS token, ea.symbol AS symbol, ea.decimals AS decimals,
percentile_cont(0.5) WITHIN GROUP (ORDER BY ""median_price"") AS median_price

FROM dex.""view_token_prices"" t

INNER JOIN (SELECT token FROM gs GROUP BY 1) c
ON t.contract_address = c.token
INNER JOIN erc20.""tokens"" ea --both need to have known decimals, we're not going to assume anything.
ON ea.""contract_address"" = t.contract_address

WHERE
(ea.decimals IS NOT NULL)
AND median_price > 0

AND DATE_TRUNC('hour',hour) > 
(DATE_TRUNC('{{Time-Series Granularity}}',LEAST('{{Reference Date}}'::date,NOW()) ) - '{{Trailing Num Days}} days'::interval - '{{UTC Offset}} hours'::interval)
AND DATE_TRUNC('hour',hour) <= LEAST('{{Reference Date}}'::date - '{{UTC Offset}} hours'::interval,NOW()) + interval '1 day'

GROUP BY 1,2,3,4
) b
) c
INNER JOIN gs
ON c.hour <= gs.hour
AND gs.hour < c.next_hour
AND gs.token = c.token
)

, tvl AS (

SELECT DISTINCT
dt, 
exchange_contract_address,
SUM(delta_tvl) OVER (PARTITION BY dt, exchange_contract_address)
    AS delta_tvl,
SUM(add_tvl) OVER (PARTITION BY dt, exchange_contract_address)
    AS add_tvl,
LAST_VALUE(running_tvl) OVER (PARTITION BY dt, exchange_contract_address 
                            ORDER BY hour::timestamp ASC
                            ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
                            )
    AS running_tvl

FROM
(
SELECT
hour,
DATE_TRUNC('{{Time-Series Granularity}}',hour) AS dt,
exchange_contract_address,
COALESCE(SUM(val_usd),0) AS delta_tvl,
COALESCE(SUM(addval_usd),0) AS add_tvl,
COALESCE(SUM(sumval_usd),0) AS running_tvl

FROM
(
SELECT 
gs.hour + '{{UTC Offset}} hours'::interval AS hour, gs.token, exchange_contract_address,
CASE WHEN gs.hour = c.hour THEN val ELSE 0 END AS val,
CASE WHEN gs.hour = c.hour THEN val/(10^COALESCE(p.decimals,dp.decimals)) ELSE 0 END AS val_tokens,
CASE WHEN gs.hour = c.hour THEN COALESCE(p.price,dp.median_price)*(val/(10^COALESCE(p.decimals,dp.decimals))) ELSE 0 END AS val_usd,

CASE WHEN gs.hour = c.hour THEN addval ELSE 0 END AS addval,
CASE WHEN gs.hour = c.hour THEN addval/(10^COALESCE(p.decimals,dp.decimals)) ELSE 0 END AS addval_tokens,
CASE WHEN gs.hour = c.hour THEN COALESCE(p.price,dp.median_price)*(addval/(10^COALESCE(p.decimals,dp.decimals))) ELSE 0 END AS addval_usd,

sumval,
sumval/(10^COALESCE(p.decimals,dp.decimals)) AS sumval_tokens,
COALESCE(p.price,dp.median_price)*(sumval/(10^COALESCE(p.decimals,dp.decimals))) AS sumval_usd


FROM
(
    SELECT
    *,
    lead(hour, 1, LEAST('{{Reference Date}}',NOW())  ) OVER (PARTITION BY contract_address, exchange_contract_address
                            ORDER BY hour asc) AS next_hour,
    SUM(val) OVER (PARTITION BY contract_address, exchange_contract_address ORDER BY hour ASC) AS sumval
    FROM
    (
    SELECT
    hour,
    contract_address,
    exchange_contract_address,
    SUM(val) AS val,
    SUM(CASE WHEN val >0 THEN val ELSE 0 END) AS addval
    --SUM(val) OVER (PARTITION BY contract_address, exchange_contract_address ORDER BY hour ASC) AS sumval
    --SUM( price*(val/(10^decimals)) ) AS usd_tvl
    
    FROM (
        SELECT 
        DATE_TRUNC('hour',e.""evt_block_time"") AS hour, ""to"" AS exchange_contract_address,
        e.""contract_address"", SUM(value) AS val
        FROM erc20.""ERC20_evt_Transfer"" e
        
        WHERE ""to"" IN (SELECT exchange_contract_address FROM trades GROUP BY 1)

        GROUP BY 1,2,3
        
        UNION ALL
        
        SELECT 
        DATE_TRUNC('hour',eb.""evt_block_time"") AS hour, ""from"" AS exchange_contract_address,
        eb.""contract_address"", SUM(-value) AS val
        FROM erc20.""ERC20_evt_Transfer"" eb
        
        WHERE ""from"" IN (SELECT exchange_contract_address FROM trades GROUP BY 1)
        
        GROUP BY 1,2,3
        
        ) tr
        GROUP BY 1,2,3
        ) mod

) c
INNER JOIN gs
ON c.hour <= gs.hour
AND gs.hour < c.next_hour
AND gs.token = c.contract_address
LEFT JOIN prices p
        ON p.""contract_address"" = gs.token
        AND
        CASE WHEN DATE_TRUNC('hour',gs.hour) = DATE_TRUNC('hour',LEAST('{{Reference Date}}',NOW()) )
        THEN p.""minute"" = DATE_TRUNC('hour',LEAST('{{Reference Date}}',NOW()) )
        ELSE p.""minute"" = DATE_TRUNC('minute',gs.hour) + interval '59 minutes'
        END
    LEFT JOIN dex_price dp
        ON gs.token = dp.token
        AND dp.hour = gs.hour     
        AND p.price IS NULL
        
WHERE gs.hour > DATE_TRUNC('{{Time-Series Granularity}}',LEAST('{{Reference Date}}',NOW()) ) - '{{Trailing Num Days}} days'::interval  - '{{UTC Offset}} hours'::interval
    
) a

GROUP BY 1,2,3
) b

)

SELECT
tvl.dt,
--pr.proj_v, 
COALESCE(tr.usd_traded,0) AS usd_traded, 
tvl.running_tvl,
COALESCE(tr.num_trades,0) AS num_trades,
tvl.delta_tvl, tvl.add_tvl, 

'<a href=""https://info.uniswap.org/#/pools/' || REPLACE(tvl.exchange_contract_address::text,'\','0') || '"">' || REPLACE(tvl.exchange_contract_address::text,'\','0') || '</a>' AS pool_url,

 tvl.exchange_contract_address,
SUM(usd_traded) OVER (PARTITION BY tvl.exchange_contract_address ORDER BY tvl.dt ASC) AS running_usd,
SUM(num_trades) OVER (PARTITION BY tvl.exchange_contract_address ORDER BY tvl.dt ASC) AS running_trades,
pr.pair, pr.pool,
 pr.token_a_address, pr.token_b_address, pr.token_a_symbol, pr.token_b_symbol

FROM tvl
INNER JOIN projects pr
ON pr.exchange_contract_address = tvl.exchange_contract_address
LEFT JOIN trades tr
ON tr.""exchange_contract_address"" = tvl.exchange_contract_address
AND tr.dt = tvl.dt
    
ORDER BY dt DESC --this is important for counters"
95789,Uniswap v3 Pair Deep-Dive (Depth by LP),Top 100 LP Positions by TVL: Zoomed in on the 'Tick Range' set from the current price.,"[{""id"": 191665, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-08-03T08:15:44.936466+00:00"", ""__typename"": ""visualizations""}, {""id"": 191666, ""type"": ""chart"", ""name"": ""Liquidity Depth (by LP Token ID)"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Price""}, ""tickFormat"": ""0[.]00a""}, ""yAxis"": [{""type"": ""-"", ""title"": {""text"": ""USD per Tick $""}, ""tickFormat"": ""$0[.]00a""}, {""type"": ""linear"", ""title"": {""text"": ""Current Price $""}, ""tickFormat"": ""$0[.]00a""}], ""legend"": {""enabled"": false}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""numberFormat"": ""$0.00a"", ""columnMapping"": {"""": ""y"", ""lp_map"": ""series"", ""tokenId"": ""series"", ""selected_price"": ""x"", ""total_usd_per_tick"": ""y""}, ""seriesOptions"": {""current_price"": {""name"": ""Current Price (B / A)"", ""type"": ""scatter"", ""color"": ""#BC2D66"", ""yAxis"": 1, ""zIndex"": 1}, ""total_usd_per_tick"": {""name"": ""USD per Tick"", ""type"": ""column"", ""color"": ""#345FB7"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": false, ""globalSeriesType"": ""column""}, ""created_at"": ""2021-08-03T08:15:44.936466+00:00"", ""__typename"": ""visualizations""}, {""id"": 193120, ""type"": ""chart"", ""name"": ""Position Share In Displayed Tick Range"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""$0.00a"", ""columnMapping"": {""lp_map"": ""x"", ""tokenId"": ""x"", ""total_usd_per_tick"": ""y""}, ""seriesOptions"": {""total_usd_per_tick"": {""name"": ""TVL"", ""type"": ""pie"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2021-08-03T23:14:45.613692+00:00"", ""__typename"": ""visualizations""}]","WITH get_liquidity AS ( --this is to find the liquidity of each position at trade time
SELECT *
FROM
(
SELECT *,
    LAST_VALUE(a.next_lp_amount) OVER(PARTITION BY ""tokenId"" ORDER BY call_block_time ASC) AS last_lp_amount
    FROM
    (
    SELECT *,
    lead(running_amount, 1, running_amount) OVER (PARTITION BY ""tokenId"" ORDER BY call_block_time asc) AS next_lp_amount
    FROM
    (
        SELECT amount, amount0, amount1, contract_address,call_block_time, call_tx_hash,
        ""tickLower"",""tickUpper"", /*liquidity,*/ ""tokenId"", tr_type,
        lead(call_block_time, 1, now()) OVER (PARTITION BY ""tokenId"" ORDER BY call_block_time asc) AS next_lp, --to help key in on the right lp when joining - for preformance
        lag(call_block_time, 1, '01-01-2000') OVER (PARTITION BY ""tokenId"" ORDER BY call_block_time asc) AS previous_lp,
        SUM(amount) OVER(PARTITION BY ""tokenId"" ORDER BY call_block_time ASC) AS running_amount,
        SUM(amount0) OVER(PARTITION BY ""tokenId"" ORDER BY call_block_time ASC) AS running_amount0,
        SUM(amount1) OVER(PARTITION BY ""tokenId"" ORDER BY call_block_time ASC) AS running_amount1,
        MIN(call_block_time) OVER(PARTITION BY ""tokenId"") AS liq_start
        
        FROM ( --this is a mess. We union new mints + adds to liquidity + new burns + removals from liquidity. eesh
            -- NEW MINTS
            SELECT
            m.amount, m.output_amount0 AS amount0, m.output_amount1 AS amount1, m.contract_address,
            m.call_block_time, m.call_tx_hash, m.""tickLower"", m.""tickUpper"",
            /*l.liquidity,*/ l.""output_tokenId""::text AS ""tokenId"", 'Mint' AS tr_type
            FROM uniswap_v3.""Pair_call_mint"" m
           
            INNER JOIN uniswap_v3.""NonfungibleTokenPositionManager_call_mint"" l
            ON m.call_tx_hash = l.call_tx_hash
            AND m.call_block_time = l.call_block_time
            
            WHERE l.""output_tokenId""::text IS NOT NULL --Some of these are blank, but the transactions are batched/kind of weird or have 0 amount. Maybe revisit, but these seem like duplicates/multiples within a larger transaction that we catch
            AND (m.amount != 0) --only events that do something
            AND m.contract_address = REPLACE(LOWER('{{Pool Address}}'),'0x','\x')::bytea
            AND m.call_success = 'true' AND l.call_success = 'true'
            AND m.""call_block_time"" <= LEAST('{{Reference Date}}',NOW())
    
            
            UNION
            --ADDITIONS TO LIQUIDITY INCREASE
            SELECT
            m.amount, m.output_amount0 AS amount0, m.output_amount1 AS amount1, m.contract_address,
            m.call_block_time, m.call_tx_hash, m.""tickLower"", m.""tickUpper"",
            /*l.liquidity,*/ (l.params->'tokenId')::text AS ""tokenId"", 'Mint' AS tr_type
            FROM uniswap_v3.""Pair_call_mint"" m
           
            INNER JOIN uniswap_v3.""NonfungibleTokenPositionManager_call_increaseLiquidity"" l
            ON m.call_tx_hash = l.call_tx_hash
            AND m.call_block_time = l.call_block_time
            
            WHERE (l.params->'tokenId')::text IS NOT NULL --Some of these are blank, but the transactions are batched/kind of weird or have 0 amount. Maybe revisit, but these seem like duplicates/multiples within a larger transaction that we catch
            AND (m.amount != 0) --only events that do something
            AND m.contract_address = REPLACE(LOWER('{{Pool Address}}'),'0x','\x')::bytea
            AND m.call_success = 'true' AND l.call_success = 'true'
            AND m.""call_block_time"" < LEAST('{{Reference Date}}',NOW())
            
            UNION
            -- NEW BURNS // uniswap_v3.""NonfungibleTokenPositionManager_call_burn"" doesn't do anything so jsut decrease liq
            SELECT --negate because these are burns
            (-1)*b.amount AS amount, (-1)*b.output_amount0 AS amount0, (-1)*b.output_amount1 AS amount1, b.contract_address,
            b.call_block_time, b.call_tx_hash, b.""tickLower"", b.""tickUpper"",
            /*l.liquidity,*/ (l.params->'tokenId')::text AS tokenId, 'Burn' AS tr_type
            FROM uniswap_v3.""Pair_call_burn"" b
            
            INNER JOIN uniswap_v3.""NonfungibleTokenPositionManager_call_decreaseLiquidity"" l
            ON b.call_tx_hash = l.call_tx_hash
            AND b.call_block_time = l.call_block_time
            
            WHERE (l.params->'tokenId')::text IS NOT NULL --Some of these are blank, but the transactions are batched/kind of weird or have 0 amount. Maybe revisit, but these seem like duplicates/multiples within a larger transaction that we catch
            AND (b.amount != 0) --only events that do something
            AND b.contract_address = REPLACE(LOWER('{{Pool Address}}'),'0x','\x')::bytea
            AND b.call_success = 'true'
            AND l.call_success = 'true'
            AND l.""call_block_time"" < LEAST('{{Reference Date}}',NOW())
            
            ) lq
        ) la
    --Since we already calc'd running amounts, we can ditch all LP events besides the last one before the 2 day / stuff within the 2 day.
    -- We'll use 'next LP' to do this
    WHERE next_lp = NOW() -- to make sure we're grabbing the latest LP
        -->= (DATE_TRUNC('minute',CURRENT_TIMESTAMP) - '2 days'::INTERVAL)
) a
WHERE running_amount >0 --check this later, but we should be able to ditch these too since matching is on block time and next lp

) b
WHERE last_lp_amount >0 -- only get what's currently active
),



trades
AS (
    SELECT pool, ""token0"" AS ""token_a_address"", ""token1"" AS ""token_b_address""
    FROM uniswap_v3.""Factory_evt_PoolCreated"" p
        WHERE p.pool = REPLACE(LOWER('{{Pool Address}}'),'0x','\x')::bytea
)
,prices AS
(
SELECT *
FROM
(
    SELECT *,
    DENSE_RANK() OVER(PARTITION BY ""contract_address"" ORDER BY minute DESC) as trank
    FROM prices.""usd"" p
    WHERE p.minute > DATE_TRUNC('minute',LEAST('{{Reference Date}}',NOW()) ) - '2 days'::interval
    AND (
        ""contract_address"" = (SELECT DISTINCT ""token_b_address"" FROM trades)
        OR ""contract_address"" = (SELECT DISTINCT ""token_a_address"" FROM trades)
        )
) a
WHERE trank = 1
)
,gs AS
(
SELECT DISTINCT d.token_a_address AS token, gs.hour FROM trades d
INNER JOIN 
(SELECT generate_series(DATE_TRUNC('hour',LEAST('{{Reference Date}}',NOW()) ) - interval '3 days', date_trunc('hour', LEAST('{{Reference Date}}',NOW()) ), '1 hour') AS hour) gs -- Generate all days since the first contract
ON 1=1

UNION

SELECT DISTINCT d.token_b_address AS token, gs.hour FROM trades d
INNER JOIN 
(SELECT generate_series(DATE_TRUNC('hour',LEAST('{{Reference Date}}',NOW()) ) - interval '3 days', date_trunc('hour', LEAST('{{Reference Date}}',NOW()) ), '1 hour') AS hour) gs -- Generate all days since the first contract
ON 1=1
)

,dex_price AS(
--for tokens where dune doesn't have the price, calculate the avg price in it's last hour of swaps (6 hr if no swaps in the last hour)
--since we don't have an amount field for unmapped tokens, I'll calc it based on... raw amount
-- through a few queries, this gets the unit price of each token (assuming 18 decimals)
-- DO NOT USE THIS FOR KNOWN TOKENS - only for the ones we don't have, we'll assume 18 decimals
SELECT
hour, token, 
symbol, decimals, median_price
FROM
(
SELECT *,
lead(hour, 1, LEAST('{{Reference Date}}',NOW())  ) OVER (PARTITION BY token
                            ORDER BY hour asc) AS next_hour,
    DENSE_RANK() OVER (PARTITION BY token ORDER BY hour DESC) AS trank
FROM
(
SELECT

DATE_TRUNC('hour',hour) AS hour,
t.contract_address AS token, ea.symbol AS symbol, ea.decimals AS decimals,
percentile_cont(0.5) WITHIN GROUP (ORDER BY ""median_price"") AS median_price

FROM dex.""view_token_prices"" t

INNER JOIN (SELECT DISTINCT token FROM gs) c
ON t.contract_address = c.token
INNER JOIN erc20.""tokens"" ea --both need to have known decimals, we're not going to assume anything.
ON ea.""contract_address"" = t.contract_address

WHERE
(ea.decimals IS NOT NULL)
AND median_price > 0

AND DATE_TRUNC('hour',hour) > 
(DATE_TRUNC('minute',LEAST('{{Reference Date}}',NOW()) ) - '2 days'::interval)
AND DATE_TRUNC('hour',hour) <= LEAST('{{Reference Date}}',NOW()) + interval '1 day'

GROUP BY 1,2,3,4
) b
) c
WHERE trank = 1

),

last_trade AS
(
SELECT tick, ""contract_address"" FROM
uniswap_v3.""Pair_evt_Swap""
WHERE ""contract_address"" = REPLACE('{{Pool Address}}','0x','\x')::bytea
AND ""evt_block_time"" > 
(DATE_TRUNC('minute',LEAST('{{Reference Date}}',NOW()) ) - '365 days'::interval)
ORDER BY ""evt_block_time"" DESC
LIMIT 1
)

-- alt idea is take the current price +/- 50%
,liq_gs_old AS
(
SELECT
generate_series(minl, maxl, space) AS ticks

FROM
    (
    SELECT
    p.""tickSpacing"" AS space,
    MIN(""tickLower"") AS minl,
    MAX(""tickUpper"") AS maxl
    FROM get_liquidity l
    INNER JOIN uniswap_v3.""Factory_evt_PoolCreated"" p
    ON p.""pool"" = l.contract_address
    
    GROUP BY 1
    
    ) lil
)

,liq_gs AS
(
SELECT 
ticks,
ticks - ptick AS tickdiff,
100 * ( ( (1.0001)^(ticks - ptick) ) - 1 ) AS tickdiff_pct
/* Formula based on section 4 governance 

"".... The initial fee tiers and tick spacings supported
are 0.05% (with a tick spacing of 10, approximately 0.10% between
initializable ticks), 0.30% (with a tick spacing of 60, approximately
0.60% between initializable ticks), and 1% (with a tick spacing of
200, approximately 2.02% between ticks.""

link: https://uniswap.org/whitepaper-v3.pdf */
FROM
    (
    SELECT
    generate_series(tick - ('{{Tick Range}}'*""tickSpacing""), tick + ('{{Tick Range}}'*""tickSpacing""), ""tickSpacing"") AS ticks
    , ""tickSpacing"" AS space
    , tick AS ptick
    FROM
    (SELECT tick, ""contract_address"" FROM last_trade) l
    INNER JOIN uniswap_v3.""Factory_evt_PoolCreated"" p
        ON p.""pool"" = l.contract_address
    
    ) lg
)

SELECT
lp_map,
ticks,
price,price_flip,

CASE WHEN '{{Price Shown}}' = 'B / A' THEN
price_flip ELSE price
END AS selected_price,

SUM(amount_per_tick) AS amount_per_tick,
SUM(total_usd_per_tick) AS total_usd_per_tick

FROM
(

SELECT *,
CASE WHEN price > 0 THEN
1.0/price ELSE NULL
END AS price_flip,
CASE WHEN lp_rank <= 100 AND total_usd_per_tick >= 10 THEN ""tokenId""
ELSE 'Other' END AS lp_map

FROM
(
SELECT 
lg.ticks,
--1.0001^lg.ticks AS price,
 CASE  --assuming 18 for decimals if null
        WHEN lg.ticks < 0 THEN (1.0001^(lg.ticks)) * (10^(ABS(COALESCE(pa.decimals, dpa.decimals,18)-COALESCE(pb.decimals, dpb.decimals,18))))
        ELSE (1.0001^(lg.ticks)) / (10^(ABS(COALESCE(pa.decimals, dpa.decimals,18)-COALESCE(pb.decimals, dpb.decimals,18))))
    END AS price,
--1/(1.0001^(lg.ticks)) AS price_flip,
""tokenId"",
amount_per_tick,
token_a_usd,
token_b_usd,
DENSE_RANK() OVER (ORDER BY token_a_usd + token_b_usd DESC) AS lp_rank,
( COALESCE(pa.price, dpa.median_price)*(""running_amount0""/10^(COALESCE(pa.decimals, dpa.decimals))) )
    /tick_breaks AS a_usd_per_tick,
    
( COALESCE(pb.price, dpb.median_price)*(""running_amount1""/10^(COALESCE(pb.decimals, dpb.decimals))) )
    /tick_breaks AS b_usd_per_tick,

( -- a per tick
( COALESCE(pa.price, dpa.median_price)*(""running_amount0""/10^(COALESCE(pa.decimals, dpa.decimals))) )
    /tick_breaks
)
+
( -- a per tick
( COALESCE(pb.price, dpb.median_price)*(""running_amount1""/10^(COALESCE(pb.decimals, dpb.decimals))) )
    /tick_breaks
)
AS total_usd_per_tick

,NULL AS current_price

FROM
(
    
    SELECT l.*, p.""tickSpacing"", ((l.""tickUpper"" - l.""tickLower"")/p.""tickSpacing"")+1 AS tick_breaks, --we add 1 because the LP is initialized on a tick (i.e. 0-20 with a 10 space supports 0, 10, and 20 ticks)
    l.running_amount / ( (l.""tickUpper"" - l.""tickLower"")/p.""tickSpacing"" ) AS amount_per_tick,
    l.""running_amount0""/10^(COALESCE(pa.decimals, dpa.decimals)) AS token_a_num,
    COALESCE(pa.price, dpa.median_price)*(l.""running_amount0""/10^(COALESCE(pa.decimals, dpa.decimals))) AS token_a_usd,
    l.""running_amount1""/10^(COALESCE(pb.decimals, dpb.decimals)) AS token_b_num,
    COALESCE(pb.price, dpb.median_price)*(l.""running_amount1""/10^(COALESCE(pb.decimals, dpb.decimals))) AS token_b_usd
    ,p.""token0"",p.""token1""
    FROM get_liquidity l
    INNER JOIN uniswap_v3.""Factory_evt_PoolCreated"" p
    ON p.""pool"" = l.contract_address

    -- idk a better way to do this join
    LEFT JOIN prices pa
    ON pa.contract_address = p.""token0""
    LEFT JOIN prices pb
    ON pb.contract_address = p.""token1""
    LEFT JOIN dex_price dpa
    ON dpa.token = p.""token0""
    LEFT JOIN dex_price dpb
    ON dpb.token = p.""token1""

) ta
RIGHT JOIN liq_gs lg
ON lg.ticks <= ta.""tickUpper""
AND lg.ticks >= ta.""tickLower""

    -- idk a better way to do this join
    LEFT JOIN prices pa
    ON pa.contract_address = ta.""token0""
    LEFT JOIN prices pb
    ON pb.contract_address = ta.""token1""
    LEFT JOIN dex_price dpa
    ON dpa.token = ta.""token0""
    LEFT JOIN dex_price dpb
    ON dpb.token = ta.""token1""

WHERE lg.ticks IS NOT NULL
/*UNION ALL

SELECT
lt.tick, 1.0001^(lt.tick),1/(1.0001^(lt.tick)),NULL,NULL,NULL,NULL,NULL,NULL,NULL,
1/(1.0001^(lt.tick))
FROM last_trade lt*/
) eh

--WHERE lp_rank <= 1000 --top 1000 liquidity positions
) e
GROUP BY 1,2,3,4

ORDER BY SUM(total_usd_per_tick) ASC
"
95752,Uniswap v3 Pair Deep-Dive (Depth),,"[{""id"": 191528, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-08-03T07:06:55.015911+00:00"", ""__typename"": ""visualizations""}, {""id"": 191631, ""type"": ""chart"", ""name"": ""Liquidity Depth (All)"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Price""}, ""tickFormat"": ""0[.]00a""}, ""yAxis"": [{""type"": ""-"", ""title"": {""text"": ""(Liquidity) USD per Tick $""}, ""tickFormat"": ""$0[.]00a""}, {""type"": ""linear"", ""title"": {""text"": ""Current Price""}, ""tickFormat"": ""$0a""}], ""legend"": {""enabled"": false}, ""series"": {""stacking"": null}, ""reverseX"": false, ""numberFormat"": ""0.00a"", ""columnMapping"": {"""": ""y"", ""selected_price"": ""x"", ""sum_usd_per_tick"": ""y"", ""selected_price_two"": ""y"", ""total_usd_per_tick"": ""y""}, ""seriesOptions"": {""sum_usd_per_tick"": {""name"": ""USD per Tick (Liquidity) $"", ""type"": ""column"", ""yAxis"": 0, ""zIndex"": 0}, ""selected_price_two"": {""name"": ""Current Price"", ""type"": ""scatter"", ""yAxis"": 1, ""zIndex"": 1}}, ""valuesOptions"": {}, ""showDataLabels"": false, ""globalSeriesType"": ""column""}, ""created_at"": ""2021-08-03T07:47:11.389111+00:00"", ""__typename"": ""visualizations""}, {""id"": 198630, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Current Price"", ""stringPrefix"": """", ""stringDecimal"": 2, ""counterColName"": ""selected_price""}, ""created_at"": ""2021-08-07T02:22:59.763864+00:00"", ""__typename"": ""visualizations""}]","WITH get_liquidity AS ( --this is to find the liquidity of each position at trade time
SELECT *
FROM
(
SELECT *,
    LAST_VALUE(a.next_lp_amount) OVER(PARTITION BY ""tokenId"" ORDER BY call_block_time ASC) AS last_lp_amount
    FROM
    (
    SELECT *,
    lead(running_amount, 1, running_amount) OVER (PARTITION BY ""tokenId"" ORDER BY call_block_time asc) AS next_lp_amount
    FROM
    (
        SELECT amount, amount0, amount1, contract_address,call_block_time, call_tx_hash,
        ""tickLower"",""tickUpper"", /*liquidity,*/ ""tokenId"", tr_type,
        lead(call_block_time, 1, now()) OVER (PARTITION BY ""tokenId"" ORDER BY call_block_time asc) AS next_lp, --to help key in on the right lp when joining - for preformance
        lag(call_block_time, 1, '01-01-2000') OVER (PARTITION BY ""tokenId"" ORDER BY call_block_time asc) AS previous_lp,
        SUM(amount) OVER(PARTITION BY ""tokenId"" ORDER BY call_block_time ASC) AS running_amount,
        SUM(amount0) OVER(PARTITION BY ""tokenId"" ORDER BY call_block_time ASC) AS running_amount0,
        SUM(amount1) OVER(PARTITION BY ""tokenId"" ORDER BY call_block_time ASC) AS running_amount1,
        MIN(call_block_time) OVER(PARTITION BY ""tokenId"") AS liq_start
        
        FROM ( --this is a mess. We union new mints + adds to liquidity + new burns + removals from liquidity. eesh
            -- NEW MINTS
            SELECT
            m.amount, m.output_amount0 AS amount0, m.output_amount1 AS amount1, m.contract_address,
            m.call_block_time, m.call_tx_hash, m.""tickLower"", m.""tickUpper"",
            /*l.liquidity,*/ l.""output_tokenId""::text AS ""tokenId"", 'Mint' AS tr_type
            FROM uniswap_v3.""Pair_call_mint"" m
           
            INNER JOIN uniswap_v3.""NonfungibleTokenPositionManager_call_mint"" l
            ON m.call_tx_hash = l.call_tx_hash
            AND m.call_block_time = l.call_block_time
            
            WHERE l.""output_tokenId""::text IS NOT NULL --Some of these are blank, but the transactions are batched/kind of weird or have 0 amount. Maybe revisit, but these seem like duplicates/multiples within a larger transaction that we catch
            AND (m.amount != 0) --only events that do something
            AND m.contract_address = REPLACE(LOWER('{{Pool Address}}'),'0x','\x')::bytea
            AND m.call_success = 'true' AND l.call_success = 'true'
            AND m.""call_block_time"" <= LEAST('{{Reference Date}}',NOW())
    
            
            UNION
            --ADDITIONS TO LIQUIDITY INCREASE
            SELECT
            m.amount, m.output_amount0 AS amount0, m.output_amount1 AS amount1, m.contract_address,
            m.call_block_time, m.call_tx_hash, m.""tickLower"", m.""tickUpper"",
            /*l.liquidity,*/ (l.params->'tokenId')::text AS ""tokenId"", 'Mint' AS tr_type
            FROM uniswap_v3.""Pair_call_mint"" m
           
            INNER JOIN uniswap_v3.""NonfungibleTokenPositionManager_call_increaseLiquidity"" l
            ON m.call_tx_hash = l.call_tx_hash
            AND m.call_block_time = l.call_block_time
            
            WHERE (l.params->'tokenId')::text IS NOT NULL --Some of these are blank, but the transactions are batched/kind of weird or have 0 amount. Maybe revisit, but these seem like duplicates/multiples within a larger transaction that we catch
            AND (m.amount != 0) --only events that do something
            AND m.contract_address = REPLACE(LOWER('{{Pool Address}}'),'0x','\x')::bytea
            AND m.call_success = 'true' AND l.call_success = 'true'
            AND m.""call_block_time"" < LEAST('{{Reference Date}}',NOW())
            
            UNION
            -- NEW BURNS // uniswap_v3.""NonfungibleTokenPositionManager_call_burn"" doesn't do anything so jsut decrease liq
            SELECT --negate because these are burns
            (-1)*b.amount AS amount, (-1)*b.output_amount0 AS amount0, (-1)*b.output_amount1 AS amount1, b.contract_address,
            b.call_block_time, b.call_tx_hash, b.""tickLower"", b.""tickUpper"",
            /*l.liquidity,*/ (l.params->'tokenId')::text AS tokenId, 'Burn' AS tr_type
            FROM uniswap_v3.""Pair_call_burn"" b
            
            INNER JOIN uniswap_v3.""NonfungibleTokenPositionManager_call_decreaseLiquidity"" l
            ON b.call_tx_hash = l.call_tx_hash
            AND b.call_block_time = l.call_block_time
            
            WHERE (l.params->'tokenId')::text IS NOT NULL --Some of these are blank, but the transactions are batched/kind of weird or have 0 amount. Maybe revisit, but these seem like duplicates/multiples within a larger transaction that we catch
            AND (b.amount != 0) --only events that do something
            AND b.contract_address = REPLACE(LOWER('{{Pool Address}}'),'0x','\x')::bytea
            AND b.call_success = 'true'
            AND l.call_success = 'true'
            AND l.""call_block_time"" < LEAST('{{Reference Date}}',NOW())
            
            ) lq
        ) la
    --Since we already calc'd running amounts, we can ditch all LP events besides the last one before the 2 day / stuff within the 2 day.
    -- We'll use 'next LP' to do this
    WHERE next_lp = NOW() -- to make sure we're grabbing the latest LP
        -->= (DATE_TRUNC('minute',CURRENT_TIMESTAMP) - '2 days'::INTERVAL)
) a
WHERE running_amount >0 --check this later, but we should be able to ditch these too since matching is on block time and next lp

) b
WHERE last_lp_amount >0
)

,trades
AS (
    SELECT pool, ""token0"" AS ""token_a_address"", ""token1"" AS ""token_b_address""
    FROM uniswap_v3.""Factory_evt_PoolCreated"" p
        WHERE p.pool = REPLACE(LOWER('{{Pool Address}}'),'0x','\x')::bytea
)

,prices AS
(
SELECT *
FROM
(
    SELECT *,
    DENSE_RANK() OVER(PARTITION BY ""contract_address"" ORDER BY minute DESC) as trank
    FROM prices.""usd"" p
    WHERE p.minute > DATE_TRUNC('minute',LEAST('{{Reference Date}}',NOW()) ) - '2 days'::interval
    AND (
        ""contract_address"" = (SELECT DISTINCT ""token_b_address"" FROM trades)
        OR ""contract_address"" = (SELECT DISTINCT ""token_a_address"" FROM trades)
        )
) a
WHERE trank = 1
)

,gs AS
(
SELECT DISTINCT d.token_a_address AS token, gs.hour FROM trades d
INNER JOIN 
(SELECT generate_series(DATE_TRUNC('hour',LEAST('{{Reference Date}}',NOW()) ) - interval '3 days', date_trunc('hour', LEAST('{{Reference Date}}',NOW()) ), '1 hour') AS hour) gs -- Generate all days since the first contract
ON 1=1

UNION

SELECT DISTINCT d.token_b_address AS token, gs.hour FROM trades d
INNER JOIN 
(SELECT generate_series(DATE_TRUNC('hour',LEAST('{{Reference Date}}',NOW()) ) - interval '3 days', date_trunc('hour', LEAST('{{Reference Date}}',NOW()) ), '1 hour') AS hour) gs -- Generate all days since the first contract
ON 1=1
)

,dex_price AS(
--for tokens where dune doesn't have the price, calculate the avg price in it's last hour of swaps (6 hr if no swaps in the last hour)
--since we don't have an amount field for unmapped tokens, I'll calc it based on... raw amount
-- through a few queries, this gets the unit price of each token (assuming 18 decimals)
-- DO NOT USE THIS FOR KNOWN TOKENS - only for the ones we don't have, we'll assume 18 decimals
SELECT
hour, token, 
symbol, decimals, median_price
FROM
(
SELECT *,
lead(hour, 1, LEAST('{{Reference Date}}',NOW())  ) OVER (PARTITION BY token
                            ORDER BY hour asc) AS next_hour,
    DENSE_RANK() OVER (PARTITION BY token ORDER BY hour DESC) AS trank
FROM
(
SELECT

DATE_TRUNC('hour',hour) AS hour,
t.contract_address AS token, ea.symbol AS symbol, ea.decimals AS decimals,
percentile_cont(0.5) WITHIN GROUP (ORDER BY ""median_price"") AS median_price

FROM dex.""view_token_prices"" t

INNER JOIN (SELECT DISTINCT token FROM gs) c
ON t.contract_address = c.token
INNER JOIN erc20.""tokens"" ea --both need to have known decimals, we're not going to assume anything.
ON ea.""contract_address"" = t.contract_address

WHERE
(ea.decimals IS NOT NULL)
AND median_price > 0

AND DATE_TRUNC('hour',hour) > 
(DATE_TRUNC('minute',LEAST('{{Reference Date}}',NOW()) ) - '2 days'::interval)
AND DATE_TRUNC('hour',hour) <= LEAST('{{Reference Date}}',NOW()) + interval '1 day'

GROUP BY 1,2,3,4
) b
) c
WHERE trank = 1

),


last_trade AS
(
SELECT tick, ""contract_address"" FROM
uniswap_v3.""Pair_evt_Swap""
WHERE ""contract_address"" = REPLACE(LOWER('{{Pool Address}}'),'0x','\x')::bytea
AND ""evt_block_time"" > 
(DATE_TRUNC('minute',LEAST('{{Reference Date}}',NOW()) ) - '365 days'::interval)
ORDER BY ""evt_block_time"" DESC
LIMIT 1
)

-- alt idea is take the current price +/- 50%
,liq_gs_old AS
(
SELECT
generate_series(minl, maxl, space) AS ticks

FROM
    (
    SELECT
    p.""tickSpacing"" AS space,
    MIN(""tickLower"") AS minl,
    MAX(""tickUpper"") AS maxl
    FROM get_liquidity l
    INNER JOIN uniswap_v3.""Factory_evt_PoolCreated"" p
    ON p.""pool"" = l.contract_address
    
    GROUP BY 1
    
    ) lil
)

,liq_gs AS
(
SELECT 
ticks,
ticks - ptick AS tickdiff,
100 * ( ( (1.0001)^(ticks - ptick) ) - 1 ) AS tickdiff_pct
/* Formula based on section 4 governance 

"".... The initial fee tiers and tick spacings supported
are 0.05% (with a tick spacing of 10, approximately 0.10% between
initializable ticks), 0.30% (with a tick spacing of 60, approximately
0.60% between initializable ticks), and 1% (with a tick spacing of
200, approximately 2.02% between ticks.""

link: https://uniswap.org/whitepaper-v3.pdf */
FROM
    (
    SELECT
    generate_series(tick - ('{{Tick Range}}'*""tickSpacing""), tick + ('{{Tick Range}}'*""tickSpacing""), ""tickSpacing"") AS ticks
    , ""tickSpacing"" AS space
    , tick AS ptick
    FROM
    (SELECT tick, ""contract_address"" FROM last_trade) l
    INNER JOIN uniswap_v3.""Factory_evt_PoolCreated"" p
        ON p.""pool"" = l.contract_address
    
    ) lg
)


SELECT *,

CASE WHEN '{{Price Shown}}' = 'B / A' THEN
price_flip ELSE price
END AS selected_price,

CASE WHEN current_price IS NULL THEN NULL
WHEN '{{Price Shown}}' = 'B / A' THEN
price_flip ELSE price
END AS selected_price_two -- for charts so we can use it twice

FROM
(

SELECT *,
CASE WHEN price > 0 THEN
1.0/(price::decimal) ELSE NULL
END AS price_flip

FROM
(
SELECT
ticks,
price,
tickdiff_pct,
--price_flip,
SUM(total_usd_per_tick) AS sum_usd_per_tick,

NULL AS current_price
FROM
(

SELECT 
lg.ticks,
lg.tickdiff_pct,
--1.0001^lg.ticks AS price,
 CASE  --assuming 18 for decimals if null
        WHEN lg.ticks < 0 THEN (1.0001^(lg.ticks)) * (10^(ABS(COALESCE(pa.decimals, dpa.decimals,18)-COALESCE(pb.decimals, dpb.decimals,18))))
        ELSE (1.0001^(lg.ticks)) / (10^(ABS(COALESCE(pa.decimals, dpa.decimals,18)-COALESCE(pb.decimals, dpb.decimals,18))))
    END AS price,
--1/(1.0001^(lg.ticks)) AS price_flip,
--""tokenId"",
amount_per_tick,
token_a_usd,
token_b_usd,
( COALESCE(pa.price, dpa.median_price)*(""running_amount0""/10^(COALESCE(pa.decimals, dpa.decimals))) )
    /tick_breaks AS a_usd_per_tick,
    
( COALESCE(pb.price, dpb.median_price)*(""running_amount1""/10^(COALESCE(pb.decimals, dpb.decimals))) )
    /tick_breaks AS b_usd_per_tick,

( -- a per tick
( COALESCE(pa.price, dpa.median_price)*(""running_amount0""/10^(COALESCE(pa.decimals, dpa.decimals))) )
    /tick_breaks
)
+
( -- a per tick
( COALESCE(pb.price, dpb.median_price)*(""running_amount1""/10^(COALESCE(pb.decimals, dpb.decimals))) )
    /tick_breaks
)
AS total_usd_per_tick

,NULL AS current_price

FROM
(
    
    SELECT l.*, p.""tickSpacing"", ((l.""tickUpper"" - l.""tickLower"")/p.""tickSpacing"")+1 AS tick_breaks, --we add 1 because the LP is initialized on a tick (i.e. 0-20 with a 10 space supports 0, 10, and 20 ticks)
    l.running_amount / ( (l.""tickUpper"" - l.""tickLower"")/p.""tickSpacing"" ) AS amount_per_tick,
    l.""running_amount0""/10^(COALESCE(pa.decimals, dpa.decimals)) AS token_a_num,
    COALESCE(pa.price, dpa.median_price)*(l.""running_amount0""/10^(COALESCE(pa.decimals, dpa.decimals))) AS token_a_usd,
    l.""running_amount1""/10^(COALESCE(pb.decimals, dpb.decimals)) AS token_b_num,
    COALESCE(pb.price, dpb.median_price)*(l.""running_amount1""/10^(COALESCE(pb.decimals, dpb.decimals))) AS token_b_usd
    ,p.""token0"",p.""token1""
    FROM get_liquidity l
    INNER JOIN uniswap_v3.""Factory_evt_PoolCreated"" p
    ON p.""pool"" = l.contract_address

    -- idk a better way to do this join
    LEFT JOIN prices pa
    ON pa.contract_address = p.""token0""
    LEFT JOIN prices pb
    ON pb.contract_address = p.""token1""
    LEFT JOIN dex_price dpa
    ON dpa.token = p.""token0""
    LEFT JOIN dex_price dpb
    ON dpb.token = p.""token1""
    
    WHERE p.""tickSpacing"" > 0

) ta
RIGHT JOIN liq_gs lg
ON lg.ticks <= ta.""tickUpper""
AND lg.ticks >= ta.""tickLower""

    -- idk a better way to do this join
    LEFT JOIN prices pa
    ON pa.contract_address = ta.""token0""
    LEFT JOIN prices pb
    ON pb.contract_address = ta.""token1""
    LEFT JOIN dex_price dpa
    ON dpa.token = ta.""token0""
    LEFT JOIN dex_price dpb
    ON dpb.token = ta.""token1""

WHERE lg.ticks IS NOT NULL

) ap

GROUP BY 1,2,3

UNION ALL

SELECT
lt.tick /*1.0001^(lt.tick),*/
, CASE  --assuming 18 for decimals if null
        WHEN lt.tick < 0 THEN (1.0001^(lt.tick)) * (10^(ABS(COALESCE(pa.decimals, dpa.decimals,18)-COALESCE(pb.decimals, dpb.decimals,18))))
        ELSE (1.0001^(lt.tick)) / (10^(ABS(COALESCE(pa.decimals, dpa.decimals,18)-COALESCE(pb.decimals, dpb.decimals,18))))
    END AS price
,NULL, NULL
, CASE  --assuming 18 for decimals if null
        WHEN lt.tick < 0 THEN (1.0001^(lt.tick)) * (10^(ABS(COALESCE(pa.decimals, dpa.decimals,18)-COALESCE(pb.decimals, dpb.decimals,18))))
        ELSE (1.0001^(lt.tick)) / (10^(ABS(COALESCE(pa.decimals, dpa.decimals,18)-COALESCE(pb.decimals, dpb.decimals,18))))
    END AS price
FROM last_trade lt
INNER JOIN uniswap_v3.""Factory_evt_PoolCreated"" p
    ON p.""pool"" = lt.contract_address
    LEFT JOIN prices pa
    ON pa.contract_address = p.""token0""
    LEFT JOIN prices pb
    ON pb.contract_address = p.""token1""
    LEFT JOIN dex_price dpa
    ON dpa.token = p.""token0""
    LEFT JOIN dex_price dpb
    ON dpb.token = p.""token1""
) eh

) ehb

ORDER BY current_price DESC NULLS LAST"
416961,Uniswap v3 Pair Deep-Dive (All LPs),,"[{""id"": 795517, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-02-12T03:14:10.215629+00:00"", ""__typename"": ""visualizations""}, {""id"": 795580, ""type"": ""counter"", ""name"": ""Estimated # LPs"", ""options"": {""rowNumber"": 1, ""counterColName"": ""total_num_lps""}, ""created_at"": ""2022-02-12T03:28:14.670568+00:00"", ""__typename"": ""visualizations""}, {""id"": 795519, ""type"": ""chart"", ""name"": ""LP Share of TVL"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""$0.00a"", ""columnMapping"": {""lp_map"": ""x"", ""address"": ""x"", ""tokenId"": ""x"", ""afddress"": ""x"", ""estimated_usd"": ""y"", ""total_usd_per_tick"": ""y""}, ""seriesOptions"": {""estimated_usd"": {""name"": ""Estimated Size"", ""type"": ""pie"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2022-02-12T03:14:10.215629+00:00"", ""__typename"": ""visualizations""}, {""id"": 795518, ""type"": ""chart"", ""name"": ""Liquidity Depth (by LP Token ID)"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Price""}, ""tickFormat"": ""0[.]00a""}, ""yAxis"": [{""type"": ""-"", ""title"": {""text"": ""USD per Tick $""}, ""tickFormat"": ""$0[.]00a""}, {""type"": ""linear"", ""title"": {""text"": ""Current Price $""}, ""tickFormat"": ""$0[.]00a""}], ""legend"": {""enabled"": false}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""numberFormat"": ""$0.00a"", ""columnMapping"": {"""": ""y"", ""lp_map"": ""series"", ""tokenId"": ""series"", ""selected_price"": ""x"", ""total_usd_per_tick"": ""y""}, ""seriesOptions"": {""current_price"": {""name"": ""Current Price (B / A)"", ""type"": ""scatter"", ""color"": ""#BC2D66"", ""yAxis"": 1, ""zIndex"": 1}, ""total_usd_per_tick"": {""name"": ""USD per Tick"", ""type"": ""column"", ""color"": ""#345FB7"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": false, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-02-12T03:14:10.215629+00:00"", ""__typename"": ""visualizations""}]","WITH get_liquidity AS ( --this is to find the liquidity of each position at trade time
SELECT *
FROM
(
SELECT *,
    LAST_VALUE(a.next_lp_amount) OVER(PARTITION BY ""tokenId"" ORDER BY call_block_time ASC) AS last_lp_amount
    FROM
    (
    SELECT *,
    lead(running_amount, 1, running_amount) OVER (PARTITION BY ""tokenId"" ORDER BY call_block_time asc) AS next_lp_amount
    FROM
    (
        SELECT amount, amount0, amount1, contract_address,call_block_time, call_tx_hash,
        ""tickLower"",""tickUpper"", /*liquidity,*/ ""tokenId"", tr_type,
        lead(call_block_time, 1, now()) OVER (PARTITION BY ""tokenId"" ORDER BY call_block_time asc) AS next_lp, --to help key in on the right lp when joining - for preformance
        lag(call_block_time, 1, '01-01-2000') OVER (PARTITION BY ""tokenId"" ORDER BY call_block_time asc) AS previous_lp,
        SUM(amount) OVER(PARTITION BY ""tokenId"" ORDER BY call_block_time ASC) AS running_amount,
        SUM(amount0) OVER(PARTITION BY ""tokenId"" ORDER BY call_block_time ASC) AS running_amount0,
        SUM(amount1) OVER(PARTITION BY ""tokenId"" ORDER BY call_block_time ASC) AS running_amount1,
        MIN(call_block_time) OVER(PARTITION BY ""tokenId"") AS liq_start
        
        FROM ( --this is a mess. We union new mints + adds to liquidity + new burns + removals from liquidity. eesh
            -- NEW MINTS
            SELECT
            m.amount, m.output_amount0 AS amount0, m.output_amount1 AS amount1, m.contract_address,
            m.call_block_time, m.call_tx_hash, m.""tickLower"", m.""tickUpper"",
            /*l.liquidity,*/ l.""output_tokenId""::text AS ""tokenId"", 'Mint' AS tr_type
            FROM uniswap_v3.""Pair_call_mint"" m
           
            INNER JOIN uniswap_v3.""NonfungibleTokenPositionManager_call_mint"" l
            ON m.call_tx_hash = l.call_tx_hash
            AND m.call_block_time = l.call_block_time
            
            WHERE l.""output_tokenId""::text IS NOT NULL --Some of these are blank, but the transactions are batched/kind of weird or have 0 amount. Maybe revisit, but these seem like duplicates/multiples within a larger transaction that we catch
            AND (m.amount != 0) --only events that do something
            AND m.contract_address = REPLACE(LOWER('{{Pool Address}}'),'0x','\x')::bytea
            AND m.call_success = 'true' AND l.call_success = 'true'
            AND m.""call_block_time"" <= LEAST('{{Reference Date}}',NOW())
    
            
            UNION
            --ADDITIONS TO LIQUIDITY INCREASE
            SELECT
            m.amount, m.output_amount0 AS amount0, m.output_amount1 AS amount1, m.contract_address,
            m.call_block_time, m.call_tx_hash, m.""tickLower"", m.""tickUpper"",
            /*l.liquidity,*/ (l.params->'tokenId')::text AS ""tokenId"", 'Mint' AS tr_type
            FROM uniswap_v3.""Pair_call_mint"" m
           
            INNER JOIN uniswap_v3.""NonfungibleTokenPositionManager_call_increaseLiquidity"" l
            ON m.call_tx_hash = l.call_tx_hash
            AND m.call_block_time = l.call_block_time
            
            WHERE (l.params->'tokenId')::text IS NOT NULL --Some of these are blank, but the transactions are batched/kind of weird or have 0 amount. Maybe revisit, but these seem like duplicates/multiples within a larger transaction that we catch
            AND (m.amount != 0) --only events that do something
            AND m.contract_address = REPLACE(LOWER('{{Pool Address}}'),'0x','\x')::bytea
            AND m.call_success = 'true' AND l.call_success = 'true'
            AND m.""call_block_time"" < LEAST('{{Reference Date}}',NOW())
            
            UNION
            -- NEW BURNS // uniswap_v3.""NonfungibleTokenPositionManager_call_burn"" doesn't do anything so jsut decrease liq
            SELECT --negate because these are burns
            (-1)*b.amount AS amount, (-1)*b.output_amount0 AS amount0, (-1)*b.output_amount1 AS amount1, b.contract_address,
            b.call_block_time, b.call_tx_hash, b.""tickLower"", b.""tickUpper"",
            /*l.liquidity,*/ (l.params->'tokenId')::text AS tokenId, 'Burn' AS tr_type
            FROM uniswap_v3.""Pair_call_burn"" b
            
            INNER JOIN uniswap_v3.""NonfungibleTokenPositionManager_call_decreaseLiquidity"" l
            ON b.call_tx_hash = l.call_tx_hash
            AND b.call_block_time = l.call_block_time
            
            WHERE (l.params->'tokenId')::text IS NOT NULL --Some of these are blank, but the transactions are batched/kind of weird or have 0 amount. Maybe revisit, but these seem like duplicates/multiples within a larger transaction that we catch
            AND (b.amount != 0) --only events that do something
            AND b.contract_address = REPLACE(LOWER('{{Pool Address}}'),'0x','\x')::bytea
            AND b.call_success = 'true'
            AND l.call_success = 'true'
            AND l.""call_block_time"" < LEAST('{{Reference Date}}',NOW())
            
            ) lq
        ) la
    --Since we already calc'd running amounts, we can ditch all LP events besides the last one before the 2 day / stuff within the 2 day.
    -- We'll use 'next LP' to do this
    WHERE next_lp = NOW() -- to make sure we're grabbing the latest LP
        -->= (DATE_TRUNC('minute',CURRENT_TIMESTAMP) - '2 days'::INTERVAL)
) a
WHERE running_amount >0 --check this later, but we should be able to ditch these too since matching is on block time and next lp

) b
WHERE last_lp_amount >0 -- only get what's currently active
)


,trades
AS (
    SELECT pool, ""token0"" AS ""token_a_address"", ""token1"" AS ""token_b_address""
    FROM uniswap_v3.""Factory_evt_PoolCreated"" p
        WHERE p.pool = REPLACE(LOWER('{{Pool Address}}'),'0x','\x')::bytea
)
,prices AS
(
SELECT *
FROM
(
    SELECT *,
    DENSE_RANK() OVER(PARTITION BY ""contract_address"" ORDER BY minute DESC) as trank
    FROM prices.""usd"" p
    WHERE p.minute > DATE_TRUNC('minute',LEAST('{{Reference Date}}',NOW()) ) - '2 days'::interval
    AND (
        ""contract_address"" = (SELECT DISTINCT ""token_b_address"" FROM trades)
        OR ""contract_address"" = (SELECT DISTINCT ""token_a_address"" FROM trades)
        )
) a
WHERE trank = 1
)
,gs AS
(
SELECT DISTINCT d.token_a_address AS token, gs.hour FROM trades d
INNER JOIN 
(SELECT generate_series(DATE_TRUNC('hour',LEAST('{{Reference Date}}',NOW()) ) - interval '3 days', date_trunc('hour', LEAST('{{Reference Date}}',NOW()) ), '1 hour') AS hour) gs -- Generate all days since the first contract
ON 1=1

UNION

SELECT DISTINCT d.token_b_address AS token, gs.hour FROM trades d
INNER JOIN 
(SELECT generate_series(DATE_TRUNC('hour',LEAST('{{Reference Date}}',NOW()) ) - interval '3 days', date_trunc('hour', LEAST('{{Reference Date}}',NOW()) ), '1 hour') AS hour) gs -- Generate all days since the first contract
ON 1=1
)

,dex_price AS(
--for tokens where dune doesn't have the price, calculate the avg price in it's last hour of swaps (6 hr if no swaps in the last hour)
--since we don't have an amount field for unmapped tokens, I'll calc it based on... raw amount
-- through a few queries, this gets the unit price of each token (assuming 18 decimals)
-- DO NOT USE THIS FOR KNOWN TOKENS - only for the ones we don't have, we'll assume 18 decimals
SELECT
hour, token, 
symbol, decimals, median_price
FROM
(
SELECT *,
lead(hour, 1, LEAST('{{Reference Date}}',NOW())  ) OVER (PARTITION BY token
                            ORDER BY hour asc) AS next_hour,
    DENSE_RANK() OVER (PARTITION BY token ORDER BY hour DESC) AS trank
FROM
(
SELECT

DATE_TRUNC('hour',hour) AS hour,
t.contract_address AS token, ea.symbol AS symbol, ea.decimals AS decimals,
percentile_cont(0.5) WITHIN GROUP (ORDER BY ""median_price"") AS median_price

FROM dex.""view_token_prices"" t

INNER JOIN (SELECT DISTINCT token FROM gs) c
ON t.contract_address = c.token
INNER JOIN erc20.""tokens"" ea --both need to have known decimals, we're not going to assume anything.
ON ea.""contract_address"" = t.contract_address

WHERE
(ea.decimals IS NOT NULL)
AND median_price > 0

AND DATE_TRUNC('hour',hour) > 
(DATE_TRUNC('minute',LEAST('{{Reference Date}}',NOW()) ) - '2 days'::interval)
AND DATE_TRUNC('hour',hour) <= LEAST('{{Reference Date}}',NOW()) + interval '1 day'

GROUP BY 1,2,3,4
) b
) c
WHERE trank = 1

)

SELECT *, SUM(num_lp) OVER () AS total_num_lps

FROM (

SELECT 
CASE WHEN rnk <= 500 THEN REPLACE(address::text,'\x','0x') ELSE 'LPs # 500+' END AS afddress,
-- REPLACE(address::text,'\x','0x') AS afddress, 
SUM(estimated_usd) AS estimated_usd,
SUM(num_lp) AS num_lp--(*) OVER () AS total_num_lps
,AVG(rnk) AS avg_rnk
FROM (
SELECT *, 1 as num_lp, DENSE_RANK() OVER (ORDER BY estimated_usd DESC) AS rnk
FROM (
SELECT
t.""from"" AS address, 
SUM(token_a_usd+token_b_usd) AS estimated_usd

FROM (
    SELECT l.*, p.""tickSpacing"", ((l.""tickUpper"" - l.""tickLower"")/p.""tickSpacing"")+1 AS tick_breaks, --we add 1 because the LP is initialized on a tick (i.e. 0-20 with a 10 space supports 0, 10, and 20 ticks)
    l.running_amount / ( (l.""tickUpper"" - l.""tickLower"")/p.""tickSpacing"" ) AS amount_per_tick,
    l.""running_amount0""/10^(COALESCE(pa.decimals, dpa.decimals)) AS token_a_num,
    COALESCE(pa.price, dpa.median_price)*(l.""running_amount0""/10^(COALESCE(pa.decimals, dpa.decimals))) AS token_a_usd,
    l.""running_amount1""/10^(COALESCE(pb.decimals, dpb.decimals)) AS token_b_num,
    COALESCE(pb.price, dpb.median_price)*(l.""running_amount1""/10^(COALESCE(pb.decimals, dpb.decimals))) AS token_b_usd
    ,p.""token0"",p.""token1""
    FROM get_liquidity l
    INNER JOIN uniswap_v3.""Factory_evt_PoolCreated"" p
    ON p.""pool"" = l.contract_address

    -- idk a better way to do this join
    LEFT JOIN prices pa
    ON pa.contract_address = p.""token0""
    LEFT JOIN prices pb
    ON pb.contract_address = p.""token1""
    LEFT JOIN dex_price dpa
    ON dpa.token = p.""token0""
    LEFT JOIN dex_price dpb
    ON dpb.token = p.""token1""
    ) a

INNER JOIN uniswap_v3.""NonfungibleTokenPositionManager_call_mint"" m
ON m.""output_tokenId""::text = a.""tokenId""::text
INNER JOIN ethereum.transactions t
    ON t.hash = m.""call_tx_hash""
    AND t.block_time =m.""call_block_time""

WHERE m.""call_success""

GROUP BY 1

-- ORDER BY 2 DESC
) aa
) b
GROUP BY 1
) c

ORDER BY avg_rnk ASC"
1524480,Blur vs Opensea (fill_source),,"[{""id"": 2559498, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-11-04T11:18:21.084012+00:00"", ""__typename"": ""visualizations""}, {""id"": 2559504, ""type"": ""chart"", ""name"": ""Percentage of Volume by Fill Source"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Percentage of total Volume""}}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack"", ""percentValues"": true}, ""reverseX"": false, ""columnMapping"": {""day"": ""x"", ""volume"": ""y"", ""fill_source"": ""series"", ""sum((price / 1.0E18))"": ""y""}, ""seriesOptions"": {""other"": {""type"": ""area"", ""color"": ""#000000"", ""yAxis"": 0, ""zIndex"": 3}, ""blur.io"": {""type"": ""area"", ""color"": ""#F88303"", ""yAxis"": 0, ""zIndex"": 6}, ""gem.xyz"": {""type"": ""area"", ""color"": ""#EF7A9F"", ""yAxis"": 0, ""zIndex"": 4}, ""x2y2.io"": {""type"": ""area"", ""color"": ""#68906f"", ""yAxis"": 0, ""zIndex"": 0}, ""genie.xyz"": {""type"": ""area"", ""color"": ""#9EB6FC"", ""yAxis"": 0, ""zIndex"": 2}, ""opensea.io"": {""type"": ""area"", ""color"": ""#2D81E2"", ""yAxis"": 0, ""zIndex"": 5}, ""looksrare.org"": {""type"": ""area"", ""color"": ""#34CD58"", ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""area""}, ""created_at"": ""2022-11-04T11:18:21.084012+00:00"", ""__typename"": ""visualizations""}, {""id"": 2559499, ""type"": ""chart"", ""name"": ""Percentage of Sales by Fill Source"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Percentage of Total Sales""}}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack"", ""percentValues"": true}, ""reverseX"": false, ""columnMapping"": {""day"": ""x"", ""sales"": ""y"", ""fill_source"": ""series""}, ""seriesOptions"": {""other"": {""type"": ""area"", ""color"": ""#000000"", ""yAxis"": 0, ""zIndex"": 2}, ""blur.io"": {""type"": ""area"", ""color"": ""#F88303"", ""yAxis"": 0, ""zIndex"": 6}, ""gem.xyz"": {""type"": ""area"", ""color"": ""#EF7A9F"", ""yAxis"": 0, ""zIndex"": 0}, ""x2y2.io"": {""type"": ""area"", ""color"": ""#9757D7"", ""yAxis"": 0, ""zIndex"": 4}, ""genie.xyz"": {""type"": ""area"", ""color"": ""#9EB6FC"", ""yAxis"": 0, ""zIndex"": 3}, ""opensea.io"": {""type"": ""area"", ""color"": ""#2D81E2"", ""yAxis"": 0, ""zIndex"": 5}, ""looksrare.org"": {""type"": ""area"", ""color"": ""#34CD58"", ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""area""}, ""created_at"": ""2022-11-04T11:18:21.084012+00:00"", ""__typename"": ""visualizations""}, {""id"": 2559500, ""type"": ""chart"", ""name"": ""Unique Users by Fill Source"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Users""}}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""columnMapping"": {""day"": ""x"", ""users"": ""y"", ""fill_source"": ""series""}, ""seriesOptions"": {""other"": {""type"": ""column"", ""color"": ""#000000"", ""yAxis"": 0, ""zIndex"": 4}, ""blur.io"": {""type"": ""column"", ""color"": ""#f88303"", ""yAxis"": 0, ""zIndex"": 5}, ""gem.xyz"": {""type"": ""column"", ""color"": ""#ef7a9f"", ""yAxis"": 0, ""zIndex"": 2}, ""x2y2.io"": {""type"": ""column"", ""color"": ""#9757d7"", ""yAxis"": 0, ""zIndex"": 6}, ""genie.xyz"": {""type"": ""column"", ""color"": ""#9eb6fc"", ""yAxis"": 0, ""zIndex"": 1}, ""opensea.io"": {""type"": ""column"", ""color"": ""#2d81e2"", ""yAxis"": 0, ""zIndex"": 0}, ""looksrare.org"": {""type"": ""column"", ""color"": ""#34cd58"", ""yAxis"": 0, ""zIndex"": 3}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-11-04T11:18:21.084012+00:00"", ""__typename"": ""visualizations""}, {""id"": 2559501, ""type"": ""chart"", ""name"": ""Sales Count"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Sales (Count)""}}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack"", ""percentValues"": false}, ""reverseX"": false, ""columnMapping"": {""day"": ""x"", ""sales"": ""y"", ""fill_source"": ""series""}, ""seriesOptions"": {""other"": {""type"": ""column"", ""color"": ""#000000"", ""yAxis"": 0, ""zIndex"": 4}, ""blur.io"": {""type"": ""column"", ""color"": ""#F88303"", ""yAxis"": 0, ""zIndex"": 5}, ""gem.xyz"": {""type"": ""column"", ""color"": ""#EF7A9F"", ""yAxis"": 0, ""zIndex"": 2}, ""x2y2.io"": {""type"": ""column"", ""color"": ""#9757D7"", ""yAxis"": 0, ""zIndex"": 6}, ""genie.xyz"": {""type"": ""column"", ""color"": ""#9EB6FC"", ""yAxis"": 0, ""zIndex"": 1}, ""opensea.io"": {""type"": ""column"", ""color"": ""#2D81E2"", ""yAxis"": 0, ""zIndex"": 0}, ""looksrare.org"": {""type"": ""column"", ""color"": ""#34CD58"", ""yAxis"": 0, ""zIndex"": 3}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-11-04T11:18:21.084012+00:00"", ""__typename"": ""visualizations""}, {""id"": 2559502, ""type"": ""chart"", ""name"": ""Percentage Unique Users by Fill Source"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Percentage Unique Users""}}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack"", ""percentValues"": true}, ""reverseX"": false, ""columnMapping"": {""day"": ""x"", ""users"": ""y"", ""fill_source"": ""series""}, ""seriesOptions"": {""other"": {""type"": ""area"", ""color"": ""#000000"", ""yAxis"": 0, ""zIndex"": 4}, ""blur.io"": {""type"": ""area"", ""color"": ""#f88303"", ""yAxis"": 0, ""zIndex"": 5}, ""gem.xyz"": {""type"": ""area"", ""color"": ""#EF7A9F"", ""yAxis"": 0, ""zIndex"": 2}, ""x2y2.io"": {""type"": ""area"", ""color"": ""#9757D7"", ""yAxis"": 0, ""zIndex"": 6}, ""genie.xyz"": {""type"": ""area"", ""color"": ""#9EB6FC"", ""yAxis"": 0, ""zIndex"": 1}, ""opensea.io"": {""type"": ""area"", ""color"": ""#2D81E2"", ""yAxis"": 0, ""zIndex"": 0}, ""looksrare.org"": {""type"": ""area"", ""color"": ""#34CD58"", ""yAxis"": 0, ""zIndex"": 3}}, ""valuesOptions"": {}, ""globalSeriesType"": ""area""}, ""created_at"": ""2022-11-04T11:18:21.084012+00:00"", ""__typename"": ""visualizations""}, {""id"": 2559503, ""type"": ""chart"", ""name"": ""Volume (ETH) by Fill Source"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Volume (ETH)""}}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""columnMapping"": {"""": ""y"", ""day"": ""x"", ""volume"": ""y"", ""fill_source"": ""series"", ""sum((price / 1.0E18))"": ""y""}, ""seriesOptions"": {""other"": {""type"": ""column"", ""color"": ""#000000"", ""yAxis"": 0, ""zIndex"": 4}, ""blur.io"": {""type"": ""column"", ""color"": ""#F88303"", ""yAxis"": 0, ""zIndex"": 5}, ""gem.xyz"": {""type"": ""column"", ""color"": ""#EF7A9F"", ""yAxis"": 0, ""zIndex"": 2}, ""x2y2.io"": {""type"": ""column"", ""color"": ""#9757D7"", ""yAxis"": 0, ""zIndex"": 6}, ""genie.xyz"": {""type"": ""column"", ""color"": ""#9EB6FC"", ""yAxis"": 0, ""zIndex"": 1}, ""opensea.io"": {""type"": ""column"", ""color"": ""#2D81E2"", ""yAxis"": 0, ""zIndex"": 0}, ""looksrare.org"": {""type"": ""column"", ""color"": ""#34CD58"", ""yAxis"": 0, ""zIndex"": 3}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-11-04T11:18:21.084012+00:00"", ""__typename"": ""visualizations""}]","select 
date(timestamp(tx_timestamp)) as day,
CASE when fill_source in ('opensea.io', 'blur.io' ) then fill_source else 'other' end as fill_source,
count(*) as sales,
round(sum(price/1e18), 2) as volume,
count(distinct to) as users
from reservoir.sales
where timestamp(tx_timestamp) >= now() - interval '1 months'
and order_kind != 'mint'
and fill_source != 'cryptopunks.app'
and wash_trading_score = 0
group by 1,2
"
1524488,Blur vs Opensea (order_source),,"[{""id"": 2559523, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-11-04T11:21:02.666933+00:00"", ""__typename"": ""visualizations""}, {""id"": 2559529, ""type"": ""chart"", ""name"": ""Volume (ETH) by Order Source"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Volume (ETH)""}}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""columnMapping"": {""day"": ""x"", ""volume"": ""y"", ""order_source"": ""series""}, ""seriesOptions"": {""other"": {""type"": ""column"", ""color"": ""#000000"", ""yAxis"": 0, ""zIndex"": 4}, ""blur.io"": {""type"": ""column"", ""color"": ""#F88303"", ""yAxis"": 0, ""zIndex"": 5}, ""gem.xyz"": {""type"": ""column"", ""color"": ""#EF7A9F"", ""yAxis"": 0, ""zIndex"": 2}, ""x2y2.io"": {""type"": ""column"", ""color"": ""#9757D7"", ""yAxis"": 0, ""zIndex"": 6}, ""genie.xyz"": {""type"": ""column"", ""color"": ""#9EB6FC"", ""yAxis"": 0, ""zIndex"": 1}, ""opensea.io"": {""type"": ""column"", ""color"": ""#2D81E2"", ""yAxis"": 0, ""zIndex"": 0}, ""looksrare.org"": {""type"": ""column"", ""color"": ""#34CD58"", ""yAxis"": 0, ""zIndex"": 3}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-11-04T11:21:02.666933+00:00"", ""__typename"": ""visualizations""}, {""id"": 2559526, ""type"": ""chart"", ""name"": ""Unique Users by Order Source"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Users""}}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""columnMapping"": {""day"": ""x"", ""users"": ""y"", ""order_source"": ""series""}, ""seriesOptions"": {""other"": {""type"": ""column"", ""color"": ""#000000"", ""yAxis"": 0, ""zIndex"": 4}, ""blur.io"": {""type"": ""column"", ""color"": ""#f88303"", ""yAxis"": 0, ""zIndex"": 5}, ""gem.xyz"": {""type"": ""column"", ""color"": ""#ef7a9f"", ""yAxis"": 0, ""zIndex"": 2}, ""x2y2.io"": {""type"": ""column"", ""color"": ""#9757d7"", ""yAxis"": 0, ""zIndex"": 6}, ""genie.xyz"": {""type"": ""column"", ""color"": ""#9eb6fc"", ""yAxis"": 0, ""zIndex"": 1}, ""opensea.io"": {""type"": ""column"", ""color"": ""#2d81e2"", ""yAxis"": 0, ""zIndex"": 0}, ""looksrare.org"": {""type"": ""column"", ""color"": ""#34cd58"", ""yAxis"": 0, ""zIndex"": 3}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-11-04T11:21:02.666933+00:00"", ""__typename"": ""visualizations""}, {""id"": 2559527, ""type"": ""chart"", ""name"": ""Sales Count"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Sales (Count)""}}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack"", ""percentValues"": false}, ""reverseX"": false, ""columnMapping"": {""day"": ""x"", ""sales"": ""y"", ""order_source"": ""series""}, ""seriesOptions"": {""other"": {""type"": ""column"", ""color"": ""#000000"", ""yAxis"": 0, ""zIndex"": 4}, ""blur.io"": {""type"": ""column"", ""color"": ""#F88303"", ""yAxis"": 0, ""zIndex"": 5}, ""gem.xyz"": {""type"": ""column"", ""color"": ""#EF7A9F"", ""yAxis"": 0, ""zIndex"": 2}, ""x2y2.io"": {""type"": ""column"", ""color"": ""#9757D7"", ""yAxis"": 0, ""zIndex"": 6}, ""genie.xyz"": {""type"": ""column"", ""color"": ""#9EB6FC"", ""yAxis"": 0, ""zIndex"": 1}, ""opensea.io"": {""type"": ""column"", ""color"": ""#2D81E2"", ""yAxis"": 0, ""zIndex"": 0}, ""looksrare.org"": {""type"": ""column"", ""color"": ""#34CD58"", ""yAxis"": 0, ""zIndex"": 3}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-11-04T11:21:02.666933+00:00"", ""__typename"": ""visualizations""}, {""id"": 2559528, ""type"": ""chart"", ""name"": ""Percentage Unique Users by Fill Source"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Percentage Unique Users""}}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack"", ""percentValues"": true}, ""reverseX"": false, ""columnMapping"": {""day"": ""x"", ""users"": ""y"", ""order_source"": ""series""}, ""seriesOptions"": {""other"": {""type"": ""area"", ""color"": ""#000000"", ""yAxis"": 0, ""zIndex"": 4}, ""blur.io"": {""type"": ""area"", ""color"": ""#f88303"", ""yAxis"": 0, ""zIndex"": 5}, ""gem.xyz"": {""type"": ""area"", ""color"": ""#EF7A9F"", ""yAxis"": 0, ""zIndex"": 2}, ""x2y2.io"": {""type"": ""area"", ""color"": ""#9757D7"", ""yAxis"": 0, ""zIndex"": 6}, ""genie.xyz"": {""type"": ""area"", ""color"": ""#9EB6FC"", ""yAxis"": 0, ""zIndex"": 1}, ""opensea.io"": {""type"": ""area"", ""color"": ""#2D81E2"", ""yAxis"": 0, ""zIndex"": 0}, ""looksrare.org"": {""type"": ""area"", ""color"": ""#34CD58"", ""yAxis"": 0, ""zIndex"": 3}}, ""valuesOptions"": {}, ""globalSeriesType"": ""area""}, ""created_at"": ""2022-11-04T11:21:02.666933+00:00"", ""__typename"": ""visualizations""}, {""id"": 2559524, ""type"": ""chart"", ""name"": ""Percentage of Volume by Order Source"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Percentage of total Volume""}}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack"", ""percentValues"": true}, ""reverseX"": false, ""columnMapping"": {""day"": ""x"", ""volume"": ""y"", ""order_source"": ""series""}, ""seriesOptions"": {""other"": {""type"": ""area"", ""color"": ""#000000"", ""yAxis"": 0, ""zIndex"": 3}, ""blur.io"": {""type"": ""area"", ""color"": ""#F88303"", ""yAxis"": 0, ""zIndex"": 6}, ""gem.xyz"": {""type"": ""area"", ""color"": ""#EF7A9F"", ""yAxis"": 0, ""zIndex"": 4}, ""x2y2.io"": {""type"": ""area"", ""color"": ""#68906f"", ""yAxis"": 0, ""zIndex"": 0}, ""genie.xyz"": {""type"": ""area"", ""color"": ""#9EB6FC"", ""yAxis"": 0, ""zIndex"": 2}, ""opensea.io"": {""type"": ""area"", ""color"": ""#2D81E2"", ""yAxis"": 0, ""zIndex"": 5}, ""looksrare.org"": {""type"": ""area"", ""color"": ""#34CD58"", ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""area""}, ""created_at"": ""2022-11-04T11:21:02.666933+00:00"", ""__typename"": ""visualizations""}, {""id"": 2559525, ""type"": ""chart"", ""name"": ""Percentage of Sales by Order Source"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Percentage of Total Sales""}}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack"", ""percentValues"": true}, ""reverseX"": false, ""columnMapping"": {""day"": ""x"", ""sales"": ""y"", ""order_source"": ""series""}, ""seriesOptions"": {""other"": {""type"": ""area"", ""color"": ""#000000"", ""yAxis"": 0, ""zIndex"": 2}, ""blur.io"": {""type"": ""area"", ""color"": ""#F88303"", ""yAxis"": 0, ""zIndex"": 6}, ""gem.xyz"": {""type"": ""area"", ""color"": ""#EF7A9F"", ""yAxis"": 0, ""zIndex"": 0}, ""x2y2.io"": {""type"": ""area"", ""color"": ""#9757D7"", ""yAxis"": 0, ""zIndex"": 4}, ""genie.xyz"": {""type"": ""area"", ""color"": ""#9EB6FC"", ""yAxis"": 0, ""zIndex"": 3}, ""opensea.io"": {""type"": ""area"", ""color"": ""#2D81E2"", ""yAxis"": 0, ""zIndex"": 5}, ""looksrare.org"": {""type"": ""area"", ""color"": ""#34CD58"", ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""area""}, ""created_at"": ""2022-11-04T11:21:02.666933+00:00"", ""__typename"": ""visualizations""}]","select 
date(timestamp(tx_timestamp)) as day,
CASE when order_source in ('opensea.io', 'blur.io' ) then order_source else 'other' end as order_source,
count(*) as sales,
round(sum(price/1e18), 2) as volume,
count(distinct to) as users
from reservoir.sales
where timestamp(tx_timestamp) >= now() - interval '1 months'
and order_kind != 'mint'
and order_source != 'cryptopunks.app'
and wash_trading_score = 0
group by 1,2
"
1524622,Blur.io Order Source distribution,,"[{""id"": 2559739, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-11-04T11:48:52.776679+00:00"", ""__typename"": ""visualizations""}, {""id"": 2559745, ""type"": ""chart"", ""name"": ""Sales Count"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Sales (Count)""}}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack"", ""percentValues"": false}, ""reverseX"": false, ""columnMapping"": {""day"": ""x"", ""sales"": ""y"", ""fill_source"": ""series""}, ""seriesOptions"": {""other"": {""type"": ""column"", ""color"": ""#000000"", ""yAxis"": 0, ""zIndex"": 4}, ""blur.io"": {""type"": ""column"", ""color"": ""#F88303"", ""yAxis"": 0, ""zIndex"": 5}, ""gem.xyz"": {""type"": ""column"", ""color"": ""#EF7A9F"", ""yAxis"": 0, ""zIndex"": 2}, ""x2y2.io"": {""type"": ""column"", ""color"": ""#9757D7"", ""yAxis"": 0, ""zIndex"": 6}, ""genie.xyz"": {""type"": ""column"", ""color"": ""#9EB6FC"", ""yAxis"": 0, ""zIndex"": 1}, ""opensea.io"": {""type"": ""column"", ""color"": ""#2D81E2"", ""yAxis"": 0, ""zIndex"": 0}, ""looksrare.org"": {""type"": ""column"", ""color"": ""#34CD58"", ""yAxis"": 0, ""zIndex"": 3}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-11-04T11:48:52.776679+00:00"", ""__typename"": ""visualizations""}, {""id"": 2559746, ""type"": ""chart"", ""name"": ""Blur.io volume per Order Source"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": """"}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Marketplace where the order was created""}}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""columnMapping"": {""day"": ""x"", ""volume"": ""z"", ""order_source"": ""y""}, ""seriesOptions"": {""order_source"": {""name"": ""Volume"", ""type"": ""scatter"", ""color"": ""#F88303"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""scatter""}, ""created_at"": ""2022-11-04T11:48:52.776679+00:00"", ""__typename"": ""visualizations""}, {""id"": 2559742, ""type"": ""chart"", ""name"": ""Percentage of Volume by Fill Source"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Percentage of total Volume""}}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack"", ""percentValues"": true}, ""reverseX"": false, ""columnMapping"": {""day"": ""x"", ""volume"": ""y"", ""fill_source"": ""series"", ""sum((price / 1.0E18))"": ""y""}, ""seriesOptions"": {""other"": {""type"": ""area"", ""color"": ""#000000"", ""yAxis"": 0, ""zIndex"": 3}, ""blur.io"": {""type"": ""area"", ""color"": ""#F88303"", ""yAxis"": 0, ""zIndex"": 6}, ""gem.xyz"": {""type"": ""area"", ""color"": ""#EF7A9F"", ""yAxis"": 0, ""zIndex"": 4}, ""x2y2.io"": {""type"": ""area"", ""color"": ""#68906f"", ""yAxis"": 0, ""zIndex"": 0}, ""genie.xyz"": {""type"": ""area"", ""color"": ""#9EB6FC"", ""yAxis"": 0, ""zIndex"": 2}, ""opensea.io"": {""type"": ""area"", ""color"": ""#2D81E2"", ""yAxis"": 0, ""zIndex"": 5}, ""looksrare.org"": {""type"": ""area"", ""color"": ""#34CD58"", ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""area""}, ""created_at"": ""2022-11-04T11:48:52.776679+00:00"", ""__typename"": ""visualizations""}, {""id"": 2559747, ""type"": ""chart"", ""name"": ""Blur.io users per Order Source"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": """"}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Marketplace where the order was created""}}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""columnMapping"": {""day"": ""x"", ""users"": ""z"", ""order_source"": ""y""}, ""seriesOptions"": {""order_source"": {""name"": ""Users"", ""type"": ""scatter"", ""color"": ""#F88303"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""scatter""}, ""created_at"": ""2022-11-04T11:48:52.776679+00:00"", ""__typename"": ""visualizations""}, {""id"": 2559740, ""type"": ""chart"", ""name"": ""Percentage Unique Users by Fill Source"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Percentage Unique Users""}}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack"", ""percentValues"": true}, ""reverseX"": false, ""columnMapping"": {""day"": ""x"", ""users"": ""y"", ""fill_source"": ""series""}, ""seriesOptions"": {""other"": {""type"": ""area"", ""color"": ""#000000"", ""yAxis"": 0, ""zIndex"": 4}, ""blur.io"": {""type"": ""area"", ""color"": ""#f88303"", ""yAxis"": 0, ""zIndex"": 5}, ""gem.xyz"": {""type"": ""area"", ""color"": ""#EF7A9F"", ""yAxis"": 0, ""zIndex"": 2}, ""x2y2.io"": {""type"": ""area"", ""color"": ""#9757D7"", ""yAxis"": 0, ""zIndex"": 6}, ""genie.xyz"": {""type"": ""area"", ""color"": ""#9EB6FC"", ""yAxis"": 0, ""zIndex"": 1}, ""opensea.io"": {""type"": ""area"", ""color"": ""#2D81E2"", ""yAxis"": 0, ""zIndex"": 0}, ""looksrare.org"": {""type"": ""area"", ""color"": ""#34CD58"", ""yAxis"": 0, ""zIndex"": 3}}, ""valuesOptions"": {}, ""globalSeriesType"": ""area""}, ""created_at"": ""2022-11-04T11:48:52.776679+00:00"", ""__typename"": ""visualizations""}, {""id"": 2559741, ""type"": ""chart"", ""name"": ""Volume (ETH)"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Volume (ETH)""}}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""columnMapping"": {"""": ""y"", ""day"": ""x"", ""volume"": ""y"", ""fill_source"": ""series"", ""sum((price / 1.0E18))"": ""y""}, ""seriesOptions"": {""other"": {""type"": ""column"", ""color"": ""#000000"", ""yAxis"": 0, ""zIndex"": 4}, ""blur.io"": {""type"": ""column"", ""color"": ""#F88303"", ""yAxis"": 0, ""zIndex"": 5}, ""gem.xyz"": {""type"": ""column"", ""color"": ""#EF7A9F"", ""yAxis"": 0, ""zIndex"": 2}, ""x2y2.io"": {""type"": ""column"", ""color"": ""#9757D7"", ""yAxis"": 0, ""zIndex"": 6}, ""genie.xyz"": {""type"": ""column"", ""color"": ""#9EB6FC"", ""yAxis"": 0, ""zIndex"": 1}, ""opensea.io"": {""type"": ""column"", ""color"": ""#2D81E2"", ""yAxis"": 0, ""zIndex"": 0}, ""looksrare.org"": {""type"": ""column"", ""color"": ""#34CD58"", ""yAxis"": 0, ""zIndex"": 3}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-11-04T11:48:52.776679+00:00"", ""__typename"": ""visualizations""}, {""id"": 2559743, ""type"": ""chart"", ""name"": ""Percentage of Sales by Fill Source"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Percentage of Total Sales""}}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack"", ""percentValues"": true}, ""reverseX"": false, ""columnMapping"": {""day"": ""x"", ""sales"": ""y"", ""fill_source"": ""series""}, ""seriesOptions"": {""other"": {""type"": ""area"", ""color"": ""#000000"", ""yAxis"": 0, ""zIndex"": 2}, ""blur.io"": {""type"": ""area"", ""color"": ""#F88303"", ""yAxis"": 0, ""zIndex"": 6}, ""gem.xyz"": {""type"": ""area"", ""color"": ""#EF7A9F"", ""yAxis"": 0, ""zIndex"": 0}, ""x2y2.io"": {""type"": ""area"", ""color"": ""#9757D7"", ""yAxis"": 0, ""zIndex"": 4}, ""genie.xyz"": {""type"": ""area"", ""color"": ""#9EB6FC"", ""yAxis"": 0, ""zIndex"": 3}, ""opensea.io"": {""type"": ""area"", ""color"": ""#2D81E2"", ""yAxis"": 0, ""zIndex"": 5}, ""looksrare.org"": {""type"": ""area"", ""color"": ""#34CD58"", ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""area""}, ""created_at"": ""2022-11-04T11:48:52.776679+00:00"", ""__typename"": ""visualizations""}, {""id"": 2559744, ""type"": ""chart"", ""name"": ""Unique Users by Fill Source"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Users""}}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""columnMapping"": {""day"": ""x"", ""users"": ""y"", ""fill_source"": ""series""}, ""seriesOptions"": {""other"": {""type"": ""column"", ""color"": ""#000000"", ""yAxis"": 0, ""zIndex"": 4}, ""blur.io"": {""type"": ""column"", ""color"": ""#f88303"", ""yAxis"": 0, ""zIndex"": 5}, ""gem.xyz"": {""type"": ""column"", ""color"": ""#ef7a9f"", ""yAxis"": 0, ""zIndex"": 2}, ""x2y2.io"": {""type"": ""column"", ""color"": ""#9757d7"", ""yAxis"": 0, ""zIndex"": 6}, ""genie.xyz"": {""type"": ""column"", ""color"": ""#9eb6fc"", ""yAxis"": 0, ""zIndex"": 1}, ""opensea.io"": {""type"": ""column"", ""color"": ""#2d81e2"", ""yAxis"": 0, ""zIndex"": 0}, ""looksrare.org"": {""type"": ""column"", ""color"": ""#34cd58"", ""yAxis"": 0, ""zIndex"": 3}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-11-04T11:48:52.776679+00:00"", ""__typename"": ""visualizations""}]","select 
date(timestamp(tx_timestamp)) as day,
CASE when fill_source in ('opensea.io', 'blur.io' ) then fill_source else 'other' end as fill_source,
CASE when order_source in ( 'opensea.io', 'blur.io' ) then order_source else 'other' end as order_source,
count(*) as sales,
round(sum(price/1e18), 2) as volume,
count(distinct to) as users
from reservoir.sales
where timestamp(tx_timestamp) >= now() - interval '1 month'
and order_kind != 'mint'
and fill_source != 'cryptopunks.app'
and fill_source ='blur.io'
and wash_trading_score = 0
group by 1,2,3
"
37672,OpenSea monthly fees (Ethereum),Combined OpenSea and seller fees,"[{""id"": 74635, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-04-25T03:40:40.409637+00:00"", ""__typename"": ""visualizations""}, {""id"": 74639, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""0,0[.]00000"", ""columnMapping"": {""usd"": ""y"", ""MONTH"": ""x"", ""month"": ""x"", ""fees_usd"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2021-04-25T03:48:52.62742+00:00"", ""__typename"": ""visualizations""}]","SELECT date AS MONTH,
       sum(fee) AS usd
FROM
  (SELECT date_trunc('month', a.evt_block_time) AS date ,
          sum(a.value / power(10, t.decimals) * p.price) AS fee
   FROM erc20_ethereum.evt_Transfer a
   INNER JOIN tokens_ethereum.erc20 t ON t.contract_address = a.contract_address
   INNER JOIN prices.usd p ON p.minute = date_trunc('minute', a.evt_block_time)
   AND p.blockchain = 'ethereum'
   AND a.contract_address = p.contract_address
   WHERE to in ('0x5b3256965e7c3cf26e11fcaf296dfc8807c01073',
                '0x8de9c5a032463c561423387a9648c5c7bcc5bc90',
                '0x0000a26b00c1f0df003000390027140000faa719')
   GROUP BY 1
   UNION ALL SELECT date_trunc('month', a.block_time) AS date ,
                    sum(a.value / 1e18 * p.price) AS fee
   FROM ethereum.traces a
   INNER JOIN prices.usd p ON p.minute = date_trunc('minute', block_time)
   AND p.blockchain = 'ethereum'
   AND p.symbol = 'WETH'
   WHERE from in ('0x7be8076f4ea4a4ad08075c2508e481d6c946d12b' ,
              '0x7f268357a8c2552623316e2562d90e642bb538e5' ,
              '0x00000000006cee72100d161c57ada5bb2be1ca79' ,
              '0x00000000006c3852cbef3e08e8df289169ede581')
     AND to in ('0x5b3256965e7c3cf26e11fcaf296dfc8807c01073',
                '0x8de9c5a032463c561423387a9648c5c7bcc5bc90',
                '0x0000a26b00c1f0df003000390027140000faa719')
     AND value > 0
     AND success
     AND tx_success
   GROUP BY 1) a
GROUP BY 1
ORDER BY 1"
581807,Total OpenSea traders over time (Solana),Registered users who have made at least one transaction,"[{""id"": 1087480, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-04-08T03:16:15.004708+00:00"", ""__typename"": ""visualizations""}, {""id"": 1087500, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""columnMapping"": {""date"": ""x"", ""users"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""area""}, ""created_at"": ""2022-04-08T03:20:57.77792+00:00"", ""__typename"": ""visualizations""}]","SELECT date, sum(users) OVER (
                              ORDER BY date) AS users
FROM
  (SELECT date, count(users) AS users
   FROM
     (SELECT date_trunc('day', min(block_time)) AS date,
             account_keys[0] AS users
      FROM solana.transactions
      WHERE (array_contains(account_keys, '3o9d13qUvEuuauhFrVom1vuCzgNsJifeaBYDPquaT73Y')
             OR array_contains(account_keys, 'pAHAKoTJsAAe2ZcvTZUxoYzuygVAFAmbYmJYdWT886r'))
        AND block_time > '2022-04-06'
      GROUP BY 2) a
   GROUP BY 1) b"
783816,OpenSea monthly volume (Ethereum) in ETH,,"[{""id"": 1398413, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2022-05-19T06:10:32.384658+00:00"", ""__typename"": ""visualizations""}, {""id"": 1398414, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": null}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0"", ""columnMapping"": {""eth"": ""y"", ""usd"": ""y"", ""month"": ""x"", ""usd_volume"": ""y"", ""volume_usd"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""usd_volume"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-05-19T06:10:32.384658+00:00"", ""__typename"": ""visualizations""}]","WITH token AS (
   SELECT DISTINCT call_tx_hash AS tx_hash,
                   CASE
                       WHEN addrs[7] = '\x0000000000000000000000000000000000000000' THEN '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'
                       ELSE addrs[7]
                   END AS token_address
   FROM opensea.""WyvernExchange_call_atomicMatch_""
   WHERE (addrs[4] = '\x5b3256965e7c3cf26e11fcaf296dfc8807c01073'
          OR addrs[11] = '\x5b3256965e7c3cf26e11fcaf296dfc8807c01073')
     AND call_success
     AND call_block_time >= '2022-06-01'
     and addrs[7] in ('\x0000000000000000000000000000000000000000',
                    '\x14580a45324d0d35dc08edf982007a44325e3730',
                    '\x55370c60fca4929867f8e0e59acfc6198bdca274',
                    '\x65558b5b48dca1ed00dbd677c02faba8a6eb270f',
                    '\xa0158a5b778e792e861bb44ae663ff9dba1eb427',
                    '\xc0829421c1d260bd3cb3e0f06cfe2d52db2ce315',
                    '\xd76b5c2a23ef78368d8e34288b5b65d616b746ae',
                    '\xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',
                    '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2')
                    ),
excluded_txns AS (
   SELECT call_tx_hash
   FROM opensea.""WyvernExchange_call_atomicMatch_""
   WHERE (addrs[4] = '\x5b3256965e7c3cf26e11fcaf296dfc8807c01073'
          OR addrs[11] = '\x5b3256965e7c3cf26e11fcaf296dfc8807c01073')
     AND call_success
     AND call_block_time >= '2022-06-01'
   GROUP BY 1
   HAVING count(DISTINCT CASE
                             WHEN addrs[7] = '\x0000000000000000000000000000000000000000' THEN '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'
                             ELSE addrs[7]
                         END) > 1
)

select 
month,
sum(eth) as eth 
from (
SELECT date_trunc('month', evt_block_time) AS MONTH,
       SUM((om.price / 10^18) ) AS eth
FROM opensea.""WyvernExchange_evt_OrdersMatched"" om
INNER JOIN token ON token.tx_hash = om.evt_tx_hash
WHERE maker != taker
and evt_block_time >= '2022-06-01'
AND evt_tx_hash not in (SELECT * from dune_user_generated.kq_washtrading_txns)
AND evt_tx_hash not in (SELECT * from excluded_txns)
GROUP BY 1
UNION ALL
SELECT month
     ,eth
  FROM dune_user_generated.sohwak_os_summary_monthly_eth a
 WHERE MONTH < '2022-06-01'
UNION ALL
SELECT date_trunc('month', a.block_time) AS time_unit
      ,sum(a.original_amount_raw / 1e18) AS eth
FROM seaport.view_transactions a
WHERE block_time >= '2022-06-01'
and a.original_currency_contract in ('\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'
                                    ,'\x0000000000000000000000000000000000000000'
                                    )
and zone_address in ('\xf397619df7bfd4d1657ea9bdd9df7ff888731a11',
         '\x9b814233894cd227f561b78cc65891aa55c62ad2',
         '\x004C00500000aD104D7DBd00e3ae0A5C00560C00',
         '\x110b2B128A9eD1be5Ef3232D8e4E41640dF5c2Cd')
group by 1 ) a
group by 1
order by 1
"
130836,OpenSea Polygon Daily Volume,,"[{""id"": 257572, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-08-29T23:20:32.763919+00:00"", ""__typename"": ""visualizations""}, {""id"": 257573, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""columnMapping"": {""day"": ""x"", ""usd"": ""y"", ""month"": ""x""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2021-08-29T23:20:32.763919+00:00"", ""__typename"": ""visualizations""}]","SELECT day
      ,sum(usd) as usd
  FROM (SELECT date_trunc('day', block_time) as day
              ,sum(usd_amount) as usd
          FROM opensea.trades a
         WHERE block_time > current_date - interval '90 days'
         GROUP BY 1
        UNION ALL
        SELECT date_trunc('day', block_time) as day
              ,sum(usd_amount) as usd
          FROM seaport.transactions 
         WHERE block_time > current_date - interval '90 days'
         GROUP BY 1
        ) a
 GROUP BY 1
 ORDER BY 1

-- WITH token AS
-- (
-- SELECT call_tx_hash AS tx_hash,
-- CASE
--   WHEN (""leftOrder""->'makerAssetData')::text = '""0xf47261b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619""' THEN '\x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619'
--   WHEN (""leftOrder""->'makerAssetData')::text = '""0xf47261b00000000000000000000000008f3cf7ad23cd3cadbd9735aff958023239c6a063""' THEN '\x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063'
--   WHEN (""leftOrder""->'makerAssetData')::text = '""0xf47261b000000000000000000000000070c006878a5a50ed185ac4c87d837633923de296""' THEN '\x70c006878a5a50ed185ac4c87d837633923de296'
--   ELSE '\x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063'::bytea
-- END AS token_address,
-- 18 AS decimals
-- FROM opensea_polygon_v2.""ZeroExFeeWrapper_call_matchOrders""  a
-- )
   
-- select 
--     date_trunc('day', om.""call_block_time"") AS DAY,
--     SUM(p.price * least(""output_matchedFillResults""->'left'->'makerFeePaid', ""output_matchedFillResults""->'right'->'takerFeePaid')::numeric/10^token.decimals) as usd
-- from opensea_polygon_v2.""ZeroExFeeWrapper_call_matchOrders"" om
-- INNER JOIN token ON token.tx_hash = om.call_tx_hash
-- INNER JOIN prices.usd p ON p.minute = date_trunc('minute', om.call_block_time)
-- AND token.token_address = p.contract_address
-- AND date_trunc('day', om.""call_block_time"") > date_trunc('day', now()) - interval '90 days'
-- GROUP BY 1
-- ORDER BY 1"
130812,OpenSea Polygon Monthly Volume ($),,"[{""id"": 257518, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-08-29T22:47:53.388794+00:00"", ""__typename"": ""visualizations""}, {""id"": 257532, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""columnMapping"": {""usd"": ""y"", ""month"": ""x""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2021-08-29T22:55:01.834583+00:00"", ""__typename"": ""visualizations""}]","SELECT month
      ,sum(usd) as usd
  FROM (SELECT date_trunc('month', block_time) as month
              ,sum(usd_amount) as usd
          FROM opensea.trades a
         GROUP BY 1
        UNION ALL
        SELECT date_trunc('month', block_time) as month
              ,sum(usd_amount) as usd
          FROM seaport.transactions 
         GROUP BY 1
        ) a
 GROUP BY 1
 ORDER BY 1
 
-- WITH token AS
-- (
-- SELECT call_tx_hash AS tx_hash,
-- CASE
--   WHEN (""leftOrder""->'makerAssetData')::text = '""0xf47261b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619""' THEN '\x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619'
--   WHEN (""leftOrder""->'makerAssetData')::text = '""0xf47261b00000000000000000000000008f3cf7ad23cd3cadbd9735aff958023239c6a063""' THEN '\x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063'
--   WHEN (""leftOrder""->'makerAssetData')::text = '""0xf47261b000000000000000000000000070c006878a5a50ed185ac4c87d837633923de296""' THEN '\x70c006878a5a50ed185ac4c87d837633923de296'
--   ELSE '\x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063'::bytea
-- END AS token_address,
-- 18 AS decimals
-- FROM opensea_polygon_v2.""ZeroExFeeWrapper_call_matchOrders""  a
-- )
   
-- select 
--     date_trunc('month', om.""call_block_time"") AS MONTH,
--     SUM(p.price * least(""output_matchedFillResults""->'left'->'makerFeePaid', ""output_matchedFillResults""->'right'->'takerFeePaid')::numeric/10^token.decimals) as usd
-- from opensea_polygon_v2.""ZeroExFeeWrapper_call_matchOrders"" om
-- INNER JOIN token ON token.tx_hash = om.call_tx_hash
-- INNER JOIN prices.usd p ON p.minute = date_trunc('minute', om.call_block_time)
-- AND token.token_address = p.contract_address
-- GROUP BY 1
-- ORDER BY 1"
11385,OpenSea daily volume (Ethereum),,"[{""id"": 22600, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2020-10-12T23:14:51.993345+00:00"", ""__typename"": ""visualizations""}, {""id"": 22601, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": null}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0[.]00000"", ""columnMapping"": {""day"": ""x"", ""usd"": ""y"", ""time_unit"": ""x"", ""usd_volume"": ""y"", ""volume_usd"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""usd_volume"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""column""}, ""created_at"": ""2020-10-12T23:14:51.993+00:00"", ""__typename"": ""visualizations""}]","SELECT time_unit,
       sum(usd) AS usd
FROM
  (SELECT 'wyvern' AS contract,
          date_trunc('day', a.block_time) AS time_unit,
          sum((a.original_amount / 10^erc.decimals) * p.price) AS usd
   FROM dune_user_generated.sohwak_os_nft_trades_opensea_wyvern a
   LEFT JOIN prices.usd p ON p.minute = date_trunc('minute', a.block_time)
   AND p.minute >= CURRENT_DATE - '90 day'::interval
   AND p.contract_address = a.currency_contract
   LEFT JOIN erc20.tokens erc ON a.currency_contract = erc.contract_address
   WHERE a.block_time >= CURRENT_DATE - '90 day'::interval
     AND a.tx_hash not in
       (SELECT *
        FROM dune_user_generated.sohwak_os_washtrading_txns)
   GROUP BY 1,
            2
   UNION ALL
   SELECT 'seaport' AS contract,
                    date_trunc('day', a.block_time) AS time_unit,
                    sum(a.usd_amount) AS usd
   FROM seaport.view_transactions a
   WHERE block_time >= CURRENT_DATE - '90 day'::interval
     AND zone_address in ('\xf397619df7bfd4d1657ea9bdd9df7ff888731a11',
                          '\x9b814233894cd227f561b78cc65891aa55c62ad2',
                          '\x004C00500000aD104D7DBd00e3ae0A5C00560C00',
                          '\x110b2B128A9eD1be5Ef3232D8e4E41640dF5c2Cd')
   GROUP BY 1,
            2) a
GROUP BY 1
ORDER BY 1 DESC"
1164276,OpenSea daily volume (Ethereum) in ETH,,"[{""id"": 1989726, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2022-08-12T14:36:59.234703+00:00"", ""__typename"": ""visualizations""}, {""id"": 1989727, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": null}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0"", ""columnMapping"": {""day"": ""x"", ""eth"": ""y"", ""sum"": ""y"", ""usd"": ""y"", ""month"": ""x"", ""usd_volume"": ""y"", ""volume_usd"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""sum"": {""name"": ""eth"", ""type"": ""column"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-08-12T14:36:59.234703+00:00"", ""__typename"": ""visualizations""}]","WITH token AS
  (SELECT DISTINCT call_tx_hash AS tx_hash,
                   CASE
                       WHEN addrs[7] = '\x0000000000000000000000000000000000000000' THEN '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'
                       ELSE addrs[7]
                   END AS token_address
   FROM opensea.""WyvernExchange_call_atomicMatch_""
   WHERE (addrs[4] = '\x5b3256965e7c3cf26e11fcaf296dfc8807c01073'
          OR addrs[11] = '\x5b3256965e7c3cf26e11fcaf296dfc8807c01073')
     AND call_success
     and call_block_time >= current_date - '90 day'::interval 
     and addrs[7] in ('\x0000000000000000000000000000000000000000',
'\x14580a45324d0d35dc08edf982007a44325e3730',
'\x55370c60fca4929867f8e0e59acfc6198bdca274',
'\x65558b5b48dca1ed00dbd677c02faba8a6eb270f',
'\xa0158a5b778e792e861bb44ae663ff9dba1eb427',
'\xc0829421c1d260bd3cb3e0f06cfe2d52db2ce315',
'\xd76b5c2a23ef78368d8e34288b5b65d616b746ae',
'\xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',
'\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2')
),
          excluded_txns AS
  (SELECT call_tx_hash
   FROM opensea.""WyvernExchange_call_atomicMatch_""
   WHERE (addrs[4] = '\x5b3256965e7c3cf26e11fcaf296dfc8807c01073'
          OR addrs[11] = '\x5b3256965e7c3cf26e11fcaf296dfc8807c01073')
     AND call_success
     AND  call_block_time  >= current_date - '90 day'::interval 
   GROUP BY 1
   HAVING count(DISTINCT CASE
                             WHEN addrs[7] = '\x0000000000000000000000000000000000000000' THEN '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'
                             ELSE addrs[7]
                         END) > 1)

select day,
sum(eth) 
from (
SELECT 
date_trunc('day', evt_block_time) AS day,
SUM((om.price / 10^18) ) AS eth
FROM opensea.""WyvernExchange_evt_OrdersMatched"" om
INNER JOIN token ON token.tx_hash = om.evt_tx_hash
WHERE maker != taker
AND evt_tx_hash not in (select * from dune_user_generated.kq_washtrading_txns)
AND evt_tx_hash not in
  (SELECT *
   FROM excluded_txns)
and  evt_block_time  >= current_date - '90 day'::interval 
GROUP BY 1
union all
select 
date_trunc('day', block_time) AS day,
SUM(original_amount) AS eth
from seaport.view_transactions 
where original_currency in ('ETH', 'WETH') 
and  block_time  >= current_date - '90 day'::interval 
group by 1
) a
group by 1
order by 1"
581795,OpenSea daily NFT transactions (Solana),,"[{""id"": 1087464, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""columnMapping"": {""sol"": ""y"", ""count(id)"": ""y"", ""date_trunc(day, block_time)"": ""x""}, ""seriesOptions"": {""count(id)"": {""name"": ""count"", ""type"": ""column"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-04-08T03:12:22.355434+00:00"", ""__typename"": ""visualizations""}, {""id"": 1087463, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-04-08T03:12:22.355434+00:00"", ""__typename"": ""visualizations""}]","SELECT date_trunc('day', block_time),
       count(id)
FROM solana.transactions
WHERE (array_contains(account_keys, '3o9d13qUvEuuauhFrVom1vuCzgNsJifeaBYDPquaT73Y')
       OR array_contains(account_keys, 'pAHAKoTJsAAe2ZcvTZUxoYzuygVAFAmbYmJYdWT886r'))
  AND block_time > now() - interval '90 days'
GROUP BY 1"
2877,Total OpenSea traders over time (Ethereum),Registered users who have made at least one transaction,"[{""id"": 5541, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2020-04-26T15:55:49.989358+00:00"", ""__typename"": ""visualizations""}, {""id"": 5680, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": null}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0[.]00000"", ""columnMapping"": {""date"": ""x"", ""users"": ""y"", ""total_users"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""total_users"": {""type"": ""area"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""area""}, ""created_at"": ""2020-04-27T21:58:00.885+00:00"", ""__typename"": ""visualizations""}]","SELECT date, sum(users) OVER (
                              ORDER BY date ASC ROWS BETWEEN UNBOUNDED preceding AND CURRENT ROW) AS users
FROM
  (SELECT date, count(USER) AS users
   FROM
     (SELECT min(date) AS date,
             account AS USER
      FROM
        (SELECT date_trunc('day', min(evt_block_time)) AS date,
                maker AS account
         FROM opensea.""WyvernExchange_evt_OrdersMatched""
         WHERE evt_tx_hash not in
             (SELECT *
              FROM dune_user_generated.kq_washtrading_txns)
         GROUP BY 2
         UNION SELECT date_trunc('day', min(evt_block_time)) AS date,
                      taker AS account
         FROM opensea.""WyvernExchange_evt_OrdersMatched""
         WHERE evt_tx_hash not in
             (SELECT *
              FROM dune_user_generated.kq_washtrading_txns)
         GROUP BY 2
         UNION SELECT date_trunc('day', min(block_time)) AS date,
                      seller AS account
         FROM seaport.view_transactions
         WHERE zone_address in ('\xf397619df7bfd4d1657ea9bdd9df7ff888731a11',
                                '\x9b814233894cd227f561b78cc65891aa55c62ad2',
                                '\x004C00500000aD104D7DBd00e3ae0A5C00560C00',
                                '\x110b2B128A9eD1be5Ef3232D8e4E41640dF5c2Cd')
         GROUP BY 2
         UNION SELECT date_trunc('day', min(block_time)) AS date,
                      buyer AS account
         FROM seaport.view_transactions
         WHERE zone_address in ('\xf397619df7bfd4d1657ea9bdd9df7ff888731a11',
                                '\x9b814233894cd227f561b78cc65891aa55c62ad2',
                                '\x004C00500000aD104D7DBd00e3ae0A5C00560C00',
                                '\x110b2B128A9eD1be5Ef3232D8e4E41640dF5c2Cd')
         GROUP BY 2) AS a
      GROUP BY 2) AS b
   GROUP BY 1
   ORDER BY 1) AS c"
130852,Total OpenSea Polygon Users Over Time,All users who participated in at least one trade,"[{""id"": 257615, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-08-29T23:44:23.818615+00:00"", ""__typename"": ""visualizations""}, {""id"": 257620, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""columnMapping"": {""date"": ""x"", ""users"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""area""}, ""created_at"": ""2021-08-29T23:47:34.594489+00:00"", ""__typename"": ""visualizations""}]","SELECT date, SUM(users) OVER (ORDER BY date ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS users
FROM
(
SELECT date, COUNT(USER) AS users
FROM
 (
 SELECT MIN(date) AS date,
         account AS USER
  FROM
    (
    SELECT date_trunc('day', min(block_time)) as date
          ,buyer as account
      FROM opensea.trades
     GROUP BY 2
    UNION
    SELECT date_trunc('day', min(block_time)) as date
          ,seller as account
      FROM opensea.trades
     GROUP BY 2
    UNION
    SELECT date_trunc('day', min(block_time)) as date
          ,buyer as account
      FROM seaport.transactions
     GROUP BY 2
    UNION
    SELECT date_trunc('day', min(block_time)) as date
          ,seller as account
      FROM seaport.transactions
     GROUP BY 2
     ) AS a
  GROUP BY 2
  ) AS b
GROUP BY 1
ORDER BY 1
) AS c



-- SELECT date, SUM(users) OVER (ORDER BY date ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS users
-- FROM
-- (
-- SELECT date, COUNT(USER) AS users
-- FROM
--  (
--  SELECT MIN(date) AS date,
--          account AS USER
--   FROM
--     (
--     SELECT date_trunc('day', MIN(call_block_time)) AS date,
--           ""leftOrder""->'makerAddress' AS account
--      FROM opensea_polygon_v2.""ZeroExFeeWrapper_call_matchOrders""
--      GROUP BY 2
--      UNION SELECT date_trunc('day', MIN(call_block_time)) AS date,
--                   ""rightOrder""->'makerAddress' AS account
--      FROM opensea_polygon_v2.""ZeroExFeeWrapper_call_matchOrders""
--      GROUP BY 2
--      ) AS a
--   GROUP BY 2
--   ) AS b
-- GROUP BY 1
-- ORDER BY 1
-- ) AS c

"
47101,OpenSea monthly NFTs sold (Ethereum),,"[{""id"": 92813, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2021-05-15T02:14:54.471994+00:00"", ""__typename"": ""visualizations""}, {""id"": 92814, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": null}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0[.]00000"", ""columnMapping"": {""mm"": ""x"", ""cnt"": ""y"", ""count"": ""y"", ""month"": ""x"", ""date_trunc"": ""x"", ""usd_volume"": ""y"", ""volume_usd"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""cnt"": {""name"": ""count"", ""type"": ""column"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""column""}, ""created_at"": ""2021-05-15T02:14:54.471994+00:00"", ""__typename"": ""visualizations""}]","SELECT mm,
       sum(cnt) AS cnt
FROM
  (SELECT date_trunc('month', evt_block_time) AS mm,
          'Wyvern' AS contract,
          count(DISTINCT evt_tx_hash) AS cnt
   FROM opensea.""WyvernExchange_evt_OrdersMatched"" om
   WHERE evt_tx_hash not in
       (SELECT *
        FROM dune_user_generated.transactions_not_on_OS)
   GROUP BY 1,
            2
   UNION ALL SELECT date_trunc('month', block_time) AS mm,
                    'Seaport' AS contract,
                    count(DISTINCT tx_hash) AS cnt
   FROM seaport.view_transactions
   WHERE zone_address in ('\xf397619df7bfd4d1657ea9bdd9df7ff888731a11',
                          '\x9b814233894cd227f561b78cc65891aa55c62ad2',
                          '\x004C00500000aD104D7DBd00e3ae0A5C00560C00',
                          '\x110b2B128A9eD1be5Ef3232D8e4E41640dF5c2Cd')
   GROUP BY 1,
            2) a
GROUP BY 1
ORDER BY 1"
3469,OpenSea monthly volume (Ethereum),,"[{""id"": 6700, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2020-05-13T17:06:18.410294+00:00"", ""__typename"": ""visualizations""}, {""id"": 6913, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": null}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0[.]00000"", ""columnMapping"": {""usd"": ""y"", ""month"": ""x"", ""usd_volume"": ""y"", ""volume_usd"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""usd_volume"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""column""}, ""created_at"": ""2020-05-16T18:44:25.826+00:00"", ""__typename"": ""visualizations""}]","WITH token AS
  (SELECT DISTINCT call_tx_hash AS tx_hash,
                   CASE
                       WHEN addrs[7] = '\x0000000000000000000000000000000000000000' THEN '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'
                       ELSE addrs[7]
                   END AS token_address
   FROM opensea.""WyvernExchange_call_atomicMatch_"" a
   WHERE (addrs[4] = '\x5b3256965e7c3cf26e11fcaf296dfc8807c01073'
          OR addrs[11] = '\x5b3256965e7c3cf26e11fcaf296dfc8807c01073')
     AND call_success
     AND call_block_time > '2022-06-01'),
     excluded_txns AS
  (SELECT call_tx_hash
   FROM opensea.""WyvernExchange_call_atomicMatch_"" a
   WHERE (addrs[4] = '\x5b3256965e7c3cf26e11fcaf296dfc8807c01073'
          OR addrs[11] = '\x5b3256965e7c3cf26e11fcaf296dfc8807c01073')
     AND call_success
     AND call_block_time >= '2022-06-01'
   GROUP BY 1
   HAVING count(DISTINCT CASE
                             WHEN addrs[7] = '\x0000000000000000000000000000000000000000' THEN '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'
                             ELSE addrs[7]
                         END) > 1)
SELECT MONTH,
       sum(usd) AS usd
FROM
  (SELECT 'wyvern' AS contract,
          a.*
   FROM dune_user_generated.sohwak_os_summary_monthly_usd a
   WHERE MONTH < '2022-06-01'
   UNION ALL SELECT 'wyvern' AS contract,
                    date_trunc('month', evt_block_time) AS time_unit,
                    SUM((om.price / 10^erc.decimals) * p.price) AS usd
   FROM opensea.""WyvernExchange_evt_OrdersMatched"" om
   INNER JOIN token ON token.tx_hash = om.evt_tx_hash
   INNER JOIN erc20.tokens erc ON token.token_address = erc.contract_address
   INNER JOIN prices.usd p ON p.minute = date_trunc('minute', evt_block_time)
   WHERE maker != taker
     AND evt_block_time >= '2022-06-01'
     AND token.token_address = p.contract_address
     AND evt_tx_hash not in
       (SELECT *
        FROM dune_user_generated.transactions_not_on_OS)
     AND evt_tx_hash not in
       (SELECT *
        FROM excluded_txns)
   GROUP BY 1,
            2
   UNION ALL SELECT 'seaport' AS contract,
                    date_trunc('month', a.block_time) AS time_unit,
                    sum(a.usd_amount) AS usd
   FROM seaport.view_transactions a
   WHERE block_time >= '2022-06-01'
     AND zone_address in ('\xf397619df7bfd4d1657ea9bdd9df7ff888731a11',
                          '\x9b814233894cd227f561b78cc65891aa55c62ad2',
                          '\x004C00500000aD104D7DBd00e3ae0A5C00560C00',
                          '\x110b2B128A9eD1be5Ef3232D8e4E41640dF5c2Cd')
   GROUP BY 1,
            2) a
GROUP BY 1
ORDER BY 1 DESC"
581751,OpenSea daily volume (Solana),,"[{""id"": 1087399, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-04-08T02:55:52.620902+00:00"", ""__typename"": ""visualizations""}, {""id"": 1087436, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""columnMapping"": {""sol"": ""y"", ""usd"": ""y"", ""date_trunc(day, block_time)"": ""x""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-04-08T03:06:23.945997+00:00"", ""__typename"": ""visualizations""}]","SELECT date_trunc('day', block_time),
       sum(abs(post_balances[0] / 1e9 - pre_balances[0] / 1e9) * price) AS usd
FROM solana.transactions
INNER JOIN prices.usd ON date_trunc('minute', block_time) = minute
  AND (array_contains(account_keys, '3o9d13qUvEuuauhFrVom1vuCzgNsJifeaBYDPquaT73Y')
       OR array_contains(account_keys, 'pAHAKoTJsAAe2ZcvTZUxoYzuygVAFAmbYmJYdWT886r'))
  AND block_time > now() - interval '90 days'
  AND minute > now() - interval '90 days'
  AND symbol = 'SOL'
GROUP BY 1"
130844,OpenSea Polygon Monthly Active Traders,Users who participated in at least one trade that month,"[{""id"": 257595, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-08-29T23:30:23.594901+00:00"", ""__typename"": ""visualizations""}, {""id"": 257608, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""columnMapping"": {""date"": ""x"", ""users"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2021-08-29T23:41:19.423818+00:00"", ""__typename"": ""visualizations""}]","SELECT date
      ,count(distinct account) as users
  FROM (SELECT date_trunc('month', block_time) as date
              ,buyer as account
          FROM opensea.trades
        UNION
        SELECT date_trunc('month', block_time) as date
              ,seller as account
          FROM opensea.trades
        UNION
        SELECT date_trunc('month', block_time) as date
              ,buyer as account
          FROM seaport.transactions
        UNION
        SELECT date_trunc('month', block_time) as date
              ,seller as account
          FROM seaport.transactions
        ) a
 GROUP BY 1
 ORDER BY 1

-- SELECT date, COUNT(DISTINCT account) AS users
-- FROM
-- (
-- SELECT 
--     date_trunc('month', call_block_time) AS date,
--     ""leftOrder""->'makerAddress' AS account
-- FROM opensea_polygon_v2.""ZeroExFeeWrapper_call_matchOrders""

-- UNION SELECT 
--     date_trunc('month', call_block_time) AS date,
--     ""rightOrder""->'makerAddress' AS account
-- FROM opensea_polygon_v2.""ZeroExFeeWrapper_call_matchOrders""
-- ) a

-- GROUP BY 1
-- ORDER BY 1"
37674,OpenSea monthly active traders (Ethereum),Registered users who have made at least one transaction,"[{""id"": 74641, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2021-04-25T03:52:17.273911+00:00"", ""__typename"": ""visualizations""}, {""id"": 74643, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""0,0[.]00000"", ""columnMapping"": {""date"": ""x"", ""count"": ""y"", ""users"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2021-04-25T03:53:52.390565+00:00"", ""__typename"": ""visualizations""}]","SELECT date, count(account) AS users
FROM
  (SELECT date_trunc('month', evt_block_time) AS date,
          maker AS account
   FROM opensea.""WyvernExchange_evt_OrdersMatched""
   WHERE evt_tx_hash not in
       (SELECT *
        FROM dune_user_generated.transactions_not_on_OS)
   UNION SELECT date_trunc('month', evt_block_time) AS date,
                taker AS account
   FROM opensea.""WyvernExchange_evt_OrdersMatched""
   WHERE evt_tx_hash not in
       (SELECT *
        FROM dune_user_generated.transactions_not_on_OS)
   UNION SELECT date_trunc('month', block_time) AS date,
                seller AS account
   FROM seaport.view_transactions
   WHERE zone_address in ('\xf397619df7bfd4d1657ea9bdd9df7ff888731a11',
                          '\x9b814233894cd227f561b78cc65891aa55c62ad2',
                          '\x004C00500000aD104D7DBd00e3ae0A5C00560C00',
                          '\x110b2B128A9eD1be5Ef3232D8e4E41640dF5c2Cd')
   UNION SELECT date_trunc('month', block_time) AS date,
                buyer AS account
   FROM seaport.view_transactions
   WHERE zone_address in ('\xf397619df7bfd4d1657ea9bdd9df7ff888731a11',
                          '\x9b814233894cd227f561b78cc65891aa55c62ad2',
                          '\x004C00500000aD104D7DBd00e3ae0A5C00560C00',
                          '\x110b2B128A9eD1be5Ef3232D8e4E41640dF5c2Cd')
   UNION SELECT date_trunc('month', block_time) AS date,
                tx_from AS account
   FROM nft.trades
   WHERE platform = 'OpenSea' ) a
GROUP BY 1
ORDER BY 1"
581792,OpenSea daily active traders (Solana),Registered users who have made at least one transaction,"[{""id"": 1087457, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-04-08T03:10:03.904185+00:00"", ""__typename"": ""visualizations""}, {""id"": 1087458, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""columnMapping"": {""sol"": ""y"", ""users"": ""y"", ""date_trunc(day, block_time)"": ""x""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-04-08T03:10:03.904185+00:00"", ""__typename"": ""visualizations""}]","SELECT date_trunc('day', block_time),
       count(DISTINCT account_keys[0]) AS users
FROM solana.transactions
WHERE (array_contains(account_keys, '3o9d13qUvEuuauhFrVom1vuCzgNsJifeaBYDPquaT73Y')
       OR array_contains(account_keys, 'pAHAKoTJsAAe2ZcvTZUxoYzuygVAFAmbYmJYdWT886r'))
  AND block_time > now() - interval '90 days'
GROUP BY 1"
130838,OpenSea Polygon Monthly NFTs Sold,,"[{""id"": 257578, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-08-29T23:24:29.470131+00:00"", ""__typename"": ""visualizations""}, {""id"": 257589, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""columnMapping"": {""count"": ""y"", ""date_trunc"": ""x""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2021-08-29T23:27:37.043916+00:00"", ""__typename"": ""visualizations""}]","SELECT month as date_trunc
      ,sum(cnt) as count
  FROM (SELECT date_trunc('month', block_time) as month
              ,count(distinct tx_hash) as cnt
          FROM opensea.trades a
         GROUP BY 1
        UNION ALL
        SELECT date_trunc('month', block_time) as month
              ,count(distinct tx_hash) as cnt
          FROM seaport.transactions
         GROUP BY 1
        ) a
 GROUP BY 1
 ORDER BY 1
 
-- SELECT 
-- date_trunc('month', call_block_time),
-- COUNT(*)
-- FROM opensea_polygon_v2.""ZeroExFeeWrapper_call_matchOrders"" om
-- GROUP BY 1
-- ORDER BY 1"
347228,LooksRare Total Users,,"[{""id"": 661169, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""counterLabel"": ""LooksRare Users"", ""counterColName"": ""LooksRare""}, ""created_at"": ""2022-01-12T15:27:31.276405+00:00"", ""__typename"": ""visualizations""}, {""id"": 661168, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-01-12T15:27:07.363802+00:00"", ""__typename"": ""visualizations""}]","WITH lr_raw AS          (SELECT COUNT(distinct users) AS raw_looksrare
                        FROM (SELECT block_time,
                            buyer AS users
                        FROM nft.trades
                        WHERE platform = 'LooksRare'
                            UNION ALL
                        SELECT block_time,
                            seller AS users
                        FROM nft.trades
                        WHERE platform = 'LooksRare') lr_users),
    
lr_high_prices AS       (SELECT nft_contract_address,
                        MAX(usd_amount) AS wash_filter_price
                        FROM nft.trades
                        WHERE nft_contract_address IN ('\xff9c1b15b16263c61d017ee9f65c50e4ae0113d7', -- Loot
                                                       '\x7bd29408f11d2bfc23c34f18275bbf23bb716bc7', -- Meebits
                                                       '\x4e1f41613c9084fdb9e34e11fae9412427480e56', -- Terraforms
                                                       '\xce25e60a89f200b1fa40f6c313047ffe386992c3', -- dotdotdot
                                                       '\x05a46f1E545526FB803FF974C790aCeA34D1f2D6' -- The n project
                        )
                        AND platform='OpenSea'
                        AND block_time >= '2021-01-01' AND block_time <= '2022-01-31'
                        GROUP BY nft_contract_address),

lr_filtered AS          (SELECT COUNT(distinct users) AS filtered_looksrare
                        FROM (SELECT block_time,
                            buyer AS users
                        FROM nft.trades nftt
                        LEFT JOIN lr_high_prices hp ON hp.nft_contract_address=nftt.nft_contract_address
                        WHERE platform = 'LooksRare'
                        AND ((SELECT COUNT(*) FROM nft.trades nftt2
                            WHERE nftt2.seller=nftt.buyer
                            AND nftt2.buyer=nftt.seller
                            AND nftt2.nft_contract_address=nftt.nft_contract_address
                            AND nftt2.nft_token_id=nftt.nft_token_id
                            AND nftt2.platform = 'LooksRare') = 0)
                        AND (usd_amount < wash_filter_price OR wash_filter_price IS NULL)
                            UNION ALL
                        SELECT block_time,
                            seller AS users
                        FROM nft.trades nftt
                        LEFT JOIN lr_high_prices hp ON hp.nft_contract_address=nftt.nft_contract_address
                        WHERE platform = 'LooksRare'
                        AND ((SELECT COUNT(*) FROM nft.trades nftt2
                            WHERE nftt2.seller=nftt.buyer
                            AND nftt2.buyer=nftt.seller
                            AND nftt2.nft_contract_address=nftt.nft_contract_address
                            AND nftt2.nft_token_id=nftt.nft_token_id
                            AND nftt2.platform = 'LooksRare') = 0)
                        AND ((SELECT COUNT(*) FROM nft.trades nftt3
                            WHERE nftt3.nft_contract_address=nftt.nft_contract_address
                            AND nftt3.nft_token_id=nftt.nft_token_id
                            AND date_trunc('day', nftt3.block_time)=date_trunc('day', nftt.block_time)
                            AND nftt3.platform = 'LooksRare') < 3)
                        AND (usd_amount < wash_filter_price OR wash_filter_price IS NULL)) lr_users )


SELECT CASE WHEN '{{LooksRare Wash Trades Filter}}'='OFF' THEN SUM(raw_looksrare)
    WHEN '{{LooksRare Wash Trades Filter}}'='ON' THEN SUM(filtered_looksrare)
    END AS ""LooksRare""
FROM lr_raw,lr_filtered"
345645,LooksRare VS OpenSea Daily Volume,"Past 2 Months, in $","[{""id"": 658392, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-01-11T21:22:14.57899+00:00"", ""__typename"": ""visualizations""}, {""id"": 658393, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": null}, ""reverseX"": false, ""numberFormat"": ""$###,###"", ""columnMapping"": {"""": ""y"", ""Date"": ""x"", ""time"": ""x"", ""volume"": ""y"", ""OpenSea"": ""y"", ""platform"": ""series"", ""LooksRare"": ""y"", ""OpenSea Volume"": ""y"", ""LooksRare Volume"": ""y""}, ""seriesOptions"": {""OpenSea"": {""type"": ""column"", ""color"": ""#2280E2"", ""yAxis"": 0, ""zIndex"": 1}, ""LooksRare"": {""type"": ""column"", ""color"": ""#04E466"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-01-11T21:22:14.57899+00:00"", ""__typename"": ""visualizations""}]","WITH to_exclude AS (
    SELECT date_trunc('day', block_time) AS time
    , platform
    , SUM(usd_amount) AS volume
    FROM nft.trades
    WHERE tx_hash IN (
        SELECT call_tx_hash AS txs
        FROM opensea.""WyvernExchange_call_atomicMatch_""
        WHERE (addrs[4] = '\x5b3256965e7c3cf26e11fcaf296dfc8807c01073'
               OR addrs[11] = '\x5b3256965e7c3cf26e11fcaf296dfc8807c01073')
        AND call_success
        AND call_block_time > '2022-01-21'
        AND call_block_time > (date_trunc('day', now()) - interval '2 months')
        GROUP BY 1
        HAVING count(DISTINCT CASE WHEN addrs[7] = '\x0000000000000000000000000000000000000000'
            THEN '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' ELSE addrs[7]
            END) > 1)
    GROUP BY time, platform
    )

, raw_volume AS (
    SELECT date_trunc('day', block_time) AS time
    , platform
    , SUM(usd_amount) AS volume
    FROM nft.trades
    WHERE platform IN ('OpenSea', 'LooksRare')
    AND block_time >= (date_trunc('day', now()) - interval '2 months')
    GROUP BY time, platform
    )

, lr_high_prices AS (
    SELECT nft_contract_address
    , MAX(usd_amount) AS wash_filter_price
    FROM nft.trades
    WHERE nft_contract_address IN (
        '\xff9c1b15b16263c61d017ee9f65c50e4ae0113d7', -- Loot
       '\x7bd29408f11d2bfc23c34f18275bbf23bb716bc7', -- Meebits
       '\x4e1f41613c9084fdb9e34e11fae9412427480e56', -- Terraforms
       '\xce25e60a89f200b1fa40f6c313047ffe386992c3', -- dotdotdot
       '\x05a46f1E545526FB803FF974C790aCeA34D1f2D6' -- The n project
    )
    AND platform='OpenSea'
    AND block_time >= '2021-01-01' AND block_time <= '2022-01-31'
    GROUP BY nft_contract_address
    )

, lr_filtered AS (
    SELECT date_trunc('day', block_time) AS time
    , 'LooksRare' AS platform
    , SUM(usd_amount) AS wt_lr_volume
    FROM nft.trades nftt
    LEFT JOIN lr_high_prices hp ON hp.nft_contract_address=nftt.nft_contract_address
    WHERE platform = 'LooksRare'
    AND block_time >= (date_trunc('day', now()) - interval '2 months')
    AND (((SELECT COUNT(*) FROM nft.trades nftt2
        WHERE nftt2.seller=nftt.buyer
        AND nftt2.buyer=nftt.seller
        AND nftt2.nft_contract_address=nftt.nft_contract_address
        AND nftt2.nft_token_id=nftt.nft_token_id
        AND nftt2.platform = 'LooksRare') != 0)
    OR ((SELECT COUNT(*) FROM nft.trades nftt3
        WHERE nftt3.nft_contract_address=nftt.nft_contract_address
        AND nftt3.nft_token_id=nftt.nft_token_id
        AND date_trunc('day', nftt3.block_time)=date_trunc('day', nftt.block_time)
        AND nftt3.platform = 'LooksRare') >= 3)
    OR (usd_amount > wash_filter_price))
    GROUP BY 1
    )

SELECT rv.time
, rv.platform
, CASE WHEN '{{LooksRare Wash Trades Filter}}'='OFF' THEN SUM(rv.volume)-COALESCE(SUM(te.volume),0)
ELSE SUM(rv.volume)-COALESCE(SUM(te.volume),0)-COALESCE(SUM(lrf.wt_lr_volume),0)
END AS volume
FROM raw_volume rv
LEFT JOIN to_exclude te ON rv.time=te.time AND rv.platform=te.platform
LEFT JOIN lr_filtered lrf ON rv.time=lrf.time AND rv.platform=lrf.platform
GROUP BY rv.time, rv.platform"
345641,LooksRare VS OpenSea Hourly Volume,"Past 7 days, in $","[{""id"": 658384, ""type"": ""table"", ""name"": ""Query results"", ""options"": {""columns"": [{""name"": ""LooksRare"", ""numberFormat"": ""$###,###""}, {""name"": ""OpenSea"", ""numberFormat"": ""$###,###""}]}, ""created_at"": ""2022-01-11T21:18:10.227304+00:00"", ""__typename"": ""visualizations""}, {""id"": 658388, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": null}, ""reverseX"": false, ""numberFormat"": ""$###,###"", ""columnMapping"": {"""": ""y"", ""Date"": ""x"", ""time"": ""x"", ""volume"": ""y"", ""OpenSea"": ""y"", ""platform"": ""series"", ""LooksRare"": ""y"", ""OpenSea Volume"": ""y"", ""LooksRare Volume"": ""y""}, ""seriesOptions"": {""OpenSea"": {""type"": ""column"", ""color"": ""#2280E2"", ""yAxis"": 0, ""zIndex"": 1}, ""LooksRare"": {""type"": ""column"", ""color"": ""#04E466"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-01-11T21:19:23.96786+00:00"", ""__typename"": ""visualizations""}]","WITH to_exclude AS (
    SELECT date_trunc('hour', block_time) AS time
    , platform
    , SUM(usd_amount) AS volume
    FROM nft.trades
    WHERE tx_hash IN (
        SELECT call_tx_hash AS txs
        FROM opensea.""WyvernExchange_call_atomicMatch_""
        WHERE (addrs[4] = '\x5b3256965e7c3cf26e11fcaf296dfc8807c01073'
               OR addrs[11] = '\x5b3256965e7c3cf26e11fcaf296dfc8807c01073')
        AND call_success
        AND call_block_time > '2022-01-21'
        AND call_block_time > (date_trunc('hour', now()) - interval '1 week')
        GROUP BY 1
        HAVING count(DISTINCT CASE WHEN addrs[7] = '\x0000000000000000000000000000000000000000'
            THEN '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' ELSE addrs[7]
            END) > 1)
    GROUP BY time, platform
    )

, raw_volume AS (
    SELECT date_trunc('hour', block_time) AS time
    , platform
    , SUM(usd_amount) AS volume
    FROM nft.trades
    WHERE platform IN ('OpenSea', 'LooksRare')
    AND block_time >= (date_trunc('hour', now()) - interval '1 week')
    GROUP BY time, platform
    )

, lr_high_prices AS (
    SELECT nft_contract_address
    , MAX(usd_amount) AS wash_filter_price
    FROM nft.trades
    WHERE nft_contract_address IN (
        '\xff9c1b15b16263c61d017ee9f65c50e4ae0113d7', -- Loot
       '\x7bd29408f11d2bfc23c34f18275bbf23bb716bc7', -- Meebits
       '\x4e1f41613c9084fdb9e34e11fae9412427480e56', -- Terraforms
       '\xce25e60a89f200b1fa40f6c313047ffe386992c3', -- dotdotdot
       '\x05a46f1E545526FB803FF974C790aCeA34D1f2D6' -- The n project
    )
    AND platform='OpenSea'
    AND block_time >= '2021-01-01' AND block_time <= '2022-01-31'
    GROUP BY nft_contract_address
    )

, lr_filtered AS (
    SELECT date_trunc('hour', block_time) AS time
    , 'LooksRare' AS platform
    , SUM(usd_amount) AS wt_lr_volume
    FROM nft.trades nftt
    LEFT JOIN lr_high_prices hp ON hp.nft_contract_address=nftt.nft_contract_address
    WHERE platform = 'LooksRare'
    AND block_time >= (date_trunc('hour', now()) - interval '1 week')
    AND (((SELECT COUNT(*) FROM nft.trades nftt2
        WHERE nftt2.seller=nftt.buyer
        AND nftt2.buyer=nftt.seller
        AND nftt2.nft_contract_address=nftt.nft_contract_address
        AND nftt2.nft_token_id=nftt.nft_token_id
        AND nftt2.platform = 'LooksRare') != 0)
    OR ((SELECT COUNT(*) FROM nft.trades nftt3
        WHERE nftt3.nft_contract_address=nftt.nft_contract_address
        AND nftt3.nft_token_id=nftt.nft_token_id
        AND date_trunc('day', nftt3.block_time)=date_trunc('day', nftt.block_time)
        AND nftt3.platform = 'LooksRare') >= 3)
    OR (usd_amount > wash_filter_price))
    GROUP BY 1
    )

SELECT rv.time
, rv.platform
, CASE WHEN '{{LooksRare Wash Trades Filter}}'='OFF' THEN SUM(rv.volume)-COALESCE(SUM(te.volume),0)
ELSE SUM(rv.volume)-COALESCE(SUM(te.volume),0)-COALESCE(SUM(lrf.wt_lr_volume),0)
END AS volume
FROM raw_volume rv
LEFT JOIN to_exclude te ON rv.time=te.time AND rv.platform=te.platform
LEFT JOIN lr_filtered lrf ON rv.time=lrf.time AND rv.platform=lrf.platform
GROUP BY rv.time, rv.platform"
347290,LooksRare Total Transactions,,"[{""id"": 661283, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-01-12T15:55:26.622354+00:00"", ""__typename"": ""visualizations""}, {""id"": 661285, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Transactions"", ""counterColName"": ""LooksRare""}, ""created_at"": ""2022-01-12T15:55:53.824941+00:00"", ""__typename"": ""visualizations""}]","WITH lr_raw AS               (SELECT COUNT(*) AS raw_looksrare
                        FROM nft.trades
                        WHERE platform = 'LooksRare'),
    
lr_high_prices AS       (SELECT nft_contract_address,
                        MAX(usd_amount) AS wash_filter_price
                        FROM nft.trades
                        WHERE nft_contract_address IN ('\xff9c1b15b16263c61d017ee9f65c50e4ae0113d7', -- Loot
                                                       '\x7bd29408f11d2bfc23c34f18275bbf23bb716bc7', -- Meebits
                                                       '\x4e1f41613c9084fdb9e34e11fae9412427480e56', -- Terraforms
                                                       '\xce25e60a89f200b1fa40f6c313047ffe386992c3', -- dotdotdot
                                                       '\x05a46f1E545526FB803FF974C790aCeA34D1f2D6' -- The n project
                        )
                        AND platform='OpenSea'
                        AND block_time >= '2021-01-01' AND block_time <= '2022-01-31'
                        GROUP BY nft_contract_address),

lr_filtered AS          (SELECT COUNT(*) AS filtered_looksrare
                        FROM nft.trades nftt
                        LEFT JOIN lr_high_prices hp ON hp.nft_contract_address=nftt.nft_contract_address
                        WHERE platform = 'LooksRare'
                        AND ((SELECT COUNT(*) FROM nft.trades nftt2
                            WHERE nftt2.seller=nftt.buyer
                            AND nftt2.buyer=nftt.seller
                            AND nftt2.nft_contract_address=nftt.nft_contract_address
                            AND nftt2.nft_token_id=nftt.nft_token_id
                            AND nftt2.platform = 'LooksRare') = 0)
                        AND ((SELECT COUNT(*) FROM nft.trades nftt3
                            WHERE nftt3.nft_contract_address=nftt.nft_contract_address
                            AND nftt3.nft_token_id=nftt.nft_token_id
                            AND date_trunc('day', nftt3.block_time)=date_trunc('day', nftt.block_time)
                            AND nftt3.platform = 'LooksRare') < 3)
                        AND (usd_amount < wash_filter_price OR wash_filter_price IS NULL))


SELECT CASE WHEN '{{LooksRare Wash Trades Filter}}'='OFF' THEN SUM(raw_looksrare)
    WHEN '{{LooksRare Wash Trades Filter}}'='ON' THEN SUM(filtered_looksrare)
    END AS ""LooksRare""
FROM lr_raw,lr_filtered"
498653,LooksRare VS OpenSea Marketshare,"Based on Trading Volume, Past 2 Months","[{""id"": 943968, ""type"": ""table"", ""name"": ""Query results"", ""options"": {""columns"": [{""name"": ""LooksRare"", ""numberFormat"": ""$###,###""}, {""name"": ""OpenSea"", ""numberFormat"": ""$###,###""}]}, ""created_at"": ""2022-03-13T14:16:55.737354+00:00"", ""__typename"": ""visualizations""}, {""id"": 943975, ""type"": ""chart"", ""name"": """", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack"", ""percentValues"": true}, ""reverseX"": false, ""columnMapping"": {""Date"": ""x"", ""time"": ""x"", ""volume"": ""y"", ""OpenSea"": ""y"", ""platform"": ""series"", ""LooksRare"": ""y""}, ""seriesOptions"": {""OpenSea"": {""name"": ""OpenSea"", ""type"": ""area"", ""color"": ""#2280E2"", ""yAxis"": 0, ""zIndex"": 1}, ""LooksRare"": {""type"": ""area"", ""color"": ""#04E466"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""area""}, ""created_at"": ""2022-03-13T14:17:30.056633+00:00"", ""__typename"": ""visualizations""}]","WITH to_exclude AS (
    SELECT date_trunc('day', block_time) AS time
    , platform
    , SUM(usd_amount) AS volume
    FROM nft.trades
    WHERE tx_hash IN (
        SELECT call_tx_hash AS txs
        FROM opensea.""WyvernExchange_call_atomicMatch_""
        WHERE (addrs[4] = '\x5b3256965e7c3cf26e11fcaf296dfc8807c01073'
               OR addrs[11] = '\x5b3256965e7c3cf26e11fcaf296dfc8807c01073')
        AND call_success
        AND call_block_time > '2022-01-21'
        AND call_block_time > (date_trunc('day', now()) - interval '2 months')
        GROUP BY 1
        HAVING count(DISTINCT CASE WHEN addrs[7] = '\x0000000000000000000000000000000000000000'
            THEN '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' ELSE addrs[7]
            END) > 1)
    GROUP BY time, platform
    )

, raw_volume AS (
    SELECT date_trunc('day', block_time) AS time
    , platform
    , SUM(usd_amount) AS volume
    FROM nft.trades
    WHERE platform IN ('OpenSea', 'LooksRare')
    AND block_time >= (date_trunc('day', now()) - interval '2 months')
    GROUP BY time, platform
    )

, lr_high_prices AS (
    SELECT nft_contract_address
    , MAX(usd_amount) AS wash_filter_price
    FROM nft.trades
    WHERE nft_contract_address IN (
        '\xff9c1b15b16263c61d017ee9f65c50e4ae0113d7', -- Loot
       '\x7bd29408f11d2bfc23c34f18275bbf23bb716bc7', -- Meebits
       '\x4e1f41613c9084fdb9e34e11fae9412427480e56', -- Terraforms
       '\xce25e60a89f200b1fa40f6c313047ffe386992c3', -- dotdotdot
       '\x05a46f1E545526FB803FF974C790aCeA34D1f2D6' -- The n project
    )
    AND platform='OpenSea'
    AND block_time >= '2021-01-01' AND block_time <= '2022-01-31'
    GROUP BY nft_contract_address
    )

, lr_filtered AS (
    SELECT date_trunc('day', block_time) AS time
    , 'LooksRare' AS platform
    , SUM(usd_amount) AS wt_lr_volume
    FROM nft.trades nftt
    LEFT JOIN lr_high_prices hp ON hp.nft_contract_address=nftt.nft_contract_address
    WHERE platform = 'LooksRare'
    AND block_time >= (date_trunc('day', now()) - interval '2 months')
    AND (((SELECT COUNT(*) FROM nft.trades nftt2
        WHERE nftt2.seller=nftt.buyer
        AND nftt2.buyer=nftt.seller
        AND nftt2.nft_contract_address=nftt.nft_contract_address
        AND nftt2.nft_token_id=nftt.nft_token_id
        AND nftt2.platform = 'LooksRare') != 0)
    OR ((SELECT COUNT(*) FROM nft.trades nftt3
        WHERE nftt3.nft_contract_address=nftt.nft_contract_address
        AND nftt3.nft_token_id=nftt.nft_token_id
        AND date_trunc('day', nftt3.block_time)=date_trunc('day', nftt.block_time)
        AND nftt3.platform = 'LooksRare') >= 3)
    OR (usd_amount > wash_filter_price))
    GROUP BY 1
    )

SELECT rv.time
, rv.platform
, CASE WHEN '{{LooksRare Wash Trades Filter}}'='OFF' THEN SUM(rv.volume)-COALESCE(SUM(te.volume),0)
ELSE SUM(rv.volume)-COALESCE(SUM(te.volume),0)-COALESCE(SUM(lrf.wt_lr_volume),0)
END AS volume
FROM raw_volume rv
LEFT JOIN to_exclude te ON rv.time=te.time AND rv.platform=te.platform
LEFT JOIN lr_filtered lrf ON rv.time=lrf.time AND rv.platform=lrf.platform
GROUP BY rv.time, rv.platform"
498823,LooksRare/OpenSea Marketshare Percentage Ratio,Based on Trading Volume,"[{""id"": 944267, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""tickFormat"": ""##.[##]%""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""##.[##]%"", ""columnMapping"": {""Date"": ""x"", ""time"": ""x"", ""ratio"": ""y""}, ""seriesOptions"": {""ratio"": {""type"": ""line"", ""color"": ""#04E466"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": false, ""globalSeriesType"": ""line""}, ""created_at"": ""2022-03-13T15:42:47.846772+00:00"", ""__typename"": ""visualizations""}, {""id"": 944265, ""type"": ""table"", ""name"": ""Query results"", ""options"": {""columns"": [{""name"": ""LooksRare"", ""numberFormat"": ""$###,###""}, {""name"": ""OpenSea"", ""numberFormat"": ""$###,###""}]}, ""created_at"": ""2022-03-13T15:42:12.8883+00:00"", ""__typename"": ""visualizations""}]","WITH to_exclude AS (
    SELECT date_trunc('day', block_time) AS time
    , platform
    , SUM(usd_amount) AS volume
    FROM nft.trades
    WHERE tx_hash IN (
        SELECT call_tx_hash AS txs
        FROM opensea.""WyvernExchange_call_atomicMatch_""
        WHERE (addrs[4] = '\x5b3256965e7c3cf26e11fcaf296dfc8807c01073'
               OR addrs[11] = '\x5b3256965e7c3cf26e11fcaf296dfc8807c01073')
        AND call_success
        AND call_block_time > '2022-01-21'
        AND call_block_time > (date_trunc('day', now()) - interval '6 months')
        GROUP BY 1
        HAVING count(DISTINCT CASE WHEN addrs[7] = '\x0000000000000000000000000000000000000000'
            THEN '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' ELSE addrs[7]
            END) > 1)
    GROUP BY time, platform
    )

, raw_volume AS (
    SELECT date_trunc('day', block_time) AS time
    , platform
    , SUM(usd_amount) AS volume
    FROM nft.trades
    WHERE platform IN ('OpenSea', 'LooksRare')
    AND block_time >= (date_trunc('day', now()) - interval '6 months')
    AND block_time >= '2022-01-11'
    GROUP BY time, platform
    )

, lr_high_prices AS (
    SELECT nft_contract_address
    , MAX(usd_amount) AS wash_filter_price
    FROM nft.trades
    WHERE nft_contract_address IN (
        '\xff9c1b15b16263c61d017ee9f65c50e4ae0113d7', -- Loot
       '\x7bd29408f11d2bfc23c34f18275bbf23bb716bc7', -- Meebits
       '\x4e1f41613c9084fdb9e34e11fae9412427480e56', -- Terraforms
       '\xce25e60a89f200b1fa40f6c313047ffe386992c3', -- dotdotdot
       '\x05a46f1E545526FB803FF974C790aCeA34D1f2D6' -- The n project
    )
    AND platform='OpenSea'
    AND block_time >= '2021-01-01' AND block_time <= '2022-01-31'
    GROUP BY nft_contract_address
    )

, lr_filtered AS (
    SELECT date_trunc('day', block_time) AS time
    , 'LooksRare' AS platform
    , SUM(usd_amount) AS wt_lr_volume
    FROM nft.trades nftt
    LEFT JOIN lr_high_prices hp ON hp.nft_contract_address=nftt.nft_contract_address
    WHERE platform = 'LooksRare'
    AND block_time >= (date_trunc('day', now()) - interval '6 months')
    AND block_time >= '2022-01-11'
    AND (((SELECT COUNT(*) FROM nft.trades nftt2
        WHERE nftt2.seller=nftt.buyer
        AND nftt2.buyer=nftt.seller
        AND nftt2.nft_contract_address=nftt.nft_contract_address
        AND nftt2.nft_token_id=nftt.nft_token_id
        AND nftt2.platform = 'LooksRare') != 0)
    OR ((SELECT COUNT(*) FROM nft.trades nftt3
        WHERE nftt3.nft_contract_address=nftt.nft_contract_address
        AND nftt3.nft_token_id=nftt.nft_token_id
        AND date_trunc('day', nftt3.block_time)=date_trunc('day', nftt.block_time)
        AND nftt3.platform = 'LooksRare') >= 3)
    OR (usd_amount > wash_filter_price))
    GROUP BY 1
    )

SELECT rv.time
, CASE WHEN '{{LooksRare Wash Trades Filter}}'='OFF' THEN SUM(rv.volume)/(SUM(rv2.volume)-COALESCE(SUM(te.volume),0))
ELSE (SUM(rv.volume)-COALESCE(SUM(lrf.wt_lr_volume),0))/(SUM(rv2.volume)-COALESCE(SUM(te.volume),0))
END AS ratio
FROM raw_volume rv
LEFT JOIN raw_volume rv2 ON rv.time=rv2.time AND rv2.platform='OpenSea'
LEFT JOIN to_exclude te ON rv.time=te.time AND rv.platform=te.platform
LEFT JOIN lr_filtered lrf ON rv.time=lrf.time AND rv.platform=lrf.platform
WHERE rv.platform='LooksRare'
GROUP BY rv.time, rv.platform"
347250,OpenSea Total Users,Since LooksRare's release,"[{""id"": 661204, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-01-12T15:37:05.231728+00:00"", ""__typename"": ""visualizations""}, {""id"": 661205, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""counterLabel"": ""OpenSea Users"", ""counterColName"": ""users""}, ""created_at"": ""2022-01-12T15:37:05.231728+00:00"", ""__typename"": ""visualizations""}]","WITH to_exclude AS (
    SELECT COUNT(distinct users) AS users
    FROM (
    SELECT buyer AS users
    FROM nft.trades
    WHERE tx_hash IN (
        SELECT call_tx_hash AS txs
        FROM opensea.""WyvernExchange_call_atomicMatch_""
        WHERE (addrs[4] = '\x5b3256965e7c3cf26e11fcaf296dfc8807c01073'
               OR addrs[11] = '\x5b3256965e7c3cf26e11fcaf296dfc8807c01073')
        AND call_success
        AND call_block_time >='2022-01-11'
        GROUP BY 1
        HAVING count(DISTINCT CASE WHEN addrs[7] = '\x0000000000000000000000000000000000000000'
            THEN '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' ELSE addrs[7]
            END) > 1)
    GROUP BY buyer
    UNION
    SELECT seller AS users
    FROM nft.trades
    WHERE tx_hash IN (
        SELECT call_tx_hash AS txs
        FROM opensea.""WyvernExchange_call_atomicMatch_""
        WHERE (addrs[4] = '\x5b3256965e7c3cf26e11fcaf296dfc8807c01073'
               OR addrs[11] = '\x5b3256965e7c3cf26e11fcaf296dfc8807c01073')
        AND call_success
        AND call_block_time >='2022-01-11'
        GROUP BY 1
        HAVING count(DISTINCT CASE WHEN addrs[7] = '\x0000000000000000000000000000000000000000'
            THEN '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' ELSE addrs[7]
            END) > 1)
    GROUP BY seller
    ) t
    )

, user_count AS (
    SELECT COUNT(distinct users) AS users
    FROM (
        SELECT buyer AS users
        FROM nft.trades
        WHERE platform = 'OpenSea'
        AND block_time >='2022-01-11'
        GROUP BY buyer
        UNION
        SELECT seller AS users
        FROM nft.trades
        WHERE platform = 'OpenSea'
        AND block_time >='2022-01-11'
        GROUP BY seller
        ) t
    )

SELECT SUM(tc.users)-COALESCE(SUM(te.users),0) AS users
FROM user_count tc, to_exclude te"
347291,OpenSea Total Transactions,Since LooksRare's release,"[{""id"": 661286, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-01-12T15:56:13.588231+00:00"", ""__typename"": ""visualizations""}, {""id"": 661287, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Transactions"", ""counterColName"": ""tx_count""}, ""created_at"": ""2022-01-12T15:56:13.588231+00:00"", ""__typename"": ""visualizations""}]","WITH to_exclude AS (
    SELECT COUNT(*) AS tx_count
    FROM nft.trades
    WHERE tx_hash IN (
        SELECT call_tx_hash AS txs
        FROM opensea.""WyvernExchange_call_atomicMatch_""
        WHERE (addrs[4] = '\x5b3256965e7c3cf26e11fcaf296dfc8807c01073'
               OR addrs[11] = '\x5b3256965e7c3cf26e11fcaf296dfc8807c01073')
        AND call_success
        AND call_block_time >= '2022-01-21'
        GROUP BY 1
        HAVING count(DISTINCT CASE WHEN addrs[7] = '\x0000000000000000000000000000000000000000'
            THEN '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' ELSE addrs[7]
            END) > 1)
    )

SELECT COUNT(*) AS tx_count
FROM nft.trades
WHERE platform='OpenSea'
AND block_time >= '2022-01-11'"
347210,LooksRare VS OpenSea Daily Users,Past 2 Months,"[{""id"": 661129, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-01-12T15:22:01.035918+00:00"", ""__typename"": ""visualizations""}, {""id"": 661131, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""###,###"", ""columnMapping"": {""Date"": ""x"", ""OpenSea"": ""y"", ""LooksRare"": ""y""}, ""seriesOptions"": {""OpenSea"": {""type"": ""column"", ""color"": ""#2280E2"", ""yAxis"": 0, ""zIndex"": 1}, ""LooksRare"": {""type"": ""column"", ""color"": ""#04E466"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-01-12T15:22:15.331569+00:00"", ""__typename"": ""visualizations""}]","WITH exclude_os AS      (SELECT call_tx_hash AS txs
                        FROM opensea.""WyvernExchange_call_atomicMatch_""
                        WHERE (addrs[4] = '\x5b3256965e7c3cf26e11fcaf296dfc8807c01073'
                               OR addrs[11] = '\x5b3256965e7c3cf26e11fcaf296dfc8807c01073')
                        AND call_success
                        AND call_block_time >= date_trunc('day', NOW()) - interval '2 months'
                        GROUP BY 1
                        HAVING count(DISTINCT CASE WHEN addrs[7] = '\x0000000000000000000000000000000000000000'
                            THEN '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' ELSE addrs[7]
                            END) > 1
                        ),
                        
opensea AS              (SELECT date_trunc('day', block_time) AS day,
                            COUNT(distinct users) AS opensea
                        FROM (SELECT block_time,
                            buyer AS users
                        FROM nft.trades
                        WHERE platform = 'OpenSea'
                        AND tx_hash NOT IN (SELECT txs FROM exclude_os)
                        AND block_time >= date_trunc('day', NOW()) - interval '2 months'
                            UNION ALL
                        SELECT block_time,
                            seller AS users
                        FROM nft.trades
                        WHERE platform = 'OpenSea'
                        AND tx_hash NOT IN (SELECT txs FROM exclude_os)
                        AND block_time >= date_trunc('day', NOW()) - interval '2 months') os_txs
                        GROUP BY 1),


raw_looksrare AS        (SELECT date_trunc('day', block_time) AS day,
                            COUNT(distinct users) AS raw_looksrare
                        FROM (SELECT block_time,
                            buyer AS users
                        FROM nft.trades
                        WHERE platform = 'LooksRare'
                        AND block_time >= date_trunc('day', NOW()) - interval '2 months'
                            UNION ALL
                        SELECT block_time,
                        seller AS users
                        FROM nft.trades
                        WHERE platform = 'LooksRare'
                        AND block_time >= date_trunc('day', NOW()) - interval '2 months') lr_txs
                        GROUP BY 1),
    
lr_high_prices AS       (SELECT nft_contract_address,
                        MAX(usd_amount) AS wash_filter_price
                        FROM nft.trades
                        WHERE nft_contract_address IN ('\xff9c1b15b16263c61d017ee9f65c50e4ae0113d7', -- Loot
                                                       '\x7bd29408f11d2bfc23c34f18275bbf23bb716bc7', -- Meebits
                                                       '\x4e1f41613c9084fdb9e34e11fae9412427480e56', -- Terraforms
                                                       '\xce25e60a89f200b1fa40f6c313047ffe386992c3', -- dotdotdot
                                                       '\x05a46f1E545526FB803FF974C790aCeA34D1f2D6' -- The n project
                        )
                        AND platform='OpenSea'
                        AND block_time >= '2021-01-01' AND block_time <= '2022-01-31'
                        GROUP BY nft_contract_address),

filtered_looksrare AS   (SELECT date_trunc('day', block_time) AS day,
                        COUNT(distinct users) AS filtered_looksrare
                        FROM (SELECT block_time,
                            buyer AS users
                        FROM nft.trades nftt
                        LEFT JOIN lr_high_prices hp ON hp.nft_contract_address=nftt.nft_contract_address
                        WHERE platform = 'LooksRare'
                        AND block_time >= date_trunc('day', NOW()) - interval '2 months'
                        AND ((SELECT COUNT(*) FROM nft.trades nftt2
                            WHERE nftt2.seller=nftt.buyer
                            AND nftt2.buyer=nftt.seller
                            AND nftt2.nft_contract_address=nftt.nft_contract_address
                            AND nftt2.nft_token_id=nftt.nft_token_id
                            AND nftt2.platform = 'LooksRare') = 0)
                        AND (usd_amount < wash_filter_price OR wash_filter_price IS NULL)
                            UNION ALL
                        SELECT block_time,
                            seller AS users
                        FROM nft.trades nftt
                        LEFT JOIN lr_high_prices hp ON hp.nft_contract_address=nftt.nft_contract_address
                        WHERE platform = 'LooksRare'
                        AND block_time >= date_trunc('day', NOW()) - interval '2 months'
                        AND ((SELECT COUNT(*) FROM nft.trades nftt2
                            WHERE nftt2.seller=nftt.buyer
                            AND nftt2.buyer=nftt.seller
                            AND nftt2.nft_contract_address=nftt.nft_contract_address
                            AND nftt2.nft_token_id=nftt.nft_token_id
                            AND nftt2.platform = 'LooksRare') = 0)
                        AND (usd_amount < wash_filter_price OR wash_filter_price IS NULL)) lr_users 
                        GROUP BY 1)


SELECT os.day AS ""Date"",
SUM(opensea) AS ""OpenSea"",
CASE WHEN '{{LooksRare Wash Trades Filter}}'='OFF' THEN SUM(raw_looksrare)
WHEN '{{LooksRare Wash Trades Filter}}'='ON' THEN SUM(filtered_looksrare)
END AS ""LooksRare""
FROM opensea os
LEFT JOIN raw_looksrare rlr ON os.day=rlr.day
LEFT JOIN filtered_looksrare flr ON os.day=flr.day
GROUP BY 1"
347157,LooksRare VS OpenSea Daily Transactions,Past 2 Months,"[{""id"": 661059, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-01-12T14:58:49.208642+00:00"", ""__typename"": ""visualizations""}, {""id"": 661060, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""###,###"", ""columnMapping"": {""Date"": ""x"", ""time"": ""x"", ""OpenSea"": ""y"", ""platform"": ""series"", ""tx_count"": ""y"", ""LooksRare"": ""y""}, ""seriesOptions"": {""OpenSea"": {""type"": ""column"", ""color"": ""#2280E2"", ""yAxis"": 0, ""zIndex"": 1}, ""LooksRare"": {""type"": ""column"", ""color"": ""#04E466"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-01-12T14:58:53.548198+00:00"", ""__typename"": ""visualizations""}]","WITH to_exclude AS (
    SELECT date_trunc('day', block_time) AS time
    , platform
    , COUNT(*) AS tx_count
    FROM nft.trades
    WHERE tx_hash IN (
        SELECT call_tx_hash AS txs
        FROM opensea.""WyvernExchange_call_atomicMatch_""
        WHERE (addrs[4] = '\x5b3256965e7c3cf26e11fcaf296dfc8807c01073'
               OR addrs[11] = '\x5b3256965e7c3cf26e11fcaf296dfc8807c01073')
        AND call_success
        AND call_block_time > '2022-01-21'
        AND call_block_time > (date_trunc('day', now()) - interval '2 months')
        GROUP BY 1
        HAVING count(DISTINCT CASE WHEN addrs[7] = '\x0000000000000000000000000000000000000000'
            THEN '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' ELSE addrs[7]
            END) > 1)
    GROUP BY time, platform
    )

, raw_tx_count AS (
    SELECT date_trunc('day', block_time) AS time
    , platform
    , COUNT(*) AS tx_count
    FROM nft.trades
    WHERE platform IN ('OpenSea', 'LooksRare')
    AND block_time >= (date_trunc('day', now()) - interval '2 months')
    GROUP BY time, platform
    )

, lr_high_prices AS (
    SELECT nft_contract_address
    , MAX(usd_amount) AS wash_filter_price
    FROM nft.trades
    WHERE nft_contract_address IN (
        '\xff9c1b15b16263c61d017ee9f65c50e4ae0113d7', -- Loot
       '\x7bd29408f11d2bfc23c34f18275bbf23bb716bc7', -- Meebits
       '\x4e1f41613c9084fdb9e34e11fae9412427480e56', -- Terraforms
       '\xce25e60a89f200b1fa40f6c313047ffe386992c3', -- dotdotdot
       '\x05a46f1E545526FB803FF974C790aCeA34D1f2D6' -- The n project
    )
    AND platform='OpenSea'
    AND block_time >= '2021-01-01' AND block_time <= '2022-01-31'
    GROUP BY nft_contract_address
    )

, lr_filtered AS (
    SELECT date_trunc('day', block_time) AS time
    , 'LooksRare' AS platform
    , COUNT(*) AS wt_lr_tx_count
    FROM nft.trades nftt
    LEFT JOIN lr_high_prices hp ON hp.nft_contract_address=nftt.nft_contract_address
    WHERE platform = 'LooksRare'
    AND block_time >= (date_trunc('day', now()) - interval '2 months')
    AND (((SELECT COUNT(*) FROM nft.trades nftt2
        WHERE nftt2.seller=nftt.buyer
        AND nftt2.buyer=nftt.seller
        AND nftt2.nft_contract_address=nftt.nft_contract_address
        AND nftt2.nft_token_id=nftt.nft_token_id
        AND nftt2.platform = 'LooksRare') != 0)
    OR ((SELECT COUNT(*) FROM nft.trades nftt3
        WHERE nftt3.nft_contract_address=nftt.nft_contract_address
        AND nftt3.nft_token_id=nftt.nft_token_id
        AND date_trunc('day', nftt3.block_time)=date_trunc('day', nftt.block_time)
        AND nftt3.platform = 'LooksRare') >= 3)
    OR (usd_amount > wash_filter_price))
    GROUP BY 1
    )

SELECT rv.time
, rv.platform
, CASE WHEN '{{LooksRare Wash Trades Filter}}'='OFF' THEN SUM(rv.tx_count)-COALESCE(SUM(te.tx_count),0)
ELSE SUM(rv.tx_count)-COALESCE(SUM(te.tx_count),0)-COALESCE(SUM(lrf.wt_lr_tx_count),0)
END AS tx_count
FROM raw_tx_count rv
LEFT JOIN to_exclude te ON rv.time=te.time AND rv.platform=te.platform
LEFT JOIN lr_filtered lrf ON rv.time=lrf.time AND rv.platform=lrf.platform
GROUP BY rv.time, rv.platform"
347176,LooksRare VS OpenSea Hourly Users,Past 7 days,"[{""id"": 661085, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""###,###"", ""columnMapping"": {""Date"": ""x"", ""OpenSea"": ""y"", ""LooksRare"": ""y""}, ""seriesOptions"": {""OpenSea"": {""type"": ""column"", ""color"": ""#2280E2"", ""yAxis"": 0, ""zIndex"": 1}, ""LooksRare"": {""type"": ""column"", ""color"": ""#04E466"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-01-12T15:05:29.392944+00:00"", ""__typename"": ""visualizations""}, {""id"": 661081, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-01-12T15:03:34.715481+00:00"", ""__typename"": ""visualizations""}]","WITH exclude_os AS      (SELECT call_tx_hash AS txs
                        FROM opensea.""WyvernExchange_call_atomicMatch_""
                        WHERE (addrs[4] = '\x5b3256965e7c3cf26e11fcaf296dfc8807c01073'
                               OR addrs[11] = '\x5b3256965e7c3cf26e11fcaf296dfc8807c01073')
                        AND call_success
                        AND call_block_time >= date_trunc('hour', NOW()) - interval '7 days'
                        GROUP BY 1
                        HAVING count(DISTINCT CASE WHEN addrs[7] = '\x0000000000000000000000000000000000000000'
                            THEN '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' ELSE addrs[7]
                            END) > 1
                        ),
                        
opensea AS              (SELECT date_trunc('hour', block_time) AS hour,
                            COUNT(distinct users) AS opensea
                        FROM (SELECT block_time,
                            buyer AS users
                        FROM nft.trades
                        WHERE platform = 'OpenSea'
                        AND tx_hash NOT IN (SELECT txs FROM exclude_os)
                        AND block_time > date_trunc('hour', NOW()) - interval '7 days'
                            UNION ALL
                        SELECT block_time,
                            seller AS users
                        FROM nft.trades
                        WHERE platform = 'OpenSea'
                        AND tx_hash NOT IN (SELECT txs FROM exclude_os)
                        AND block_time > date_trunc('hour', NOW()) - interval '7 days') os_txs
                        GROUP BY 1),


raw_looksrare AS        (SELECT date_trunc('hour', block_time) AS hour,
                            COUNT(distinct users) AS raw_looksrare
                        FROM (SELECT block_time,
                            buyer AS users
                        FROM nft.trades
                        WHERE platform = 'LooksRare'
                        AND block_time > date_trunc('hour', NOW()) - interval '7 days'
                            UNION ALL
                        SELECT block_time,
                        seller AS users
                        FROM nft.trades
                        WHERE platform = 'LooksRare'
                        AND block_time > date_trunc('hour', NOW()) - interval '7 days') lr_txs
                        GROUP BY 1),
    
lr_high_prices AS       (SELECT nft_contract_address,
                        MAX(usd_amount) AS wash_filter_price
                        FROM nft.trades
                        WHERE nft_contract_address IN ('\xff9c1b15b16263c61d017ee9f65c50e4ae0113d7', -- Loot
                                                       '\x7bd29408f11d2bfc23c34f18275bbf23bb716bc7', -- Meebits
                                                       '\x4e1f41613c9084fdb9e34e11fae9412427480e56', -- Terraforms
                                                       '\xce25e60a89f200b1fa40f6c313047ffe386992c3', -- dotdotdot
                                                       '\x05a46f1E545526FB803FF974C790aCeA34D1f2D6' -- The n project
                        )
                        AND platform='OpenSea'
                        AND block_time >= '2021-01-01' AND block_time <= '2022-01-31'
                        GROUP BY nft_contract_address),

filtered_looksrare AS   (SELECT date_trunc('hour', block_time) AS hour,
                        COUNT(distinct users) AS filtered_looksrare
                        FROM (SELECT block_time,
                            buyer AS users
                        FROM nft.trades nftt
                        LEFT JOIN lr_high_prices hp ON hp.nft_contract_address=nftt.nft_contract_address
                        WHERE platform = 'LooksRare'
                        AND block_time > date_trunc('hour', NOW()) - interval '7 days'
                        AND ((SELECT COUNT(*) FROM nft.trades nftt2
                            WHERE nftt2.seller=nftt.buyer
                            AND nftt2.buyer=nftt.seller
                            AND nftt2.nft_contract_address=nftt.nft_contract_address
                            AND nftt2.nft_token_id=nftt.nft_token_id
                            AND nftt2.platform = 'LooksRare') = 0)
                        AND (usd_amount < wash_filter_price OR wash_filter_price IS NULL)
                            UNION ALL
                        SELECT block_time,
                            seller AS users
                        FROM nft.trades nftt
                        LEFT JOIN lr_high_prices hp ON hp.nft_contract_address=nftt.nft_contract_address
                        WHERE platform = 'LooksRare'
                        AND block_time > date_trunc('hour', NOW()) - interval '7 days'
                        AND ((SELECT COUNT(*) FROM nft.trades nftt2
                            WHERE nftt2.seller=nftt.buyer
                            AND nftt2.buyer=nftt.seller
                            AND nftt2.nft_contract_address=nftt.nft_contract_address
                            AND nftt2.nft_token_id=nftt.nft_token_id
                            AND nftt2.platform = 'LooksRare') = 0)
                        AND (usd_amount < wash_filter_price OR wash_filter_price IS NULL)) lr_users 
                        GROUP BY 1)


SELECT os.hour AS ""Date"",
SUM(opensea) AS ""OpenSea"",
CASE WHEN '{{LooksRare Wash Trades Filter}}'='OFF' THEN SUM(raw_looksrare)
WHEN '{{LooksRare Wash Trades Filter}}'='ON' THEN SUM(filtered_looksrare)
END AS ""LooksRare""
FROM opensea os
LEFT JOIN raw_looksrare rlr ON os.hour=rlr.hour
LEFT JOIN filtered_looksrare flr ON os.hour=flr.hour
GROUP BY 1"
347162,LooksRare VS OpenSea Hourly Transactions,Past 7 days,"[{""id"": 661065, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-01-12T15:00:51.34095+00:00"", ""__typename"": ""visualizations""}, {""id"": 661069, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""###,###"", ""columnMapping"": {""Date"": ""x"", ""time"": ""x"", ""OpenSea"": ""y"", ""platform"": ""series"", ""tx_count"": ""y"", ""LooksRare"": ""y""}, ""seriesOptions"": {""OpenSea"": {""type"": ""column"", ""color"": ""#2280E2"", ""yAxis"": 0, ""zIndex"": 1}, ""LooksRare"": {""type"": ""column"", ""color"": ""#04E466"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-01-12T15:01:20.309765+00:00"", ""__typename"": ""visualizations""}]","WITH to_exclude AS (
    SELECT date_trunc('hour', block_time) AS time
    , platform
    , COUNT(*) AS tx_count
    FROM nft.trades
    WHERE tx_hash IN (
        SELECT call_tx_hash AS txs
        FROM opensea.""WyvernExchange_call_atomicMatch_""
        WHERE (addrs[4] = '\x5b3256965e7c3cf26e11fcaf296dfc8807c01073'
               OR addrs[11] = '\x5b3256965e7c3cf26e11fcaf296dfc8807c01073')
        AND call_success
        AND call_block_time > '2022-01-21'
        AND call_block_time > (date_trunc('hour', now()) - interval '1 week')
        GROUP BY 1
        HAVING count(DISTINCT CASE WHEN addrs[7] = '\x0000000000000000000000000000000000000000'
            THEN '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' ELSE addrs[7]
            END) > 1)
    GROUP BY time, platform
    )

, raw_tx_count AS (
    SELECT date_trunc('hour', block_time) AS time
    , platform
    , COUNT(*) AS tx_count
    FROM nft.trades
    WHERE platform IN ('OpenSea', 'LooksRare')
    AND block_time >= (date_trunc('hour', now()) - interval '1 week')
    GROUP BY time, platform
    )

, lr_high_prices AS (
    SELECT nft_contract_address
    , MAX(usd_amount) AS wash_filter_price
    FROM nft.trades
    WHERE nft_contract_address IN (
        '\xff9c1b15b16263c61d017ee9f65c50e4ae0113d7', -- Loot
       '\x7bd29408f11d2bfc23c34f18275bbf23bb716bc7', -- Meebits
       '\x4e1f41613c9084fdb9e34e11fae9412427480e56', -- Terraforms
       '\xce25e60a89f200b1fa40f6c313047ffe386992c3', -- dotdotdot
       '\x05a46f1E545526FB803FF974C790aCeA34D1f2D6' -- The n project
    )
    AND platform='OpenSea'
    AND block_time >= '2021-01-01' AND block_time <= '2022-01-31'
    GROUP BY nft_contract_address
    )

, lr_filtered AS (
    SELECT date_trunc('hour', block_time) AS time
    , 'LooksRare' AS platform
    , COUNT(*) AS wt_lr_tx_count
    FROM nft.trades nftt
    LEFT JOIN lr_high_prices hp ON hp.nft_contract_address=nftt.nft_contract_address
    WHERE platform = 'LooksRare'
    AND block_time >= (date_trunc('hour', now()) - interval '1 week')
    AND (((SELECT COUNT(*) FROM nft.trades nftt2
        WHERE nftt2.seller=nftt.buyer
        AND nftt2.buyer=nftt.seller
        AND nftt2.nft_contract_address=nftt.nft_contract_address
        AND nftt2.nft_token_id=nftt.nft_token_id
        AND nftt2.platform = 'LooksRare') != 0)
    OR ((SELECT COUNT(*) FROM nft.trades nftt3
        WHERE nftt3.nft_contract_address=nftt.nft_contract_address
        AND nftt3.nft_token_id=nftt.nft_token_id
        AND date_trunc('day', nftt3.block_time)=date_trunc('day', nftt.block_time)
        AND nftt3.platform = 'LooksRare') >= 3)
    OR (usd_amount > wash_filter_price))
    GROUP BY 1
    )

SELECT rv.time
, rv.platform
, CASE WHEN '{{LooksRare Wash Trades Filter}}'='OFF' THEN SUM(rv.tx_count)-COALESCE(SUM(te.tx_count),0)
ELSE SUM(rv.tx_count)-COALESCE(SUM(te.tx_count),0)-COALESCE(SUM(lrf.wt_lr_tx_count),0)
END AS tx_count
FROM raw_tx_count rv
LEFT JOIN to_exclude te ON rv.time=te.time AND rv.platform=te.platform
LEFT JOIN lr_filtered lrf ON rv.time=lrf.time AND rv.platform=lrf.platform
GROUP BY rv.time, rv.platform"
347224,OpenSea Total Volume,Since LooksRare's Release,"[{""id"": 661162, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-01-12T15:26:09.939515+00:00"", ""__typename"": ""visualizations""}, {""id"": 661163, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""counterColName"": ""volume""}, ""created_at"": ""2022-01-12T15:26:09.939515+00:00"", ""__typename"": ""visualizations""}]","WITH to_exclude AS (
    SELECT SUM(usd_amount) AS volume
    FROM nft.trades
    WHERE tx_hash IN (
        SELECT call_tx_hash AS txs
        FROM opensea.""WyvernExchange_call_atomicMatch_""
        WHERE (addrs[4] = '\x5b3256965e7c3cf26e11fcaf296dfc8807c01073'
               OR addrs[11] = '\x5b3256965e7c3cf26e11fcaf296dfc8807c01073')
        AND call_success
        AND call_block_time >='2022-01-21'
        GROUP BY 1
        HAVING count(DISTINCT CASE WHEN addrs[7] = '\x0000000000000000000000000000000000000000'
            THEN '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' ELSE addrs[7]
            END) > 1)
    )

, raw_volume AS (
    SELECT SUM(usd_amount) AS volume
    FROM nft.trades
    WHERE platform = 'OpenSea'
    AND block_time >='2022-01-11'
    )

SELECT SUM(rv.volume)-COALESCE(SUM(te.volume),0) AS volume
FROM raw_volume rv, to_exclude te"
347220,LooksRare Total Volume,,"[{""id"": 661154, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""counterColName"": ""LooksRare""}, ""created_at"": ""2022-01-12T15:24:57.227057+00:00"", ""__typename"": ""visualizations""}, {""id"": 661149, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-01-12T15:24:27.772401+00:00"", ""__typename"": ""visualizations""}]","WITH lr_raw AS               (SELECT SUM(usd_amount) AS raw_looksrare
                        FROM nft.trades
                        WHERE platform = 'LooksRare'),
    
lr_high_prices AS       (SELECT nft_contract_address,
                        MAX(usd_amount) AS wash_filter_price
                        FROM nft.trades
                        WHERE nft_contract_address IN ('\xff9c1b15b16263c61d017ee9f65c50e4ae0113d7', -- Loot
                                                       '\x7bd29408f11d2bfc23c34f18275bbf23bb716bc7', -- Meebits
                                                       '\x4e1f41613c9084fdb9e34e11fae9412427480e56', -- Terraforms
                                                       '\xce25e60a89f200b1fa40f6c313047ffe386992c3', -- dotdotdot
                                                       '\x05a46f1E545526FB803FF974C790aCeA34D1f2D6' -- The n project
                        )
                        AND platform='OpenSea'
                        AND block_time >= '2021-01-01' AND block_time <= '2022-01-31'
                        GROUP BY nft_contract_address),

lr_filtered AS          (SELECT SUM(usd_amount) AS filtered_looksrare
                        FROM nft.trades nftt
                        LEFT JOIN lr_high_prices hp ON hp.nft_contract_address=nftt.nft_contract_address
                        WHERE platform = 'LooksRare'
                        AND ((SELECT COUNT(*) FROM nft.trades nftt2
                            WHERE nftt2.seller=nftt.buyer
                            AND nftt2.buyer=nftt.seller
                            AND nftt2.nft_contract_address=nftt.nft_contract_address
                            AND nftt2.nft_token_id=nftt.nft_token_id
                            AND nftt2.platform = 'LooksRare') = 0)
                        AND ((SELECT COUNT(*) FROM nft.trades nftt3
                            WHERE nftt3.nft_contract_address=nftt.nft_contract_address
                            AND nftt3.nft_token_id=nftt.nft_token_id
                            AND date_trunc('day', nftt3.block_time)=date_trunc('day', nftt.block_time)
                            AND nftt3.platform = 'LooksRare') < 3)
                        AND (usd_amount < wash_filter_price OR wash_filter_price IS NULL))


SELECT CASE WHEN '{{LooksRare Wash Trades Filter}}'='OFF' THEN SUM(raw_looksrare)
    WHEN '{{LooksRare Wash Trades Filter}}'='ON' THEN SUM(filtered_looksrare)
    END AS ""LooksRare""
FROM lr_raw,lr_filtered"
484904,Total OpenSea market participants over time,Registered users who have made at least one transaction,"[{""id"": 919236, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2022-03-09T01:59:33.912701+00:00"", ""__typename"": ""visualizations""}, {""id"": 919237, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": null}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0[.]00000"", ""columnMapping"": {""date"": ""x"", ""users"": ""y"", ""total_users"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""total_users"": {""type"": ""area"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""area""}, ""created_at"": ""2022-03-09T01:59:33.912701+00:00"", ""__typename"": ""visualizations""}]","SELECT date, sum(users) OVER (
                              ORDER BY date ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS users
FROM
  (SELECT date, count(USER) AS users
   FROM
     (SELECT min(date) AS date,
             account AS USER
      FROM
        (SELECT date_trunc('day', min(evt_block_time)) AS date,
                maker AS account
         FROM opensea.""WyvernExchange_evt_OrdersMatched""
         where evt_tx_hash not in (select * from dune_user_generated.kq_washtrading_txns)
         GROUP BY 2
         UNION
         SELECT date_trunc('day', min(evt_block_time)) AS date,
                      taker AS account
         FROM opensea.""WyvernExchange_evt_OrdersMatched""
         where evt_tx_hash not in (select * from dune_user_generated.kq_washtrading_txns)
         GROUP BY 2
         UNION 
         SELECT date_trunc('day', min(block_time)) AS date,
                seller as account
         FROM seaport.view_transactions
         where zone_address in ('\xf397619df7bfd4d1657ea9bdd9df7ff888731a11',
         '\x9b814233894cd227f561b78cc65891aa55c62ad2',
         '\x004C00500000aD104D7DBd00e3ae0A5C00560C00',
         '\x110b2B128A9eD1be5Ef3232D8e4E41640dF5c2Cd')
         GROUP BY 2
         UNION 
         SELECT date_trunc('day', min(block_time)) AS date,
                buyer as account
         FROM seaport.view_transactions
         where zone_address in ('\xf397619df7bfd4d1657ea9bdd9df7ff888731a11',
         '\x9b814233894cd227f561b78cc65891aa55c62ad2',
         '\x004C00500000aD104D7DBd00e3ae0A5C00560C00',
         '\x110b2B128A9eD1be5Ef3232D8e4E41640dF5c2Cd')
         GROUP BY 2
         UNION
         select
         date_trunc('day', min(block_time)) AS date,
         tx_from as account
         from nft.trades a 
         where platform = 'OpenSea'
         GROUP BY 2
         ) AS a
      GROUP BY 2) AS b
   GROUP BY 1
   ORDER BY 1) AS c"
484924,OpenSea monthly active market participants (Ethereum),Registered users who have made at least one transaction,"[{""id"": 919319, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2022-03-09T02:04:50.290197+00:00"", ""__typename"": ""visualizations""}, {""id"": 919320, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""0,0[.]00000"", ""columnMapping"": {""date"": ""x"", ""count"": ""y"", ""users"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-03-09T02:04:50.290197+00:00"", ""__typename"": ""visualizations""}]","SELECT date, count(account) AS users
FROM
(
  SELECT date_trunc('month', evt_block_time) AS date,
         maker AS account
   FROM opensea.""WyvernExchange_evt_OrdersMatched""
   where evt_tx_hash not in (select * from dune_user_generated.transactions_not_on_OS)
   UNION 
   SELECT date_trunc('month', evt_block_time) AS date,
                taker AS account
   FROM opensea.""WyvernExchange_evt_OrdersMatched""
   where evt_tx_hash not in (select * from dune_user_generated.transactions_not_on_OS)
   UNION 
   SELECT date_trunc('month', block_time) AS date,
          seller as account
   FROM seaport.view_transactions
   where zone_address in ('\xf397619df7bfd4d1657ea9bdd9df7ff888731a11',
         '\x9b814233894cd227f561b78cc65891aa55c62ad2',
         '\x004C00500000aD104D7DBd00e3ae0A5C00560C00',
         '\x110b2B128A9eD1be5Ef3232D8e4E41640dF5c2Cd')   
   UNION 
   SELECT date_trunc('month', block_time) AS date,
          buyer as account
   FROM seaport.view_transactions
   where zone_address in ('\xf397619df7bfd4d1657ea9bdd9df7ff888731a11',
         '\x9b814233894cd227f561b78cc65891aa55c62ad2',
         '\x004C00500000aD104D7DBd00e3ae0A5C00560C00',
         '\x110b2B128A9eD1be5Ef3232D8e4E41640dF5c2Cd')
    UNION
    SELECT date_trunc('month', block_time) AS date,
        tx_from as account
    from nft.trades 
    where platform = 'OpenSea'
) a
GROUP BY 1
ORDER BY 1"
787160,OpenSea monthly volume (Ethereum) in USD,,"[{""id"": 1403557, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2022-05-19T16:14:46.958016+00:00"", ""__typename"": ""visualizations""}, {""id"": 1403558, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": null}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""$0,0"", ""columnMapping"": {""usd"": ""y"", ""month"": ""x"", ""usd_volume"": ""y"", ""volume_usd"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""usd_volume"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-05-19T16:14:46.958016+00:00"", ""__typename"": ""visualizations""}]","WITH token AS (
    SELECT DISTINCT call_tx_hash AS tx_hash,
                   CASE
                       WHEN addrs[7] = '\x0000000000000000000000000000000000000000' THEN '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'
                       ELSE addrs[7]
                   END AS token_address
    FROM opensea.""WyvernExchange_call_atomicMatch_"" a
    WHERE (   addrs[4] = '\x5b3256965e7c3cf26e11fcaf296dfc8807c01073'
           OR addrs[11] = '\x5b3256965e7c3cf26e11fcaf296dfc8807c01073')
    AND call_success
    AND call_block_time >= '2022-06-01'
), excluded_txns AS (
    SELECT call_tx_hash
    FROM opensea.""WyvernExchange_call_atomicMatch_"" a
    WHERE (addrs[4] = '\x5b3256965e7c3cf26e11fcaf296dfc8807c01073'
          OR addrs[11] = '\x5b3256965e7c3cf26e11fcaf296dfc8807c01073')
    AND call_success
    AND call_block_time >= '2022-06-01'
    GROUP BY 1
    HAVING count(DISTINCT CASE
                               WHEN addrs[7] = '\x0000000000000000000000000000000000000000' THEN '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'
                               ELSE addrs[7]
                          END) > 1)
SELECT MONTH
      ,sum(usd) as usd
  FROM (
  SELECT 'wyvern' as contract
              ,a.*
          FROM dune_user_generated.sohwak_os_summary_monthly_usd a
         WHERE MONTH < '2022-06-01'
        UNION ALL
        SELECT 'wyvern' as contract
              ,date_trunc('month', evt_block_time) AS time_unit
              ,SUM((om.price / 10^erc.decimals) * p.price) AS usd
        FROM opensea.""WyvernExchange_evt_OrdersMatched"" om
            INNER JOIN token ON token.tx_hash = om.evt_tx_hash
            INNER JOIN erc20.tokens erc ON token.token_address = erc.contract_address
            INNER JOIN prices.usd p ON p.minute = date_trunc('minute', evt_block_time)
        WHERE maker != taker
          and evt_block_time >= '2022-06-01'
          AND token.token_address = p.contract_address
          AND evt_tx_hash not in (select * from dune_user_generated.transactions_not_on_OS)
          AND evt_tx_hash not in (SELECT * FROM excluded_txns)
        GROUP BY 1,2
        UNION ALL
        SELECT 'seaport' as contract
              ,date_trunc('month', a.block_time) AS time_unit
              ,sum(a.usd_amount) AS usd
          FROM seaport.view_transactions a
         WHERE block_time >= '2022-06-01'
         and zone_address in ('\xf397619df7bfd4d1657ea9bdd9df7ff888731a11',
         '\x9b814233894cd227f561b78cc65891aa55c62ad2',
         '\x004C00500000aD104D7DBd00e3ae0A5C00560C00',
         '\x110b2B128A9eD1be5Ef3232D8e4E41640dF5c2Cd')
         GROUP BY 1,2
        ) a
 GROUP BY 1
 ORDER BY 1 DESC
"
787901,OpenSea monthly NFT txns (Ethereum),,"[{""id"": 1404366, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2022-05-19T16:50:39.456022+00:00"", ""__typename"": ""visualizations""}, {""id"": 1404367, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": null}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0[.]00000"", ""columnMapping"": {""mm"": ""x"", ""cnt"": ""y"", ""count"": ""y"", ""month"": ""x"", ""date_trunc"": ""x"", ""usd_volume"": ""y"", ""volume_usd"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""usd_volume"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-05-19T16:50:39.456022+00:00"", ""__typename"": ""visualizations""}]","SELECT mm
    --   ,contract
      ,sum(cnt) as cnt
  FROM (SELECT date_trunc('month', evt_block_time) as mm
              ,'Wyvern' as contract
              ,count(distinct evt_tx_hash) as cnt
          FROM opensea.""WyvernExchange_evt_OrdersMatched"" om
         where evt_tx_hash not in (select * from dune_user_generated.transactions_not_on_OS)
         GROUP BY 1,2
        UNION ALL
        SELECT date_trunc('month', block_time) as mm
              ,'Seaport' as contract
              ,count(distinct tx_hash) as cnt
              --FROM dune_user_generated.sohwak_os_nft_trades_opensea_seaport 
         FROM seaport.view_transactions
          where zone_address in ('\xf397619df7bfd4d1657ea9bdd9df7ff888731a11',
         '\x9b814233894cd227f561b78cc65891aa55c62ad2',
         '\x004C00500000aD104D7DBd00e3ae0A5C00560C00',
         '\x110b2B128A9eD1be5Ef3232D8e4E41640dF5c2Cd')
         GROUP BY 1,2
        ) a
 GROUP BY 1
 ORDER BY 1"
787946,OpenSea monthly fees (Ethereum) in USD,Combined OpenSea and seller fees,"[{""id"": 1404419, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-05-19T16:52:53.379148+00:00"", ""__typename"": ""visualizations""}, {""id"": 1404420, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""$0,0"", ""columnMapping"": {""usd"": ""y"", ""month"": ""x"", ""fees_usd"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-05-19T16:52:53.379148+00:00"", ""__typename"": ""visualizations""}]","select date as month
      ,sum(fee) as usd
from
       (select date_trunc('month', a.evt_block_time) as date
              ,sum(a.value / power(10, t.decimals) * p.price) as fee
          from erc20_ethereum.evt_Transfer a
               inner join tokens_ethereum.erc20 t on t.contract_address = a.contract_address
               inner join prices.usd p on p.minute = date_trunc('minute', a.evt_block_time)
                                       and p.blockchain = 'ethereum'
                                       and a.contract_address = p.contract_address
       where 1=1
         and `to` in ('0x5b3256965e7c3cf26e11fcaf296dfc8807c01073', 
         '0x8de9c5a032463c561423387a9648c5c7bcc5bc90',
         '0x0000a26b00c1f0df003000390027140000faa719')
       group by 1
       union all 
       select date_trunc('month', a.block_time) as date
             ,sum(a.value / 1e18 * p.price) as fee
         from ethereum.traces a
              inner join prices.usd p on p.minute = date_trunc('minute', block_time)
                                      and p.blockchain = 'ethereum'
                                      and p.symbol = 'WETH'
        where 1=1                                      
          and `from` in ('0x7be8076f4ea4a4ad08075c2508e481d6c946d12b' -- Wyvern v2.2
                        ,'0x7f268357a8c2552623316e2562d90e642bb538e5' -- Wyvern v2.3
                        ,'0x00000000006cee72100d161c57ada5bb2be1ca79' -- Seaport v0
                        ,'0x00000000006c3852cbef3e08e8df289169ede581' -- Seaport v1
                        )
          and `to` in ('0x5b3256965e7c3cf26e11fcaf296dfc8807c01073',
          '0x8de9c5a032463c561423387a9648c5c7bcc5bc90', 
          '0x0000a26b00c1f0df003000390027140000faa719')
          and value > 0
          and success
          and tx_success
        group by 1          
        ) a
group by 1
order by 1"
788032,OpenSea daily volume (Ethereum) in USD,,"[{""id"": 1404514, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2022-05-19T16:57:34.883167+00:00"", ""__typename"": ""visualizations""}, {""id"": 1404515, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": false}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": null}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""$0,0"", ""columnMapping"": {""day"": ""x"", ""usd"": ""y"", ""time_unit"": ""x"", ""usd_volume"": ""y"", ""volume_usd"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""usd_volume"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-05-19T16:57:34.883167+00:00"", ""__typename"": ""visualizations""}]","SELECT time_unit,
       sum(usd) AS usd
FROM
  (SELECT 'wyvern' AS contract,
          date_trunc('day', a.block_time) AS time_unit,
          sum((a.original_amount / 10^erc.decimals) * p.price) AS usd
   FROM dune_user_generated.sohwak_os_nft_trades_opensea_wyvern a
   LEFT JOIN prices.usd p ON p.minute = date_trunc('minute', a.block_time)
   AND p.minute >= CURRENT_DATE - '90 day'::interval
   AND p.contract_address = a.currency_contract
   LEFT JOIN erc20.tokens erc ON a.currency_contract = erc.contract_address
   WHERE a.block_time >= CURRENT_DATE - '30 day'::interval
     AND a.tx_hash not in
       (SELECT *
        FROM dune_user_generated.sohwak_os_washtrading_txns)
   GROUP BY 1,
            2
   UNION ALL 
--   SELECT 
--   'seaport' AS contract,
--   date_trunc('day', a.block_time) AS time_unit,
--   sum((a.original_amount / 10^erc.decimals) * p.price) AS usd
--   FROM dune_user_generated.sohwak_os_nft_trades_opensea_seaport a
--   LEFT JOIN prices.usd p ON p.minute = date_trunc('minute', a.block_time)
--   AND p.minute >= CURRENT_DATE - '90 day'::interval
--   AND p.contract_address = a.currency_contract
--   LEFT JOIN erc20.tokens erc ON a.currency_contract = erc.contract_address
--   WHERE a.block_time >= CURRENT_DATE - '30 day'::interval
--   GROUP BY 1,
--             2
--   ) a   
   SELECT 'seaport' AS contract,
                    date_trunc('day', a.block_time) AS time_unit,
                    sum(a.usd_amount) AS usd
   FROM seaport.view_transactions a 
--   dune_user_generated.sohwak_os_nft_trades_opensea_seaport a
   WHERE block_time >= CURRENT_DATE - '30 day'::interval
     AND zone_address in ('\xf397619df7bfd4d1657ea9bdd9df7ff888731a11',
                          '\x9b814233894cd227f561b78cc65891aa55c62ad2',
                          '\x004C00500000aD104D7DBd00e3ae0A5C00560C00',
                          '\x110b2B128A9eD1be5Ef3232D8e4E41640dF5c2Cd')
   GROUP BY 1,
            2) a
GROUP BY 1
ORDER BY 1 DESC
"
1374934,Uniswap V3 Flow Toxicity,,"[{""id"": 2341104, ""type"": ""counter"", ""name"": ""Average Daily Volume $ (7d)"", ""options"": {""rowNumber"": 1, ""counterLabel"": """", ""stringPrefix"": ""$"", ""stringSuffix"": """", ""stringDecimal"": 0, ""counterColName"": ""moving_avg_7d_volume""}, ""created_at"": ""2022-10-09T06:25:56.627274+00:00"", ""__typename"": ""visualizations""}, {""id"": 2341020, ""type"": ""counter"", ""name"": ""Total Volume Traded"", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Volume Traded"", ""stringPrefix"": ""$"", ""counterColName"": ""volume_cumul""}, ""created_at"": ""2022-10-09T06:05:26.831426+00:00"", ""__typename"": ""visualizations""}, {""id"": 2341106, ""type"": ""counter"", ""name"": ""Total Fees Generated $"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""counterColName"": ""fees_cumul""}, ""created_at"": ""2022-10-09T06:26:54.554641+00:00"", ""__typename"": ""visualizations""}, {""id"": 2341110, ""type"": ""counter"", ""name"": ""Average Daily Fee Revenue (7d)"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""counterColName"": ""moving_avg_7d""}, ""created_at"": ""2022-10-09T06:27:32.880044+00:00"", ""__typename"": ""visualizations""}, {""id"": 2355460, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""tickFormat"": """"}, ""yAxis"": [{""type"": ""linear"", ""tickFormat"": ""%""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""%"", ""columnMapping"": {""date"": ""x"", ""percent_toxic_flow_1h_moving_avg_7d"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-10-11T00:58:19.761578+00:00"", ""__typename"": ""visualizations""}, {""id"": 2340840, ""type"": ""chart"", ""name"": ""Order Flow Toxicity Markout (Net of Fees and Price Impact)"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}, ""tickFormat"": """"}, ""yAxis"": [{""type"": ""-"", ""title"": {""text"": ""PNL""}, ""tickFormat"": ""$0[.]0a""}], ""legend"": {""enabled"": true}, ""series"": {""percentValues"": false}, ""reverseX"": false, ""numberFormat"": ""$0[.]0.a"", ""columnMapping"": {""date"": ""x"", ""markout_1h"": ""y"", ""markout_5m"": ""y"", ""markout_7d"": ""y"", ""markout_24h"": ""y""}, ""seriesOptions"": {""markout_1h"": {""type"": ""line"", ""color"": ""#0c7c00"", ""yAxis"": 0, ""zIndex"": 1}, ""markout_5m"": {""type"": ""line"", ""color"": ""#1873ff"", ""yAxis"": 0, ""zIndex"": 0}, ""markout_24h"": {""type"": ""line"", ""color"": ""#ff0000"", ""yAxis"": 0, ""zIndex"": 2}}, ""valuesOptions"": {}, ""showDataLabels"": false, ""globalSeriesType"": ""line""}, ""created_at"": ""2022-10-09T05:17:53.42667+00:00"", ""__typename"": ""visualizations""}, {""id"": 2339675, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-10-08T23:19:36.53028+00:00"", ""__typename"": ""visualizations""}, {""id"": 2339983, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""date"", ""title"": """"}]}, ""created_at"": ""2022-10-09T01:09:16.232265+00:00"", ""__typename"": ""visualizations""}, {""id"": 2340886, ""type"": ""chart"", ""name"": ""Daily Fees Earned in Pool"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""tickFormat"": """"}, ""yAxis"": [{""type"": ""linear"", ""tickFormat"": ""$0[.]0a""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""$0[.]0.a"", ""columnMapping"": {""date"": ""x"", ""fees"": ""y"", ""moving_avg_7d"": ""y"", ""pnl_500_cumul"": ""y"", ""pnl_2000_cumul"": ""y"", ""pnl_5000_cumul"": ""y""}, ""seriesOptions"": {""fees"": {""type"": ""column"", ""color"": ""#108a0a"", ""yAxis"": 0, ""zIndex"": 0}, ""moving_avg_7d"": {""type"": ""line"", ""color"": ""#00392e"", ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""line""}, ""created_at"": ""2022-10-09T05:35:36.998743+00:00"", ""__typename"": ""visualizations""}, {""id"": 2341116, ""type"": ""counter"", ""name"": ""Net Profit Markouts"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""stringSuffix"": """", ""counterColName"": ""markout_24h"", ""coloredNegativeValues"": true}, ""created_at"": ""2022-10-09T06:31:20.238979+00:00"", ""__typename"": ""visualizations""}, {""id"": 2340960, ""type"": ""chart"", ""name"": ""Total Fees Earned"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}, ""tickFormat"": """"}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Net Fees""}, ""tickFormat"": ""$0[.]0.a""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""$0[.]0.a"", ""columnMapping"": {""date"": ""x"", ""fees_cumul"": ""y""}, ""seriesOptions"": {""fees_cumul"": {""type"": ""line"", ""color"": ""#2597ff"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""line""}, ""created_at"": ""2022-10-09T05:53:41.925445+00:00"", ""__typename"": ""visualizations""}, {""id"": 2355058, ""type"": ""chart"", ""name"": ""% Toxic Flow by Volume 5m Markouts"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""tickFormat"": """"}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Toxic Flow Percentage""}, ""tickFormat"": ""%""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""%"", ""columnMapping"": {""date"": ""x"", ""percent_toxic_flow_moving_avg_7d"": ""y""}, ""seriesOptions"": {""percent_toxic_flow_moving_avg_7d"": {""type"": ""column"", ""color"": ""#b89aff"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-10-10T23:57:49.244131+00:00"", ""__typename"": ""visualizations""}, {""id"": 2340901, ""type"": ""chart"", ""name"": ""Daily Trading Volume"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Volume""}}, ""yAxis"": [{""type"": ""linear"", ""tickFormat"": ""$0[.]0a""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""$0[.]0.a"", ""columnMapping"": {""date"": ""x"", ""volume"": ""y"", ""moving_avg_7d_volume"": ""y""}, ""seriesOptions"": {""volume"": {""type"": ""column"", ""color"": ""#3661ff"", ""yAxis"": 0, ""zIndex"": 1}, ""moving_avg_7d_volume"": {""type"": ""line"", ""color"": ""#5a21b7"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""line""}, ""created_at"": ""2022-10-09T05:40:18.458114+00:00"", ""__typename"": ""visualizations""}]","-- I apologize for hardcoding so many values in this query. Should have made it more modular
SELECT
  *,
  sum(fees) over (
    order by
      date desc rows between current row
      and unbounded following
  ) as fees_cumul,
  avg(fees) over (
    order by
      date desc rows between current row
      and 7 following
  ) as moving_avg_7d,
  avg(
    pnl_5m_negative / (pnl_5m_negative + pnl_5m_positive)
  ) over (
    order by
      date desc rows between current row
      and 7 following
  ) as percent_toxic_flow_moving_avg_7d,
  avg(
    pnl_1h_negative / (pnl_1h_negative + pnl_1h_positive)
  ) over (
    order by
      date desc rows between current row
      and 7 following
  ) as percent_toxic_flow_1h_moving_avg_7d,
  avg(volume) over (
    order by
      date desc rows between current row
      and 7 following
  ) as moving_avg_7d_volume,
  sum(pnl_5m) over (
    order by
      date desc rows between current row
      and unbounded following
  ) as markout_5m,
  sum(pnl_24h) over (
    order by
      date desc rows between current row
      and unbounded following
  ) as markout_24h,
  sum(pnl_1h) over (
    order by
      date desc rows between current row
      and unbounded following
  ) as markout_1h,
  sum(pnl_7d) over (
    order by
      date desc rows between current row
      and unbounded following
  ) as markout_7d,
   sum(pnl_21d) over (
    order by
      date desc rows between current row
      and unbounded following
  ) as markout_21d,
  sum(volume) over (
    order by
      date desc rows between current row
      and unbounded following
  ) as volume_cumul
FROM
  (
    SELECT
      date_trunc('day', block_time) as date,
      sum(fees_collected_usd) as fees,
      sum(
        protocol_buySell * (markout5m - swapPrice) * eth_swapped
      ) as pnl_5m,
      sum(
        protocol_buySell * (markout24h - swapPrice) * eth_swapped
      ) as pnl_24h,
      sum(
        protocol_buySell * (markout7d - swapPrice) * eth_swapped
      ) as pnl_7d,
      sum(
        protocol_buySell * (markout21d - swapPrice) * eth_swapped
      ) as pnl_21d,
      sum(
        protocol_buySell * (markout1h - swapPrice) * eth_swapped
      ) as pnl_1h,
      sum(
        CASE
          WHEN protocol_buySell * (markout5m - swapPrice) * eth_swapped >= 0 THEN swapPrice * eth_swapped
          ELSE 0
        END
      ) as pnl_5m_positive,
      sum(
        CASE
          WHEN protocol_buySell * (markout5m - swapPrice) * eth_swapped < 0 THEN swapPrice * eth_swapped
          ELSE 0
        END
      ) as pnl_5m_negative,
      sum(
        CASE
          WHEN protocol_buySell * (markout1h - swapPrice) * eth_swapped >= 0 THEN swapPrice * eth_swapped
          ELSE 0
        END
      ) as pnl_1h_positive,
      sum(
        CASE
          WHEN protocol_buySell * (markout1h - swapPrice) * eth_swapped < 0 THEN swapPrice * eth_swapped
          ELSE 0
        END
      ) as pnl_1h_negative,
      sum(swapPrice * eth_swapped) as volume
    FROM
      (
        SELECT
          t.block_time,
          -- exchange_contract_address is the v3 LP Position
          t.exchange_contract_address,
          -- transaction addr (for spot checks)
          t.tx_hash,
          t.usd_amount,
          --Converting fee tier to a multiplier (i.e. for 0.3%, 3000 -> 0.003)
          c.fee / 1e6 AS fee_tier,
          --USD Amount * %fee = fees collected
          t.usd_amount * (c.fee / 1e6) AS fees_collected_usd,
          CASE
            WHEN t.token_b_symbol = 'USDC' then t.token_b_amount / t.token_a_amount
            WHEN t.token_b_symbol = 'WETH' then t.token_a_amount / t.token_b_amount
          END as swapPrice,
          CASE
            WHEN t.token_b_symbol = 'WETH' then 1
            WHEN t.token_b_symbol = 'USDC' then -1
          END as protocol_buySell,
          LAST_VALUE(
            CASE
              WHEN t.token_b_symbol = 'USDC' then t.token_b_amount / t.token_a_amount
              WHEN t.token_b_symbol = 'WETH' then t.token_a_amount / t.token_b_amount
            END
          ) OVER (
            ORDER BY
              block_time asc range between current row
              and interval '1 hour' following
          ) as markout1h,
          LAST_VALUE(
            CASE
              WHEN t.token_b_symbol = 'USDC' then t.token_b_amount / t.token_a_amount
              WHEN t.token_b_symbol = 'WETH' then t.token_a_amount / t.token_b_amount
            END
          ) OVER (
            ORDER BY
              block_time asc range between current row
              and interval '5 minutes' following
          ) as markout5m,
          LAST_VALUE(
            CASE
              WHEN t.token_b_symbol = 'USDC' then t.token_b_amount / t.token_a_amount
              WHEN t.token_b_symbol = 'WETH' then t.token_a_amount / t.token_b_amount
            END
          ) OVER (
            ORDER BY
              block_time asc range between current row
              and interval '24 hours' following
          ) as markout24h,
          LAST_VALUE(
            CASE
              WHEN t.token_b_symbol = 'USDC' then t.token_b_amount / t.token_a_amount
              WHEN t.token_b_symbol = 'WETH' then t.token_a_amount / t.token_b_amount
            END
          ) OVER (
            ORDER BY
              block_time asc range between current row
              and interval '168 hours' following
          ) as markout7d,
          LAST_VALUE(
            CASE
              WHEN t.token_b_symbol = 'USDC' then t.token_b_amount / t.token_a_amount
              WHEN t.token_b_symbol = 'WETH' then t.token_a_amount / t.token_b_amount
            END
          ) OVER (
            ORDER BY
              block_time asc range between current row
              and interval '21 days' following
          ) as markout21d,
          CASE
            WHEN token_b_symbol = 'WETH' then token_b_amount
            WHEN token_a_symbol = 'WETH' then token_a_amount
            else 0
          END as eth_swapped
        FROM
          dex.""trades"" t
          LEFT JOIN uniswap_v3.""Factory_call_createPool"" c --1. Join With Pool creation on LP contract address to pull fee tier
          ON t.exchange_contract_address = c.output_pool
        WHERE
          t.project = 'Uniswap'
          AND t.version = '3'
          AND t.block_time >= '05-05-2021 17:00' -- Uni v3 launch date/hr
          AND t.block_time >= '2021-08-01'
          AND (
            t.token_a_address = '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'
            AND t.token_b_address = '\xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48'
            OR (
              t.token_a_address = '\xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48'
              AND t.token_b_address = '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'
            )
          )
          AND CASE
            WHEN t.token_b_symbol = 'USDC' then t.token_b_amount / t.token_a_amount
            WHEN t.token_b_symbol = 'WETH' then t.token_a_amount / t.token_b_amount
          END BETWEEN 500 AND 5000
        ORDER BY
          t.block_time DESC
      ) X
    WHERE
      1 = 1
      AND eth_swapped > 1e-8
    group by
      1
    order by
      1 asc
  ) Y"
1386056,Uniswap V3 Total Fees,,"[{""id"": 2356352, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-10-11T03:46:57.257876+00:00"", ""__typename"": ""visualizations""}, {""id"": 2356356, ""type"": ""counter"", ""name"": ""Last 7 Days Volume"", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Trading Volume in Top 15 Pairs"", ""stringPrefix"": ""$"", ""stringSuffix"": ""B"", ""stringDecimal"": 2, ""counterColName"": ""bil_usd_volume_top15""}, ""created_at"": ""2022-10-11T03:46:57.257876+00:00"", ""__typename"": ""visualizations""}, {""id"": 2356353, ""type"": ""counter"", ""name"": ""Last 7 Days Fees"", ""options"": {""rowNumber"": 1, ""counterLabel"": ""LP Fees in Top 15 Pairs"", ""stringPrefix"": ""$"", ""stringSuffix"": ""M"", ""stringDecimal"": 2, ""counterColName"": ""mil_usd_fees_top15""}, ""created_at"": ""2022-10-11T03:46:57.257876+00:00"", ""__typename"": ""visualizations""}, {""id"": 2356354, ""type"": ""counter"", ""name"": ""Last 7 Days Volume"", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Total Trading Volume (All Pairs)"", ""stringPrefix"": ""$"", ""stringSuffix"": ""B"", ""stringDecimal"": 2, ""counterColName"": ""bil_usd_volume""}, ""created_at"": ""2022-10-11T03:46:57.257876+00:00"", ""__typename"": ""visualizations""}, {""id"": 2356355, ""type"": ""counter"", ""name"": ""Total LP Fees All Pools"", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Total LP Fees (All Pairs)"", ""stringPrefix"": ""$"", ""stringSuffix"": ""M"", ""stringDecimal"": 2, ""counterColName"": ""mil_usd_fees""}, ""created_at"": ""2022-10-11T03:46:57.257876+00:00"", ""__typename"": ""visualizations""}]","WITH all_trades AS
(SELECT
t.block_time,
CASE --filling in missing addresses for coins. Maybe not worth keeping up, some are memes.
WHEN t.token_a_address::text = '\x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce' THEN 'SHIB'
WHEN t.token_a_address::text = '\x761d38e5ddf6ccf6cf7c55759d5210750b5d60f3' THEN 'ELON'
WHEN t.token_a_address::text = '\x3301ee63fb29f863f2333bd4466acb46cd8323e6' THEN 'AKITA'
WHEN t.token_a_address::text = 'x5218e472cfcfe0b64a064f055b43b4cdc9efd3a6' THEN 'eRSDL'
WHEN t.token_a_address::text = '\x1453dbb8a29551ade11d89825ca812e05317eaeb' THEN 'TEND'
WHEN t.token_a_address::text = '\x35a532d376ffd9a705d0bb319532837337a398e7' THEN 'WDOGE'
WHEN t.token_a_address::text = '\x17ef75aa22dd5f6c2763b8304ab24f40ee54d48a' THEN 'RVP'
WHEN t.token_a_address::text = '\x6dea81c8171d0ba574754ef6f8b412f2ed88c54d' THEN 'LQTY'
WHEN t.token_a_address::text = '\x3832d2f059e55934220881f831be501d180671a7' THEN 'renDOGE'
WHEN t.token_a_address::text = '\xf16e4d813f4dcfde4c5b44f305c908742de84ef0' THEN 'ETH2x ADL'
WHEN t.token_a_address::text = '\x77fba179c79de5b7653f68b5039af940ada60ce0' THEN 'FORTH'
WHEN t.token_a_address::text = '\xf65b5c5104c4fafd4b709d9d60a185eae063276c' THEN 'TRU'
WHEN t.token_a_address::text = '\xc7283b66eb1eb5fb86327f08e1b5816b0720212b' THEN 'TRIBE'
WHEN t.token_a_address::text = '\xc8807f0f5ba3fa45ffbdc66928d71c5289249014' THEN 'ISP'
ELSE COALESCE(t.token_a_symbol,t.token_a_address::text)
END AS token_a,
CASE --filling in missing addresses for coins. Maybe not worth keeping up, some are memes.
WHEN t.token_b_address::text = '\x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce' THEN 'SHIB'
WHEN t.token_b_address::text = '\x761d38e5ddf6ccf6cf7c55759d5210750b5d60f3' THEN 'ELON'
WHEN t.token_b_address::text = '\x3301ee63fb29f863f2333bd4466acb46cd8323e6' THEN 'AKITA'
WHEN t.token_b_address::text = 'x5218e472cfcfe0b64a064f055b43b4cdc9efd3a6' THEN 'eRSDL'
WHEN t.token_b_address::text = '\x1453dbb8a29551ade11d89825ca812e05317eaeb' THEN 'TEND'
WHEN t.token_b_address::text = '\x35a532d376ffd9a705d0bb319532837337a398e7' THEN 'WDOGE'
WHEN t.token_b_address::text = '\x17ef75aa22dd5f6c2763b8304ab24f40ee54d48a' THEN 'RVP'
WHEN t.token_b_address::text = '\x6dea81c8171d0ba574754ef6f8b412f2ed88c54d' THEN 'LQTY'
WHEN t.token_b_address::text = '\x3832d2f059e55934220881f831be501d180671a7' THEN 'renDOGE'
WHEN t.token_b_address::text = '\xf16e4d813f4dcfde4c5b44f305c908742de84ef0' THEN 'ETH2x ADL'
WHEN t.token_b_address::text = '\x77fba179c79de5b7653f68b5039af940ada60ce0' THEN 'FORTH'
WHEN t.token_b_address::text = '\xf65b5c5104c4fafd4b709d9d60a185eae063276c' THEN 'TRU'
WHEN t.token_b_address::text = '\xc7283b66eb1eb5fb86327f08e1b5816b0720212b' THEN 'TRIBE'
WHEN t.token_b_address::text = '\xc8807f0f5ba3fa45ffbdc66928d71c5289249014' THEN 'ISP'
ELSE COALESCE(t.token_b_symbol,t.token_b_address::text)
END AS token_b
,t.token_a_amount
,t.token_b_amount
,t.exchange_contract_address -- exchange_contract_address is the v3 NFT LP Position
,t.tx_hash -- transaction addr (for spot checks)
,t.usd_amount --TODO: Find some way to pull in USD of any missing tokens
,c.fee/1e6 AS fee_tier --Converting fee tier to a multiplier (i.e. for 0.3%, 3000 -> 0.003)
,t.usd_amount*(c.fee/1e6) AS fees_collected_usd --USD Amount * %fee = fees collected
FROM dex.""trades"" t
LEFT JOIN uniswap_v3.""Factory_call_createPool"" c --1. Join With Pool creation on LP contract address to pull fee tier
ON t.exchange_contract_address = c.output_pool
WHERE t.project = 'Uniswap'
AND t.version = '3'
AND block_time >= (DATE_TRUNC('day',CURRENT_TIMESTAMP) - '365 days'::INTERVAL)
AND t.block_time >= '05-05-2021 17:00' -- Uni v3 launch date/hr
ORDER BY t.block_time DESC
),
sum_pairs AS( -- Using this to decide which trading pair order to pick (i.e WBTC/USDC vs USDC/WBTC). We'll pick the one with the greatest usd volume.
SELECT 
CONCAT(token_a,'/',token_b) AS forward_pair -- Trading pair
,CONCAT(token_b,'/',token_a) AS backward_pair -- For joining buys/sells later
,SUM(usd_amount) AS sum_usd
FROM all_trades
GROUP BY 1,2
),

final_trading_pairs AS( --building the mapping table for pairs
SELECT
a.forward_pair, a.backward_pair,
a.sum_usd,b.sum_usd,
CASE
WHEN RIGHT(a.backward_pair,4)='WETH' THEN a.forward_pair -- if the backward version ends in WETH, do forward
WHEN RIGHT(a.forward_pair,4)='WETH' THEN a.backward_pair
WHEN RIGHT(a.backward_pair,4)='WBTC' THEN a.forward_pair
WHEN RIGHT(a.forward_pair,4)='WBTC' THEN a.backward_pair
WHEN (a.sum_usd >= b.sum_usd) -- when a > b
OR b.sum_usd IS NULL -- or if backward usd is null
THEN a.forward_pair -- select forward
ELSE a.backward_pair --else select backward in every other circumstance
END AS trading_pair

FROM sum_pairs a
LEFT JOIN sum_pairs b
ON a.forward_pair = b.backward_pair
),
v3_trades AS (
SELECT
atx.block_time,
--f1.trading_pair,
--f2.trading_pair,
COALESCE(f1.trading_pair,f2.trading_pair) AS trading_pair,
atx.usd_amount,
atx.fee_tier,
atx.fees_collected_usd,
atx.tx_hash
FROM all_trades atx

LEFT JOIN final_trading_pairs f1
ON CONCAT(atx.token_a,'/',atx.token_b) = f1.forward_pair
LEFT JOIN final_trading_pairs f2 --check if the pair maps with the backward version
ON CONCAT(atx.token_a,'/',atx.token_b) = f2.backward_pair
),
pairs AS (
SELECT
trading_pair
,COUNT(trading_pair) AS num_trades
,SUM(usd_amount) AS total_usd
,SUM(fees_collected_usd) AS total_fees_usd
,fee_tier
,RANK() OVER(ORDER BY SUM(usd_amount) DESC) AS pair_rank_vol --rank by volume
,RANK() OVER(ORDER BY SUM(fees_collected_usd) DESC) AS pair_rank_fee --rank by fees
FROM v3_trades
WHERE usd_amount IS NOT NULL -- Eventually see if Dune adds new tokens, or we need to manually
GROUP BY trading_pair, fee_tier
ORDER BY SUM(usd_amount) DESC)

SELECT
SUM(total_usd)::decimal /1000000000 AS bil_usd_volume, -- all volume no filter
SUM(total_fees_usd)::decimal /1000000 AS mil_usd_fees, -- all fees no filter
SUM(CASE WHEN pair_rank_vol <=15 THEN total_usd ELSE 0 END)::decimal /1000000000 AS bil_usd_volume_top15, -- volume of top 15 pairs by volume
SUM(CASE WHEN pair_rank_fee <=15 THEN total_fees_usd ELSE 0 END)::decimal /1000000 AS mil_usd_fees_top15 -- fees of top 15 pairs by fees
FROM pairs"
1385465,Uniswap V3 TVL,,"[{""id"": 2355557, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Pool URL"", ""counterColName"": ""pool_url""}, ""created_at"": ""2022-10-11T01:10:44.353176+00:00"", ""__typename"": ""visualizations""}, {""id"": 2355554, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""columnMapping"": {""dt"": ""x"", ""pair"": ""series"", ""exchange_contract_address"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""line""}, ""created_at"": ""2022-10-11T01:10:44.353176+00:00"", ""__typename"": ""visualizations""}, {""id"": 2355548, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Uni V3 Pool"", ""counterColName"": ""pool""}, ""created_at"": ""2022-10-11T01:10:44.353176+00:00"", ""__typename"": ""visualizations""}, {""id"": 2355552, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-10-11T01:10:44.353176+00:00"", ""__typename"": ""visualizations""}, {""id"": 2355550, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Uni V3 Trading Volume (In Period)"", ""stringPrefix"": ""$"", ""stringDecimal"": 2, ""counterColName"": ""running_usd""}, ""created_at"": ""2022-10-11T01:10:44.353176+00:00"", ""__typename"": ""visualizations""}, {""id"": 2355549, ""type"": ""chart"", ""name"": ""Uniswap v3 Trading Volume"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Time""}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""$ USD Volume""}, ""tickFormat"": ""$0a""}, {""type"": ""linear"", ""title"": {""text"": ""Cumulative""}}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""$0.00a"", ""columnMapping"": {"""": ""y"", ""dt"": ""x"", ""usd_traded"": ""y""}, ""seriesOptions"": {""usd_traded"": {""name"": ""USD Volume (Uni v3)"", ""type"": ""column"", ""color"": ""#EA337A"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-10-11T01:10:44.353176+00:00"", ""__typename"": ""visualizations""}, {""id"": 2355551, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Uni v3 #Trades (In Period)"", ""stringDecimal"": 0, ""counterColName"": ""running_trades""}, ""created_at"": ""2022-10-11T01:10:44.353176+00:00"", ""__typename"": ""visualizations""}, {""id"": 2355553, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""dt"", ""title"": ""Time""}, {""name"": ""proj_v"", ""title"": ""Project""}, {""name"": ""usd_traded"", ""title"": ""USD Traded"", ""alignContent"": ""right"", ""numberFormat"": ""$0.00a""}, {""name"": ""running_tvl"", ""title"": ""TVL"", ""alignContent"": ""right"", ""numberFormat"": ""$0.00a""}, {""name"": ""num_trades"", ""title"": ""# Trades"", ""alignContent"": ""right"", ""numberFormat"": ""0.00a""}, {""name"": ""delta_tvl"", ""title"": ""\u0394 TVL"", ""alignContent"": ""right"", ""numberFormat"": ""$0.00a""}, {""name"": ""add_tvl"", ""title"": ""Added TVL"", ""alignContent"": ""right"", ""numberFormat"": ""$0.00a""}, {""name"": ""running_usd"", ""title"": ""Running USD Volume"", ""alignContent"": ""right"", ""numberFormat"": ""$0.00a""}, {""name"": ""running_trades"", ""title"": ""Running # Trades"", ""alignContent"": ""right"", ""numberFormat"": ""0.00a""}, {""name"": ""pool_url"", ""title"": ""Pool"", ""alignContent"": ""left""}, {""name"": ""exchange_contract_address"", ""title"": ""Contract Address""}, {""name"": ""pair"", ""title"": ""Pair""}, {""name"": ""pool"", ""title"": ""Pool""}, {""name"": ""token_a_address"", ""title"": ""Token A Address""}, {""name"": ""token_b_address"", ""title"": ""Token B Address""}, {""name"": ""token_a_symbol"", ""title"": ""Token A Symbol""}, {""name"": ""token_b_symbol"", ""title"": ""Token B Symbol""}]}, ""created_at"": ""2022-10-11T01:10:44.353176+00:00"", ""__typename"": ""visualizations""}, {""id"": 2355556, ""type"": ""counter"", ""name"": ""Counter"", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Uniswap v3 TVL"", ""stringPrefix"": ""$"", ""stringDecimal"": 2, ""counterColName"": ""running_tvl""}, ""created_at"": ""2022-10-11T01:10:44.353176+00:00"", ""__typename"": ""visualizations""}, {""id"": 2355555, ""type"": ""chart"", ""name"": ""TVL in USDC"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Time""}, ""tickFormat"": """"}, ""yAxis"": [{""type"": ""-"", ""title"": {""text"": ""TVL $""}, ""tickFormat"": ""$0[.]0a""}], ""legend"": {""enabled"": false}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""numberFormat"": ""$0.0a"", ""columnMapping"": {"""": ""y"", ""dt"": ""x"", ""uni_pool"": ""series"", ""running_tvl"": ""y"", ""exchange_contract_address"": ""series""}, ""seriesOptions"": {""1%"": {""type"": ""area"", ""color"": ""#018ba9"", ""yAxis"": 0, ""zIndex"": 2}, ""0.05%"": {""type"": ""area"", ""color"": ""#1fcdec"", ""yAxis"": 0, ""zIndex"": 1}, ""0.30%"": {""type"": ""area"", ""color"": ""#abdcff"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""area""}, ""created_at"": ""2022-10-11T01:10:44.353176+00:00"", ""__typename"": ""visualizations""}]","WITH
  trades AS (
    SELECT
      DATE_TRUNC('day', t.""block_time"") AS dt,
      project,
      version,
      CASE
        WHEN version = '1' THEN project
        ELSE project || ' V' || version || ' - ' || (ROUND(p.fee / 1e4, 2)) :: text || '%'
      END as proj_v,
      ""exchange_contract_address"",
      t.""token_a_address"",
      t.""token_b_address"",
      t.""token_a_symbol"",
      t.""token_b_symbol"",
      t.""token_a_symbol"" || '/' || t.""token_b_symbol"" AS pair,
      t.""token_a_symbol"" || '/' || t.""token_b_symbol"" || ' - ' || (ROUND(p.fee / 1e4, 2)) :: text || '%' AS pool,
      SUM(t.token_a_amount) AS token_a_amount,
      SUM(t.token_b_amount) AS token_b_amount,
      --t.trader_a AS user,
      SUM(t.usd_amount) AS usd_traded,
      COUNT(t.usd_amount) AS num_trades,
      COUNT(DISTINCT t.trader_a) AS num_users
    FROM
      dex.trades t
      INNER JOIN uniswap_v3.""Factory_evt_PoolCreated"" p ON t.exchange_contract_address = p.pool
    WHERE
      t.project = 'Uniswap'
      AND t.version = '3'
      AND t.""block_time"" > '2021-05-05'
      AND t.""exchange_contract_address"" IN (
        '\x8ad599c3a0ff1de082011efddc58f1908eb6e6d8',
        '\x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640',
        '\x7bea39867e4169dbe237d55c8242a8f2fcdcc387'
      ) --REPLACE(LOWER('{{Pool Address}}'),'0x','\x')::bytea
    GROUP BY
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11
  ),
  prices AS (
    SELECT
      *
    FROM
      prices.""usd"" p
    WHERE
      p.minute > '2021-05-05'
      AND (
        ""contract_address"" IN (
          SELECT
            ""token_b_address""
          FROM
            trades
          GROUP BY
            1
        )
        OR ""contract_address"" IN (
          SELECT
            ""token_a_address""
          FROM
            trades
          GROUP BY
            1
        )
      )
  ),
  projects AS (
    SELECT
      DISTINCT ""exchange_contract_address"",
      proj_v,
      pair,
      pool,
      token_a_address,
      token_b_address,
      token_a_symbol,
      token_b_symbol
    FROM
      trades
  ),
  gs AS (
    SELECT
      DISTINCT d.token_a_address AS token,
      gs.hour
    FROM
      trades d
      INNER JOIN (
        SELECT
          generate_series(
            '2021-05-05' :: date,
            date_trunc('day', NOW()),
            '1 day'
          ) AS hour
      ) gs -- Generate all days since the first contract
      ON 1 = 1
    UNION
    SELECT
      DISTINCT d.token_b_address AS token,
      gs.hour
    FROM
      trades d
      INNER JOIN (
        SELECT
          generate_series(
            DATE_TRUNC('day', '2021-05-05' :: date),
            date_trunc('day', NOW()),
            '1 day'
          ) AS hour
      ) gs -- Generate all days since the first contract
      ON 1 = 1
  ),
  dex_price AS(
    --for tokens where dune doesn't have the price, calculate the avg price in it's last hour of swaps (6 hr if no swaps in the last hour)
    --since we don't have an amount field for unmapped tokens, I'll calc it based on... raw amount
    -- through a few queries, this gets the unit price of each token (assuming 18 decimals)
    -- DO NOT USE THIS FOR KNOWN TOKENS - only for the ones we don't have, we'll assume 18 decimals
    SELECT
      gs.hour,
      gs.token,
      symbol,
      decimals,
      median_price
    FROM
      (
        SELECT
          *,
          lead(hour, 1, NOW()) OVER (
            PARTITION BY token
            ORDER BY
              hour asc
          ) AS next_hour
        FROM
          (
            SELECT
              DATE_TRUNC('day', hour) AS hour,
              t.contract_address AS token,
              ea.symbol AS symbol,
              ea.decimals AS decimals,
              percentile_cont(0.5) WITHIN GROUP (
                ORDER BY
                  ""median_price""
              ) AS median_price
            FROM
              dex.""view_token_prices"" t
              INNER JOIN (
                SELECT
                  token
                FROM
                  gs
                GROUP BY
                  1
              ) c ON t.contract_address = c.token
              INNER JOIN erc20.""tokens"" ea --both need to have known decimals, we're not going to assume anything.
              ON ea.""contract_address"" = t.contract_address
            WHERE
              (ea.decimals IS NOT NULL)
              AND median_price > 0
              AND DATE_TRUNC('day', hour) > '2021-05-05' :: date
              AND DATE_TRUNC('day', hour) <= NOW() + interval '1 day'
            GROUP BY
              1,
              2,
              3,
              4
          ) b
      ) c
      INNER JOIN gs ON c.hour <= gs.hour
      AND gs.hour < c.next_hour
      AND gs.token = c.token
  ),
  tvl AS (
    SELECT
      DISTINCT dt,
      exchange_contract_address,
      SUM(delta_tvl) OVER (PARTITION BY dt, exchange_contract_address) AS delta_tvl,
      SUM(add_tvl) OVER (PARTITION BY dt, exchange_contract_address) AS add_tvl,
      LAST_VALUE(running_tvl) OVER (
        PARTITION BY dt,
        exchange_contract_address
        ORDER BY
          hour :: timestamp ASC ROWS BETWEEN UNBOUNDED PRECEDING
          AND UNBOUNDED FOLLOWING
      ) AS running_tvl
    FROM
      (
        SELECT
          hour,
          DATE_TRUNC('day', hour) AS dt,
          exchange_contract_address,
          COALESCE(SUM(val_usd), 0) AS delta_tvl,
          COALESCE(SUM(addval_usd), 0) AS add_tvl,
          COALESCE(SUM(sumval_usd), 0) AS running_tvl
        FROM
          (
            SELECT
              gs.hour AS hour,
              gs.token,
              exchange_contract_address,
              CASE
                WHEN gs.hour = c.hour THEN val
                ELSE 0
              END AS val,
              CASE
                WHEN gs.hour = c.hour THEN val / (10 ^ COALESCE(p.decimals, dp.decimals))
                ELSE 0
              END AS val_tokens,
              CASE
                WHEN gs.hour = c.hour THEN COALESCE(p.price, dp.median_price) * (val / (10 ^ COALESCE(p.decimals, dp.decimals)))
                ELSE 0
              END AS val_usd,
              CASE
                WHEN gs.hour = c.hour THEN addval
                ELSE 0
              END AS addval,
              CASE
                WHEN gs.hour = c.hour THEN addval / (10 ^ COALESCE(p.decimals, dp.decimals))
                ELSE 0
              END AS addval_tokens,
              CASE
                WHEN gs.hour = c.hour THEN COALESCE(p.price, dp.median_price) * (addval / (10 ^ COALESCE(p.decimals, dp.decimals)))
                ELSE 0
              END AS addval_usd,
              sumval,
              sumval / (10 ^ COALESCE(p.decimals, dp.decimals)) AS sumval_tokens,
              COALESCE(p.price, dp.median_price) * (sumval / (10 ^ COALESCE(p.decimals, dp.decimals))) AS sumval_usd
            FROM
              (
                SELECT
                  *,
                  lead(hour, 1, NOW()) OVER (
                    PARTITION BY contract_address,
                    exchange_contract_address
                    ORDER BY
                      hour asc
                  ) AS next_hour,
                  SUM(val) OVER (
                    PARTITION BY contract_address,
                    exchange_contract_address
                    ORDER BY
                      hour ASC
                  ) AS sumval
                FROM
                  (
                    SELECT
                      hour,
                      contract_address,
                      exchange_contract_address,
                      SUM(val) AS val,
                      SUM(
                        CASE
                          WHEN val > 0 THEN val
                          ELSE 0
                        END
                      ) AS addval --SUM(val) OVER (PARTITION BY contract_address, exchange_contract_address ORDER BY hour ASC) AS sumval
                      --SUM( price*(val/(10^decimals)) ) AS usd_tvl
                    FROM
                      (
                        SELECT
                          DATE_TRUNC('day', e.""evt_block_time"") AS hour,
                          ""to"" AS exchange_contract_address,
                          e.""contract_address"",
                          SUM(value) AS val
                        FROM
                          erc20.""ERC20_evt_Transfer"" e
                        WHERE
                          ""to"" IN (
                            SELECT
                              exchange_contract_address
                            FROM
                              trades
                            GROUP BY
                              1
                          )
                        GROUP BY
                          1,
                          2,
                          3
                        UNION ALL
                        SELECT
                          DATE_TRUNC('day', eb.""evt_block_time"") AS hour,
                          ""from"" AS exchange_contract_address,
                          eb.""contract_address"",
                          SUM(- value) AS val
                        FROM
                          erc20.""ERC20_evt_Transfer"" eb
                        WHERE
                          ""from"" IN (
                            SELECT
                              exchange_contract_address
                            FROM
                              trades
                            GROUP BY
                              1
                          )
                        GROUP BY
                          1,
                          2,
                          3
                      ) tr
                    GROUP BY
                      1,
                      2,
                      3
                  ) mod
              ) c
              INNER JOIN gs ON c.hour <= gs.hour
              AND gs.hour < c.next_hour
              AND gs.token = c.contract_address
              LEFT JOIN prices p ON p.""contract_address"" = gs.token
              AND CASE
                WHEN DATE_TRUNC('day', gs.hour) = DATE_TRUNC('day', NOW()) THEN p.""minute"" = DATE_TRUNC('day', NOW())
                ELSE p.""minute"" = DATE_TRUNC('day', gs.hour) + interval '1 day'
              END
              LEFT JOIN dex_price dp ON gs.token = dp.token
              AND dp.hour = gs.hour
              AND p.price IS NULL
            WHERE
              gs.hour > '2021-05-05' :: date
          ) a
        GROUP BY
          1,
          2,
          3
      ) b
  )
SELECT
  tvl.dt,
  --pr.proj_v,
  COALESCE(tr.usd_traded, 0) AS usd_traded,
  tvl.running_tvl,
  COALESCE(tr.num_trades, 0) AS num_trades,
  tvl.delta_tvl,
  tvl.add_tvl,
  '<a href=""https://info.uniswap.org/#/pools/' || REPLACE(
    tvl.exchange_contract_address :: text,
    '\',' 0 ') || ' "">' || REPLACE(tvl.exchange_contract_address::text,'\','0') || '</a>' AS pool_url,

 CASE WHEN tvl.exchange_contract_address = '\x8ad599c3a0ff1de082011efddc58f1908eb6e6d8'::bytea THEN '0.30%'
 WHEN tvl.exchange_contract_address = '\x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640'::bytea THEN '0.05%'
 WHEN tvl.exchange_contract_address = '\x7bea39867e4169dbe237d55c8242a8f2fcdcc387'::bytea THEN '1%' END AS uni_pool,
SUM(usd_traded) OVER (PARTITION BY tvl.exchange_contract_address ORDER BY tvl.dt ASC) AS running_usd,
SUM(num_trades) OVER (PARTITION BY tvl.exchange_contract_address ORDER BY tvl.dt ASC) AS running_trades,
pr.pair, pr.pool,
 pr.token_a_address, pr.token_b_address, pr.token_a_symbol, pr.token_b_symbol

FROM tvl
INNER JOIN projects pr
ON pr.exchange_contract_address = tvl.exchange_contract_address
LEFT JOIN trades tr
ON tr.exchange_contract_address = tvl.exchange_contract_address
AND tr.dt = tvl.dt
    
ORDER BY dt DESC --this is important for counters"
1386059,Uniswap V3 Gas,,"[{""id"": 2356372, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-10-11T03:49:04.2266+00:00"", ""__typename"": ""visualizations""}, {""id"": 2356361, ""type"": ""counter"", ""name"": ""Min Gas Price ETH"", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Minimum ETH Gas Price"", ""stringDecimal"": 9, ""counterColName"": ""gas_price_eth_min""}, ""created_at"": ""2022-10-11T03:49:04.2266+00:00"", ""__typename"": ""visualizations""}, {""id"": 2356360, ""type"": ""counter"", ""name"": ""Avg Gas USD"", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Average USD"", ""stringDecimal"": 2, ""counterColName"": ""gas_usd_avg""}, ""created_at"": ""2022-10-11T03:49:04.2266+00:00"", ""__typename"": ""visualizations""}, {""id"": 2356362, ""type"": ""counter"", ""name"": ""Min Gas Price USD"", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Minimum USD Gas Price"", ""stringDecimal"": 6, ""counterColName"": ""gas_price_usd_min""}, ""created_at"": ""2022-10-11T03:49:04.2266+00:00"", ""__typename"": ""visualizations""}, {""id"": 2356374, ""type"": ""counter"", ""name"": ""Max Gas USD"", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Maximum USD"", ""stringDecimal"": 2, ""counterColName"": ""gas_usd_max""}, ""created_at"": ""2022-10-11T03:49:04.2266+00:00"", ""__typename"": ""visualizations""}, {""id"": 2356386, ""type"": ""counter"", ""name"": ""Max Gas Price USD"", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Maximum USD Gas Price"", ""stringDecimal"": 4, ""counterColName"": ""gas_price_usd_max""}, ""created_at"": ""2022-10-11T03:49:04.2266+00:00"", ""__typename"": ""visualizations""}, {""id"": 2356387, ""type"": ""counter"", ""name"": ""Gas Today"", ""options"": {""rowNumber"": 1, ""counterLabel"": ""ETH"", ""stringDecimal"": 4, ""counterColName"": ""gas_daily_eth""}, ""created_at"": ""2022-10-11T03:49:04.2266+00:00"", ""__typename"": ""visualizations""}, {""id"": 2356392, ""type"": ""chart"", ""name"": ""TXS vs. Gas ETH"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Daily TXS""}, ""tickFormat"": """"}, ""yAxis"": [{""type"": ""-"", ""title"": {""text"": ""Daily ETH""}}, {""type"": ""linear"", ""title"": {""text"": ""Daily USD""}}], ""legend"": {""enabled"": true}, ""series"": {""percentValues"": false}, ""reverseX"": false, ""numberFormat"": ""0,0.0000"", ""columnMapping"": {""txs_daily"": ""x"", ""gas_daily_eth"": ""y"", ""gas_daily_usd"": ""y""}, ""seriesOptions"": {""gas_daily_eth"": {""name"": ""Gas ETH"", ""type"": ""scatter"", ""color"": ""#1e2a78"", ""yAxis"": 0, ""zIndex"": 0}, ""gas_daily_usd"": {""name"": ""Gas USD"", ""type"": ""scatter"", ""color"": ""#ff1f5a"", ""yAxis"": 1, ""zIndex"": 1}}, ""valuesOptions"": {}, ""showDataLabels"": false, ""globalSeriesType"": ""scatter"", ""numberFormatRightYAxisSeries"": ""0,0.00""}, ""created_at"": ""2022-10-11T03:49:04.2266+00:00"", ""__typename"": ""visualizations""}, {""id"": 2356364, ""type"": ""counter"", ""name"": ""Avg Gas Price USD"", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Average USD Gas Price"", ""stringDecimal"": 5, ""counterColName"": ""gas_price_usd_avg""}, ""created_at"": ""2022-10-11T03:49:04.2266+00:00"", ""__typename"": ""visualizations""}, {""id"": 2356366, ""type"": ""chart"", ""name"": ""Min Gas Paid"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""DATE""}}, ""yAxis"": [{""type"": ""-"", ""title"": {""text"": ""ETH""}}, {""type"": ""linear"", ""title"": {""text"": ""USD""}}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""0,0.000000"", ""columnMapping"": {"""": ""y"", ""date"": ""x"", ""gas_eth_min"": ""y"", ""gas_usd_min"": ""y""}, ""seriesOptions"": {""gas_eth_min"": {""name"": ""Min ETH"", ""type"": ""line"", ""color"": ""#1e2a78"", ""yAxis"": 0, ""zIndex"": 0}, ""gas_usd_min"": {""name"": ""Min USD"", ""type"": ""line"", ""color"": ""#ff1f5a"", ""yAxis"": 1, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""line"", ""numberFormatRightYAxisSeries"": ""0,0.00""}, ""created_at"": ""2022-10-11T03:49:04.2266+00:00"", ""__typename"": ""visualizations""}, {""id"": 2356367, ""type"": ""counter"", ""name"": ""Min Gas USD"", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Minimum USD"", ""stringDecimal"": 2, ""counterColName"": ""gas_usd_min""}, ""created_at"": ""2022-10-11T03:49:04.2266+00:00"", ""__typename"": ""visualizations""}, {""id"": 2356368, ""type"": ""chart"", ""name"": ""Daily Gas Paid"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""DATE""}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""ETH""}}, {""type"": ""linear"", ""title"": {""text"": ""USD""}}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""0,0.0000"", ""columnMapping"": {""date"": ""x"", ""gas_daily_eth"": ""y"", ""gas_daily_usd"": ""y""}, ""seriesOptions"": {""gas_daily_eth"": {""name"": ""ETH"", ""type"": ""line"", ""color"": ""#1e2a78"", ""yAxis"": 0, ""zIndex"": 0}, ""gas_daily_usd"": {""name"": ""USD"", ""type"": ""line"", ""color"": ""#ff1f5a"", ""yAxis"": 1, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""line"", ""numberFormatRightYAxisSeries"": ""0,0.00""}, ""created_at"": ""2022-10-11T03:49:04.2266+00:00"", ""__typename"": ""visualizations""}, {""id"": 2356369, ""type"": ""counter"", ""name"": ""Gas Today"", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Gas"", ""counterColName"": ""gas_daily""}, ""created_at"": ""2022-10-11T03:49:04.2266+00:00"", ""__typename"": ""visualizations""}, {""id"": 2356370, ""type"": ""counter"", ""name"": ""Gas Today"", ""options"": {""rowNumber"": 1, ""counterLabel"": ""USD"", ""stringDecimal"": 2, ""counterColName"": ""gas_daily_usd""}, ""created_at"": ""2022-10-11T03:49:04.2266+00:00"", ""__typename"": ""visualizations""}, {""id"": 2356371, ""type"": ""chart"", ""name"": ""Daily Gas in ETH"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""DATE""}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""GAS""}}, {""type"": ""linear"", ""title"": {""text"": ""ETH""}}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""0,0"", ""columnMapping"": {""date"": ""x"", ""label"": ""series"", ""gas_daily"": ""y"", ""gas_daily_eth"": ""y""}, ""seriesOptions"": {""gas_daily"": {""name"": ""GAS"", ""type"": ""column"", ""color"": ""#1e2a78"", ""yAxis"": 0, ""zIndex"": 0}, ""gas_daily_eth"": {""name"": ""ETH"", ""type"": ""line"", ""color"": ""#ff1f5a"", ""yAxis"": 1, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""line"", ""numberFormatRightYAxisSeries"": ""0,0.000000""}, ""created_at"": ""2022-10-11T03:49:04.2266+00:00"", ""__typename"": ""visualizations""}, {""id"": 2356373, ""type"": ""chart"", ""name"": ""Gas Min Max Avg"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""DATE""}}, ""yAxis"": [{""type"": ""logarithmic"", ""title"": {""text"": ""GAS/TX""}}, {""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""0,0"", ""columnMapping"": {""date"": ""x"", ""gas_avg"": ""y"", ""gas_max"": ""y"", ""gas_min"": ""y""}, ""seriesOptions"": {""gas_avg"": {""name"": ""AVG"", ""type"": ""line"", ""color"": ""#1e2a78"", ""yAxis"": 0, ""zIndex"": 1}, ""gas_max"": {""name"": ""MAX"", ""type"": ""line"", ""color"": ""#ff1f5a"", ""yAxis"": 0, ""zIndex"": 0}, ""gas_min"": {""name"": ""MIN"", ""type"": ""line"", ""color"": ""#ffd615"", ""yAxis"": 0, ""zIndex"": 2}}, ""valuesOptions"": {}, ""globalSeriesType"": ""line""}, ""created_at"": ""2022-10-11T03:49:04.2266+00:00"", ""__typename"": ""visualizations""}, {""id"": 2356375, ""type"": ""counter"", ""name"": ""Min Gas Paid Today"", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Minimum Gas"", ""counterColName"": ""gas_min""}, ""created_at"": ""2022-10-11T03:49:04.2266+00:00"", ""__typename"": ""visualizations""}, {""id"": 2356376, ""type"": ""counter"", ""name"": ""Max Gas Paid Today"", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Maximum Gas"", ""counterColName"": ""gas_max""}, ""created_at"": ""2022-10-11T03:49:04.2266+00:00"", ""__typename"": ""visualizations""}, {""id"": 2356377, ""type"": ""counter"", ""name"": ""Max Gas ETH"", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Maximum ETH"", ""stringDecimal"": 6, ""counterColName"": ""gas_eth_max""}, ""created_at"": ""2022-10-11T03:49:04.2266+00:00"", ""__typename"": ""visualizations""}, {""id"": 2356378, ""type"": ""counter"", ""name"": ""Total Gas"", ""options"": {""rowNumber"": 1, ""counterLabel"": ""ETH"", ""stringDecimal"": 4, ""counterColName"": ""gas_eth_total""}, ""created_at"": ""2022-10-11T03:49:04.2266+00:00"", ""__typename"": ""visualizations""}, {""id"": 2356379, ""type"": ""counter"", ""name"": ""Total Gas Paid USDC All Pools"", ""options"": {""rowNumber"": 1, ""counterLabel"": ""USD"", ""stringPrefix"": ""$"", ""stringSuffix"": ""M"", ""stringDecimal"": 2, ""counterColName"": ""gas_usd_total""}, ""created_at"": ""2022-10-11T03:49:04.2266+00:00"", ""__typename"": ""visualizations""}, {""id"": 2356380, ""type"": ""counter"", ""name"": ""Avg Gas Paid Today"", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Average Gas"", ""counterColName"": ""gas_avg""}, ""created_at"": ""2022-10-11T03:49:04.2266+00:00"", ""__typename"": ""visualizations""}, {""id"": 2356381, ""type"": ""counter"", ""name"": ""Min Gas ETH"", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Minimum ETH"", ""stringDecimal"": 6, ""counterColName"": ""gas_eth_min""}, ""created_at"": ""2022-10-11T03:49:04.2266+00:00"", ""__typename"": ""visualizations""}, {""id"": 2356382, ""type"": ""counter"", ""name"": ""Avg Gas Eth"", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Average ETH"", ""stringDecimal"": 6, ""counterColName"": ""gas_eth_avg""}, ""created_at"": ""2022-10-11T03:49:04.2266+00:00"", ""__typename"": ""visualizations""}, {""id"": 2356383, ""type"": ""counter"", ""name"": ""Total Gas"", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Gas"", ""counterColName"": ""gas_total""}, ""created_at"": ""2022-10-11T03:49:04.2266+00:00"", ""__typename"": ""visualizations""}, {""id"": 2356384, ""type"": ""counter"", ""name"": ""Max Gas Price ETH"", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Maximum ETH Gas Price"", ""stringDecimal"": 9, ""counterColName"": ""gas_price_eth_max""}, ""created_at"": ""2022-10-11T03:49:04.2266+00:00"", ""__typename"": ""visualizations""}, {""id"": 2356385, ""type"": ""chart"", ""name"": ""Gas Price ETH"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""DATE""}}, ""yAxis"": [{""type"": ""logarithmic"", ""title"": {""text"": ""ETH""}}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""columnMapping"": {""date"": ""x"", ""gas_price_eth_avg"": ""y"", ""gas_price_eth_max"": ""y"", ""gas_price_eth_min"": ""y""}, ""seriesOptions"": {""gas_price_eth_avg"": {""name"": ""Avg ETH"", ""type"": ""line"", ""yAxis"": 0, ""zIndex"": 1}, ""gas_price_eth_max"": {""name"": ""Max ETH"", ""type"": ""line"", ""yAxis"": 0, ""zIndex"": 0}, ""gas_price_eth_min"": {""name"": ""Min ETH"", ""type"": ""line"", ""yAxis"": 0, ""zIndex"": 2}}, ""valuesOptions"": {}, ""globalSeriesType"": ""line""}, ""created_at"": ""2022-10-11T03:49:04.2266+00:00"", ""__typename"": ""visualizations""}, {""id"": 2356388, ""type"": ""chart"", ""name"": ""Max Gas Paid"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""DATE""}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""ETH""}}, {""type"": ""linear"", ""title"": {""text"": ""USD""}}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""0,0.000000"", ""columnMapping"": {""date"": ""x"", ""gas_eth_max"": ""y"", ""gas_usd_max"": ""y""}, ""seriesOptions"": {""gas_eth_max"": {""name"": ""Max ETH"", ""type"": ""line"", ""color"": ""#1e2a78"", ""yAxis"": 0, ""zIndex"": 0}, ""gas_usd_max"": {""name"": ""Max USD"", ""type"": ""line"", ""color"": ""#ff1f5a"", ""yAxis"": 1, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""line"", ""numberFormatRightYAxisSeries"": ""0,0.00""}, ""created_at"": ""2022-10-11T03:49:04.2266+00:00"", ""__typename"": ""visualizations""}, {""id"": 2356389, ""type"": ""chart"", ""name"": ""Avg Gas Paid"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""DATE""}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""ETH""}}, {""type"": ""linear"", ""title"": {""text"": ""USD""}}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""0,0.000000"", ""columnMapping"": {""date"": ""x"", ""gas_eth_avg"": ""y"", ""gas_usd_avg"": ""y""}, ""seriesOptions"": {""gas_eth_avg"": {""name"": ""Avg ETH"", ""type"": ""line"", ""color"": ""#1e2a78"", ""yAxis"": 0, ""zIndex"": 0}, ""gas_usd_avg"": {""name"": ""Avg USD"", ""type"": ""line"", ""color"": ""#ff1f5a"", ""yAxis"": 1, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""line"", ""numberFormatRightYAxisSeries"": ""0,0.00""}, ""created_at"": ""2022-10-11T03:49:04.2266+00:00"", ""__typename"": ""visualizations""}, {""id"": 2356391, ""type"": ""chart"", ""name"": ""Daily Gas in USD"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""DATE""}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""GAS""}}, {""type"": ""linear"", ""title"": {""text"": ""USD""}}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""0,0"", ""columnMapping"": {"""": ""y"", ""date"": ""x"", ""label"": ""series"", ""gas_daily"": ""y"", ""gas_daily_usd"": ""y""}, ""seriesOptions"": {""gas_daily"": {""name"": ""GAS"", ""type"": ""column"", ""color"": ""#1e2a78"", ""yAxis"": 0, ""zIndex"": 0}, ""gas_daily_usd"": {""name"": ""USD"", ""type"": ""line"", ""color"": ""#ff1f5a"", ""yAxis"": 1, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""line"", ""numberFormatRightYAxisSeries"": ""0,0.00""}, ""created_at"": ""2022-10-11T03:49:04.2266+00:00"", ""__typename"": ""visualizations""}, {""id"": 2356363, ""type"": ""chart"", ""name"": ""Gas Price USD"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""DATE""}}, ""yAxis"": [{""type"": ""logarithmic"", ""title"": {""text"": ""ETH""}}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""0.000000"", ""columnMapping"": {""date"": ""x"", ""gas_price_usd_avg"": ""y"", ""gas_price_usd_max"": ""y"", ""gas_price_usd_min"": ""y""}, ""seriesOptions"": {""gas_price_usd_avg"": {""name"": ""Avg USD"", ""type"": ""line"", ""yAxis"": 0, ""zIndex"": 1}, ""gas_price_usd_max"": {""name"": ""Max USD"", ""type"": ""line"", ""yAxis"": 0, ""zIndex"": 0}, ""gas_price_usd_min"": {""name"": ""Min USD"", ""type"": ""line"", ""yAxis"": 0, ""zIndex"": 2}}, ""valuesOptions"": {}, ""globalSeriesType"": ""line""}, ""created_at"": ""2022-10-11T03:49:04.2266+00:00"", ""__typename"": ""visualizations""}, {""id"": 2356365, ""type"": ""counter"", ""name"": ""Avg Gas Price ETH"", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Average ETH Gas Price"", ""stringDecimal"": 9, ""counterColName"": ""gas_price_eth_avg""}, ""created_at"": ""2022-10-11T03:49:04.2266+00:00"", ""__typename"": ""visualizations""}, {""id"": 2356390, ""type"": ""chart"", ""name"": ""Cumulative Gas Paid All Pools"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}, ""tickFormat"": """"}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""ETH""}, ""tickFormat"": ""0[.]0.a""}, {""type"": ""linear"", ""title"": {""text"": ""USD""}, ""tickFormat"": ""0[.]0.a""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": null}, ""reverseX"": false, ""numberFormat"": ""0[.]0.a"", ""columnMapping"": {""date"": ""x"", ""gas_eth_total"": ""y"", ""gas_usd_total"": ""y""}, ""seriesOptions"": {""gas_eth_total"": {""name"": ""ETH Total"", ""type"": ""area"", ""color"": ""#1e2a78"", ""yAxis"": 0, ""zIndex"": 1}, ""gas_usd_total"": {""name"": ""USD Total"", ""type"": ""area"", ""color"": ""#ff1f5a"", ""yAxis"": 1, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""area"", ""numberFormatRightYAxisSeries"": ""0[.]0.a""}, ""created_at"": ""2022-10-11T03:49:04.2266+00:00"", ""__typename"": ""visualizations""}]","with 

gas as (

    select
    
        date_trunc('day',""block_time"") as ""date_t"",
        count(*) as txs_daily,
        
        sum(gas_used) as gas_daily,
        sum(sum(gas_used)) over (order by date_trunc('day',""block_time"")) as gas_total,
        min(gas_used) as gas_min,
        max(gas_used) as gas_max,
        avg(gas_used) as gas_avg,
        
        sum(gas_used * gas_price) / pow(10,18) as gas_daily_eth,
        sum(sum((gas_used * gas_price) / pow(10,18))) over (order by date_trunc('day',""block_time"")) as gas_eth_total,
        min(gas_used * gas_price) / pow(10,18) as gas_eth_min,
        max(gas_used * gas_price) / pow(10,18) as gas_eth_max,
        avg(gas_used * gas_price) / pow(10,18) as gas_eth_avg,
        
        sum(gas_used * gas_price * price) / pow(10,18) as gas_daily_usd,
        sum(sum((gas_used * gas_price * price) / pow(10,18))) over (order by date_trunc('day',""block_time""))/1e6 as gas_usd_total,
        min(gas_used * gas_price * price) / pow(10,18) as gas_usd_min,
        max(gas_used * gas_price * price) / pow(10,18) as gas_usd_max,
        avg(gas_used * gas_price * price) / pow(10,18) as gas_usd_avg,
        
        min(gas_price) / pow(10,18) as gas_price_eth_min,
        max(gas_price) / pow(10,18) as gas_price_eth_max,
        avg(gas_price) / pow(10,18) as gas_price_eth_avg,
        
        min(gas_price * price) / pow(10,18) as gas_price_usd_min,
        max(gas_price * price) / pow(10,18) as gas_price_usd_max,
        avg(gas_price * price) / pow(10,18) as gas_price_usd_avg
        
    from ethereum.""transactions"" txs
    left join prices.""layer1_usd"" price_usd
        on date_trunc('minute',txs.""block_time"") = price_usd.""minute""
    where txs.""to"" in (select address from ethereum.""contracts"" where ""namespace"" = 'uniswap_v3')
        and txs.""block_time"" >= '2021-05-05'
        and price_usd.""minute"" >= '2021-05-05'
        and price_usd.""symbol"" = 'ETH'
    group by 1
)

select 

    *,
    ""date_t""::date as ""date""

from gas
order by 1 desc"
1380278,Uniswap v3 JIT Liquidity MEV Transactions,,"[{""id"": 2347635, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""tickFormat"": """"}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": null, ""percentValues"": false}, ""reverseX"": false, ""numberFormat"": ""0.00"", ""columnMapping"": {"""": ""y"", ""time"": ""x"", ""cost_usd"": ""y"", ""profit_usd"": ""y"", ""revenue_usd"": ""y"", ""call_block_time"": ""x""}, ""seriesOptions"": {""cost_usd"": {""name"": ""Cost"", ""type"": ""column"", ""color"": ""#FF0000"", ""yAxis"": 1, ""zIndex"": 1}, ""profit_usd"": {""name"": ""Profit"", ""type"": ""column"", ""color"": ""#3D2DB9"", ""yAxis"": 1, ""zIndex"": 2}, ""revenue_usd"": {""name"": ""Revenue"", ""type"": ""column"", ""color"": ""#3AD955"", ""yAxis"": 1, ""zIndex"": 0}, ""profit_margin_smooth_72"": {""type"": ""line"", ""yAxis"": 0, ""zIndex"": 3}}, ""valuesOptions"": {}, ""showDataLabels"": false, ""globalSeriesType"": ""column"", ""numberFormatRightYAxisSeries"": ""$0.00""}, ""created_at"": ""2022-10-10T07:00:21.782363+00:00"", ""__typename"": ""visualizations""}, {""id"": 2347636, ""type"": ""chart"", ""name"": ""JIT MEV Bot Profit Distribution"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""$0,0.00"", ""columnMapping"": {"""": ""x"", ""to"": ""x"", ""profit_usd"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2022-10-10T07:00:21.782363+00:00"", ""__typename"": ""visualizations""}, {""id"": 2347637, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-10-10T07:00:21.782363+00:00"", ""__typename"": ""visualizations""}, {""id"": 2347640, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""columnMapping"": {""to"": ""series"", ""time"": ""x"", ""culm_profit"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""line""}, ""created_at"": ""2022-10-10T07:00:21.782363+00:00"", ""__typename"": ""visualizations""}, {""id"": 2347638, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""tickFormat"": """"}, ""yAxis"": [{""type"": ""linear"", ""tickFormat"": """"}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""$0[.]0.a"", ""columnMapping"": {""time"": ""x"", ""culm_cost"": ""y"", ""culm_profit"": ""y"", ""culm_revenue"": ""y""}, ""seriesOptions"": {""culm_cost"": {""name"": ""Culm. Cost "", ""type"": ""line"", ""yAxis"": 0, ""zIndex"": 1}, ""culm_profit"": {""name"": ""Culm. Profit "", ""type"": ""line"", ""yAxis"": 0, ""zIndex"": 0}, ""culm_revenue"": {""name"": ""Culm. Revenue "", ""type"": ""line"", ""color"": ""#2DD920"", ""yAxis"": 0, ""zIndex"": 2}}, ""valuesOptions"": {}, ""globalSeriesType"": ""line""}, ""created_at"": ""2022-10-10T07:00:21.782363+00:00"", ""__typename"": ""visualizations""}, {""id"": 2347639, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""0.00"", ""columnMapping"": {""time"": ""x"", ""cost_usd"": ""y"", ""profit_usd"": ""y"", ""revenue_usd"": ""y"", ""profit_margin_l2_smooth_72"": ""y""}, ""seriesOptions"": {""cost_usd"": {""type"": ""column"", ""color"": ""#F10404"", ""yAxis"": 1, ""zIndex"": 1}, ""profit_usd"": {""type"": ""column"", ""color"": ""#212EE4"", ""yAxis"": 1, ""zIndex"": 2}, ""revenue_usd"": {""name"": ""Revenue"", ""type"": ""column"", ""color"": ""#20D924"", ""yAxis"": 1, ""zIndex"": 0}, ""profit_margin_l2_smooth_72"": {""name"": ""Implied L2 Profit Ratio"", ""type"": ""line"", ""yAxis"": 0, ""zIndex"": 3}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column"", ""numberFormatRightYAxisSeries"": ""$0.00""}, ""created_at"": ""2022-10-10T07:00:21.782363+00:00"", ""__typename"": ""visualizations""}]","SELECT
    t.*,
    AVG (profit_usd / cost_usd) over (order by time rows between 24 preceding and current row) as profit_margin_smooth_24,
    AVG (profit_usd / cost_usd) over (order by time rows between 72 preceding and current row) as profit_margin_smooth_72,
    
    AVG (profit_usd / (cost_usd * .1)) over (order by time rows between 24 preceding and current row) as profit_margin_L2_smooth_24,
    AVG (profit_usd / (cost_usd * .1)) over (order by time rows between 72 preceding and current row) as profit_margin_L2_smooth_72,
    
 --   AVG (IF (cost_usd <= 0, 0, profit_usd / cost_usd)) over (order by time rows between 24 preceding and current row) as profit_margin_smooth_24,
    SUM (profit_usd) OVER (ORDER BY time) as culm_profit,
    SUM (cost_usd) OVER (ORDER BY time) as culm_cost,
    SUM (revenue_usd) OVER (ORDER BY time) as culm_revenue
FROM
(
    SELECT
        DISTINCT
        add.""call_block_time"" as time,
        tx_add.""from"",
        tx_add.""to"",
        add.call_block_number as block_number,
        add.""call_tx_hash"" as add_hash,
        remove.""call_tx_hash"" as remove_hash,
        
        add_liq.""amount0"" as add_amount0,
        add_liq.""amount1"" as add_amount1,
        
        add_liq.""amount0"" / 10 ^ p0.decimals * p0.median_price as add_amount0_usd,
        add_liq.""amount1"" / 10 ^ p1.decimals * p1.median_price as add_amount1_usd,
        
        token0.""contract_address"" as token0_address,
        token1.""contract_address"" as token1_address,
        
        p0.median_price,
        p1.median_price,
        
        collect.""amount0"" as remove_amount0,
        collect.""amount1"" as remove_amount1,
        
        collect.""amount0"" / 10 ^ p0.decimals * p0.median_price as remove_amount0_usd,
        collect.""amount1"" / 10 ^ p1.decimals * p1.median_price as remove_amount1_usd,
        
        (collect.""amount0"" / 10 ^ p0.decimals * p0.median_price - add_liq.""amount0"" / 10 ^ p0.decimals * p0.median_price) + (collect.""amount1"" / 10 ^ p1.decimals * p1.median_price - add_liq.""amount1"" / 10 ^ p1.decimals * p1.median_price) as revenue_usd,
        
        CASE
            WHEN tx_add.gas_price != 0 THEN tx_add.gas_used * tx_add.gas_price * weth_price.median_price / 10 ^ 18
            ELSE 0
        END add_cost_usd,
        
        CASE
            WHEN tx_add.gas_price != 0 THEN tx_remove.gas_used * tx_remove.gas_price * weth_price.median_price / 10 ^ 18
            ELSE eth_miner_bribe.value * weth_price.median_price / 10 ^ 18
        END remove_cost_usd,
        
        CASE
            WHEN tx_add.gas_price != 0 THEN tx_add.gas_used * tx_add.gas_price * weth_price.median_price / 10 ^ 18 + tx_remove.gas_used * tx_remove.gas_price * weth_price.median_price / 10 ^ 18  + (eth_miner_bribe.value * weth_price.median_price / 10 ^ 18)
            ELSE eth_miner_bribe.value * weth_price.median_price / 10 ^ 18
        END cost_usd,
    
        CASE
            WHEN tx_add.gas_price != 0 THEN
            (collect.""amount0"" / 10 ^ p0.decimals * p0.median_price - add_liq.""amount0"" / 10 ^ p0.decimals * p0.median_price) + (collect.""amount1"" / 10 ^ p1.decimals * p1.median_price - add_liq.""amount1"" / 10 ^ p1.decimals * p1.median_price) 
                - (tx_add.gas_used * tx_add.gas_price * weth_price.median_price / 10 ^ 18 + tx_remove.gas_used * tx_remove.gas_price * weth_price.median_price / 10 ^ 18) - eth_miner_bribe.value * weth_price.median_price / 10 ^ 18
            ELSE
            (collect.""amount0"" / 10 ^ p0.decimals * p0.median_price - add_liq.""amount0"" / 10 ^ p0.decimals * p0.median_price) + (collect.""amount1"" / 10 ^ p1.decimals * p1.median_price - add_liq.""amount1"" / 10 ^ p1.decimals * p1.median_price) 
                - eth_miner_bribe.value * weth_price.median_price / 10 ^ 18
        END profit_usd
        
    --    ""output_tokenId""
    --    tokenURI.""output_0""
    FROM uniswap_v3.""NonfungibleTokenPositionManager_call_burn"" remove
    INNER JOIN uniswap_v3.""NonfungibleTokenPositionManager_call_mint"" add ON add.call_block_number = remove.call_block_number and 
                                                                             add.""output_tokenId"" = remove.""tokenId""
                                                        
    INNER JOIN uniswap_v3.""NonfungibleTokenPositionManager_evt_Collect"" collect on remove.""call_tx_hash"" = collect.evt_tx_hash AND remove.""tokenId"" = collect.""tokenId""
    INNER JOIN uniswap_v3.""NonfungibleTokenPositionManager_evt_IncreaseLiquidity"" add_liq ON add_liq.evt_tx_hash = add.call_tx_hash
    
    LEFT JOIN erc20.""ERC20_evt_Transfer"" token0 ON token0.value = add_liq.""amount0""and token0.""evt_tx_hash"" = add_liq.""evt_tx_hash"" 
    LEFT JOIN erc20.""ERC20_evt_Transfer"" token1 ON token1.value = add_liq.""amount1""and token1.""evt_tx_hash"" = add_liq.""evt_tx_hash"" 
    
    LEFT JOIN prices.prices_from_dex_data p0 ON p0.""contract_address"" = token0.""contract_address"" AND p0.hour = date_trunc('hour', token0.evt_block_time)
    LEFT JOIN prices.prices_from_dex_data p1 ON p1.""contract_address"" = token1.""contract_address"" AND p1.hour = date_trunc('hour', token1.evt_block_time)
    
    LEFT JOIN prices.prices_from_dex_data weth_price ON weth_price.symbol = 'WETH' AND weth_price.hour = date_trunc('hour', add.call_block_time)
    
    INNER JOIN ethereum.transactions tx_add ON tx_add.hash = add.call_tx_hash
    INNER JOIN ethereum.transactions tx_remove ON tx_remove.hash = remove.call_tx_hash
    
    INNER JOIN ethereum.blocks block on tx_remove.block_number = block.""number""
    
    -- pre eip, there might be a bribe
    LEFT JOIN  ethereum.traces eth_miner_bribe ON eth_miner_bribe.tx_hash = remove.""call_tx_hash"" AND eth_miner_bribe.success = True AND eth_miner_bribe.""to"" = block.miner AND (call_type NOT IN ('delegatecall', 'callcode', 'staticcall') OR call_type IS null)
    
    
    WHERE token0.contract_address IS NOT NULL 
        AND token1.contract_address IS NOT NULL

) t
WHERE cost_usd != 0
ORDER BY 1 DESC





--uniswap_v3.""NonfungibleTokenPositionManager_call_uniswapV3MintCallback"""
78325, Alpha Vaults (WETH-USDT) / Order Range,,"[{""id"": 155734, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": """", ""columnMapping"": {""b1"": ""y"", ""b2"": ""y"", ""time"": ""x"", ""baselower"": ""y"", ""baseupper"": ""y"", ""limitlower"": ""y"", ""limitupper"": ""y"", ""Ethereum Price"": ""y"", ""b1(for visualization)"": ""y"", ""b2(for visualization)"": ""y""}, ""seriesOptions"": {""baselower"": {""type"": ""area"", ""color"": ""#FFFFFF"", ""yAxis"": 0, ""zIndex"": 4}, ""baseupper"": {""type"": ""area"", ""color"": ""#32C8FF"", ""yAxis"": 0, ""zIndex"": 0}, ""limitlower"": {""type"": ""area"", ""color"": ""#32C8FF"", ""yAxis"": 0, ""zIndex"": 3}, ""limitupper"": {""type"": ""area"", ""color"": ""#C2EBFF"", ""yAxis"": 0, ""zIndex"": 1}, ""Ethereum Price"": {""type"": ""line"", ""color"": ""#FF0000"", ""yAxis"": 0, ""zIndex"": 2}, ""b1(for visualization)"": {""type"": ""area"", ""color"": ""#FFFFFF"", ""yAxis"": 0, ""zIndex"": 5}, ""b2(for visualization)"": {""type"": ""area"", ""color"": ""#FFFFFF"", ""yAxis"": 0, ""zIndex"": 6}}, ""valuesOptions"": {}, ""globalSeriesType"": ""area""}, ""created_at"": ""2021-07-08T17:00:08.100343+00:00"", ""__typename"": ""visualizations""}, {""id"": 155733, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-07-08T17:00:08.100343+00:00"", ""__typename"": ""visualizations""}]","/* get rebalance tx hash*/
WITH rebalancetxs AS(
    SELECT ""evt_tx_hash""
    FROM charm.""AlphaVault_evt_Snapshot""
    WHERE contract_address =  '\xE72f3E105e475D7Db3a003FfA377aFAe9c2c6c11'
)

/*  
    two mint events in one tx
    time, lowerTick, upperTick, range <- band order
    time, lowerTick, upperTick, range <- limit order
*/
,mint AS(
 SELECT
  position.""tickLower"" AS lowerTick,   
  position.""tickUpper"" AS UpperTick,  
  ABS(position.""tickLower"" - position.""tickUpper"") AS range,
  ""call_block_time"" AS Time 
 FROM uniswap_v3.""Pair_call_mint"" AS position, rebalancetxs
 WHERE call_tx_hash IN (rebalancetxs.evt_tx_hash)
),

/*
    wide range -> baseOrder
    time, baseLower, baseLower, limitLower, limitUpper
*/
range AS(
    SELECT 
        m1.Time,
        m1.lowerTick AS baseLower,
        m1.upperTick AS baseUpper,
        m2.lowerTick AS limitLower,
        m2.upperTick AS limitUpper
    FROM mint as m1 INNER JOIN mint M2 ON M1.Time = M2.Time AND M1.range > M2.range
),

/*
    tick to price
*/
rangePrice AS(
    SELECT 
        date_trunc('hour', range.time) AS Time,
        (1.0001^range.baseLower)*(10^12)*priceUSDT.price AS baseLower,
        (1.0001^range.baseUpper)*(10^12)*priceUSDT.price AS baseUpper,  
        (1.0001^range.limitLower)*(10^12)*priceUSDT.price AS limitLower,  
        (1.0001^range.limitUpper)*(10^12)*priceUSDT.price AS limitUpper
    FROM range, prices.usd AS priceUSDT
    WHERE priceUSDT.symbol = 'USDT' AND date_trunc('minute', range.time) = priceUSDT.minute
),

ethPriceEveryHour AS(
    SELECT 
        date_trunc('hour', d) AS Time,
        priceWETH.price AS ""Ethereum Price""
    FROM generate_series(date_trunc('day', NOW() - interval '{{Number of days}} days'), NOW(), '1 hour') AS d, prices.usd AS priceWETH
    WHERE priceWETH.symbol = 'WETH' AND date_trunc('minute', d) = priceWETH.minute 
),

rangePriceEveryHour AS(
    SELECT
        d.time,
        d.""Ethereum Price"",
        (SELECT baseLower FROM rangePrice WHERE rangePrice.time < d.time ORDER BY rangePrice.time DESC LIMIT 1) AS baseLower, 
        (SELECT baseUpper FROM rangePrice WHERE rangePrice.time < d.time ORDER BY rangePrice.time DESC LIMIT 1) AS baseUpper,
        (SELECT limitLower FROM rangePrice WHERE rangePrice.time < d.time ORDER BY rangePrice.time DESC LIMIT 1) AS limitLower,
        (SELECT limitUpper FROM rangePrice WHERE rangePrice.time < d.time ORDER BY rangePrice.time DESC LIMIT 1) AS limitUpper
    FROM ethPriceEveryHour AS d LEFT JOIN rangePrice AS r ON d.time = r.time
    ORDER By time
)

SELECT *,baseLower AS ""b1(for visualization)"" ,baseLower AS ""b2(for visualization)"" FROM rangePriceEveryHour -- additional two baseLower are for visualization (area chart)"
70354, Alpha Vault (Old WETH-USDT) / Performance,,"[{""id"": 140081, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-06-28T12:38:07.543921+00:00"", ""__typename"": ""visualizations""}, {""id"": 140082, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""performance""}}, {""type"": ""linear"", ""title"": {""text"": ""WETH Price""}}], ""legend"": {""enabled"": false}, ""series"": {""percentValues"": false}, ""reverseX"": false, ""columnMapping"": {"""": ""y"", ""time"": ""x"", ""priceweth"": ""y"", ""performance"": ""y"", ""vaultperformance"": ""x"", ""Vault Performance"": ""y"", ""Vault_Performance"": ""y"", ""vault_performance"": ""y"", ""ETH HODL Performance"": ""y"", ""ETH_HODL_Performance"": ""y"", ""eth_hodl_performance"": ""y"", ""USDT HODL Performance"": ""y"", ""USDT_HODL_Performance"": ""y"", ""usdt_hodl_performance"": ""y"", ""v2_LP_Performance(sqrt_ETH)"": ""y"", ""ETH_USDT_5050_HODL_Performance"": ""y"", ""ETH:USDT_50:50_HODL_Performance"": ""y"", ""V2 LP Performance Without Fee (sqrt_ETH)"": ""y""}, ""seriesOptions"": {""Vault Performance"": {""type"": ""line"", ""color"": ""#0000FF"", ""yAxis"": 0, ""zIndex"": 0}, ""ETH HODL Performance"": {""type"": ""line"", ""color"": ""#FF0000"", ""yAxis"": 0, ""zIndex"": 1}, ""USDT HODL Performance"": {""type"": ""line"", ""color"": ""#000000"", ""yAxis"": 0, ""zIndex"": 3}, ""V2 LP Performance Without Fee (sqrt_ETH)"": {""type"": ""line"", ""color"": ""#00FF00"", ""yAxis"": 0, ""zIndex"": 2}}, ""valuesOptions"": {}, ""showDataLabels"": false, ""globalSeriesType"": ""line""}, ""created_at"": ""2021-06-28T12:38:31.044582+00:00"", ""__typename"": ""visualizations""}]","WITH Price AS(
    SELECT 
        (snapshot.""totalAmount0""*priceWETH.price + snapshot.""totalAmount1""*priceUSDT.price*10^12) / snapshot.""totalSupply"" AS PricePerShare, 
        priceWETH.price AS PriceWETH, 
        evt_block_time as Time
    FROM charm.""AlphaVault_evt_Snapshot"" AS snapshot, prices.usd AS priceWETH, prices.usd AS priceUSDT
    WHERE 
        snapshot.contract_address = '\x55535C4C56F6Bf373E06C43E44C0356aaFD0d21A' 
        AND priceWETH.symbol = 'WETH' AND date_trunc('minute', snapshot.evt_block_time) = priceWETH.minute 
        AND priceUSDT.symbol = 'USDT' AND date_trunc('minute', snapshot.evt_block_time) = priceUSDT.minute
        AND date_trunc('day', snapshot.evt_block_time) >= (date_trunc('day', NOW()) - interval '{{Number of days}} days')
),

basisPrice AS(
    SELECT *
    FROM Price
    ORDER BY time ASC LIMIT 1
)

SELECT
    Price.time AS Time,
    Price.PricePerShare / basisPrice.PricePerShare AS ""Vault Performance"",
    Price.PriceWETH / basisPrice.PriceWETH AS ""ETH HODL Performance"",
    sqrt(Price.PriceWETH) / sqrt(basisPrice.PriceWETH) AS ""V2 LP Performance Without Fee (sqrt_ETH)"",
    1 AS ""USDT HODL Performance""
FROM 
    Price, basisPrice"
71933,Hypervisor (Old WETH-USDT) / Performance,,"[{""id"": 143650, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-06-30T14:38:57.443819+00:00"", ""__typename"": ""visualizations""}, {""id"": 143651, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Performance""}}, {""type"": ""linear"", ""title"": {""text"": ""WETH Price""}}], ""legend"": {""enabled"": false}, ""series"": {""percentValues"": false}, ""reverseX"": false, ""columnMapping"": {"""": ""y"", ""time"": ""x"", ""priceweth"": ""y"", ""performance"": ""y"", ""vaultperformance"": ""x"", ""Vault Performance"": ""y"", ""Vault_Performance"": ""y"", ""vault_performance"": ""y"", ""ETH HODL Performance"": ""y"", ""ETH_HODL_Performance"": ""y"", ""eth_hodl_performance"": ""y"", ""USDT HODL Performance"": ""y"", ""USDT_HODL_Performance"": ""y"", ""usdt_hodl_performance"": ""y"", ""v2_LP_Performance(sqrt_ETH)"": ""y"", ""ETH_USDT_5050_HODL_Performance"": ""y"", ""ETH:USDT_50:50_HODL_Performance"": ""y"", ""V2 LP Performance Without Fee (sqrt_ETH)"": ""y""}, ""seriesOptions"": {""Vault Performance"": {""type"": ""line"", ""color"": ""#0000FF"", ""yAxis"": 0, ""zIndex"": 0}, ""ETH HODL Performance"": {""type"": ""line"", ""color"": ""#FF0000"", ""yAxis"": 0, ""zIndex"": 1}, ""USDT HODL Performance"": {""type"": ""line"", ""color"": ""#000000"", ""yAxis"": 0, ""zIndex"": 3}, ""V2 LP Performance Without Fee (sqrt_ETH)"": {""type"": ""line"", ""color"": ""#00FF00"", ""yAxis"": 0, ""zIndex"": 2}}, ""valuesOptions"": {}, ""showDataLabels"": false, ""globalSeriesType"": ""line""}, ""created_at"": ""2021-06-30T14:38:57.443819+00:00"", ""__typename"": ""visualizations""}]","WITH Price AS(
    SELECT 
        evt_block_time as Time,
        (rebalance.""totalAmount0""*priceWETH.price + rebalance.""totalAmount1""*priceUSDT.price*10^12) / rebalance.""totalSupply"" AS PricePerShare, 
        priceWETH.price AS PriceWETH
    FROM visor.""Hypervisor_evt_Rebalance"" AS rebalance, prices.usd AS priceWETH, prices.usd AS priceUSDT
    WHERE 
        rebalance.contract_address =  '\x9a98bFfAbc0ABf291d6811C034E239e916bBceC0'
        AND priceWETH.symbol = 'WETH' AND date_trunc('minute', rebalance.evt_block_time) = priceWETH.minute 
        AND priceUSDT.symbol = 'USDT' AND date_trunc('minute', rebalance.evt_block_time) = priceUSDT.minute
        AND date_trunc('day', rebalance.evt_block_time) >= (date_trunc('day', NOW()) - interval '{{Number of days}} days')
),

basisPrice AS(
    SELECT *
    FROM Price
    ORDER BY time ASC LIMIT 1
)

SELECT
    Price.time AS Time,
    Price.PricePerShare / basisPrice.PricePerShare AS ""Vault Performance"",
    Price.PriceWETH / basisPrice.PriceWETH AS ""ETH HODL Performance"",
    sqrt(Price.PriceWETH) / sqrt(basisPrice.PriceWETH) AS ""V2 LP Performance Without Fee (sqrt_ETH)"",
    1 AS ""USDT HODL Performance""
FROM 
    Price, basisPrice"
70426,SorbettoFragola (Old WETH-USDT) / Performance,,"[{""id"": 140281, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-06-28T14:44:08.299284+00:00"", ""__typename"": ""visualizations""}, {""id"": 140282, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}}, ""yAxis"": [{""type"": ""-"", ""title"": {""text"": ""Performance""}}], ""legend"": {""enabled"": false}, ""series"": {""percentValues"": false}, ""reverseX"": false, ""columnMapping"": {"""": ""y"", ""time"": ""x"", ""baseupper"": ""y"", ""limitupper"": ""y"", ""performance"": ""y"", ""Ethereum Price"": ""y"", ""Vault Performance"": ""y"", ""Vault_Performance"": ""y"", ""ETH HODL Performance"": ""y"", ""ETH_HODL_Performance"": ""y"", ""USDT HODL Performance"": ""y"", ""USDT_HODL_Performance"": ""y"", ""v2_LP_Performance(sqrt_ETH)"": ""y"", ""ETH_USDT_5050_HODL_Performance"": ""y"", ""V2 LP Performance Without Fee (sqrt_ETH)"": ""y""}, ""seriesOptions"": {""Vault Performance"": {""type"": ""line"", ""color"": ""#0000FF"", ""yAxis"": 0, ""zIndex"": 0}, ""ETH HODL Performance"": {""type"": ""line"", ""color"": ""#FF0000"", ""yAxis"": 0, ""zIndex"": 1}, ""USDT HODL Performance"": {""type"": ""line"", ""color"": ""#000000"", ""yAxis"": 0, ""zIndex"": 3}, ""V2 LP Performance Without Fee (sqrt_ETH)"": {""type"": ""line"", ""color"": ""#00FF00"", ""yAxis"": 0, ""zIndex"": 2}}, ""valuesOptions"": {}, ""globalSeriesType"": ""line""}, ""created_at"": ""2021-06-28T14:44:08.299284+00:00"", ""__typename"": ""visualizations""}]","WITH hourTable AS(
    SELECT time FROM generate_series(date_trunc('day', NOW() - interval '{{Number of days}} days'), NOW(), '1 hour') AS time
),

TVL AS(
    SELECT 
        evt_block_time as Time,
        (snapshot.""totalAmount0""*priceWETH.price + snapshot.""totalAmount1""*priceUSDT.price*1e12) AS TVL,
        priceWETH.price AS PriceWETH
    FROM 
        popsicle_finance.""SorbettoFragola_evt_Snapshot"" AS snapshot, prices.usd AS priceWETH, prices.usd AS priceUSDT
    WHERE 
        snapshot.contract_address = '\xc4ff55a4329f84f9bf0f5619998ab570481ebb48' 
        AND priceWETH.symbol = 'WETH' AND date_trunc('minute', snapshot.evt_block_time) = priceWETH.minute 
        AND priceUSDT.symbol = 'USDT' AND date_trunc('minute', snapshot.evt_block_time) = priceUSDT.minute
),

TVLAfterSwap AS(
    SELECT DISTINCT
        date_trunc('hour', Time) as Time,
        last_value(TVL) OVER(PARTITION BY Time) AS TVL,
        PriceWETH
    FROM 
        TVL
),

PaidReward AS(
    SELECT 
        date_trunc('hour', reward.evt_block_time) as Time,
        (reward.""fees0""*priceWETH.price + reward.""fees1""*priceUSDT.price*1e12) AS paidReward
    FROM
        popsicle_finance.""SorbettoFragola_evt_RewardPaid"" AS reward, prices.usd AS priceWETH, prices.usd AS priceUSDT
    WHERE 
        reward.contract_address = '\xc4ff55a4329f84f9bf0f5619998ab570481ebb48' 
        AND priceWETH.symbol = 'WETH' AND date_trunc('minute', reward.evt_block_time) = priceWETH.minute 
        AND priceUSDT.symbol = 'USDT' AND date_trunc('minute', reward.evt_block_time) = priceUSDT.minute
),

PaidRewardHour AS(
    SELECT d.time AS time, paidReward FROM hourTable AS d LEFT JOIN PaidReward AS r ON d.time = r.time
),

-- 見たい期間より前のrewardは計算に入れない
SumPaidRewardHour AS(
    SELECT DISTINCT time, COALESCE(SUM(paidReward) OVER(ORDER BY time),0) AS SumPaidReward FROM PaidRewardHour
),


Share AS(
    -- Burn
    SELECT 
        date_trunc('hour', token.evt_block_time) AS time,
        token.value * -1 AS value
    FROM
        erc20.""ERC20_evt_Transfer"" AS token
    WHERE
        token.contract_address = '\xc4ff55a4329f84f9bf0f5619998ab570481ebb48'
        AND token.to = '\x0000000000000000000000000000000000000000' 
UNION ALL
    SELECT 
        date_trunc('hour', token.evt_block_time) AS time,
        token.value AS value
    FROM
        erc20.""ERC20_evt_Transfer"" AS token
    WHERE
        token.contract_address = '\xc4ff55a4329f84f9bf0f5619998ab570481ebb48'
        AND token.from = '\x0000000000000000000000000000000000000000' 
),

TotalShare AS (
    SELECT time, SUM(value) AS TotalShare FROM Share GROUP BY time 
),

-- 見たい期間より前のshareも計算に入れる
SumTotalShare AS(
    SELECT time, COALESCE(SUM(TotalShare) OVER(ORDER BY time),0) AS SumTotalShare FROM TotalShare
),

SumTotalShareHour AS(
    SELECT d.time AS time, (SELECT SumTotalShare FROM SumTotalShare WHERE SumTotalShare.time < d.time ORDER BY SumTotalShare.time DESC LIMIT 1) AS SumTotalShare FROM hourTable AS d LEFT JOIN SumTotalShare AS t ON d.time = t.time
),

Performance AS(
    SELECT S.time AS time, (TVL+SumPaidReward)/SumTotalShare AS Performance, PriceWETH
    FROM TVLAfterSwap AS T 
        LEFT JOIN SumTotalShareHour AS S ON T.time = S.time
        LEFT JOIN SumPaidRewardHour AS R ON T.time = R.time
    WHERE SumTotalShare>0
),

basisPerformance AS(
    SELECT *
    FROM Performance AS P
    WHERE P.Performance IS NOT NULL
    ORDER BY time ASC LIMIT 1
)


SELECT
    Performance.time,
    Performance.Performance / basisPerformance.Performance AS ""Vault Performance"",
    Performance.PriceWETH / basisPerformance.PriceWETH AS ""ETH HODL Performance"",
    sqrt(Performance.PriceWETH) / sqrt(basisPerformance.PriceWETH) AS ""V2 LP Performance Without Fee (sqrt_ETH)"",
    1 AS ""USDT HODL Performance""
FROM 
    Performance, basisPerformance
"
71863,Hypervisor (Old WETH-USDT) / Order Range,,"[{""id"": 143539, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-06-30T13:44:51.009618+00:00"", ""__typename"": ""visualizations""}, {""id"": 143538, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""series"": {""stacking"": null, ""percentValues"": false}, ""reverseX"": false, ""numberFormat"": """", ""columnMapping"": {""b1"": ""y"", ""b2"": ""y"", ""time"": ""x"", ""baselower"": ""y"", ""baseupper"": ""y"", ""limitlower"": ""y"", ""limitupper"": ""y"", ""Ethereum Price"": ""y"", ""b1(for visualization)"": ""y"", ""b2(for visualization)"": ""y""}, ""seriesOptions"": {""baselower"": {""type"": ""area"", ""color"": ""#FFFFFF"", ""yAxis"": 0, ""zIndex"": 4}, ""baseupper"": {""type"": ""area"", ""color"": ""#0FFE28"", ""yAxis"": 0, ""zIndex"": 0}, ""limitlower"": {""type"": ""area"", ""color"": ""#0FFF28"", ""yAxis"": 0, ""zIndex"": 3}, ""limitupper"": {""type"": ""area"", ""color"": ""#C6FBD8"", ""yAxis"": 0, ""zIndex"": 1}, ""Ethereum Price"": {""type"": ""line"", ""color"": ""#FF0000"", ""yAxis"": 0, ""zIndex"": 2}, ""b1(for visualization)"": {""type"": ""area"", ""color"": ""#FFFFFF"", ""yAxis"": 0, ""zIndex"": 5}, ""b2(for visualization)"": {""type"": ""area"", ""color"": ""#FFFFFF"", ""yAxis"": 0, ""zIndex"": 6}}, ""valuesOptions"": {}, ""showDataLabels"": false, ""globalSeriesType"": ""area""}, ""created_at"": ""2021-06-30T13:44:51.009618+00:00"", ""__typename"": ""visualizations""}]","/* get rebalance tx hash*/
WITH rebalancetxs AS(
    SELECT ""evt_tx_hash""
    FROM visor.""Hypervisor_evt_Rebalance""
    WHERE contract_address =  '\x9a98bFfAbc0ABf291d6811C034E239e916bBceC0' -- https://etherscan.io/address/0x716bd8A7f8A44B010969A1825ae5658e7a18630D#code --https://etherscan.io/tx/0x977f4f1161db9039a00ed8e6d975720728cdaf030b1d7b66e1fb3aeb6eb4a14d
)

/*  
    two mint events in one tx
    time, lowerTick, upperTick, range <- band order
    time, lowerTick, upperTick, range <- limit order
*/
,mint AS(
 SELECT
  position.""tickLower"" AS lowerTick,   
  position.""tickUpper"" AS UpperTick,  
  ABS(position.""tickLower"" - position.""tickUpper"") AS range,
  ""call_block_time"" AS Time 
 FROM uniswap_v3.""Pair_call_mint"" AS position, rebalancetxs
 WHERE call_tx_hash IN (rebalancetxs.evt_tx_hash)
),

/*
    wide range -> baseOrder
    time, baseLower, baseLower, limitLower, limitUpper
*/
range AS(
    SELECT 
        m1.Time,
        m1.lowerTick AS baseLower,
        m1.upperTick AS baseUpper,
        m2.lowerTick AS limitLower,
        m2.upperTick AS limitUpper
    FROM mint as m1 INNER JOIN mint M2 ON M1.Time = M2.Time AND M1.range > M2.range
),

/*
    tick to price
*/
rangePrice AS(
    SELECT 
        date_trunc('hour', range.time) AS Time,
        (1.0001^range.baseLower)*(10^12)*priceUSDT.price AS baseLower,
        (1.0001^range.baseUpper)*(10^12)*priceUSDT.price AS baseUpper,  
        (1.0001^range.limitLower)*(10^12)*priceUSDT.price AS limitLower,  
        (1.0001^range.limitUpper)*(10^12)*priceUSDT.price AS limitUpper
    FROM range, prices.usd AS priceUSDT
    WHERE priceUSDT.symbol = 'USDT' AND date_trunc('minute', range.time) = priceUSDT.minute
),

ethPriceEveryHour AS(
    SELECT 
        date_trunc('hour', d) AS Time,
        priceWETH.price AS ""Ethereum Price""
    FROM generate_series(date_trunc('day', NOW() - interval '{{Number of days}} days'), NOW(), '1 hour') AS d, prices.usd AS priceWETH
    WHERE priceWETH.symbol = 'WETH' AND date_trunc('minute', d) = priceWETH.minute 
),

rangePriceEveryHour AS(
    SELECT
        d.time,
        d.""Ethereum Price"",
        (SELECT baseLower FROM rangePrice WHERE rangePrice.time < d.time ORDER BY rangePrice.time DESC LIMIT 1) AS baseLower, 
        (SELECT baseUpper FROM rangePrice WHERE rangePrice.time < d.time ORDER BY rangePrice.time DESC LIMIT 1) AS baseUpper,
        (SELECT limitLower FROM rangePrice WHERE rangePrice.time < d.time ORDER BY rangePrice.time DESC LIMIT 1) AS limitLower,
        (SELECT limitUpper FROM rangePrice WHERE rangePrice.time < d.time ORDER BY rangePrice.time DESC LIMIT 1) AS limitUpper
    FROM ethPriceEveryHour AS d LEFT JOIN rangePrice AS r ON d.time = r.time
    ORDER By time
)

SELECT *,baseLower AS ""b1(for visualization)"" ,baseLower AS ""b2(for visualization)"" FROM rangePriceEveryHour -- additional two baseLower are for visualization (area chart)"
70910,Sorbetto Fragola (Old WETH-USDT) Order Range,,"[{""id"": 141609, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""0"", ""columnMapping"": {""l1"": ""y"", ""l2"": ""y"", ""time"": ""x"", ""lowerprice"": ""y"", ""upperprice"": ""y"", ""Ethereum Price"": ""y"", ""l1(for visualization)"": ""y"", ""l2(for visualization)"": ""y""}, ""seriesOptions"": {""lowerprice"": {""type"": ""area"", ""color"": ""#FFFFFF"", ""yAxis"": 0, ""zIndex"": 2}, ""upperprice"": {""type"": ""area"", ""color"": ""#FE9706"", ""yAxis"": 0, ""zIndex"": 1}, ""Ethereum Price"": {""type"": ""line"", ""color"": ""#FF0000"", ""yAxis"": 0, ""zIndex"": 0}, ""l1(for visualization)"": {""type"": ""area"", ""color"": ""#FFFFFF"", ""yAxis"": 0, ""zIndex"": 3}, ""l2(for visualization)"": {""type"": ""area"", ""color"": ""#FFFFFF"", ""yAxis"": 0, ""zIndex"": 4}}, ""valuesOptions"": {}, ""showDataLabels"": false, ""globalSeriesType"": ""area""}, ""created_at"": ""2021-06-29T15:30:36.928862+00:00"", ""__typename"": ""visualizations""}, {""id"": 141235, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-06-29T09:02:02.177626+00:00"", ""__typename"": ""visualizations""}]","WITH range AS(
    SELECT ""tickLower"" AS tickLower, ""tickUpper"" AS tickUpper, rerange.evt_block_time AS Time 
    FROM popsicle_finance.""SorbettoFragola_evt_Rerange"" AS rerange -- https://etherscan.io/address/0xc4ff55a4329f84f9bf0f5619998ab570481ebb48
    WHERE contract_address =  '\xc4ff55a4329f84f9bf0f5619998ab570481ebb48'
),

rangePrice AS(
    SELECT 
        date_trunc('minute', range.time) AS Time,
        (1.0001^range.tickLower)*(10^12)*priceUSDT.price AS LowerPrice,
        (1.0001^range.tickUpper)*(10^12)*priceUSDT.price AS UpperPrice
    FROM range, prices.usd AS priceUSDT
    WHERE priceUSDT.symbol = 'USDT' AND date_trunc('minute', range.time) = priceUSDT.minute
),

ethPriceEveryHour AS(
    SELECT 
        date_trunc('hour', d) AS Time,
        priceWETH.price AS ""Ethereum Price""
    FROM generate_series(date_trunc('day', NOW() - interval '{{Number of days}} days'), NOW(), '1 hour') AS d, prices.usd AS priceWETH
    WHERE priceWETH.symbol = 'WETH' AND date_trunc('minute', d) = priceWETH.minute 
),

rangePriceEveryHour AS(
    SELECT
        d.time,
        d.""Ethereum Price"",
        (SELECT LowerPrice FROM rangePrice WHERE rangePrice.time < d.time ORDER BY rangePrice.time DESC LIMIT 1) AS LowerPrice, 
        (SELECT UpperPrice FROM rangePrice WHERE rangePrice.time < d.time ORDER BY rangePrice.time DESC LIMIT 1) AS UpperPrice
    FROM ethPriceEveryHour AS d LEFT JOIN rangePrice AS r ON d.time = r.time
    ORDER By time
)

SELECT *,LowerPrice AS ""l1(for visualization)"" ,LowerPrice AS ""l2(for visualization)"" FROM rangePriceEveryHour -- additional two LowerPrice are for visualization (area chart)"
70434, Alpha Vaults (Old WETH-USDT) / Order Range,,"[{""id"": 140296, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-06-28T14:52:21.144987+00:00"", ""__typename"": ""visualizations""}, {""id"": 140297, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": """", ""columnMapping"": {""b1"": ""y"", ""b2"": ""y"", ""time"": ""x"", ""baselower"": ""y"", ""baseupper"": ""y"", ""limitlower"": ""y"", ""limitupper"": ""y"", ""Ethereum Price"": ""y"", ""b1(for visualization)"": ""y"", ""b2(for visualization)"": ""y""}, ""seriesOptions"": {""baselower"": {""type"": ""area"", ""color"": ""#FFFFFF"", ""yAxis"": 0, ""zIndex"": 4}, ""baseupper"": {""type"": ""area"", ""color"": ""#32C8FF"", ""yAxis"": 0, ""zIndex"": 0}, ""limitlower"": {""type"": ""area"", ""color"": ""#32C8FF"", ""yAxis"": 0, ""zIndex"": 3}, ""limitupper"": {""type"": ""area"", ""color"": ""#C2EBFF"", ""yAxis"": 0, ""zIndex"": 1}, ""Ethereum Price"": {""type"": ""line"", ""color"": ""#FF0000"", ""yAxis"": 0, ""zIndex"": 2}, ""b1(for visualization)"": {""type"": ""area"", ""color"": ""#FFFFFF"", ""yAxis"": 0, ""zIndex"": 5}, ""b2(for visualization)"": {""type"": ""area"", ""color"": ""#FFFFFF"", ""yAxis"": 0, ""zIndex"": 6}}, ""valuesOptions"": {}, ""globalSeriesType"": ""area""}, ""created_at"": ""2021-06-28T14:52:26.791204+00:00"", ""__typename"": ""visualizations""}]","/* get rebalance tx hash*/
WITH rebalancetxs AS(
    SELECT ""evt_tx_hash""
    FROM charm.""AlphaVault_evt_Snapshot""
    WHERE contract_address =  '\x55535C4C56F6Bf373E06C43E44C0356aaFD0d21A'
)

/*  
    two mint events in one tx
    time, lowerTick, upperTick, range <- band order
    time, lowerTick, upperTick, range <- limit order
*/
,mint AS(
 SELECT
  position.""tickLower"" AS lowerTick,   
  position.""tickUpper"" AS UpperTick,  
  ABS(position.""tickLower"" - position.""tickUpper"") AS range,
  ""call_block_time"" AS Time 
 FROM uniswap_v3.""Pair_call_mint"" AS position, rebalancetxs
 WHERE call_tx_hash IN (rebalancetxs.evt_tx_hash)
),

/*
    wide range -> baseOrder
    time, baseLower, baseLower, limitLower, limitUpper
*/
range AS(
    SELECT 
        m1.Time,
        m1.lowerTick AS baseLower,
        m1.upperTick AS baseUpper,
        m2.lowerTick AS limitLower,
        m2.upperTick AS limitUpper
    FROM mint as m1 INNER JOIN mint M2 ON M1.Time = M2.Time AND M1.range > M2.range
),

/*
    tick to price
*/
rangePrice AS(
    SELECT 
        date_trunc('hour', range.time) AS Time,
        (1.0001^range.baseLower)*(10^12)*priceUSDT.price AS baseLower,
        (1.0001^range.baseUpper)*(10^12)*priceUSDT.price AS baseUpper,  
        (1.0001^range.limitLower)*(10^12)*priceUSDT.price AS limitLower,  
        (1.0001^range.limitUpper)*(10^12)*priceUSDT.price AS limitUpper
    FROM range, prices.usd AS priceUSDT
    WHERE priceUSDT.symbol = 'USDT' AND date_trunc('minute', range.time) = priceUSDT.minute
),

ethPriceEveryHour AS(
    SELECT 
        date_trunc('hour', d) AS Time,
        priceWETH.price AS ""Ethereum Price""
    FROM generate_series(date_trunc('day', NOW() - interval '{{Number of days}} days'), NOW(), '1 hour') AS d, prices.usd AS priceWETH
    WHERE priceWETH.symbol = 'WETH' AND date_trunc('minute', d) = priceWETH.minute 
),

rangePriceEveryHour AS(
    SELECT
        d.time,
        d.""Ethereum Price"",
        (SELECT baseLower FROM rangePrice WHERE rangePrice.time < d.time ORDER BY rangePrice.time DESC LIMIT 1) AS baseLower, 
        (SELECT baseUpper FROM rangePrice WHERE rangePrice.time < d.time ORDER BY rangePrice.time DESC LIMIT 1) AS baseUpper,
        (SELECT limitLower FROM rangePrice WHERE rangePrice.time < d.time ORDER BY rangePrice.time DESC LIMIT 1) AS limitLower,
        (SELECT limitUpper FROM rangePrice WHERE rangePrice.time < d.time ORDER BY rangePrice.time DESC LIMIT 1) AS limitUpper
    FROM ethPriceEveryHour AS d LEFT JOIN rangePrice AS r ON d.time = r.time
    ORDER By time
)

SELECT *,baseLower AS ""b1(for visualization)"" ,baseLower AS ""b2(for visualization)"" FROM rangePriceEveryHour -- additional two baseLower are for visualization (area chart)"
78305, Alpha Vault (USDC-WETH) / Performance,,"[{""id"": 155697, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-07-08T16:25:24.43121+00:00"", ""__typename"": ""visualizations""}, {""id"": 155698, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""performance""}}, {""type"": ""linear"", ""title"": {""text"": ""WETH Price""}}], ""legend"": {""enabled"": false}, ""series"": {""percentValues"": false}, ""reverseX"": false, ""columnMapping"": {"""": ""y"", ""time"": ""x"", ""priceweth"": ""y"", ""performance"": ""y"", ""vaultperformance"": ""x"", ""Vault Performance"": ""y"", ""Vault_Performance"": ""y"", ""vault_performance"": ""y"", ""ETH HODL Performance"": ""y"", ""ETH_HODL_Performance"": ""y"", ""eth_hodl_performance"": ""y"", ""USDC HODL Performance"": ""y"", ""USDT HODL Performance"": ""y"", ""USDT_HODL_Performance"": ""y"", ""usdt_hodl_performance"": ""y"", ""v2_LP_Performance(sqrt_ETH)"": ""y"", ""ETH_USDT_5050_HODL_Performance"": ""y"", ""ETH:USDT_50:50_HODL_Performance"": ""y"", ""V2 LP Performance Without Fee (sqrt_ETH)"": ""y""}, ""seriesOptions"": {""Vault Performance"": {""type"": ""line"", ""color"": ""#0000FF"", ""yAxis"": 0, ""zIndex"": 0}, ""ETH HODL Performance"": {""type"": ""line"", ""color"": ""#FF0000"", ""yAxis"": 0, ""zIndex"": 1}, ""USDC HODL Performance"": {""type"": ""line"", ""color"": ""#000000"", ""yAxis"": 0, ""zIndex"": 3}, ""V2 LP Performance Without Fee (sqrt_ETH)"": {""type"": ""line"", ""color"": ""#00FF00"", ""yAxis"": 0, ""zIndex"": 2}}, ""valuesOptions"": {}, ""showDataLabels"": false, ""globalSeriesType"": ""line""}, ""created_at"": ""2021-07-08T16:25:24.43121+00:00"", ""__typename"": ""visualizations""}]","WITH Price AS(
    SELECT 
        (snapshot.""totalAmount0""*priceUSDC.price*10^12 + snapshot.""totalAmount1""*priceWETH.price) / snapshot.""totalSupply"" AS PricePerShare, 
        priceWETH.price AS PriceWETH, 
        evt_block_time as Time,
        snapshot.""totalAmount0""*priceUSDC.price*10^12 + snapshot.""totalAmount1""*priceWETH.price AS TVL
    FROM charm.""AlphaVault_evt_Snapshot"" AS snapshot, prices.usd AS priceWETH, prices.usd AS priceUSDC
    WHERE 
        snapshot.contract_address = '\x9bf7b46c7ad5ab62034e9349ab912c0345164322' 
        AND priceWETH.symbol = 'WETH' AND date_trunc('minute', snapshot.evt_block_time) = priceWETH.minute 
        AND priceUSDC.symbol = 'USDC' AND date_trunc('minute', snapshot.evt_block_time) = priceUSDC.minute
        AND date_trunc('day', snapshot.evt_block_time) >= (date_trunc('day', NOW()) - interval '{{Number of days}} days')
),

basisPrice AS(
    SELECT *
    FROM Price
    ORDER BY time ASC LIMIT 1
)

SELECT
    Price.time AS Time,
    Price.PricePerShare / basisPrice.PricePerShare AS ""Vault Performance"",
    Price.PriceWETH / basisPrice.PriceWETH AS ""ETH HODL Performance"",
    sqrt(Price.PriceWETH) / sqrt(basisPrice.PriceWETH) AS ""V2 LP Performance Without Fee (sqrt_ETH)"",
    1 AS ""USDC HODL Performance"",
    Price.TVL/1e18 AS TVL
FROM 
    Price, basisPrice"
78308, Alpha Vaults (USDC-WETH) / Order Range,,"[{""id"": 155702, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-07-08T16:34:12.635992+00:00"", ""__typename"": ""visualizations""}, {""id"": 155703, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": """", ""columnMapping"": {""b1"": ""y"", ""b2"": ""y"", ""time"": ""x"", ""baselower"": ""y"", ""baseupper"": ""y"", ""limitlower"": ""y"", ""limitupper"": ""y"", ""Ethereum Price"": ""y"", ""b1(for visualization)"": ""y"", ""b2(for visualization)"": ""y""}, ""seriesOptions"": {""baselower"": {""type"": ""area"", ""color"": ""#FFFFFF"", ""yAxis"": 0, ""zIndex"": 4}, ""baseupper"": {""type"": ""area"", ""color"": ""#32C8FF"", ""yAxis"": 0, ""zIndex"": 0}, ""limitlower"": {""type"": ""area"", ""color"": ""#32C8FF"", ""yAxis"": 0, ""zIndex"": 3}, ""limitupper"": {""type"": ""area"", ""color"": ""#C2EBFF"", ""yAxis"": 0, ""zIndex"": 1}, ""Ethereum Price"": {""type"": ""line"", ""color"": ""#FF0000"", ""yAxis"": 0, ""zIndex"": 2}, ""b1(for visualization)"": {""type"": ""area"", ""color"": ""#FFFFFF"", ""yAxis"": 0, ""zIndex"": 5}, ""b2(for visualization)"": {""type"": ""area"", ""color"": ""#FFFFFF"", ""yAxis"": 0, ""zIndex"": 6}}, ""valuesOptions"": {}, ""globalSeriesType"": ""area""}, ""created_at"": ""2021-07-08T16:34:12.635992+00:00"", ""__typename"": ""visualizations""}]","/* get rebalance tx hash*/
WITH rebalancetxs AS(
    SELECT ""evt_tx_hash""
    FROM charm.""AlphaVault_evt_Snapshot""
    WHERE contract_address =  '\x9bf7b46c7ad5ab62034e9349ab912c0345164322'
)

/*  
    two mint events in one tx
    time, lowerTick, upperTick, range <- band order
    time, lowerTick, upperTick, range <- limit order
*/
,mint AS(
    SELECT
        position.""tickLower"" AS lowerTick,   
        position.""tickUpper"" AS UpperTick,  
        ABS(position.""tickLower"" - position.""tickUpper"") AS range,
        ""call_block_time"" AS Time 
    FROM uniswap_v3.""Pair_call_mint"" AS position, rebalancetxs
    WHERE call_tx_hash IN (rebalancetxs.evt_tx_hash)
),

/*
    wide range -> baseOrder
    time, baseLower, baseLower, limitLower, limitUpper
*/
range AS(
    SELECT 
        m1.Time,
        m1.lowerTick AS baseLower,
        m1.upperTick AS baseUpper,
        m2.lowerTick AS limitLower,
        m2.upperTick AS limitUpper
    FROM mint as m1 INNER JOIN mint M2 ON M1.Time = M2.Time AND M1.range > M2.range
),

/*
    tick to price
    token0 <- USDC
*/
rangePrice AS(
    SELECT 
        range.time AS Time,
        1e12/(1.0001^range.baseLower)*priceUSDC.price AS baseUpper, -- reverse
        1e12/(1.0001^range.baseUpper)*priceUSDC.price AS baseLower,  
        1e12/(1.0001^range.limitLower)*priceUSDC.price AS limitUpper,  
        1e12/(1.0001^range.limitUpper)*priceUSDC.price AS limitLower
    FROM range, prices.usd AS priceUSDC
    WHERE priceUSDC.symbol = 'USDC' AND date_trunc('minute', range.time) = priceUSDC.minute
),

ethPriceEveryHour AS(
    SELECT 
        date_trunc('hour', d) AS Time,
        priceWETH.price AS ""Ethereum Price""
    FROM generate_series(date_trunc('day', NOW() - interval '{{Number of days}} days'), NOW(), '1 hour') AS d, prices.usd AS priceWETH
    WHERE priceWETH.symbol = 'WETH' AND date_trunc('minute', d) = priceWETH.minute 
),

rangePriceEveryHour AS(
    SELECT
        d.time,
        d.""Ethereum Price"",
        (SELECT baseLower FROM rangePrice WHERE rangePrice.time < d.time ORDER BY rangePrice.time DESC LIMIT 1) AS baseLower, 
        (SELECT baseUpper FROM rangePrice WHERE rangePrice.time < d.time ORDER BY rangePrice.time DESC LIMIT 1) AS baseUpper,
        (SELECT limitLower FROM rangePrice WHERE rangePrice.time < d.time ORDER BY rangePrice.time DESC LIMIT 1) AS limitLower,
        (SELECT limitUpper FROM rangePrice WHERE rangePrice.time < d.time ORDER BY rangePrice.time DESC LIMIT 1) AS limitUpper
    FROM ethPriceEveryHour AS d LEFT JOIN rangePrice AS r ON d.time = r.time
    ORDER By time
)

SELECT *,baseLower AS ""b1(for visualization)"" ,baseLower AS ""b2(for visualization)"" FROM rangePriceEveryHour -- additional two baseLower are for visualization (area chart)"
78323, Alpha Vault (WETH-USDT) / Performance,,"[{""id"": 155730, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-07-08T16:56:54.641639+00:00"", ""__typename"": ""visualizations""}, {""id"": 155731, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""performance""}}, {""type"": ""linear"", ""title"": {""text"": ""WETH Price""}}], ""legend"": {""enabled"": false}, ""series"": {""percentValues"": false}, ""reverseX"": false, ""columnMapping"": {"""": ""y"", ""time"": ""x"", ""priceweth"": ""y"", ""performance"": ""y"", ""vaultperformance"": ""x"", ""Vault Performance"": ""y"", ""Vault_Performance"": ""y"", ""vault_performance"": ""y"", ""ETH HODL Performance"": ""y"", ""ETH_HODL_Performance"": ""y"", ""eth_hodl_performance"": ""y"", ""USDT HODL Performance"": ""y"", ""USDT_HODL_Performance"": ""y"", ""usdt_hodl_performance"": ""y"", ""v2_LP_Performance(sqrt_ETH)"": ""y"", ""ETH_USDT_5050_HODL_Performance"": ""y"", ""ETH:USDT_50:50_HODL_Performance"": ""y"", ""V2 LP Performance Without Fee (sqrt_ETH)"": ""y""}, ""seriesOptions"": {""Vault Performance"": {""type"": ""line"", ""color"": ""#0000FF"", ""yAxis"": 0, ""zIndex"": 0}, ""ETH HODL Performance"": {""type"": ""line"", ""color"": ""#FF0000"", ""yAxis"": 0, ""zIndex"": 1}, ""USDT HODL Performance"": {""type"": ""line"", ""color"": ""#000000"", ""yAxis"": 0, ""zIndex"": 3}, ""V2 LP Performance Without Fee (sqrt_ETH)"": {""type"": ""line"", ""color"": ""#00FF00"", ""yAxis"": 0, ""zIndex"": 2}}, ""valuesOptions"": {}, ""showDataLabels"": false, ""globalSeriesType"": ""line""}, ""created_at"": ""2021-07-08T16:56:54.641639+00:00"", ""__typename"": ""visualizations""}]","WITH Price AS(
    SELECT 
        (snapshot.""totalAmount0""*priceWETH.price + snapshot.""totalAmount1""*priceUSDT.price*10^12) / snapshot.""totalSupply"" AS PricePerShare, 
        priceWETH.price AS PriceWETH, 
        evt_block_time as Time
    FROM charm.""AlphaVault_evt_Snapshot"" AS snapshot, prices.usd AS priceWETH, prices.usd AS priceUSDT
    WHERE 
        snapshot.contract_address = '\xE72f3E105e475D7Db3a003FfA377aFAe9c2c6c11' 
        AND priceWETH.symbol = 'WETH' AND date_trunc('minute', snapshot.evt_block_time) = priceWETH.minute 
        AND priceUSDT.symbol = 'USDT' AND date_trunc('minute', snapshot.evt_block_time) = priceUSDT.minute
        AND date_trunc('day', snapshot.evt_block_time) >= (date_trunc('day', NOW()) - interval '{{Number of days}} days')
),

basisPrice AS(
    SELECT *
    FROM Price
    ORDER BY time ASC LIMIT 1
)

SELECT
    Price.time AS Time,
    Price.PricePerShare / basisPrice.PricePerShare AS ""Vault Performance"",
    Price.PriceWETH / basisPrice.PriceWETH AS ""ETH HODL Performance"",
    sqrt(Price.PriceWETH) / sqrt(basisPrice.PriceWETH) AS ""V2 LP Performance Without Fee (sqrt_ETH)"",
    1 AS ""USDT HODL Performance""
FROM 
    Price, basisPrice"
1512569,top_dex_post_merge_date,,"[{""id"": 2544462, ""type"": ""counter"", ""name"": ""Counter"", ""options"": {""rowNumber"": 1, ""counterColName"": ""date_time""}, ""created_at"": ""2022-11-02T22:26:18.02617+00:00"", ""__typename"": ""visualizations""}, {""id"": 2543920, ""type"": ""chart"", ""name"": ""MEV Bots on Uniswap Post Merge: Total Swap Share"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack"", ""percentValues"": true}, ""reverseX"": false, ""numberFormat"": ""$,.00"", ""columnMapping"": {""mev_bot"": ""series"", ""date_time"": ""x"", ""total_swaps"": ""y""}, ""seriesOptions"": {""Other"": {""type"": ""column"", ""color"": ""#b2b2b2"", ""yAxis"": 0, ""zIndex"": 0}, ""MEV Bot"": {""type"": ""column"", ""color"": ""#FF007a"", ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column"", ""numberFormatRightYAxisSeries"": ""%""}, ""created_at"": ""2022-11-02T21:15:48.279374+00:00"", ""__typename"": ""visualizations""}, {""id"": 2544481, ""type"": ""chart"", ""name"": ""Average Swap Trade per Day: MEV Bots on Uniswap Post Merge"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""columnMapping"": {""mev_bot"": ""series"", ""date_time"": ""x"", ""avg_volume"": ""y""}, ""seriesOptions"": {""Other"": {""type"": ""line"", ""color"": ""#B2b2B2"", ""yAxis"": 0, ""zIndex"": 0}, ""MEV Bot"": {""type"": ""line"", ""color"": ""#FF007A"", ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""line""}, ""created_at"": ""2022-11-02T22:27:36.703551+00:00"", ""__typename"": ""visualizations""}, {""id"": 2544578, ""type"": ""counter"", ""name"": ""Cumulative Volume  MEV Bots have done Post Merge"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""counterColName"": ""cumulative_vole"", ""coloredPositiveValues"": true}, ""created_at"": ""2022-11-02T22:38:20.99765+00:00"", ""__typename"": ""visualizations""}, {""id"": 2543922, ""type"": ""chart"", ""name"": ""MEV Bots on Uniswap Post Merge: Total Volume Share"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack"", ""percentValues"": true}, ""reverseX"": false, ""numberFormat"": "",.00"", ""columnMapping"": {""mev_bot"": ""series"", ""date_time"": ""x"", ""volume_usd"": ""y""}, ""seriesOptions"": {""Other"": {""type"": ""column"", ""color"": ""#B2b2b2"", ""yAxis"": 0, ""zIndex"": 0}, ""MEV Bot"": {""type"": ""column"", ""color"": ""#FF007A"", ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column"", ""numberFormatRightYAxisSeries"": ""%""}, ""created_at"": ""2022-11-02T21:15:48.279374+00:00"", ""__typename"": ""visualizations""}, {""id"": 2544583, ""type"": ""counter"", ""name"": ""Cumulative Volume \""Others\"" have done Post Merge"", ""options"": {""rowNumber"": 2, ""counterColName"": ""cumulative_vole""}, ""created_at"": ""2022-11-02T22:39:04.520102+00:00"", ""__typename"": ""visualizations""}, {""id"": 2544587, ""type"": ""counter"", ""name"": ""\""Other\"" Swaps Today"", ""options"": {""rowNumber"": 2, ""counterColName"": ""total_swaps""}, ""created_at"": ""2022-11-02T22:39:40.453806+00:00"", ""__typename"": ""visualizations""}, {""id"": 2544586, ""type"": ""counter"", ""name"": ""MEV Swaps Today"", ""options"": {""rowNumber"": 1, ""counterColName"": ""total_swaps""}, ""created_at"": ""2022-11-02T22:39:30.310277+00:00"", ""__typename"": ""visualizations""}, {""id"": 2544589, ""type"": ""counter"", ""name"": ""MEV Bot Volume Today"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""counterColName"": ""volume_usd""}, ""created_at"": ""2022-11-02T22:40:00.743445+00:00"", ""__typename"": ""visualizations""}, {""id"": 2544592, ""type"": ""counter"", ""name"": ""\""Other\"" Volume Today"", ""options"": {""rowNumber"": 2, ""stringPrefix"": ""$"", ""counterColName"": ""volume_usd""}, ""created_at"": ""2022-11-02T22:40:29.115225+00:00"", ""__typename"": ""visualizations""}, {""id"": 2543921, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-11-02T21:15:48.279374+00:00"", ""__typename"": ""visualizations""}]","with temp as (SELECT
DATE(block_time) as bt,
tx_hash,
tx_to,
taker,
amount_usd,
CASE WHEN tx_to in ('0x000000000dfde7deaf24138722987c9a6991e2d4',
                                '0x4cb18386e5d1f34dc6eea834bf3534a970a3f8e7',
                                '0x00000000003b3cc22af3ae1eac0440bcee416b40',
                                '0xa57bd00134b2850b2a1c55860c9e9ea100fdd6cf',
                                '0x98c3d3183c4b8a650614ad179a1a98be0a8d6b8e',
                                '0x8aff5ca996f77487a4f04f1ce905bf3d27455580',
                                '0x45716d9eddbc332df1d42b9f540fbebed671b20f',
                                '0x000000000035b5e5ad9019092c665357240f594e',
                                '0xa69babef1ca67a37ffaf7a485dfff3382056e78c',
                                '0xbeefbabeea323f07c59926295205d3b7a17e8638',
                                '0x57c1e0c2adf6eecdb135bcf9ec5f23b319be2c94',
                                '0xf71530c1f043703085b42608ff9dcccc43210a8e',
                                '0xbadc0defafcf6d4239bdf0b66da4d7bd36fcf05a',
                                '0x507888e987257a8dde6f8afa46375cefe2cbf504',
                                '0xf6765a4669c3e7bca52a81eaec10e21caedf1268',
                                '0x761d80987a36fc271875ea4de17539e8c82ae51d',
                                '0x2f1d79860cf6ea3f4b3b734153b52815773c0638',
                                '0x58418d6c83efab01ed78b0ac42e55af01ee77dba',
                                '0x80d4230c0a68fc59cb264329d3a717fcaa472a13',
                                '0xc8046263d5b5544f6413a98b4693488499195a46',
                                '0x00000000c2cf7648c169b25ef1c217864bfa38cc',
                                '0x114702cd1fd3940f0f74d7ce12e7fb0865b3cde4',
                                '0xe8c060f8052e07423f71d445277c61ac5138a2e5',
                                '0x0000000000a84d1a9b0063a910315c7ffa9cd248',
                                '0xe4000004000bd8006e00720000d27d1fa000d43e',
                                '0x566cc3c77ad1b2dbf12928fe73709a2deefa4e5a',
                                '0x25f12db13b19bc9e000f0070a2efbf8353dd8a65',
                                '0x321bf29f2d5dad204b5e25c31cac4348b6f29f96',
                                '0x0eae044f00b0af300500f090ea00027097d03000',
                                '0x5c57ac8dc5d8589dab9d422993ed3de8cc244151',
                                '0x0000000000007f150bd6f54c40a34d7c3d5e9f56',
                                '0xe06ffa8146bbdeccbaaf72b6043b29091071aeb8',
                                '0x6af1a16fde7346e7729fa921ad2ddf6a462061e2',
                                '0x70526cc7a6d6320b44122ea9d2d07670accc85a1',
                                '0xa1006d0051a35b0000f961a8000000009ea8d2db',
                                '0x81153f0889ab398c4acb42cb58b565a5392bba95',
                                '0x01ff6318440f7d5553a82294d78262d5f5084eff',
                                '0x0000000000590b74eb97457bf7b3ff6d63c6fde2',
                                '0xcf99a481076186a44070c3158cf75c8cf00f84fc',
                                '0xacd4ec996aad815efe72a11944188c6db6c30176',
                                '0x00000000008c4fb1c916e0c88fd4cc402d935e7d',
                                '0x2bb7cbc1d3d61a9ad01d0c59ec4ef5132177ff22',
                                '0x0000000099cb7fc48a935bceb9f05bbae54e8987',
                                '0xaa88106ab6c7a666d13bc096a435aeb803ce4185',
                                '0xf38be77ac9a0643ada22dec416eb3158598614bb',
                                '0x3ea22feb0761422dfe560dbe826f7a6dfbbd643f',
                                '0x36c219ff7ab5fb88c3d77e778da20dc9629ad752',
                                '0xd8c07491caa1edf960db3ceff387426d53942ea0',
                                '0x95a4cb0ecbae0ae59b64c8f3257a5af4277dda0e'
                                ) then 'MEV Bot' ELSE 'Other' END as mev_bot
FROM dex.trades d
INNER JOIN (SELECT hash, block_number FROM ethereum.transactions WHERE block_number > 15537393  GROUP BY hash,block_number) e ON d.tx_hash = e.hash
WHERE amount_usd > 0
and project = 'uniswap'
)

SELECT
bt as date_time,
mev_bot,
AVG(amount_usd) as avg_volume,
SUM(amount_usd) as volume_usd,
SUM(SUM(amount_usd)) OVER (PARTITION BY mev_bot ORDER BY bt) as cumulative_vole,
COUNT((tx_hash)) as total_swaps
--COUNT(DISTINCT(taker)) as total_swaps,
FROM temp
GROUP BY bt, mev_bot
ORDER BY bt DESC, mev_bot






"
1513040,jit_Bots,,"[{""id"": 2544511, ""type"": ""chart"", ""name"": ""Total Profit & Average Profit for JIT MEV Bots on Uniswap"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""$,0.00"", ""columnMapping"": {""MEV BOT"": ""x"", ""avg_profit"": ""y"", ""total_profit"": ""y""}, ""seriesOptions"": {""avg_profit"": {""type"": ""line"", ""color"": ""#B2b2b2"", ""yAxis"": 1, ""zIndex"": 1}, ""total_profit"": {""type"": ""column"", ""color"": ""#FF007a"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""line""}, ""created_at"": ""2022-11-02T22:30:03.512616+00:00"", ""__typename"": ""visualizations""}, {""id"": 2544624, ""type"": ""chart"", ""name"": ""Total JIT Related Transactions by MEV Bot on Uniswap"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""columnMapping"": {""MEV BOT"": ""x"", ""total_jit_actions"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2022-11-02T22:44:40.261496+00:00"", ""__typename"": ""visualizations""}, {""id"": 2544512, ""type"": ""table"", ""name"": ""Query results"", ""options"": {""columns"": [{""name"": ""total_revenue"", ""numberFormat"": ""$0,.00""}, {""name"": ""total_costs"", ""numberFormat"": ""$0,.00"", ""coloredNegativeValues"": false}, {""name"": ""total_profit"", ""numberFormat"": ""$0,.00"", ""coloredNegativeValues"": true, ""coloredPositiveValues"": true}, {""name"": ""avg_profit"", ""numberFormat"": ""$0,.00"", ""coloredNegativeValues"": true, ""coloredPositiveValues"": true}, {""name"": ""total_jit_actions"", ""numberFormat"": "",""}, {""name"": ""total_blocks_involved"", ""numberFormat"": "",""}, {""name"": ""avg_revenue"", ""numberFormat"": ""$0,.00""}, {""name"": ""rolling_avg_profts"", ""numberFormat"": ""$0,.00""}, {""name"": ""cumulative_jit"", ""numberFormat"": "",""}, {""name"": ""cumulative_costs"", ""numberFormat"": ""$0,.00""}, {""name"": ""cumulative_profts"", ""numberFormat"": ""$0,.00""}, {""name"": ""cumulative_revenue"", ""numberFormat"": ""$0,.00""}]}, ""created_at"": ""2022-11-02T22:30:03.512616+00:00"", ""__typename"": ""visualizations""}]","with temp as (SELECT
    t.*
FROM
(
    SELECT
        DISTINCT
        add.""call_block_time"" as time,
        tx_add.""from"",
        tx_add.""to"",
        add.call_block_number as block_number,
        add.""call_tx_hash"" as add_hash,
        remove.""call_tx_hash"" as remove_hash,
        
        add_liq.""amount0"" as add_amount0,
        add_liq.""amount1"" as add_amount1,
        
        add_liq.""amount0"" / 10 ^ p0.decimals * p0.median_price as add_amount0_usd,
        add_liq.""amount1"" / 10 ^ p1.decimals * p1.median_price as add_amount1_usd,
        
        token0.""contract_address"" as token0_address,
        token1.""contract_address"" as token1_address,
        
        p0.median_price,
        p1.median_price,
        
        collect.""amount0"" as remove_amount0,
        collect.""amount1"" as remove_amount1,
        
        collect.""amount0"" / 10 ^ p0.decimals * p0.median_price as remove_amount0_usd,
        collect.""amount1"" / 10 ^ p1.decimals * p1.median_price as remove_amount1_usd,
        
        (collect.""amount0"" / 10 ^ p0.decimals * p0.median_price - add_liq.""amount0"" / 10 ^ p0.decimals * p0.median_price) + (collect.""amount1"" / 10 ^ p1.decimals * p1.median_price - add_liq.""amount1"" / 10 ^ p1.decimals * p1.median_price) as revenue_usd,
        
        CASE
            WHEN tx_add.gas_price != 0 THEN tx_add.gas_used * tx_add.gas_price * weth_price.median_price / 10 ^ 18
            ELSE 0
        END add_cost_usd,
        
        CASE
            WHEN tx_add.gas_price != 0 THEN tx_remove.gas_used * tx_remove.gas_price * weth_price.median_price / 10 ^ 18
            ELSE eth_miner_bribe.value * weth_price.median_price / 10 ^ 18
        END remove_cost_usd,
        
        CASE
            WHEN tx_add.gas_price != 0 THEN tx_add.gas_used * tx_add.gas_price * weth_price.median_price / 10 ^ 18 + tx_remove.gas_used * tx_remove.gas_price * weth_price.median_price / 10 ^ 18  + (eth_miner_bribe.value * weth_price.median_price / 10 ^ 18)
            ELSE eth_miner_bribe.value * weth_price.median_price / 10 ^ 18
        END cost_usd,
    
        CASE
            WHEN tx_add.gas_price != 0 THEN
            (collect.""amount0"" / 10 ^ p0.decimals * p0.median_price - add_liq.""amount0"" / 10 ^ p0.decimals * p0.median_price) + (collect.""amount1"" / 10 ^ p1.decimals * p1.median_price - add_liq.""amount1"" / 10 ^ p1.decimals * p1.median_price) 
                - (tx_add.gas_used * tx_add.gas_price * weth_price.median_price / 10 ^ 18 + tx_remove.gas_used * tx_remove.gas_price * weth_price.median_price / 10 ^ 18) - eth_miner_bribe.value * weth_price.median_price / 10 ^ 18
            ELSE
            (collect.""amount0"" / 10 ^ p0.decimals * p0.median_price - add_liq.""amount0"" / 10 ^ p0.decimals * p0.median_price) + (collect.""amount1"" / 10 ^ p1.decimals * p1.median_price - add_liq.""amount1"" / 10 ^ p1.decimals * p1.median_price) 
                - eth_miner_bribe.value * weth_price.median_price / 10 ^ 18
        END profit_usd
        
    --    ""output_tokenId""
    --    tokenURI.""output_0""
    FROM uniswap_v3.""NonfungibleTokenPositionManager_call_burn"" remove
    INNER JOIN uniswap_v3.""NonfungibleTokenPositionManager_call_mint"" add ON add.call_block_number = remove.call_block_number and 
                                                                             add.""output_tokenId"" = remove.""tokenId""
                                                        
    INNER JOIN uniswap_v3.""NonfungibleTokenPositionManager_evt_Collect"" collect on remove.""call_tx_hash"" = collect.evt_tx_hash AND remove.""tokenId"" = collect.""tokenId""
    INNER JOIN uniswap_v3.""NonfungibleTokenPositionManager_evt_IncreaseLiquidity"" add_liq ON add_liq.evt_tx_hash = add.call_tx_hash
    
    LEFT JOIN erc20.""ERC20_evt_Transfer"" token0 ON token0.value = add_liq.""amount0""and token0.""evt_tx_hash"" = add_liq.""evt_tx_hash"" 
    LEFT JOIN erc20.""ERC20_evt_Transfer"" token1 ON token1.value = add_liq.""amount1""and token1.""evt_tx_hash"" = add_liq.""evt_tx_hash"" 
    
    LEFT JOIN prices.prices_from_dex_data p0 ON p0.""contract_address"" = token0.""contract_address"" AND p0.hour = date_trunc('hour', token0.evt_block_time)
    LEFT JOIN prices.prices_from_dex_data p1 ON p1.""contract_address"" = token1.""contract_address"" AND p1.hour = date_trunc('hour', token1.evt_block_time)
    
    LEFT JOIN prices.prices_from_dex_data weth_price ON weth_price.symbol = 'WETH' AND weth_price.hour = date_trunc('hour', add.call_block_time)
    
    INNER JOIN ethereum.transactions tx_add ON tx_add.hash = add.call_tx_hash
    INNER JOIN ethereum.transactions tx_remove ON tx_remove.hash = remove.call_tx_hash
    
    INNER JOIN ethereum.blocks block on tx_remove.block_number = block.""number""
    
    -- pre eip, there might be a bribe
    LEFT JOIN  ethereum.traces eth_miner_bribe ON eth_miner_bribe.tx_hash = remove.""call_tx_hash"" AND eth_miner_bribe.success = True AND eth_miner_bribe.""to"" = block.miner AND (call_type NOT IN ('delegatecall', 'callcode', 'staticcall') OR call_type IS null)
    
    
    WHERE token0.contract_address IS NOT NULL 
        AND token1.contract_address IS NOT NULL

) t
WHERE cost_usd != 0
ORDER BY 1 DESC)



SELECT
""to"" as ""MEV BOT"",
COUNT(DISTINCT(add_hash)) as total_jit_actions,
SUM(profit_usd) as total_profit,
AVG(profit_usd) as avg_profit,
SUM(revenue_usd) as total_revenue,
SUM(cost_usd) as total_costs,
AVG(revenue_usd) as avg_revenue
FROM temp
GROUP BY ""to""
ORDER BY SUM(profit_usd) DESC
"
1512534,top_dex_post_merge,,"[{""id"": 2543877, ""type"": ""chart"", ""name"": ""MEV Bots on DEXes Post Merge: Total Volume and % of Total Pair Volume Related to Potential MEV"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""$,.00"", ""columnMapping"": {""project"": ""x"", ""volume_usd"": ""y"", ""percent_volume_related_to_mev"": ""y""}, ""seriesOptions"": {""volume_usd"": {""type"": ""column"", ""color"": ""#01c5e7"", ""yAxis"": 0, ""zIndex"": 0}, ""percent_volume_related_to_mev"": {""type"": ""line"", ""color"": ""#000000"", ""yAxis"": 1, ""zIndex"": 1}}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""column"", ""numberFormatRightYAxisSeries"": ""%""}, ""created_at"": ""2022-11-02T21:07:00.198273+00:00"", ""__typename"": ""visualizations""}, {""id"": 2543879, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-11-02T21:07:00.198273+00:00"", ""__typename"": ""visualizations""}, {""id"": 2543878, ""type"": ""chart"", ""name"": ""MEV Bots on DEXes Post Merge: Total Swaps and % of Total Pair Swaps Related to Potential MEV"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": "","", ""columnMapping"": {""project"": ""x"", ""total_swaps"": ""y"", ""percent_swaps_related_to_mev"": ""y""}, ""seriesOptions"": {""total_swaps"": {""type"": ""column"", ""color"": ""#ffb000"", ""yAxis"": 0, ""zIndex"": 0}, ""percent_swaps_related_to_mev"": {""type"": ""line"", ""color"": ""#000000"", ""yAxis"": 1, ""zIndex"": 1}}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""column"", ""numberFormatRightYAxisSeries"": ""%""}, ""created_at"": ""2022-11-02T21:07:00.198273+00:00"", ""__typename"": ""visualizations""}, {""id"": 2544334, ""type"": ""chart"", ""name"": ""DEX Market Share for MEV Bot Volume Post Merge"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""$,.00"", ""columnMapping"": {""project"": ""x"", ""volume_usd"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2022-11-02T22:08:02.018376+00:00"", ""__typename"": ""visualizations""}, {""id"": 2544339, ""type"": ""chart"", ""name"": ""DEX Market Share for MEV Bot Swaps Post Merge"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": "","", ""columnMapping"": {""project"": ""x"", ""total_swaps"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2022-11-02T22:08:39.922718+00:00"", ""__typename"": ""visualizations""}]","with temp as (SELECT
project,
d.tx_hash,
d.tx_to,
amount_usd,
CASE WHEN tx_to in ('0x000000000dfde7deaf24138722987c9a6991e2d4',
                                '0x4cb18386e5d1f34dc6eea834bf3534a970a3f8e7',
                                '0x00000000003b3cc22af3ae1eac0440bcee416b40',
                                '0xa57bd00134b2850b2a1c55860c9e9ea100fdd6cf',
                                '0x98c3d3183c4b8a650614ad179a1a98be0a8d6b8e',
                                '0x8aff5ca996f77487a4f04f1ce905bf3d27455580',
                                '0x45716d9eddbc332df1d42b9f540fbebed671b20f',
                                '0x000000000035b5e5ad9019092c665357240f594e',
                                '0xa69babef1ca67a37ffaf7a485dfff3382056e78c',
                                '0xbeefbabeea323f07c59926295205d3b7a17e8638',
                                '0x57c1e0c2adf6eecdb135bcf9ec5f23b319be2c94',
                                '0xf71530c1f043703085b42608ff9dcccc43210a8e',
                                '0xbadc0defafcf6d4239bdf0b66da4d7bd36fcf05a',
                                '0x507888e987257a8dde6f8afa46375cefe2cbf504',
                                '0xf6765a4669c3e7bca52a81eaec10e21caedf1268',
                                '0x761d80987a36fc271875ea4de17539e8c82ae51d',
                                '0x2f1d79860cf6ea3f4b3b734153b52815773c0638',
                                '0x58418d6c83efab01ed78b0ac42e55af01ee77dba',
                                '0x80d4230c0a68fc59cb264329d3a717fcaa472a13',
                                '0xc8046263d5b5544f6413a98b4693488499195a46',
                                '0x00000000c2cf7648c169b25ef1c217864bfa38cc',
                                '0x114702cd1fd3940f0f74d7ce12e7fb0865b3cde4',
                                '0xe8c060f8052e07423f71d445277c61ac5138a2e5',
                                '0x0000000000a84d1a9b0063a910315c7ffa9cd248',
                                '0xe4000004000bd8006e00720000d27d1fa000d43e',
                                '0x566cc3c77ad1b2dbf12928fe73709a2deefa4e5a',
                                '0x25f12db13b19bc9e000f0070a2efbf8353dd8a65',
                                '0x321bf29f2d5dad204b5e25c31cac4348b6f29f96',
                                '0x0eae044f00b0af300500f090ea00027097d03000',
                                '0x5c57ac8dc5d8589dab9d422993ed3de8cc244151',
                                '0x0000000000007f150bd6f54c40a34d7c3d5e9f56',
                                '0xe06ffa8146bbdeccbaaf72b6043b29091071aeb8',
                                '0x6af1a16fde7346e7729fa921ad2ddf6a462061e2',
                                '0x70526cc7a6d6320b44122ea9d2d07670accc85a1',
                                '0xa1006d0051a35b0000f961a8000000009ea8d2db',
                                '0x81153f0889ab398c4acb42cb58b565a5392bba95',
                                '0x01ff6318440f7d5553a82294d78262d5f5084eff',
                                '0x0000000000590b74eb97457bf7b3ff6d63c6fde2',
                                '0xcf99a481076186a44070c3158cf75c8cf00f84fc',
                                '0xacd4ec996aad815efe72a11944188c6db6c30176',
                                '0x00000000008c4fb1c916e0c88fd4cc402d935e7d',
                                '0x2bb7cbc1d3d61a9ad01d0c59ec4ef5132177ff22',
                                '0x0000000099cb7fc48a935bceb9f05bbae54e8987',
                                '0xaa88106ab6c7a666d13bc096a435aeb803ce4185',
                                '0xf38be77ac9a0643ada22dec416eb3158598614bb',
                                '0x3ea22feb0761422dfe560dbe826f7a6dfbbd643f',
                                '0x36c219ff7ab5fb88c3d77e778da20dc9629ad752',
                                '0xd8c07491caa1edf960db3ceff387426d53942ea0',
                                '0x95a4cb0ecbae0ae59b64c8f3257a5af4277dda0e'
                                ) then 'MEV Bot' ELSE 'Other' END as mev_bot
FROM dex.trades d
INNER JOIN (SELECT hash, block_number FROM ethereum.transactions WHERE block_number > 15537393  GROUP BY hash,block_number) e ON d.tx_hash = e.hash
WHERE amount_usd > 0
and blockchain = 'ethereum'
),

all_t as (
SELECT
project,
AVG(amount_usd) as avg_volume,
SUM(amount_usd) as volume_usd,
COUNT(DISTINCT(tx_hash)) as total_swaps
FROM temp
GROUP BY project
ORDER BY COUNT(DISTINCT(tx_hash)) DESC
),


mev as (SELECT
--row_number() OVER (ORDER BY COUNT(DISTINCT(tx_hash)) DESC) as rank_number,
project,
AVG(amount_usd) as avg_volume,
SUM(amount_usd) as volume_usd,
COUNT(DISTINCT(tx_hash)) as total_swaps
FROM temp
WHERE mev_bot = 'MEV Bot'
GROUP BY project
ORDER BY COUNT(DISTINCT(tx_hash)) DESC
)

SELECT 
--rank_number,
m.project,
m.volume_usd,
m.volume_usd  / a.volume_usd as percent_volume_related_to_mev,
m.total_swaps,
m.total_swaps / a.total_swaps as percent_swaps_related_to_mev,
m.avg_volume
FROM mev as m
LEFT JOIN all_t a ON m.project = a.project
ORDER BY m.volume_usd DESC

"
1480805,t2_date_top_arbs,,"[{""id"": 2543533, ""type"": ""chart"", ""name"": ""Top 100 Arbitrages On Uniswap"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""tickFormat"": """"}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""$,.00"", ""columnMapping"": {""ranking"": ""x"", ""total_profit"": ""y"", ""miner_payment_usd"": ""y""}, ""seriesOptions"": {""total_profit"": {""type"": ""column"", ""color"": ""#B2B2B2"", ""yAxis"": 0, ""zIndex"": 0}, ""miner_payment_usd"": {""type"": ""line"", ""color"": ""#FF007A"", ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-11-02T20:18:34.48548+00:00"", ""__typename"": ""visualizations""}, {""id"": 2543550, ""type"": ""chart"", ""name"": ""Top 100 Arbitrages - Total Profit by Token Pair"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""columnMapping"": {""token_pair"": ""x"", ""total_profit"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2022-11-02T20:20:52.012375+00:00"", ""__typename"": ""visualizations""}, {""id"": 2543557, ""type"": ""counter"", ""name"": ""Largest Arbitrage"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""counterColName"": ""total_profit""}, ""created_at"": ""2022-11-02T20:22:14.931522+00:00"", ""__typename"": ""visualizations""}, {""id"": 2543559, ""type"": ""counter"", ""name"": ""3rd Largest Arbitrage"", ""options"": {""rowNumber"": 3, ""stringPrefix"": ""$"", ""counterColName"": ""total_profit""}, ""created_at"": ""2022-11-02T20:22:18.827721+00:00"", ""__typename"": ""visualizations""}, {""id"": 2543558, ""type"": ""counter"", ""name"": ""2nd Largest Arbitrage"", ""options"": {""rowNumber"": 2, ""stringPrefix"": ""$"", ""counterColName"": ""total_profit""}, ""created_at"": ""2022-11-02T20:22:17.195177+00:00"", ""__typename"": ""visualizations""}, {""id"": 2501976, ""type"": ""table"", ""name"": ""Query results"", ""options"": {""columns"": [{""name"": ""max_profit"", ""numberFormat"": ""$,.00""}, {""name"": ""total_profit"", ""numberFormat"": ""$,.0""}, {""name"": ""total_transactions"", ""numberFormat"": "",""}, {""name"": ""avg_profit_MEV"", ""numberFormat"": ""$,.00""}, {""name"": ""total_miner_payments"", ""numberFormat"": ""$,.00""}, {""name"": ""avg_miner_payment"", ""numberFormat"": ""$,.00""}]}, ""created_at"": ""2022-10-29T20:47:19.728422+00:00"", ""__typename"": ""visualizations""}]","with temp as(SELECT 
row_number() OVER (PARTITION BY id ORDER BY m.gross_profit_usd - m.miner_payment_usd DESC) as arb_rank,
id as arb_id,
token_pair,
tx_hash,
DATE(block_timestamp) as date_time,
account_address,
(m.gross_profit_usd - m.miner_payment_usd)as total_profit,
gross_profit_usd,
miner_payment_usd,
m.protocols
FROM flashbots.mev_summary as m
INNER JOIN flashbots.arbitrages a ON a.transaction_hash = m.transaction_hash
LEFT JOIN (
SELECT
tx_hash,
token_pair
FROM dex.trades
WHERE project = 'uniswap'
) u on u.tx_hash = m.transaction_hash
WHERE m.protocols LIKE '%uniswap%'
AND m.type == 'arbitrage'
AND m.error IS NULL
ORDER BY m.gross_profit_usd - m.miner_payment_usd DESC
)

SELECT 
row_number() OVER (ORDER BY total_profit DESC) as ranking,
tx_hash,
token_pair,
date_time,
account_address,
total_profit,
gross_profit_usd,
miner_payment_usd,
protocols
FROM temp
WHERE arb_rank = 1
ORDER BY total_profit DESC
LIMIT 100"
1481483,top_pairs_post_merge,,"[{""id"": 2535953, ""type"": ""chart"", ""name"": ""MEV Bots on Uniswap Post Merge: Total Volume and % of Total Pair Volume Related to Potential MEV"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""$,.00"", ""columnMapping"": {""token_pair"": ""x"", ""volume_usd"": ""y"", ""percent_volume_related_to_mev"": ""y""}, ""seriesOptions"": {""volume_usd"": {""type"": ""column"", ""color"": ""#FF007A"", ""yAxis"": 0, ""zIndex"": 0}, ""percent_volume_related_to_mev"": {""type"": ""line"", ""color"": ""#000000"", ""yAxis"": 1, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column"", ""numberFormatRightYAxisSeries"": ""%""}, ""created_at"": ""2022-11-02T05:52:37.303194+00:00"", ""__typename"": ""visualizations""}, {""id"": 2535967, ""type"": ""chart"", ""name"": ""MEV Bots on Uniswap Post Merge: Total Swaps and % of Total Pair Swaps Related to Potential MEV"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": "",.00"", ""columnMapping"": {""token_pair"": ""x"", ""total_swaps"": ""y"", ""percent_swaps_related_to_mev"": ""y""}, ""seriesOptions"": {""total_swaps"": {""type"": ""column"", ""color"": ""#B2B2b2"", ""yAxis"": 0, ""zIndex"": 0}, ""percent_swaps_related_to_mev"": {""type"": ""line"", ""color"": ""#000000"", ""yAxis"": 1, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column"", ""numberFormatRightYAxisSeries"": ""%""}, ""created_at"": ""2022-11-02T05:54:41.5559+00:00"", ""__typename"": ""visualizations""}, {""id"": 2502739, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-10-29T23:30:17.726732+00:00"", ""__typename"": ""visualizations""}]","with temp as (SELECT
block_date,
token_pair,
d.tx_hash,
d.tx_to,
amount_usd,
CASE WHEN tx_to in ('0x000000000dfde7deaf24138722987c9a6991e2d4',
                                '0x4cb18386e5d1f34dc6eea834bf3534a970a3f8e7',
                                '0x00000000003b3cc22af3ae1eac0440bcee416b40',
                                '0xa57bd00134b2850b2a1c55860c9e9ea100fdd6cf',
                                '0x98c3d3183c4b8a650614ad179a1a98be0a8d6b8e',
                                '0x8aff5ca996f77487a4f04f1ce905bf3d27455580',
                                '0x45716d9eddbc332df1d42b9f540fbebed671b20f',
                                '0x000000000035b5e5ad9019092c665357240f594e',
                                '0xa69babef1ca67a37ffaf7a485dfff3382056e78c',
                                '0xbeefbabeea323f07c59926295205d3b7a17e8638',
                                '0x57c1e0c2adf6eecdb135bcf9ec5f23b319be2c94',
                                '0xf71530c1f043703085b42608ff9dcccc43210a8e',
                                '0xbadc0defafcf6d4239bdf0b66da4d7bd36fcf05a',
                                '0x507888e987257a8dde6f8afa46375cefe2cbf504',
                                '0xf6765a4669c3e7bca52a81eaec10e21caedf1268',
                                '0x761d80987a36fc271875ea4de17539e8c82ae51d',
                                '0x2f1d79860cf6ea3f4b3b734153b52815773c0638',
                                '0x58418d6c83efab01ed78b0ac42e55af01ee77dba',
                                '0x80d4230c0a68fc59cb264329d3a717fcaa472a13',
                                '0xc8046263d5b5544f6413a98b4693488499195a46',
                                '0x00000000c2cf7648c169b25ef1c217864bfa38cc',
                                '0x114702cd1fd3940f0f74d7ce12e7fb0865b3cde4',
                                '0xe8c060f8052e07423f71d445277c61ac5138a2e5',
                                '0x0000000000a84d1a9b0063a910315c7ffa9cd248',
                                '0xe4000004000bd8006e00720000d27d1fa000d43e',
                                '0x566cc3c77ad1b2dbf12928fe73709a2deefa4e5a',
                                '0x25f12db13b19bc9e000f0070a2efbf8353dd8a65',
                                '0x321bf29f2d5dad204b5e25c31cac4348b6f29f96',
                                '0x0eae044f00b0af300500f090ea00027097d03000',
                                '0x5c57ac8dc5d8589dab9d422993ed3de8cc244151',
                                '0x0000000000007f150bd6f54c40a34d7c3d5e9f56',
                                '0xe06ffa8146bbdeccbaaf72b6043b29091071aeb8',
                                '0x6af1a16fde7346e7729fa921ad2ddf6a462061e2',
                                '0x70526cc7a6d6320b44122ea9d2d07670accc85a1',
                                '0xa1006d0051a35b0000f961a8000000009ea8d2db',
                                '0x81153f0889ab398c4acb42cb58b565a5392bba95',
                                '0x01ff6318440f7d5553a82294d78262d5f5084eff',
                                '0x0000000000590b74eb97457bf7b3ff6d63c6fde2',
                                '0xcf99a481076186a44070c3158cf75c8cf00f84fc',
                                '0xacd4ec996aad815efe72a11944188c6db6c30176',
                                '0x00000000008c4fb1c916e0c88fd4cc402d935e7d',
                                '0x2bb7cbc1d3d61a9ad01d0c59ec4ef5132177ff22',
                                '0x0000000099cb7fc48a935bceb9f05bbae54e8987',
                                '0xaa88106ab6c7a666d13bc096a435aeb803ce4185',
                                '0xf38be77ac9a0643ada22dec416eb3158598614bb',
                                '0x3ea22feb0761422dfe560dbe826f7a6dfbbd643f',
                                '0x36c219ff7ab5fb88c3d77e778da20dc9629ad752',
                                '0xd8c07491caa1edf960db3ceff387426d53942ea0',
                                '0x95a4cb0ecbae0ae59b64c8f3257a5af4277dda0e'
                                ) then 'MEV Bot' ELSE 'Other' END as mev_bot
FROM dex.trades d
INNER JOIN (SELECT hash, block_number FROM ethereum.transactions WHERE block_number > 15537393) e ON d.tx_hash = e.hash
WHERE project = 'uniswap'
and amount_usd > 0

and token_pair IS NOT NULL
),

all_t as (
SELECT
token_pair,
AVG(amount_usd) as avg_volume,
SUM(amount_usd) as volume_usd,
COUNT(DISTINCT(tx_hash)) as total_swaps
FROM temp
GROUP BY token_pair
ORDER BY COUNT(DISTINCT(tx_hash)) DESC
),


mev as (SELECT
--row_number() OVER (ORDER BY COUNT(DISTINCT(tx_hash)) DESC) as rank_number,
token_pair,
AVG(amount_usd) as avg_volume,
SUM(amount_usd) as volume_usd,
COUNT(DISTINCT(tx_hash)) as total_swaps
FROM temp
WHERE mev_bot = 'MEV Bot'
GROUP BY token_pair
ORDER BY COUNT(DISTINCT(tx_hash)) DESC
LIMIT 200)

SELECT 
--rank_number,
m.token_pair,
m.volume_usd,
m.volume_usd  / a.volume_usd as percent_volume_related_to_mev,
m.total_swaps,
m.total_swaps / a.total_swaps as percent_swaps_related_to_mev,
m.avg_volume
FROM mev as m
LEFT JOIN all_t a ON m.token_pair = a.token_pair
ORDER BY m.total_swaps DESC
LIMIT 20 
"
1480889,t2_date_top_arbs_search,,"[{""id"": 2502074, ""type"": ""table"", ""name"": ""Query results"", ""options"": {""columns"": [{""name"": ""max_profit"", ""numberFormat"": ""$,.00""}, {""name"": ""total_profit"", ""numberFormat"": ""$,.00"", ""coloredNegativeValues"": true, ""coloredPositiveValues"": true}, {""name"": ""total_transactions"", ""numberFormat"": "",""}, {""name"": ""avg_profit_MEV"", ""numberFormat"": ""$,.00""}, {""name"": ""total_miner_payments"", ""numberFormat"": ""$,.00""}, {""name"": ""avg_miner_payment"", ""numberFormat"": ""$,.00""}, {""name"": ""total_arbs"", ""type"": ""progressbar"", ""coloredNegativeValues"": false, ""coloredPositiveValues"": false}, {""name"": ""total_arbs"", ""coloredNegativeValues"": false}, {""name"": ""total_arbs"", ""type"": ""progressbar""}, {""name"": ""avg_profit"", ""title"": """", ""numberFormat"": ""$0,.00"", ""coloredNegativeValues"": true, ""coloredPositiveValues"": true}, {""name"": ""perc_profitable"", ""type"": ""normal"", ""numberFormat"": ""%"", ""coloredNegativeValues"": false, ""coloredPositiveValues"": false}, {""name"": ""perc_profitable"", ""coloredNegativeValues"": false}, {""name"": ""perc_profitable"", ""type"": ""progressbar""}, {""name"": ""time_diff_between"", ""numberFormat"": ""0.00""}, {""name"": ""gross_profit_usd"", ""numberFormat"": ""$0,.00""}, {""name"": ""miner_payment"", ""numberFormat"": ""$0,.00""}, {""name"": ""avg_profit_per_account"", ""numberFormat"": ""$0,.00""}, {""name"": ""profitable"", ""isHidden"": true}, {""name"": ""overpaid_miners"", ""isHidden"": true}, {""name"": ""more_than_50k"", ""isHidden"": true}, {""name"": ""top_x"", ""isHidden"": true}, {""name"": ""counter"", ""isHidden"": true}, {""name"": ""total_mev"", ""isHidden"": true}]}, ""created_at"": ""2022-10-29T21:06:59.648315+00:00"", ""__typename"": ""visualizations""}, {""id"": 2502447, ""type"": ""counter"", ""name"": ""Top Address Profit on Uniswap"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""counterColName"": ""total_profit""}, ""created_at"": ""2022-10-29T22:25:08.922753+00:00"", ""__typename"": ""visualizations""}, {""id"": 2502448, ""type"": ""counter"", ""name"": ""Second Largest Profit on Uniswap"", ""options"": {""rowNumber"": 2, ""stringPrefix"": ""$"", ""counterColName"": ""total_profit""}, ""created_at"": ""2022-10-29T22:25:34.950127+00:00"", ""__typename"": ""visualizations""}, {""id"": 2502453, ""type"": ""counter"", ""name"": ""Third Largest Profit on Uniswap"", ""options"": {""rowNumber"": 3, ""stringPrefix"": ""$"", ""counterColName"": ""total_profit"", ""coloredPositiveValues"": false}, ""created_at"": ""2022-10-29T22:26:16.354975+00:00"", ""__typename"": ""visualizations""}, {""id"": 2502491, ""type"": ""chart"", ""name"": ""Is the Address Profitable on Uniswap?"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""columnMapping"": {""counter"": ""y"", ""profitable"": ""x""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2022-10-29T22:33:59.432151+00:00"", ""__typename"": ""visualizations""}, {""id"": 2502499, ""type"": ""chart"", ""name"": ""Made more than $50k in MEV related Activities on Uniswap"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""columnMapping"": {""counter"": ""y"", ""more_than_50k"": ""x""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""pie""}, ""created_at"": ""2022-10-29T22:35:52.966619+00:00"", ""__typename"": ""visualizations""}, {""id"": 2502514, ""type"": ""chart"", ""name"": ""Comparison Top 10 MEV Searchers by Profits vs Others in terms of Total Arbs"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""columnMapping"": {""top_x"": ""x"", ""total_arbs"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2022-10-29T22:39:26.124444+00:00"", ""__typename"": ""visualizations""}, {""id"": 2502493, ""type"": ""chart"", ""name"": ""Did the Address Over pay Miners?"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""columnMapping"": {""counter"": ""y"", ""overpaid_miners"": ""x""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2022-10-29T22:34:55.820078+00:00"", ""__typename"": ""visualizations""}, {""id"": 2502444, ""type"": ""counter"", ""name"": ""Total Searcher Addresses"", ""options"": {""rowNumber"": 1, ""counterColName"": ""total_mev""}, ""created_at"": ""2022-10-29T22:24:13.93585+00:00"", ""__typename"": ""visualizations""}]","WITH temp as (SELECT
row_number() OVER (ORDER BY SUM(total_profit) DESC) as rank_number,
account_address,
SUM(total_profit) as total_profit,
AVG(total_profit) as avg_profit,
COUNT(DISTINCT(arb_id)) as total_arbs,
SUM(was_profitable) / COUNT(was_profitable) as perc_profitable,
(MAX(date_time) - MIN(date_time))::int as activity_span,
COUNT(DISTINCT(arb_id))  / (MAX(date_time) - MIN(date_time))::int as time_diff_between,
SUM(gross_profit_usd) as gross_profit_usd,
SUM(miner_payment_usd) as miner_payment,
AVG(miner_payment_usd) as avg_miner_payment,
AVG(SUM(total_profit)) OVER (ORDER BY SUM(total_profit)) as avg_profit_per_account,
1 as counter,
row_number() OVER (ORDER BY SUM(total_profit)) as total_mev
FROM (SELECT 
id as arb_id,
DATE(block_timestamp) as date_time,
account_address,
(m.gross_profit_usd - m.miner_payment_usd) as total_profit,
CASE WHEN (m.gross_profit_usd - m.miner_payment_usd) > 0 THEN 1 ELSE 0 END as was_profitable,
gross_profit_usd,
miner_payment_usd,
m.protocols
FROM flashbots.mev_summary as m
INNER JOIN flashbots.arbitrages a ON a.transaction_hash = m.transaction_hash
WHERE m.protocols LIKE '%uniswap%'
AND m.type == 'arbitrage'
AND m.error IS NULL
) GROUP BY account_address
HAVING total_profit IS NOT NULL
ORDER BY total_profit DESC)

SELECT
rank_number,
account_address,
total_profit,
avg_profit,
total_arbs,
perc_profitable,
activity_span,
time_diff_between,
gross_profit_usd,
miner_payment,
avg_miner_payment,
avg_profit_per_account,
CASE WHEN total_profit > 0 THEN 'Profitable' ELSE 'Unprofitable' END as profitable,
CASE WHEN total_profit < 0 and gross_profit_usd > 0 THEN 'Overpaid Miners' ELSE 'NA' END as overpaid_miners,
CASE WHEN total_profit > 10000 THEN 'Made more than $10k' ELSE 'NA' END as more_than_50k,
CASE WHEN rank_number <= 10 THEN 'Top' ELSE 'NA' END as top_x,
counter,
total_mev
FROM temp
ORDER BY total_profit DESC"
1510075,t2_uni_vs_all_non_arb,,"[{""id"": 2540331, ""type"": ""table"", ""name"": ""Query results"", ""options"": {""columns"": [{""name"": ""max_profit"", ""numberFormat"": ""$,.00""}, {""name"": ""total_profit"", ""numberFormat"": ""$,.0""}, {""name"": ""total_transactions"", ""numberFormat"": "",""}, {""name"": ""avg_profit_MEV"", ""numberFormat"": ""$,.00""}, {""name"": ""total_miner_payments"", ""numberFormat"": ""$,.00""}, {""name"": ""avg_miner_payment"", ""numberFormat"": ""$,.00""}, {""name"": ""volume"", ""numberFormat"": ""$0,.00""}, {""name"": ""no_transactions"", ""numberFormat"": "",""}, {""name"": ""no_blocks"", ""numberFormat"": "",""}]}, ""created_at"": ""2022-11-02T14:32:09.69193+00:00"", ""__typename"": ""visualizations""}, {""id"": 2542792, ""type"": ""chart"", ""name"": ""Total Uniswap Volume by Date - MEV vs Non Mev"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack"", ""percentValues"": true}, ""reverseX"": false, ""columnMapping"": {""volume"": ""y"", ""date_time"": ""x"", ""mev_related"": ""series""}, ""seriesOptions"": {""Regular"": {""type"": ""column"", ""color"": ""#B2b2b2"", ""yAxis"": 0, ""zIndex"": 1}, ""MEV Related"": {""type"": ""column"", ""color"": ""#FF007a"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-11-02T18:37:17.326928+00:00"", ""__typename"": ""visualizations""}, {""id"": 2542810, ""type"": ""chart"", ""name"": ""Total Uniswap Distinct Blocks by Date - MEV vs Non Mev"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack"", ""percentValues"": true}, ""reverseX"": false, ""columnMapping"": {""date_time"": ""x"", ""no_blocks"": ""y"", ""mev_related"": ""series""}, ""seriesOptions"": {""Regular"": {""type"": ""column"", ""color"": ""#B2b2b2"", ""yAxis"": 0, ""zIndex"": 1}, ""MEV Related"": {""type"": ""column"", ""color"": ""#FF007a"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": false, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-11-02T18:38:52.550108+00:00"", ""__typename"": ""visualizations""}, {""id"": 2542867, ""type"": ""chart"", ""name"": ""Total Uniswap Distinct Blocks - MEV vs Non Mev"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""columnMapping"": {""no_blocks"": ""y"", ""mev_related"": ""x""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2022-11-02T18:41:36.094042+00:00"", ""__typename"": ""visualizations""}, {""id"": 2542870, ""type"": ""chart"", ""name"": ""Total Uniswap Volume - MEV vs Non Mev"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""columnMapping"": {""volume"": ""y"", ""mev_related"": ""x""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2022-11-02T18:41:46.461652+00:00"", ""__typename"": ""visualizations""}, {""id"": 2542784, ""type"": ""chart"", ""name"": ""Total Uniswap Transactions by Date - MEV vs Non Mev"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack"", ""percentValues"": true}, ""reverseX"": false, ""columnMapping"": {""date_time"": ""x"", ""mev_related"": ""series"", ""no_transactions"": ""y""}, ""seriesOptions"": {""Regular"": {""type"": ""column"", ""color"": ""#B2b2b2"", ""yAxis"": 0, ""zIndex"": 1}, ""MEV Related"": {""type"": ""column"", ""color"": ""#FF007A"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-11-02T18:35:57.157676+00:00"", ""__typename"": ""visualizations""}, {""id"": 2542940, ""type"": ""chart"", ""name"": ""Total Uniswap Transactions - MEV vs Non Mev"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""columnMapping"": {""mev_related"": ""x"", ""no_transactions"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2022-11-02T18:53:01.933392+00:00"", ""__typename"": ""visualizations""}]","with uni_dex as (SELECT 
block_time,
tx_hash,
amount_usd,
block_number
FROM dex.trades
LEFT JOIN (SELECT hash, block_number FROM ethereum.transactions) ON tx_hash = hash
WHERE project = 'uniswap'
and blockchain = 'ethereum'
and DATE(block_time) >= '2020-09-01'
and DATE(block_time) < '2022-09-15'
),


mev_summary as (
SELECT 
transaction_hash,
gross_profit_usd - miner_payment_usd as profit
FROM flashbots.mev_summary
WHERE protocols LIKE '%uniswap%'
AND error IS NULL
),

temp as (SELECT 
CASE WHEN transaction_hash IS NULL THEN 'Regular' ELSE 'MEV Related' END AS mev_related,
block_time,
tx_hash,
amount_usd,
block_number,
profit
FROM uni_dex
LEFT JOIN mev_summary ON transaction_hash = tx_hash
)

SELECT 
date_trunc('Month',block_time) as date_time,
mev_related,
COUNT(DISTINCT(tx_hash)) as no_transactions,
SUM(amount_usd) as volume,
COUNT(DISTINCT(block_number)) as no_blocks
FROM temp
GROUP BY date_trunc('Month',block_time), mev_related
ORDER BY date_trunc('Month',block_time) DESC, mev_related"
1465720,t2_date,,"[{""id"": 2535519, ""type"": ""chart"", ""name"": ""Ratio of Miner Payments to MEV Revenue"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""0.00"", ""columnMapping"": {""date_time"": ""x"", ""ratio_miner_payment_gross_profit"": ""y""}, ""seriesOptions"": {""ratio_miner_payment_gross_profit"": {""type"": ""line"", ""color"": ""#b2b2b2"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""line""}, ""created_at"": ""2022-11-02T04:51:10.633065+00:00"", ""__typename"": ""visualizations""}, {""id"": 2480704, ""type"": ""chart"", ""name"": ""Total MEV Arbitrage Related Transactions on Uniswap Ethereum"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""columnMapping"": {""date_time"": ""x"", ""total_transactions"": ""y""}, ""seriesOptions"": {""total_transactions"": {""type"": ""column"", ""color"": ""#FF007A"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-10-27T04:30:57.663155+00:00"", ""__typename"": ""visualizations""}, {""id"": 2480513, ""type"": ""table"", ""name"": ""Query results"", ""options"": {""columns"": [{""name"": ""max_profit"", ""numberFormat"": ""$,.00""}, {""name"": ""total_profit"", ""numberFormat"": ""$,.0""}, {""name"": ""total_transactions"", ""numberFormat"": "",""}, {""name"": ""avg_profit_MEV"", ""numberFormat"": ""$,.00""}, {""name"": ""total_miner_payments"", ""numberFormat"": ""$,.00""}, {""name"": ""avg_miner_payment"", ""numberFormat"": ""$,.00""}]}, ""created_at"": ""2022-10-27T03:45:59.260858+00:00"", ""__typename"": ""visualizations""}, {""id"": 2480705, ""type"": ""chart"", ""name"": ""Total Profit and Max Trade Profit per Week"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""$,.00"", ""columnMapping"": {""date_time"": ""x"", ""max_profit"": ""y"", ""total_profit"": ""y""}, ""seriesOptions"": {""max_profit"": {""type"": ""line"", ""color"": ""#b2b2b2"", ""yAxis"": 0, ""zIndex"": 1}, ""total_profit"": {""type"": ""column"", ""color"": ""#FF007A"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""line""}, ""created_at"": ""2022-10-27T04:31:06.294109+00:00"", ""__typename"": ""visualizations""}, {""id"": 2535525, ""type"": ""chart"", ""name"": ""Average MEV Profit on Uniswap"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""-""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""$0.00"", ""columnMapping"": {""date_time"": ""x"", ""avg_profit_MEV"": ""y""}, ""seriesOptions"": {""avg_profit_MEV"": {""type"": ""line"", ""color"": ""#FF007A"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""line""}, ""created_at"": ""2022-11-02T04:52:16.648965+00:00"", ""__typename"": ""visualizations""}, {""id"": 2535646, ""type"": ""chart"", ""name"": ""Total & Average Miner Payment for Uniswap related MEV"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""$0.00"", ""columnMapping"": {""date_time"": ""x"", ""avg_miner_payment"": ""y"", ""total_miner_payments"": ""y""}, ""seriesOptions"": {""avg_miner_payment"": {""type"": ""line"", ""color"": ""#000000"", ""yAxis"": 1, ""zIndex"": 0}, ""total_miner_payments"": {""type"": ""column"", ""color"": ""#FF007A"", ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""line"", ""numberFormatRightYAxisSeries"": ""$0.00""}, ""created_at"": ""2022-11-02T05:09:14.210812+00:00"", ""__typename"": ""visualizations""}]","SELECT
date_trunc('week',block_timestamp) as date_time,
COUNT(DISTINCT(transaction_hash)) as total_transactions,
MAX(gross_profit_usd - miner_payment_usd) as max_profit,
SUM(gross_profit_usd - miner_payment_usd) as total_profit,
AVG(gross_profit_usd - miner_payment_usd) as avg_profit_MEV,
--AVG(miner_payment_usd / gross_profit_usd) as avg_perc_goes_to_miner,
--AVG(SUM(miner_payment_usd) / SUM(gross_profit_usd - miner_payment_usd)) OVER (ORDER BY date_trunc('week',block_timestamp)) as rolling_avg_perc_goes_to_miner,
SUM(miner_payment_usd) as total_miner_payments,
AVG(miner_payment_usd) as avg_miner_payment,
SUM(miner_payment_usd) / SUM(gross_profit_usd)  as ratio_miner_payment_gross_profit
FROM flashbots.mev_summary
WHERE protocols LIKE '%uniswap%'
AND error  IS NULL
GROUP BY date_trunc('week',block_timestamp)
ORDER BY date_trunc('week',block_timestamp) DESC"
1459486,t2,,"[{""id"": 2480499, ""type"": ""counter"", ""name"": ""Total Miner Payments"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""counterColName"": ""total_miner_payment_usd""}, ""created_at"": ""2022-10-27T03:44:29.502787+00:00"", ""__typename"": ""visualizations""}, {""id"": 2535621, ""type"": ""counter"", ""name"": ""Average Profit for MEV"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""counterColName"": ""avg_profit_MEV""}, ""created_at"": ""2022-11-02T05:05:17.328416+00:00"", ""__typename"": ""visualizations""}, {""id"": 2535652, ""type"": ""counter"", ""name"": ""Average Revenue for MEV on Uni"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""counterColName"": ""avg_gross_profit_MEV""}, ""created_at"": ""2022-11-02T05:10:17.173233+00:00"", ""__typename"": ""visualizations""}, {""id"": 2470639, ""type"": ""table"", ""name"": ""Query results"", ""options"": {""columns"": [{""name"": ""max_profit"", ""numberFormat"": ""$,.00""}, {""name"": ""total_profit"", ""numberFormat"": ""$,.0""}, {""name"": ""total_transactions"", ""numberFormat"": "",""}, {""name"": ""avg_profit_MEV"", ""numberFormat"": ""$,.00""}, {""name"": ""total_miner_payments"", ""numberFormat"": ""$,.00""}, {""name"": ""avg_miner_payment"", ""numberFormat"": ""$,.00""}, {""name"": ""total_miner_payment_usd"", ""title"": """", ""numberFormat"": ""$,.0""}]}, ""created_at"": ""2022-10-26T02:47:57.392105+00:00"", ""__typename"": ""visualizations""}, {""id"": 2480492, ""type"": ""counter"", ""name"": ""Max Profit on MEV Arbitrage"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""counterColName"": ""max_profit_MEV""}, ""created_at"": ""2022-10-27T03:43:29.4232+00:00"", ""__typename"": ""visualizations""}, {""id"": 2480497, ""type"": ""counter"", ""name"": ""Total Profit for MEV Arbritragers"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""counterColName"": ""total_profit""}, ""created_at"": ""2022-10-27T03:44:04.011556+00:00"", ""__typename"": ""visualizations""}, {""id"": 2480510, ""type"": ""counter"", ""name"": ""Average Miner Payment"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""$"", ""counterColName"": ""avg_miner_payment""}, ""created_at"": ""2022-10-27T03:45:36.100051+00:00"", ""__typename"": ""visualizations""}, {""id"": 2480488, ""type"": ""counter"", ""name"": ""Total MEV Related Transactions"", ""options"": {""rowNumber"": 1, ""counterColName"": ""total_transactions""}, ""created_at"": ""2022-10-27T03:43:03.478285+00:00"", ""__typename"": ""visualizations""}]","SELECT
""type"",
COUNT(DISTINCT(transaction_hash)) as total_transactions,
MAX(gross_profit_usd) as max_gross_profit,
SUM(gross_profit_usd) as total_gross_profit,
SUM(gross_profit_usd - miner_payment_usd) as total_profit,
MAX(gross_profit_usd - miner_payment_usd) as max_profit_MEV,
AVG(gross_profit_usd - miner_payment_usd) as avg_profit_MEV,
AVG(gross_profit_usd) as avg_gross_profit_MEV,
MIN(date(block_timestamp)) as min_date,
SUM(miner_payment_usd) as total_miner_payment_usd,
AVG(miner_payment_usd) as avg_miner_payment
FROM flashbots.mev_summary
WHERE protocols LIKE '%uniswap%'
AND error IS NULL
GROUP BY ""type"""
1480618,t2_uni_vs_all,,"[{""id"": 2501749, ""type"": ""counter"", ""name"": ""MEV Transactions on Uniswap on Other Protocls"", ""options"": {""rowNumber"": 1, ""counterColName"": ""total_transactions""}, ""created_at"": ""2022-10-29T20:01:08.389096+00:00"", ""__typename"": ""visualizations""}, {""id"": 2535716, ""type"": ""counter"", ""name"": ""MEV Transactions on Uniswap"", ""options"": {""rowNumber"": 2, ""counterColName"": ""total_transactions""}, ""created_at"": ""2022-11-02T05:19:10.736264+00:00"", ""__typename"": ""visualizations""}, {""id"": 2501783, ""type"": ""chart"", ""name"": ""MEV Activity Involves Uniswap"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""columnMapping"": {""uniswap_related"": ""x"", ""total_transactions"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2022-10-29T20:08:26.515835+00:00"", ""__typename"": ""visualizations""}, {""id"": 2501744, ""type"": ""table"", ""name"": ""Query results"", ""options"": {""columns"": [{""name"": ""max_profit"", ""numberFormat"": ""$,.00""}, {""name"": ""total_profit"", ""numberFormat"": ""$,.0""}, {""name"": ""total_transactions"", ""numberFormat"": "",""}, {""name"": ""avg_profit_MEV"", ""numberFormat"": ""$,.00""}, {""name"": ""total_miner_payments"", ""numberFormat"": ""$,.00""}, {""name"": ""avg_miner_payment"", ""numberFormat"": ""$,.00""}]}, ""created_at"": ""2022-10-29T20:01:08.389096+00:00"", ""__typename"": ""visualizations""}]","SELECT
uniswap_related,
COUNT(DISTINCT(transaction_hash)) as total_transactions,
MAX(profit) as max_profit,
SUM(profit) as total_profit,
AVG(profit) as avg_profit_MEV

FROM (
SELECT 
protocols,
transaction_hash,
gross_profit_usd - miner_payment_usd as profit,
CASE WHEN protocols LIKE '%uniswap%' THEN 'Uniswap Activity' ELSE 'Other' END as uniswap_related
FROM flashbots.mev_summary
WHERE error  IS NULL) u
GROUP BY uniswap_related"
1512357,t2_date_top_arbs_cdf,,"[{""id"": 2543660, ""type"": ""table"", ""name"": ""Query results"", ""options"": {""columns"": [{""name"": ""max_profit"", ""numberFormat"": ""$,.00""}, {""name"": ""total_profit"", ""numberFormat"": ""$,.0""}, {""name"": ""total_transactions"", ""numberFormat"": "",""}, {""name"": ""avg_profit_MEV"", ""numberFormat"": ""$,.00""}, {""name"": ""total_miner_payments"", ""numberFormat"": ""$,.00""}, {""name"": ""avg_miner_payment"", ""numberFormat"": ""$,.00""}, {""name"": ""arb_profit_pdf"", ""numberFormat"": ""%""}, {""name"": ""arb_profit_cdf"", ""numberFormat"": ""%""}]}, ""created_at"": ""2022-11-02T20:36:31.276105+00:00"", ""__typename"": ""visualizations""}, {""id"": 2543860, ""type"": ""chart"", ""name"": ""Cumulative Distribution Function for Total Profit on an Arbitrage"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""logarithmic""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": "".0000"", ""columnMapping"": {""total_profit"": ""x"", ""arb_profit_cdf"": ""y""}, ""seriesOptions"": {""arb_profit_cdf"": {""type"": ""column"", ""color"": ""#FF007A"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""line""}, ""created_at"": ""2022-11-02T21:04:34.307804+00:00"", ""__typename"": ""visualizations""}]","with temp as(SELECT 
row_number() OVER (PARTITION BY id ORDER BY m.gross_profit_usd - m.miner_payment_usd DESC) as arb_rank,
id as arb_id,
account_address,
round((m.gross_profit_usd - m.miner_payment_usd)) as total_profit
FROM flashbots.mev_summary as m
INNER JOIN flashbots.arbitrages a ON a.transaction_hash = m.transaction_hash
LEFT JOIN (
SELECT
tx_hash,
token_pair
FROM dex.trades
WHERE project = 'uniswap'
) u on u.tx_hash = m.transaction_hash
WHERE m.protocols LIKE '%uniswap%'
AND m.type == 'arbitrage'
AND m.error IS NULL
ORDER BY m.gross_profit_usd - m.miner_payment_usd DESC
),

all_arbs as (
SELECT 
1 as key_join,
COUNT(DISTINCT(arb_id)) as total
FROM temp
WHERE arb_rank = 1
and total_profit IS NOT NULL
),

segment  as (SELECT 
total_profit,
COUNT(DISTINCT(arb_id)) as total_arbs,
SUM(COUNT(DISTINCT(arb_id))) OVER (ORDER BY total_profit) as cumulative_arbs
FROM temp
WHERE arb_rank = 1
and total_profit IS NOT NULL
GROUP BY total_profit
ORDER BY total_profit DESC)


SELECT 
total_profit,
total_arbs as total_arbs,
total_arbs / total as arb_profit_pdf,
cumulative_arbs / total as arb_profit_cdf
FROM segment
LEFT JOIN all_arbs ON 1 = key_join
ORDER BY total_profit


"
1481289,t2_date_top_arbs_search_50,,"[{""id"": 2502530, ""type"": ""table"", ""name"": ""Query results"", ""options"": {""columns"": [{""name"": ""max_profit"", ""numberFormat"": ""$,.00""}, {""name"": ""total_profit"", ""numberFormat"": ""$,.0""}, {""name"": ""total_transactions"", ""numberFormat"": "",""}, {""name"": ""avg_profit_MEV"", ""numberFormat"": ""$,.00""}, {""name"": ""total_miner_payments"", ""numberFormat"": ""$,.00""}, {""name"": ""avg_miner_payment"", ""numberFormat"": ""$,.00""}, {""name"": ""total_arbs"", ""type"": ""progressbar"", ""coloredNegativeValues"": false, ""coloredPositiveValues"": false}, {""name"": ""total_arbs"", ""coloredNegativeValues"": false}, {""name"": ""total_arbs"", ""type"": ""progressbar""}]}, ""created_at"": ""2022-10-29T22:41:44.274489+00:00"", ""__typename"": ""visualizations""}, {""id"": 2535732, ""type"": ""chart"", ""name"": ""Top MEV Searchers by Profit"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""$0,.00"", ""columnMapping"": {""rank_number"": ""x"", ""total_profit"": ""y"", ""perc_totla_uni_mev_profit"": ""y""}, ""seriesOptions"": {""total_profit"": {""type"": ""column"", ""color"": ""#FF007a"", ""yAxis"": 0, ""zIndex"": 0}, ""perc_totla_uni_mev_profit"": {""type"": ""line"", ""color"": ""#B2b2b2"", ""yAxis"": 1, ""zIndex"": 1}}, ""valuesOptions"": {}, ""showDataLabels"": false, ""globalSeriesType"": ""column"", ""numberFormatRightYAxisSeries"": ""%""}, ""created_at"": ""2022-11-02T05:22:25.256452+00:00"", ""__typename"": ""visualizations""}]","WITH temp as (SELECT
row_number() OVER (ORDER BY SUM(total_profit) DESC) as rank_number,
account_address,
SUM(total_profit) as total_profit,
AVG(total_profit) as avg_profit,
COUNT(DISTINCT(arb_id)) as total_arbs,
(MAX(date_time) - MIN(date_time))::int as activity_span,
COUNT(DISTINCT(arb_id))  / (MAX(date_time) - MIN(date_time))::int as time_diff_between,
SUM(gross_profit_usd) as gross_profit_usd,
SUM(miner_payment_usd) as miner_payment,
AVG(miner_payment_usd) as avg_miner_payment,
AVG(SUM(total_profit)) OVER (ORDER BY SUM(total_profit)) as avg_profit_per_account,
1 as counter,
row_number() OVER (ORDER BY SUM(total_profit)) as total_mev
FROM (SELECT 
id as arb_id,
DATE(block_timestamp) as date_time,
account_address,
(m.gross_profit_usd - m.miner_payment_usd)as total_profit,
gross_profit_usd,
miner_payment_usd,
m.protocols
FROM flashbots.mev_summary as m
INNER JOIN flashbots.arbitrages a ON a.transaction_hash = m.transaction_hash
WHERE m.protocols LIKE '%uniswap%'
AND m.type == 'arbitrage'
AND m.error IS NULL
) GROUP BY account_address
HAVING total_profit IS NOT NULL
ORDER BY total_profit DESC),

join_key as (SELECT
1 as join_key,
SUM(total_profit) as total_profit_all
FROM temp
WHERE total_profit > 0
)

SELECT
rank_number,
account_address,
total_profit,
total_profit / total_profit_all as perc_totla_uni_mev_profit
FROM temp
LEFT JOIN join_key ON join_key = 1
ORDER BY total_profit DESC
LIMIT 100"
55964,Uni v3 - 2D Top Volume (> $1M Volume),,"[{""id"": 113703, ""type"": ""chart"", ""name"": ""Share of Trading Volume by Fee Tier (Sorted by Fees)"", ""options"": {""sortX"": false, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack"", ""percentValues"": true}, ""reverseX"": false, ""numberFormat"": """", ""columnMapping"": {""fee_tier"": ""series"", ""total_usd"": ""y"", ""trading_pair"": ""x""}, ""seriesOptions"": {""0.05%"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 0}, ""0.30%"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 1}, ""1.00%"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 2}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2021-06-03T05:49:21.182894+00:00"", ""__typename"": ""visualizations""}, {""id"": 110866, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-05-31T23:32:59.195174+00:00"", ""__typename"": ""visualizations""}, {""id"": 115374, ""type"": ""chart"", ""name"": ""APY by Pair, Fee Tier"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""delta tvl""}, ""tickFormat"": ""$0a""}, ""yAxis"": [{""type"": ""-"", ""title"": {""text"": ""delta fees""}, ""tickFormat"": ""$0a""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""0.0a"", ""columnMapping"": {""fees_tvl"": ""y"", ""trading_pair"": ""series"", ""change_tvl_usd_val"": ""x"", ""change_fees_usd_val"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""scatter""}, ""created_at"": ""2021-06-04T07:26:54.956908+00:00"", ""__typename"": ""visualizations""}, {""id"": 115919, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": false, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""-"", ""tickFormat"": ""$0.0a""}, {""type"": ""-"", ""tickFormat"": ""$0.0a""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""0.0a"", ""columnMapping"": {""fees_tvl_apy"": ""y"", ""trading_pair"": ""x"", ""total_fees_usd"": ""y""}, ""seriesOptions"": {""fees_tvl_apy"": {""name"": ""Fees/TVL APY"", ""type"": ""scatter"", ""yAxis"": 0, ""zIndex"": 0}, ""total_fees_usd"": {""name"": ""Total Fees"", ""type"": ""column"", ""yAxis"": 1, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2021-06-05T01:52:56.890207+00:00"", ""__typename"": ""visualizations""}, {""id"": 115975, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": false, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""columnMapping"": {""tvl_usd"": ""y"", ""pair_fee"": ""x"", ""total_fees_usd"": ""y""}, ""seriesOptions"": {""tvl_usd"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 0}, ""total_fees_usd"": {""type"": ""scatter"", ""yAxis"": 1, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2021-06-05T03:54:04.044544+00:00"", ""__typename"": ""visualizations""}, {""id"": 115911, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""TVL""}, ""tickFormat"": ""$0a""}, ""yAxis"": [{""type"": ""-"", ""title"": {""text"": ""Fees Collected""}, ""tickFormat"": ""$0a""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""$0.0a"", ""columnMapping"": {""tvl_usd"": ""x"", ""fees_tvl"": ""y"", ""pair_fee"": ""series""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""scatter""}, ""created_at"": ""2021-06-05T01:41:49.572883+00:00"", ""__typename"": ""visualizations""}, {""id"": 115924, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""\u0394 TVL %""}, ""tickFormat"": ""0%""}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""\u0394 Fees %""}, ""tickFormat"": ""0%""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""0.0%"", ""columnMapping"": {""trading_pair"": ""series"", ""change_tvl_usd"": ""x"", ""change_fees_usd"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""scatter""}, ""created_at"": ""2021-06-05T01:57:48.580065+00:00"", ""__typename"": ""visualizations""}, {""id"": 115915, ""type"": ""chart"", ""name"": ""Most Fees by Pair - Tier"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""$0.0a"", ""columnMapping"": {""pair_fee"": ""x"", ""total_fees_usd"": ""y""}, ""seriesOptions"": {""total_fees_usd"": {""name"": ""Fees Collected"", ""type"": ""pie"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2021-06-05T01:46:35.827601+00:00"", ""__typename"": ""visualizations""}, {""id"": 110867, ""type"": ""table"", ""name"": ""2 Day - Sorted by Total Fees | (\u0394 = Change vs Previous 2 days)"", ""options"": {""columns"": [{""name"": ""trading_pair"", ""title"": ""Pair"", ""alignContent"": ""right""}, {""name"": ""num_trades"", ""title"": ""# Trades  ||"", ""alignContent"": ""center"", ""numberFormat"": "",""}, {""name"": ""total_usd"", ""title"": ""Trade Volume"", ""alignContent"": ""right"", ""numberFormat"": ""$0,.0a""}, {""name"": ""total_fees_usd"", ""title"": ""*Total Fees*"", ""alignContent"": ""center"", ""numberFormat"": ""$0,.0a""}, {""name"": ""fee_tier"", ""title"": ""Fee Tier ||"", ""alignContent"": ""center"", ""numberFormat"": """"}, {""name"": ""change_trades"", ""title"": ""\u0394 # Trades %"", ""alignContent"": ""center"", ""numberFormat"": ""(0.0a%)""}, {""name"": ""change_usd"", ""title"": ""\u0394 USD Volume"", ""alignContent"": ""center"", ""numberFormat"": ""(0.0%)""}, {""name"": ""pair_rank"", ""title"": ""By Fees"", ""alignContent"": ""center""}, {""name"": ""change_fees_usd"", ""title"": ""\u0394 Volume %"", ""alignContent"": ""center"", ""numberFormat"": ""(0.0a%)""}, {""name"": ""tvl_usd"", ""title"": ""Current TVL"", ""alignContent"": ""right"", ""numberFormat"": ""$0,.0a""}, {""name"": ""fees_tvl"", ""title"": ""*Fees/TVL*"", ""alignContent"": ""center"", ""numberFormat"": ""0.0a%""}, {""name"": ""change_tvl_usd"", ""title"": ""\u0394 TVL (Prices Now) %"", ""alignContent"": ""center"", ""numberFormat"": ""(0.0a%)""}, {""name"": ""change_tvl_fees_usd"", ""title"": ""\u0394 Fees/LP"", ""alignContent"": ""center"", ""numberFormat"": ""(0.0)""}, {""name"": ""share_of_pair_volume_change"", ""numberFormat"": ""(0.0)""}, {""name"": ""share_of_pair_volume"", ""title"": ""Share of Pair Volume at Fee Tier"", ""numberFormat"": ""%""}, {""name"": ""pool_url"", ""title"": ""Uniswap URL""}, {""name"": ""pair_fee"", ""title"": ""Pair Tag"", ""alignContent"": ""center""}, {""name"": ""fees_tvl_apy"", ""title"": ""Agg APY"", ""alignContent"": ""center"", ""numberFormat"": ""0.0a%""}, {""name"": ""change_fees_usd_val"", ""title"": ""\u0394 USD |"", ""alignContent"": ""right"", ""numberFormat"": ""($0,.0a)""}, {""name"": ""change_tvl_usd_val"", ""title"": ""\u0394 USD |"", ""alignContent"": ""right"", ""numberFormat"": ""($0,.0a)""}, {""name"": ""change_trades_val"", ""title"": ""\u0394 # |"", ""alignContent"": ""right"", ""numberFormat"": "",""}, {""name"": ""pair_vol_share"", ""title"": ""% of Pair Vol in Tier"", ""alignContent"": ""center"", ""numberFormat"": ""0.0%""}, {""name"": ""change_usd_val"", ""title"": ""\u0394 USD |"", ""alignContent"": ""right"", ""numberFormat"": ""($0,.0a)""}, {""name"": ""change_pair_vol_share"", ""title"": ""\u0394 % of Pair Volume |"", ""alignContent"": ""center"", ""numberFormat"": ""(0.0a)""}, {""name"": ""etherscan_url"", ""title"": ""Etherscan URL""}]}, ""created_at"": ""2021-05-31T23:32:59.195174+00:00"", ""__typename"": ""visualizations""}]","WITH params AS
(
SELECT
'2 days' as tp,
--'{{LP - Top X Pairs}}'::decimal as min_pair_rank,
--'{{LP: Min Fees USD - k}}'::decimal*1000 AS min_fees, 
--'{{LP: Min LP Value USD - k}}'::decimal*1000 AS min_tvl,
--'{{LP: Min Pair Volume USD - M}}'::decimal*1e6 AS min_vol_mil
1::decimal*1e6 AS min_vol_mil,
1*1000 AS min_tvl
),


top_pools AS
(
SELECT
    ""token_a_address"", ""token_a_symbol"",
    ""token_b_address"", ""token_b_symbol"",
""exchange_contract_address"",total_usd

FROM (
    SELECT
    ""exchange_contract_address"",
    ""token_a_address"", ""token_a_symbol"",
    ""token_b_address"", ""token_b_symbol"",
    SUM(""usd_amount"") AS total_usd,
    RANK() OVER (ORDER BY SUM(""usd_amount"") DESC) AS pair_rank
    FROM dex.""trades""
    WHERE project = 'Uniswap'
    AND version = '3'
    AND category = 'DEX'
    AND block_time >= '05-05-2021 17:00' -- Uni v3 launch date/hr
    AND block_time >= (DATE_TRUNC('minute',CURRENT_TIMESTAMP) - (SELECT tp FROM params)::INTERVAL)
    AND (""usd_amount"" IS NOT NULL)
    GROUP BY 1,2,3,4,5
    ) a
--WHERE pair_rank <=  (SELECT min_pair_rank from params)
WHERE total_usd >= (SELECT min_vol_mil FROM params)
AND (total_usd IS NOT NULL)
),

all_trades AS
(SELECT
ROW_NUMBER() OVER () AS rown,
t.block_time,
CASE --filling in missing addresses for coins. Maybe not worth keeping up, some are memes.
WHEN t.token_a_symbol::text = 'WETH' THEN 'ETH'
WHEN t.token_a_address::text = '\x0000000000000000000000000000000000000000' THEN 'Burn Addr'
WHEN t.token_a_address::text = '\xcc8fa225d80b9c7d42f96e9570156c65d6caaa25' THEN 'SLP'
WHEN t.token_a_address::text = '\xde30da39c46104798bb5aa3fe8b9e0e1f348163f' THEN 'GTC'
WHEN t.token_a_address::text = '\xa47c8bf37f92abed4a126bda807a7b7498661acd' THEN 'UST'
WHEN t.token_a_address::text = '\x6c28AeF8977c9B773996d0e8376d2EE379446F2f' THEN 'QUICK'
WHEN t.token_a_address::text = '\x519c1001d550c0a1dae7d1fc220f7d14c2a521bb' THEN 'PSWAP'
WHEN t.token_a_address::text = '\xf411903cbc70a74d22900a5de66a2dda66507255' THEN 'VERA'
WHEN t.token_a_address::text = '\x2f109021afe75b949429fe30523ee7c0d5b27207' THEN 'OCC'
WHEN t.token_a_address::text = '\x4691937a7508860f876c9c0a2a617e7d9e945d4b' THEN 'WOO'
WHEN t.token_a_address::text = '\x9695e0114e12c0d3a3636fab5a18e6b737529023' THEN 'DFYN'
WHEN t.token_a_address::text = '\xc834fa996fa3bec7aad3693af486ae53d8aa8b50' THEN 'CONV'
WHEN t.token_a_address::text = '\x3431f91b3a388115f00c5ba9fdb899851d005fb5' THEN 'GERO'
WHEN t.token_a_address::text = '\x038a68ff68c393373ec894015816e33ad41bd564' THEN 'GLCH'
WHEN t.token_a_address::text = '\xa2b4c0af19cc16a6cfacce81f192b024d625817d' THEN 'KISHU'
WHEN t.token_a_address::text = '\x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce' THEN 'SHIB'
WHEN t.token_a_address::text = '\x761d38e5ddf6ccf6cf7c55759d5210750b5d60f3' THEN 'ELON'
WHEN t.token_a_address::text = '\x3301ee63fb29f863f2333bd4466acb46cd8323e6' THEN 'AKITA'
WHEN t.token_a_address::text = '\x5218e472cfcfe0b64a064f055b43b4cdc9efd3a6' THEN 'eRSDL'
WHEN t.token_a_address::text = '\x1453dbb8a29551ade11d89825ca812e05317eaeb' THEN 'TEND'
WHEN t.token_a_address::text = '\x35a532d376ffd9a705d0bb319532837337a398e7' THEN 'WDOGE'
WHEN t.token_a_address::text = '\x17ef75aa22dd5f6c2763b8304ab24f40ee54d48a' THEN 'RVP'
WHEN t.token_a_address::text = '\x6dea81c8171d0ba574754ef6f8b412f2ed88c54d' THEN 'LQTY'
WHEN t.token_a_address::text = '\x3832d2f059e55934220881f831be501d180671a7' THEN 'renDOGE'
WHEN t.token_a_address::text = '\xf16e4d813f4dcfde4c5b44f305c908742de84ef0' THEN 'ETH2x ADL'
WHEN t.token_a_address::text = '\x77fba179c79de5b7653f68b5039af940ada60ce0' THEN 'FORTH'
WHEN t.token_a_address::text = '\xf65b5c5104c4fafd4b709d9d60a185eae063276c' THEN 'TRU'
WHEN t.token_a_address::text = '\xc7283b66eb1eb5fb86327f08e1b5816b0720212b' THEN 'TRIBE'
WHEN t.token_a_address::text = '\xc8807f0f5ba3fa45ffbdc66928d71c5289249014' THEN 'ISP'
WHEN t.token_a_address::text = '\x27c70cd1946795b66be9d954418546998b546634' THEN 'LEASH'
WHEN t.token_a_address::text = '\x956f47f50a910163d8bf957cf5846d573e7f87ca' THEN 'FEI'
WHEN t.token_a_address::text = '\x5f98805a4e8be255a32880fdec7f6728c6568ba0' THEN 'LUSD'
WHEN t.token_a_address::text = '\xb525ecee288b99216cd481c56b6efbdbe9bf90b5' THEN 'KUMA'
WHEN t.token_a_address::text = '\xd291e7a03283640fdc51b121ac401383a46cc623' THEN 'RGT'
WHEN t.token_a_address::text = '\x3d6f0dea3ac3c607b3998e6ce14b6350721752d9' THEN 'CARDS'
WHEN t.token_a_address::text = '\x841fb148863454a3b3570f515414759be9091465' THEN 'SHIH'
WHEN t.token_a_address::text = '\xd0660cd418a64a1d44e9214ad8e459324d8157f1' THEN 'WOOFY'
WHEN t.token_a_address::text = '\x853d955acef822db058eb8505911ed77f175b99e' THEN 'FRAX'
WHEN t.token_a_address::text = '\x5e74c9036fb86bd7ecdcb084a0673efc32ea31cb' THEN 'sETH'
WHEN t.token_a_address::text = '\xae7ab96520de3a18e5e111b5eaab095312d7fe84' THEN 'stETH'
WHEN t.token_a_address::text = '\xe95a203b1a91a908f9b9ce46459d101078c2c3cb' THEN 'ankrETH'
WHEN t.token_a_address::text = '\x9559aaa82d9649c7a7b220e7c461d2e74c9a3593' THEN 'rETH'
WHEN t.token_a_address::text = '\x4ddc2d193948926d02f9b1fe9e1daa0718270ed5' THEN 'cETH'

ELSE COALESCE(t.token_a_symbol,
CONCAT(LEFT(t.token_a_address::text,3),'...',RIGHT(t.token_a_address::text,3))
)
END AS token_a,
CASE --filling in missing addresses for coins. Maybe not worth keeping up, some are memes.
WHEN t.token_b_symbol::text = 'WETH' THEN 'ETH'
WHEN t.token_b_address::text = '\x0000000000000000000000000000000000000000' THEN 'Burn Addr'
WHEN t.token_b_address::text = '\xcc8fa225d80b9c7d42f96e9570156c65d6caaa25' THEN 'SLP'
WHEN t.token_b_address::text = '\xde30da39c46104798bb5aa3fe8b9e0e1f348163f' THEN 'GTC'
WHEN t.token_b_address::text = '\xa47c8bf37f92abed4a126bda807a7b7498661acd' THEN 'UST'
WHEN t.token_b_address::text = '\x6c28AeF8977c9B773996d0e8376d2EE379446F2f' THEN 'QUICK'
WHEN t.token_b_address::text = '\x519c1001d550c0a1dae7d1fc220f7d14c2a521bb' THEN 'PSWAP'
WHEN t.token_b_address::text = '\xf411903cbc70a74d22900a5de66a2dda66507255' THEN 'VERA'
WHEN t.token_b_address::text = '\x2f109021afe75b949429fe30523ee7c0d5b27207' THEN 'OCC'
WHEN t.token_b_address::text = '\xc834fa996fa3bec7aad3693af486ae53d8aa8b50' THEN 'CONV'
WHEN t.token_b_address::text = '\x4691937a7508860f876c9c0a2a617e7d9e945d4b' THEN 'WOO'
WHEN t.token_b_address::text = '\x9695e0114e12c0d3a3636fab5a18e6b737529023' THEN 'DFYN'
WHEN t.token_b_address::text = '\x3431f91b3a388115f00c5ba9fdb899851d005fb5' THEN 'GERO'
WHEN t.token_b_address::text = '\x038a68ff68c393373ec894015816e33ad41bd564' THEN 'GLCH'
WHEN t.token_b_address::text = '\xa2b4c0af19cc16a6cfacce81f192b024d625817d' THEN 'KISHU'
WHEN t.token_b_address::text = '\x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce' THEN 'SHIB'
WHEN t.token_b_address::text = '\x761d38e5ddf6ccf6cf7c55759d5210750b5d60f3' THEN 'ELON'
WHEN t.token_b_address::text = '\x3301ee63fb29f863f2333bd4466acb46cd8323e6' THEN 'AKITA'
WHEN t.token_b_address::text = '\x5218e472cfcfe0b64a064f055b43b4cdc9efd3a6' THEN 'eRSDL'
WHEN t.token_b_address::text = '\x1453dbb8a29551ade11d89825ca812e05317eaeb' THEN 'TEND'
WHEN t.token_b_address::text = '\x35a532d376ffd9a705d0bb319532837337a398e7' THEN 'WDOGE'
WHEN t.token_b_address::text = '\x17ef75aa22dd5f6c2763b8304ab24f40ee54d48a' THEN 'RVP'
WHEN t.token_b_address::text = '\x6dea81c8171d0ba574754ef6f8b412f2ed88c54d' THEN 'LQTY'
WHEN t.token_b_address::text = '\x3832d2f059e55934220881f831be501d180671a7' THEN 'renDOGE'
WHEN t.token_b_address::text = '\xf16e4d813f4dcfde4c5b44f305c908742de84ef0' THEN 'ETH2x ADL'
WHEN t.token_b_address::text = '\x77fba179c79de5b7653f68b5039af940ada60ce0' THEN 'FORTH'
WHEN t.token_b_address::text = '\xf65b5c5104c4fafd4b709d9d60a185eae063276c' THEN 'TRU'
WHEN t.token_b_address::text = '\xc7283b66eb1eb5fb86327f08e1b5816b0720212b' THEN 'TRIBE'
WHEN t.token_b_address::text = '\xc8807f0f5ba3fa45ffbdc66928d71c5289249014' THEN 'ISP'
WHEN t.token_b_address::text = '\x27c70cd1946795b66be9d954418546998b546634' THEN 'LEASH'
WHEN t.token_b_address::text = '\x956f47f50a910163d8bf957cf5846d573e7f87ca' THEN 'FEI'
WHEN t.token_b_address::text = '\x5f98805a4e8be255a32880fdec7f6728c6568ba0' THEN 'LUSD'
WHEN t.token_b_address::text = '\xb525ecee288b99216cd481c56b6efbdbe9bf90b5' THEN 'KUMA'
WHEN t.token_b_address::text = '\xd291e7a03283640fdc51b121ac401383a46cc623' THEN 'RGT'
WHEN t.token_b_address::text = '\x3d6f0dea3ac3c607b3998e6ce14b6350721752d9' THEN 'CARDS'
WHEN t.token_b_address::text = '\x841fb148863454a3b3570f515414759be9091465' THEN 'SHIH'
WHEN t.token_b_address::text = '\xd0660cd418a64a1d44e9214ad8e459324d8157f1' THEN 'WOOFY'
WHEN t.token_b_address::text = '\x853d955acef822db058eb8505911ed77f175b99e' THEN 'FRAX'
WHEN t.token_b_address::text = '\x5e74c9036fb86bd7ecdcb084a0673efc32ea31cb' THEN 'sETH'
WHEN t.token_b_address::text = '\xae7ab96520de3a18e5e111b5eaab095312d7fe84' THEN 'stETH'
WHEN t.token_b_address::text = '\xe95a203b1a91a908f9b9ce46459d101078c2c3cb' THEN 'ankrETH'
WHEN t.token_b_address::text = '\x9559aaa82d9649c7a7b220e7c461d2e74c9a3593' THEN 'rETH'
WHEN t.token_b_address::text = '\x4ddc2d193948926d02f9b1fe9e1daa0718270ed5' THEN 'cETH'

ELSE COALESCE(t.token_b_symbol,
CONCAT(LEFT(t.token_b_address::text,3),'...',RIGHT(t.token_b_address::text,3))
)
END AS token_b
,t.token_a_amount
,t.token_b_amount
,t.token_a_amount_raw
,t.token_b_amount_raw
,t.token_a_address
,t.token_b_address
,t.exchange_contract_address -- exchange_contract_address is the v3 LP Position
,t.tx_hash -- transaction addr (for spot checks)
,t.usd_amount --TODO: Find some way to pull in USD of any missing tokens
,c.fee/1e6 AS fee_tier --Converting fee tier to a multiplier (i.e. for 0.3%, 3000 -> 0.003)
,t.usd_amount*(c.fee/1e6) AS fees_collected_usd, --USD Amount * %fee = fees collected
CASE WHEN t.block_time >= (DATE_TRUNC('hour',CURRENT_TIMESTAMP) - (SELECT tp FROM params)::INTERVAL) THEN 'current period'
ELSE 'previous period'
END AS period
FROM dex.""trades"" t

LEFT JOIN uniswap_v3.""Factory_call_createPool"" c --1. Join With Pool creation on LP contract address to pull fee tier
ON t.exchange_contract_address = c.output_pool
WHERE t.project = 'Uniswap'
AND t.version = '3'
AND t.block_time >= '05-05-2021 17:00' -- Uni v3 launch date/hr
AND t.block_time >= (DATE_TRUNC('hour',CURRENT_TIMESTAMP) - (SELECT tp FROM params)::INTERVAL - (SELECT tp FROM params)::INTERVAL) --minus twice so we can do comps
AND t.""exchange_contract_address"" IN (SELECT exchange_contract_address FROM top_pools)
ORDER BY t.block_time DESC
),

most_recent_price AS --get the latest price so we can use it to calculate TVL
(
SELECT
last_price.contract_address,
last_price.symbol, last_price.decimals,
last_price.price, last_price.minute
 FROM (
    SELECT
    minute, contract_address, symbol, decimals, price,
    RANK() OVER(PARTITION BY contract_address ORDER BY minute DESC) AS recency_rank --rank by time, where most recent = 1
    FROM prices.usd
    WHERE minute > (DATE_TRUNC('day',CURRENT_TIMESTAMP) - '1 days'::INTERVAL) -- to help tighten this and not query the history of time
    AND
        (
        contract_address IN (SELECT ""token_a_address"" FROM top_pools)
        OR
        contract_address IN (SELECT ""token_b_address"" FROM top_pools)
        )
    ) last_price
WHERE last_price.recency_rank = 1 --get the most recent price for liquidity joining
),

most_recent_trade_price AS 
(
SELECT l.*,
pa.price as pricea,
pb.price as priceb,
(l.usd_amount::decimal)/(l.token_a_amount_raw/(10^18))::decimal -- ttotal trade amount (one-sided), divide that by missing token raw
--doing an 18 based exponent just for rounding/calculation
AS price_a_18, --when prices does not exist
(l.usd_amount::decimal)/(l.token_b_amount_raw/(10^18))::decimal -- total trade amount (one-sided), divide that by missing token raw
--doing an 18 based exponent just for rounding/calculation
AS price_b_18
FROM
    (
    SELECT d.*
    FROM (
        SELECT
        block_time, exchange_contract_address,
        token_a_address, token_b_address,
        token_a_amount_raw, token_b_amount_raw,
        usd_amount,
        DENSE_RANK() OVER(PARTITION BY exchange_contract_address ORDER BY block_time DESC, usd_amount DESC, rown) AS tr_rank
        FROM all_trades
        WHERE block_time >= (DATE_TRUNC('minute',CURRENT_TIMESTAMP) - (SELECT tp FROM params)::INTERVAL)
        AND usd_amount IS NOT NULL
        ) d
    WHERE d.tr_rank = 1
    ) l
LEFT JOIN prices.""usd"" pa
ON pa.minute = date_trunc('minute',l.block_time)
AND pa.contract_address = l.token_a_address
LEFT JOIN prices.""usd"" pb
ON pb.minute = date_trunc('minute',l.block_time)
AND pb.contract_address = l.token_b_address

)
,
dex_price AS(
--for tokens where dune doesn't have the price, calculate the avg price in it's last hour of swaps (6 hr if no swaps in the last hour)
--since we don't have an amount field for unmapped tokens, I'll calc it based on... raw amount
-- through a few queries, this gets the unit price of each token (assuming 18 decimals)
-- DO NOT USE THIS FOR KNOWN TOKENS - only for the ones we don't have, we'll assume 18 decimals

SELECT c.t_one,
    CASE WHEN direction = 'forward' THEN m.price_a_18
    ELSE m.price_b_18
    END AS price_18
    FROM
    (
    SELECT b.* FROM (
        SELECT
        direction,exchange_contract_address,t_one,t_two,
        DENSE_RANK() OVER (PARTITION BY t_one ORDER BY total_usd DESC,exchange_contract_address DESC) AS t_rank
        FROM
            (
            SELECT
            'forward' as direction,
            exchange_contract_address,
            ""token_a_address"" as t_one, ""token_b_address"" as t_two,

            SUM(usd_amount) AS total_usd
            FROM all_trades
            GROUP BY 1,2,3,4
            
            UNION
            
            SELECT
            'backward' as direction, --flipping token a and b here, so it's easier to calc what's the best pair for each token
            exchange_contract_address,
            ""token_b_address"" as t_one, ""token_a_address"" AS t_two, 

            SUM(usd_amount) AS total_usd
            FROM all_trades
            GROUP BY 1,2,3,4
            ) a
        ) b
    WHERE t_rank = 1
    ) c
    
inner JOIN most_recent_trade_price m
ON m.exchange_contract_address = c.exchange_contract_address

----
),

sum_pairs AS( -- Using this to decide which trading pair order to pick (i.e WBTC/USDC vs USDC/WBTC). We'll pick the one with the greatest usd volume.
--starting set
SELECT 
exchange_contract_address,
CONCAT(token_a,'/',token_b) AS forward_pair -- Trading pair
,CONCAT(token_b,'/',token_a) AS backward_pair -- For joining buys/sells later
,SUM(usd_amount) AS sum_usd
FROM all_trades
GROUP BY 1,2,3
),

final_trading_pairs AS( --building the mapping table for pairs
SELECT
a.exchange_contract_address,
a.forward_pair, a.backward_pair,
a.sum_usd,b.sum_usd,
CASE
WHEN RIGHT(a.backward_pair,3)='ETH' THEN a.backward_pair 
WHEN RIGHT(a.forward_pair,3)='ETH' THEN a.forward_pair
WHEN RIGHT(a.backward_pair,4)='WBTC' THEN a.backward_pair
WHEN RIGHT(a.forward_pair,4)='WBTC' THEN a.forward_pair
WHEN (a.sum_usd >= b.sum_usd) -- when a > b
OR b.sum_usd IS NULL -- or if backward usd is null
THEN a.forward_pair -- select forward
ELSE a.backward_pair --else select backward in every other circumstance
END AS trading_pair

FROM sum_pairs a
LEFT JOIN sum_pairs b
ON a.forward_pair = b.backward_pair
),

v3_trades AS (  --clean table of trades to work with for building visuals
SELECT
atx.block_time,
atx.exchange_contract_address,
COALESCE(f1.trading_pair,f2.trading_pair) AS trading_pair, --pick the mapped trading pair (see joins)
atx.usd_amount,
atx.fee_tier,
atx.fees_collected_usd,
atx.tx_hash,
atx.period
FROM all_trades atx

LEFT JOIN final_trading_pairs f1 --check if the pair maps with the forward version
ON CONCAT(atx.token_a,'/',atx.token_b) = f1.trading_pair --token order match
AND atx.exchange_contract_address = f1.exchange_contract_address --fee x order match
LEFT JOIN final_trading_pairs f2 --check if the pair maps with the backward version
ON CONCAT(atx.token_b,'/',atx.token_a) = f2.trading_pair --token order match
AND atx.exchange_contract_address = f2.exchange_contract_address  --fee x order match
),

lp_withdraws AS( --get withdrawals from the lp pool
SELECT
a.exchange_contract_address AS lp_pos,
w.contract_address AS token,
SUM(w.value) AS token_withdraws,
SUM(CASE WHEN w.evt_block_time <= DATE_TRUNC('hour',CURRENT_TIMESTAMP) - '5 minutes'::INTERVAL
    THEN w.value ELSE 0 END) AS token_withdraws_5mins,
    
SUM(CASE WHEN w.evt_block_time
    <= (DATE_TRUNC('hour',CURRENT_TIMESTAMP) - (SELECT tp FROM params)::INTERVAL)
    THEN w.value ELSE 0 END)
    AS token_withdraws_prev,
SUM(CASE WHEN w.evt_block_time
    <= (DATE_TRUNC('hour',CURRENT_TIMESTAMP) - (SELECT tp FROM params)::INTERVAL - '5 minutes'::INTERVAL)
    THEN w.value ELSE 0 END)
    AS token_withdraws_prev_5mins
    
FROM (SELECT DISTINCT exchange_contract_address FROM all_trades) a
LEFT JOIN erc20.""ERC20_evt_Transfer"" w
ON a.exchange_contract_address = w.""from"" --transactions where the LP is sending tokens
GROUP BY 1,2
),

lp_deposits AS( --get deposits into the lp pool
SELECT
a.exchange_contract_address AS lp_pos,
d.contract_address AS token,
SUM(d.value) AS token_deposits,
SUM(CASE WHEN d.evt_block_time <= DATE_TRUNC('hour',CURRENT_TIMESTAMP) - '5 minutes'::INTERVAL
    THEN d.value ELSE 0 END) AS token_deposits_5mins,
SUM(CASE WHEN d.evt_block_time
    <= (DATE_TRUNC('hour',CURRENT_TIMESTAMP) - (SELECT tp FROM params)::INTERVAL)
    THEN d.value ELSE 0 END)
    AS token_deposits_prev,
SUM(CASE WHEN d.evt_block_time
    <= (DATE_TRUNC('hour',CURRENT_TIMESTAMP) - (SELECT tp FROM params)::INTERVAL - '5 minutes'::INTERVAL)
    THEN d.value ELSE 0 END)
    AS token_deposits_prev_5mins
FROM (SELECT DISTINCT exchange_contract_address FROM all_trades) a
LEFT JOIN erc20.""ERC20_evt_Transfer"" d
ON a.exchange_contract_address = d.""to"" --transactions where the LP is recieving tokens
GROUP BY 1,2
),

lp_tvl_pt1 AS( --calculate tvl
SELECT
net.lp_pos,
CASE WHEN SUM(net.net_usd) > SUM(net.net_usd_5mins) --smoothing out any weird active lp snapshot timing
THEN SUM(net.net_usd)
ELSE SUM(net.net_usd_5mins)
END AS tvl_usd, --combine usd of tokens in each lp position by address
CASE WHEN SUM(net.net_usd_prev) > SUM(net.net_usd_prev_5mins) --smoothing out any weird active lp snapshot timing
THEN SUM(net.net_usd_prev)
ELSE SUM(net.net_usd_prev_5mins)
END AS tvl_usd_prev --combine usd of tokens in each lp position by address

FROM (
    SELECT
    d.lp_pos,
    d.token,w.token,
    d.token_deposits - COALESCE(w.token_withdraws,0) AS net_tokens, --# of tokens are in the LP
    (d.token_deposits - COALESCE(w.token_withdraws,0)) / (10^p.decimals) AS net_tokens_erc20, --# of tokens in the LP with appropriate decimals (only Dune logged erc20's)
    
    CASE WHEN p.price IS NULL --when null, pull dex price, assuming 18 decimals
    THEN ((d.token_deposits - COALESCE(w.token_withdraws,0)) / (10^18)) * dp.price_18
    ELSE ((d.token_deposits - COALESCE(w.token_withdraws,0)) / (10^p.decimals)) * p.price
    END AS net_usd, --USD value of each token in the LP (Of the ERC20s that Dune logs)
    CASE WHEN p.price IS NULL --when null, pull dex price, assuming 18 decimals
    THEN ((d.token_deposits_5mins - COALESCE(w.token_withdraws_5mins,0)) / (10^18)) * dp.price_18
    ELSE ((d.token_deposits_5mins - COALESCE(w.token_withdraws_5mins,0)) / (10^p.decimals)) * p.price
    END AS net_usd_5mins, --USD value of each token in the LP (Of the ERC20s that Dune logs)
    
    d.token_deposits_prev - COALESCE(w.token_withdraws_prev,0) AS net_tokens_prev, --# of tokens are in the LP
    (d.token_deposits_prev - COALESCE(w.token_withdraws_prev,0)) / (10^p.decimals) AS net_tokens_erc20_prev, --# of tokens in the LP with appropriate decimals (only Dune logged erc20's)

    CASE WHEN p.price IS NULL --when null, pull dex price, assuming 18 decimals
    THEN ((d.token_deposits_prev - COALESCE(w.token_withdraws_prev,0)) / (10^18)) * dp.price_18
    ELSE ((d.token_deposits_prev - COALESCE(w.token_withdraws_prev,0)) / (10^p.decimals)) * p.price
    END AS net_usd_prev, --USD value of each token in the LP (Of the ERC20s that Dune logs)
    CASE WHEN p.price IS NULL --when null, pull dex price, assuming 18 decimals
    THEN ((d.token_deposits_prev_5mins - COALESCE(w.token_withdraws_prev_5mins,0)) / (10^18)) * dp.price_18
    ELSE ((d.token_deposits_prev_5mins - COALESCE(w.token_withdraws_prev_5mins,0)) / (10^p.decimals)) * p.price
    END AS net_usd_prev_5mins --USD value of each token in the LP (Of the ERC20s that Dune logs)
   
    FROM lp_deposits d
    INNER JOIN lp_withdraws w --join the deposts with the withdraws
    ON d.lp_pos = w.lp_pos
    AND d.token = w.token
    LEFT JOIN most_recent_price p --get the price of each token (erc20)
    ON d.token = p.""contract_address""
    LEFT JOIN dex_price dp
    ON d.token = dp.t_one
    ) net
GROUP BY net.lp_pos
),

lp_tvl AS ( --just so alignment with trades makes sense
SELECT DISTINCT
a.lp_pos, 'current period' AS period, a.tvl_usd AS tvl_usd
FROM lp_tvl_pt1 a

UNION

SELECT DISTINCT
b.lp_pos, 'previous period' AS period, b.tvl_usd_prev AS tvl_usd
FROM lp_tvl_pt1 b
),

final_stats AS(
SELECT
t.exchange_contract_address,
t.trading_pair, t.period,
t.fee_tier,
l.tvl_usd -- already calc'd
,COUNT(t.trading_pair) AS num_trades
,SUM(t.usd_amount) AS total_usd
,SUM(t.fees_collected_usd) AS total_fees_usd

FROM v3_trades t
LEFT JOIN lp_tvl l ON
t.exchange_contract_address = l.lp_pos
AND t.period = l.period
WHERE /*block_time >= (DATE_TRUNC('hour',CURRENT_TIMESTAMP) - '2 days'::INTERVAL)
AND*/ usd_amount IS NOT NULL -- Eventually see if Dune adds new tokens, or we need to manually
GROUP BY t.exchange_contract_address, t.trading_pair, t.period, l.tvl_usd, fee_tier
ORDER BY SUM(usd_amount) DESC
)

SELECT
DENSE_RANK() OVER(ORDER BY c.total_fees_usd DESC) AS pair_rank,
c.trading_pair,
ROUND(c.fee_tier*100,2) || '%' AS fee_tier,

c.total_fees_usd,
c.total_usd,
c.tvl_usd,
CASE WHEN (c.tvl_usd = 0) OR (c.tvl_usd IS NULL) THEN 0
ELSE (c.total_fees_usd/c.tvl_usd)
END AS fees_tvl,
CASE WHEN (c.tvl_usd = 0) OR (c.tvl_usd IS NULL) THEN 0
ELSE (c.total_fees_usd/c.tvl_usd)*(365/2)
END AS fees_tvl_apy, --Doing 365/2 to get it to APY
--c.total_usd/ (SUM(c.total_usd) OVER(PARTITION BY c.trading_pair)) AS share_of_pair_volume,

CASE WHEN ((SUM(c.total_usd) OVER(PARTITION BY c.trading_pair)) =0) OR ((SUM(c.total_usd) OVER(PARTITION BY c.trading_pair)) IS NULL) THEN 0
ELSE c.total_usd::decimal /
(SUM(c.total_usd) OVER(PARTITION BY c.trading_pair))::decimal 
END AS pair_vol_share,

c.num_trades,

CASE WHEN (p.total_fees_usd = 0) OR (p.total_fees_usd IS NULL) THEN 0
ELSE (c.total_fees_usd - p.total_fees_usd)::decimal / p.total_fees_usd::decimal
END AS change_fees_usd,
CASE WHEN (p.total_usd = 0) OR (p.total_usd IS NULL) THEN 0
ELSE (c.total_usd - p.total_usd)::decimal --/ p.total_usd::decimal
END AS change_usd_val,

/*CASE WHEN (p.total_usd = 0) OR (p.total_usd IS NULL) THEN 0
ELSE (c.total_usd - p.total_usd)::decimal / p.total_usd::decimal
END AS change_usd,*/ --volume and fees delta is the exact same, so removing

CASE WHEN (p.tvl_usd = 0) OR (p.tvl_usd IS NULL) THEN 0 
ELSE (c.tvl_usd - p.tvl_usd)::decimal / p.tvl_usd::decimal
END AS change_tvl_usd,
CASE WHEN (p.tvl_usd = 0) OR (p.tvl_usd IS NULL) THEN 0 
ELSE (c.tvl_usd - p.tvl_usd)::decimal --/ p.tvl_usd::decimal
END AS change_tvl_usd_val,

/*CASE WHEN (p.tvl_usd = 0) OR (p.tvl_usd IS NULL) OR (c.tvl_usd = 0) OR (c.tvl_usd IS NULL)  THEN 0
ELSE ((c.total_fees_usd::decimal/c.tvl_usd::decimal) - (p.total_fees_usd::decimal/p.tvl_usd::decimal))::decimal*100
--    / (c.total_fees_usd::decimal/c.tvl_usd::decimal) --making this absolute change, not % since it's already a %
END AS change_tvl_fees_usd,*/

CASE WHEN
(SUM(c.total_usd) OVER(PARTITION BY c.trading_pair)) = 0 OR ((SUM(c.total_usd) OVER(PARTITION BY c.trading_pair)) IS NULL)
OR (SUM(p.total_usd) OVER(PARTITION BY p.trading_pair)) = 0 OR ((SUM(p.total_usd) OVER(PARTITION BY p.trading_pair)) IS NULL)
THEN -1
ELSE
((c.total_usd/(SUM(c.total_usd) OVER(PARTITION BY c.trading_pair))) -
    (p.total_usd/(SUM(p.total_usd) OVER(PARTITION BY p.trading_pair))))*100
--/ (p.total_usd/(SUM(p.total_usd) OVER(p.trading_pair))) --making this absolute change, not % since it's already a %
END
AS change_pair_vol_share,

CASE WHEN (p.num_trades = 0) OR (p.num_trades IS NULL) THEN 0
ELSE (c.num_trades - p.num_trades)::decimal / p.num_trades::decimal
END AS change_trades,
CASE WHEN (p.num_trades = 0) OR (p.num_trades IS NULL) THEN 0
ELSE (c.num_trades - p.num_trades)::decimal-- / p.num_trades::decimal
END AS change_trades_val,



CONCAT(c.trading_pair, ' - ',
ROUND(c.fee_tier*100,2), '%') AS pair_fee,

CONCAT('https://info.uniswap.org/accounts#/pools/',
REPLACE(c.exchange_contract_address::text,'\','0')) AS pool_url,
CONCAT('https://etherscan.io/address/',
REPLACE(c.exchange_contract_address::text,'\','0')) AS etherscan_url

FROM (SELECT * FROM final_stats WHERE period='current period') c
LEFT JOIN (SELECT * FROM final_stats WHERE period='previous period') p
ON c.exchange_contract_address = p.exchange_contract_address

WHERE c.tvl_usd > (SELECT min_tvl FROM params)

ORDER BY c.total_fees_usd DESC"
55957,Uni v3 - 2D,,"[{""id"": 110850, ""type"": ""counter"", ""name"": ""2 Day Volume (All)"", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Trade Volume (All Pairs)"", ""stringPrefix"": ""$"", ""stringSuffix"": ""B"", ""stringDecimal"": 2, ""counterColName"": ""bil_usd_volume""}, ""created_at"": ""2021-05-31T23:05:06.594903+00:00"", ""__typename"": ""visualizations""}, {""id"": 110851, ""type"": ""counter"", ""name"": ""2 Days Fees (All)"", ""options"": {""rowNumber"": 1, ""counterLabel"": ""LP Fees (All Pairs)"", ""stringPrefix"": ""$"", ""stringSuffix"": ""M"", ""stringDecimal"": 2, ""counterColName"": ""mil_usd_fees""}, ""created_at"": ""2021-05-31T23:05:06.594903+00:00"", ""__typename"": ""visualizations""}, {""id"": 113571, ""type"": ""counter"", ""name"": ""2 Day - Net LP"", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Net New Liquidity"", ""stringPrefix"": ""$"", ""stringSuffix"": ""M"", ""stringDecimal"": 2, ""counterColName"": ""mil_lp_usd_net""}, ""created_at"": ""2021-06-03T03:49:06.432734+00:00"", ""__typename"": ""visualizations""}, {""id"": 110853, ""type"": ""counter"", ""name"": ""2 Day Fees (T15)"", ""options"": {""rowNumber"": 1, ""counterLabel"": ""LP Fees (Top 15 Pairs)"", ""stringPrefix"": ""$"", ""stringSuffix"": ""M"", ""stringDecimal"": 2, ""counterColName"": ""mil_usd_fees_top15""}, ""created_at"": ""2021-05-31T23:05:06.594903+00:00"", ""__typename"": ""visualizations""}, {""id"": 110852, ""type"": ""counter"", ""name"": ""2 Day Volume (T15)"", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Trade Volume (Top 15 Pairs)"", ""stringPrefix"": ""$"", ""stringSuffix"": ""B"", ""stringDecimal"": 2, ""counterColName"": ""bil_usd_volume_top15""}, ""created_at"": ""2021-05-31T23:05:06.594903+00:00"", ""__typename"": ""visualizations""}, {""id"": 113570, ""type"": ""counter"", ""name"": ""2 Day - Added LP"", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Added Liquidity Volume"", ""stringPrefix"": ""$"", ""stringSuffix"": ""M"", ""stringDecimal"": 2, ""counterColName"": ""mil_lp_usd_added""}, ""created_at"": ""2021-06-03T03:47:23.86357+00:00"", ""__typename"": ""visualizations""}, {""id"": 110849, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-05-31T23:05:06.594903+00:00"", ""__typename"": ""visualizations""}]","WITH all_trades AS
(SELECT
t.block_time,
CASE --filling in missing addresses for coins. Maybe not worth keeping up, some are memes.
WHEN t.token_a_symbol::text = 'WETH' THEN 'ETH'
WHEN t.token_a_address::text = '\x0000000000000000000000000000000000000000' THEN 'Burn Addr'
WHEN t.token_a_address::text = '\xde30da39c46104798bb5aa3fe8b9e0e1f348163f' THEN 'GTC'
WHEN t.token_a_address::text = '\xa47c8bf37f92abed4a126bda807a7b7498661acd' THEN 'UST'
WHEN t.token_a_address::text = '\x6c28AeF8977c9B773996d0e8376d2EE379446F2f' THEN 'QUICK'
WHEN t.token_a_address::text = '\x519c1001d550c0a1dae7d1fc220f7d14c2a521bb' THEN 'PSWAP'
WHEN t.token_a_address::text = '\xf411903cbc70a74d22900a5de66a2dda66507255' THEN 'VERA'
WHEN t.token_a_address::text = '\x2f109021afe75b949429fe30523ee7c0d5b27207' THEN 'OCC'
WHEN t.token_a_address::text = '\x4691937a7508860f876c9c0a2a617e7d9e945d4b' THEN 'WOO'
WHEN t.token_a_address::text = '\x9695e0114e12c0d3a3636fab5a18e6b737529023' THEN 'DFYN'
WHEN t.token_a_address::text = '\xc834fa996fa3bec7aad3693af486ae53d8aa8b50' THEN 'CONV'
WHEN t.token_a_address::text = '\x3431f91b3a388115f00c5ba9fdb899851d005fb5' THEN 'GERO'
WHEN t.token_a_address::text = '\x038a68ff68c393373ec894015816e33ad41bd564' THEN 'GLCH'
WHEN t.token_a_address::text = '\xa2b4c0af19cc16a6cfacce81f192b024d625817d' THEN 'KISHU'
WHEN t.token_a_address::text = '\x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce' THEN 'SHIB'
WHEN t.token_a_address::text = '\x761d38e5ddf6ccf6cf7c55759d5210750b5d60f3' THEN 'ELON'
WHEN t.token_a_address::text = '\x3301ee63fb29f863f2333bd4466acb46cd8323e6' THEN 'AKITA'
WHEN t.token_a_address::text = '\x5218e472cfcfe0b64a064f055b43b4cdc9efd3a6' THEN 'eRSDL'
WHEN t.token_a_address::text = '\x1453dbb8a29551ade11d89825ca812e05317eaeb' THEN 'TEND'
WHEN t.token_a_address::text = '\x35a532d376ffd9a705d0bb319532837337a398e7' THEN 'WDOGE'
WHEN t.token_a_address::text = '\x17ef75aa22dd5f6c2763b8304ab24f40ee54d48a' THEN 'RVP'
WHEN t.token_a_address::text = '\x6dea81c8171d0ba574754ef6f8b412f2ed88c54d' THEN 'LQTY'
WHEN t.token_a_address::text = '\x3832d2f059e55934220881f831be501d180671a7' THEN 'renDOGE'
WHEN t.token_a_address::text = '\xf16e4d813f4dcfde4c5b44f305c908742de84ef0' THEN 'ETH2x ADL'
WHEN t.token_a_address::text = '\x77fba179c79de5b7653f68b5039af940ada60ce0' THEN 'FORTH'
WHEN t.token_a_address::text = '\xf65b5c5104c4fafd4b709d9d60a185eae063276c' THEN 'TRU'
WHEN t.token_a_address::text = '\xc7283b66eb1eb5fb86327f08e1b5816b0720212b' THEN 'TRIBE'
WHEN t.token_a_address::text = '\xc8807f0f5ba3fa45ffbdc66928d71c5289249014' THEN 'ISP'
WHEN t.token_a_address::text = '\x27c70cd1946795b66be9d954418546998b546634' THEN 'LEASH'
WHEN t.token_a_address::text = '\x956f47f50a910163d8bf957cf5846d573e7f87ca' THEN 'FEI'
WHEN t.token_a_address::text = '\x5f98805a4e8be255a32880fdec7f6728c6568ba0' THEN 'LUSD'
WHEN t.token_a_address::text = '\xb525ecee288b99216cd481c56b6efbdbe9bf90b5' THEN 'KUMA'
WHEN t.token_a_address::text = '\xd291e7a03283640fdc51b121ac401383a46cc623' THEN 'RGT'
WHEN t.token_a_address::text = '\x3d6f0dea3ac3c607b3998e6ce14b6350721752d9' THEN 'CARDS'
WHEN t.token_a_address::text = '\x841fb148863454a3b3570f515414759be9091465' THEN 'SHIH'
WHEN t.token_a_address::text = '\xd0660cd418a64a1d44e9214ad8e459324d8157f1' THEN 'WOOFY'
WHEN t.token_a_address::text = '\x853d955acef822db058eb8505911ed77f175b99e' THEN 'FRAX'
WHEN t.token_a_address::text = '\x5e74c9036fb86bd7ecdcb084a0673efc32ea31cb' THEN 'sETH'
WHEN t.token_a_address::text = '\xae7ab96520de3a18e5e111b5eaab095312d7fe84' THEN 'stETH'
WHEN t.token_a_address::text = '\xe95a203b1a91a908f9b9ce46459d101078c2c3cb' THEN 'ankrETH'
WHEN t.token_a_address::text = '\x9559aaa82d9649c7a7b220e7c461d2e74c9a3593' THEN 'rETH'
WHEN t.token_a_address::text = '\x4ddc2d193948926d02f9b1fe9e1daa0718270ed5' THEN 'cETH'

ELSE COALESCE(t.token_a_symbol,t.token_a_address::text)
END AS token_a,
CASE --filling in missing addresses for coins. Maybe not worth keeping up, some are memes.
WHEN t.token_b_symbol::text = 'WETH' THEN 'ETH'
WHEN t.token_b_address::text = '\x0000000000000000000000000000000000000000' THEN 'Burn Addr'
WHEN t.token_b_address::text = '\xde30da39c46104798bb5aa3fe8b9e0e1f348163f' THEN 'GTC'
WHEN t.token_b_address::text = '\xa47c8bf37f92abed4a126bda807a7b7498661acd' THEN 'UST'
WHEN t.token_b_address::text = '\x6c28AeF8977c9B773996d0e8376d2EE379446F2f' THEN 'QUICK'
WHEN t.token_b_address::text = '\x519c1001d550c0a1dae7d1fc220f7d14c2a521bb' THEN 'PSWAP'
WHEN t.token_b_address::text = '\xf411903cbc70a74d22900a5de66a2dda66507255' THEN 'VERA'
WHEN t.token_b_address::text = '\x2f109021afe75b949429fe30523ee7c0d5b27207' THEN 'OCC'
WHEN t.token_b_address::text = '\xc834fa996fa3bec7aad3693af486ae53d8aa8b50' THEN 'CONV'
WHEN t.token_b_address::text = '\x4691937a7508860f876c9c0a2a617e7d9e945d4b' THEN 'WOO'
WHEN t.token_b_address::text = '\x9695e0114e12c0d3a3636fab5a18e6b737529023' THEN 'DFYN'
WHEN t.token_b_address::text = '\x3431f91b3a388115f00c5ba9fdb899851d005fb5' THEN 'GERO'
WHEN t.token_b_address::text = '\x038a68ff68c393373ec894015816e33ad41bd564' THEN 'GLCH'
WHEN t.token_b_address::text = '\xa2b4c0af19cc16a6cfacce81f192b024d625817d' THEN 'KISHU'
WHEN t.token_b_address::text = '\x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce' THEN 'SHIB'
WHEN t.token_b_address::text = '\x761d38e5ddf6ccf6cf7c55759d5210750b5d60f3' THEN 'ELON'
WHEN t.token_b_address::text = '\x3301ee63fb29f863f2333bd4466acb46cd8323e6' THEN 'AKITA'
WHEN t.token_b_address::text = '\x5218e472cfcfe0b64a064f055b43b4cdc9efd3a6' THEN 'eRSDL'
WHEN t.token_b_address::text = '\x1453dbb8a29551ade11d89825ca812e05317eaeb' THEN 'TEND'
WHEN t.token_b_address::text = '\x35a532d376ffd9a705d0bb319532837337a398e7' THEN 'WDOGE'
WHEN t.token_b_address::text = '\x17ef75aa22dd5f6c2763b8304ab24f40ee54d48a' THEN 'RVP'
WHEN t.token_b_address::text = '\x6dea81c8171d0ba574754ef6f8b412f2ed88c54d' THEN 'LQTY'
WHEN t.token_b_address::text = '\x3832d2f059e55934220881f831be501d180671a7' THEN 'renDOGE'
WHEN t.token_b_address::text = '\xf16e4d813f4dcfde4c5b44f305c908742de84ef0' THEN 'ETH2x ADL'
WHEN t.token_b_address::text = '\x77fba179c79de5b7653f68b5039af940ada60ce0' THEN 'FORTH'
WHEN t.token_b_address::text = '\xf65b5c5104c4fafd4b709d9d60a185eae063276c' THEN 'TRU'
WHEN t.token_b_address::text = '\xc7283b66eb1eb5fb86327f08e1b5816b0720212b' THEN 'TRIBE'
WHEN t.token_b_address::text = '\xc8807f0f5ba3fa45ffbdc66928d71c5289249014' THEN 'ISP'
WHEN t.token_b_address::text = '\x27c70cd1946795b66be9d954418546998b546634' THEN 'LEASH'
WHEN t.token_b_address::text = '\x956f47f50a910163d8bf957cf5846d573e7f87ca' THEN 'FEI'
WHEN t.token_b_address::text = '\x5f98805a4e8be255a32880fdec7f6728c6568ba0' THEN 'LUSD'
WHEN t.token_b_address::text = '\xb525ecee288b99216cd481c56b6efbdbe9bf90b5' THEN 'KUMA'
WHEN t.token_b_address::text = '\xd291e7a03283640fdc51b121ac401383a46cc623' THEN 'RGT'
WHEN t.token_b_address::text = '\x3d6f0dea3ac3c607b3998e6ce14b6350721752d9' THEN 'CARDS'
WHEN t.token_b_address::text = '\x841fb148863454a3b3570f515414759be9091465' THEN 'SHIH'
WHEN t.token_b_address::text = '\xd0660cd418a64a1d44e9214ad8e459324d8157f1' THEN 'WOOFY'
WHEN t.token_b_address::text = '\x853d955acef822db058eb8505911ed77f175b99e' THEN 'FRAX'
WHEN t.token_b_address::text = '\x5e74c9036fb86bd7ecdcb084a0673efc32ea31cb' THEN 'sETH'
WHEN t.token_b_address::text = '\xae7ab96520de3a18e5e111b5eaab095312d7fe84' THEN 'stETH'
WHEN t.token_b_address::text = '\xe95a203b1a91a908f9b9ce46459d101078c2c3cb' THEN 'ankrETH'
WHEN t.token_b_address::text = '\x9559aaa82d9649c7a7b220e7c461d2e74c9a3593' THEN 'rETH'
WHEN t.token_b_address::text = '\x4ddc2d193948926d02f9b1fe9e1daa0718270ed5' THEN 'cETH'

ELSE COALESCE(t.token_b_symbol,t.token_b_address::text)
END AS token_b
,t.token_a_amount
,t.token_b_amount
,t.exchange_contract_address -- exchange_contract_address is the v3 NFT LP Position
,t.tx_hash -- transaction addr (for spot checks)
,t.usd_amount --TODO: Find some way to pull in USD of any missing tokens
,c.fee/1e6 AS fee_tier --Converting fee tier to a multiplier (i.e. for 0.3%, 3000 -> 0.003)
,t.usd_amount*(c.fee/1e6) AS fees_collected_usd --USD Amount * %fee = fees collected
FROM dex.""trades"" t
LEFT JOIN uniswap_v3.""Factory_call_createPool"" c --1. Join With Pool creation on LP contract address to pull fee tier
ON t.exchange_contract_address = c.output_pool
WHERE t.project = 'Uniswap'
AND t.version = '3'
AND t.block_time >= '05-05-2021 17:00' -- Uni v3 launch date/hr
AND block_time >= (DATE_TRUNC('minute',CURRENT_TIMESTAMP) - '2 days'::INTERVAL)
ORDER BY t.block_time DESC
),
sum_pairs AS( -- Using this to decide which trading pair order to pick (i.e WBTC/USDC vs USDC/WBTC). We'll pick the one with the greatest usd volume.
SELECT 
CONCAT(token_a,'/',token_b) AS forward_pair -- Trading pair
,CONCAT(token_b,'/',token_a) AS backward_pair -- For joining buys/sells later
,SUM(usd_amount) AS sum_usd
FROM all_trades
GROUP BY 1,2
),

final_trading_pairs AS( --building the mapping table for pairs
SELECT
a.forward_pair, a.backward_pair,
a.sum_usd,b.sum_usd,
CASE
WHEN RIGHT(a.backward_pair,3)='ETH' THEN a.backward_pair -- if the backward version ends in WETH, keep it
WHEN RIGHT(a.forward_pair,3)='WTH' THEN a.forward_pair -- if forwards ends in eth, flip it
WHEN RIGHT(a.backward_pair,4)='WBTC' THEN a.backward_pair
WHEN RIGHT(a.forward_pair,4)='WBTC' THEN a.forward_pair
WHEN (a.sum_usd >= b.sum_usd) -- when a > b
OR b.sum_usd IS NULL -- or if backward usd is null
THEN a.forward_pair -- select forward
ELSE a.backward_pair --else select backward in every other circumstance
END AS trading_pair

FROM sum_pairs a
LEFT JOIN sum_pairs b
ON a.forward_pair = b.backward_pair
),
v3_trades AS (
SELECT
atx.block_time,
--f1.trading_pair,
--f2.trading_pair,
COALESCE(f1.trading_pair,f2.trading_pair) AS trading_pair,
atx.usd_amount,
atx.fee_tier,
atx.fees_collected_usd,
atx.tx_hash
FROM all_trades atx

LEFT JOIN final_trading_pairs f1
ON CONCAT(atx.token_a,'/',atx.token_b) = f1.forward_pair
LEFT JOIN final_trading_pairs f2 --check if the pair maps with the backward version
ON CONCAT(atx.token_a,'/',atx.token_b) = f2.backward_pair
),
pairs AS (
SELECT
trading_pair
,COUNT(trading_pair) AS num_trades
,SUM(usd_amount) AS total_usd
,SUM(fees_collected_usd) AS total_fees_usd
,fee_tier
,RANK() OVER(ORDER BY SUM(usd_amount) DESC) AS pair_rank_vol --rank by volume
,RANK() OVER(ORDER BY SUM(fees_collected_usd) DESC) AS pair_rank_fee --rank by fees
FROM v3_trades
WHERE block_time >= (DATE_TRUNC('minute',CURRENT_TIMESTAMP) - '2 days'::INTERVAL)
AND usd_amount IS NOT NULL -- Eventually see if Dune adds new tokens, or we need to manually
GROUP BY trading_pair, fee_tier
ORDER BY SUM(usd_amount) DESC),

get_liquidity_sums AS ( --this is to find the liquidity of each position at trade time
SELECT
--amount, amount0, amount1, 
lq.contract_address,
DATE_TRUNC('minute',lq.call_block_time) AS call_block_time,
t1.decimals AS decimals1,
t0.decimals AS decimals0,
t1.price AS price1,
t0.price AS price0,

SUM(CASE WHEN lq.tr_type = 'Mint' THEN lq.amount0 ELSE 0 END) AS liq_added0,
SUM(lq.amount0) AS liq_net0,
SUM(CASE WHEN lq.tr_type = 'Mint' THEN lq.amount1 ELSE 0 END) AS liq_added1,
SUM(lq.amount1) AS liq_net1,
COUNT(DISTINCT CASE WHEN lq.tr_type = 'Mint' THEN ""tokenId"" ELSE NULL END) AS num_positions_added

FROM (--this is a mess. We union new mints + adds to liquidity + new burns + removals from liquidity. eesh
    -- NEW MINTS
    SELECT DISTINCT * FROM ( --some pairs have duplicate rows and idk why
    SELECT
    m.amount, m.output_amount0 AS amount0, m.output_amount1 AS amount1, m.contract_address,
    m.call_block_time, m.call_tx_hash, m.""tickLower"", m.""tickUpper"",
    /*l.liquidity,*/ l.""output_tokenId""::text AS ""tokenId"", 'Mint' AS tr_type
    FROM uniswap_v3.""Pair_call_mint"" m
   
    INNER JOIN uniswap_v3.""NonfungibleTokenPositionManager_call_mint"" l
    ON m.call_tx_hash = l.call_tx_hash
    AND m.call_block_time = l.call_block_time
    
    WHERE l.""output_tokenId""::text IS NOT NULL --Some of these are blank, but the transactions are batched/kind of weird or have 0 amount. Maybe revisit, but these seem like duplicates/multiples within a larger transaction that we catch
    AND (m.amount != 0) --only events that do something
    --AND m.contract_address IN (SELECT exchange_contract_address FROM top_pools)
    AND m.call_success = 'true' AND l.call_success = 'true'
    -- since we only want liquidity added at this moment, we can filter on date
    AND m.call_block_time >= (DATE_TRUNC('hour',CURRENT_TIMESTAMP) - '2 days'::INTERVAL)
    AND l.call_block_time >= (DATE_TRUNC('hour',CURRENT_TIMESTAMP) - '2 days'::INTERVAL)
    
    UNION
    --ADDITIONS TO LIQUIDITY INCREASE
    SELECT
    m.amount, m.output_amount0 AS amount0, m.output_amount1 AS amount1, m.contract_address,
    m.call_block_time, m.call_tx_hash, m.""tickLower"", m.""tickUpper"",
    /*l.liquidity,*/ (l.params->'tokenId')::text AS ""tokenId"", 'Mint' AS tr_type
    FROM uniswap_v3.""Pair_call_mint"" m
   
    INNER JOIN uniswap_v3.""NonfungibleTokenPositionManager_call_increaseLiquidity"" l
    ON m.call_tx_hash = l.call_tx_hash
    AND m.call_block_time = l.call_block_time
    
    WHERE (l.params->'tokenId')::text IS NOT NULL --Some of these are blank, but the transactions are batched/kind of weird or have 0 amount. Maybe revisit, but these seem like duplicates/multiples within a larger transaction that we catch
    AND (m.amount != 0) --only events that do something
    --AND m.contract_address IN (SELECT exchange_contract_address FROM top_pools)
    AND m.call_success = 'true' AND l.call_success = 'true'
    -- since we only want liquidity added at this moment, we can filter on date
    AND m.call_block_time >= (DATE_TRUNC('hour',CURRENT_TIMESTAMP) - '2 days'::INTERVAL)
    AND l.call_block_time >= (DATE_TRUNC('hour',CURRENT_TIMESTAMP) - '2 days'::INTERVAL)

    UNION
    -- NEW BURNS // uniswap_v3.""NonfungibleTokenPositionManager_call_burn"" doesn't do anything so jsut decrease liq
    SELECT --negate because these are burns
    (-1)*b.amount AS amount, (-1)*b.output_amount0 AS amount0, (-1)*b.output_amount1 AS amount1, b.contract_address,
    b.call_block_time, b.call_tx_hash, b.""tickLower"", b.""tickUpper"",
    /*l.liquidity,*/ (l.params->'tokenId')::text AS tokenId, 'Burn' AS tr_type
    FROM uniswap_v3.""Pair_call_burn"" b
    
    INNER JOIN uniswap_v3.""NonfungibleTokenPositionManager_call_decreaseLiquidity"" l
    ON b.call_tx_hash = l.call_tx_hash
    AND b.call_block_time = l.call_block_time
    
    WHERE (l.params->'tokenId')::text IS NOT NULL --Some of these are blank, but the transactions are batched/kind of weird or have 0 amount. Maybe revisit, but these seem like duplicates/multiples within a larger transaction that we catch
    AND (b.amount != 0) --only events that do something
   -- AND b.contract_address IN (SELECT exchange_contract_address FROM top_pools)
    AND b.call_success = 'true'
    AND l.call_success = 'true'
    -- since we only want liquidity added at this moment, we can filter on date
    AND b.call_block_time >= (DATE_TRUNC('hour',CURRENT_TIMESTAMP) - '2 days'::INTERVAL)
    AND l.call_block_time >= (DATE_TRUNC('hour',CURRENT_TIMESTAMP) - '2 days'::INTERVAL)
    ) ld
    ) lq
    INNER JOIN uniswap_v3.""Factory_call_createPool"" p --get pool data
    ON lq.contract_address = p.output_pool
    INNER JOIN prices.""usd"" t0 --inner since we're summing all up
    ON DATE_TRUNC('minute',lq.call_block_time) = t0.minute
    AND p.""tokenA"" = t0.""contract_address""
    INNER JOIN prices.""usd"" t1 --inner since we're summing all up
    ON DATE_TRUNC('minute',lq.call_block_time) = t1.minute
    AND p.""tokenB"" = t1.""contract_address""

WHERE t1.minute >= (DATE_TRUNC('hour',CURRENT_TIMESTAMP) - '2 days'::INTERVAL)
AND t0.minute >= (DATE_TRUNC('hour',CURRENT_TIMESTAMP) - '2 days'::INTERVAL)
GROUP BY 1,2,3,4,5,6
),

total_liq AS (
SELECT
DATE_TRUNC('hour',call_block_time) AS block_hour,
SUM(tvl_usd_added) AS liq_usd_added,
SUM(tvl_usd_net) AS liq_usd_net,
SUM(num_positions_added) AS num_new_positions

FROM
(
    SELECT DISTINCT
    l.call_block_time,
    l.contract_address,
    l.num_positions_added,
    
    -- Sum all liquidity added (liquidity volume) by hour
    (CASE WHEN (l.liq_added0 IS NULL) OR (l.liq_added0 IS NULL) OR (decimals0 IS NULL) THEN 0
    ELSE price0*(l.liq_added0/10^decimals0)
    END)
    +
    (CASE WHEN (l.liq_added1 IS NULL) OR (l.liq_added1 IS NULL) OR (decimals1 IS NULL) THEN 0
    ELSE price1*(l.liq_added1/10^decimals1)
    END)
    AS tvl_usd_added,
    -- Sum all net liquidity added by hour (change in liquidity)
    (CASE WHEN (l.liq_net0 IS NULL) OR (l.liq_net0 IS NULL) OR (decimals0 IS NULL) THEN 0
    ELSE price0*(l.liq_net0/10^decimals0)
    END)
    +
    (CASE WHEN (l.liq_net1 IS NULL) OR (l.liq_added1 IS NULL) OR (decimals1 IS NULL) THEN 0
    ELSE price1*(l.liq_net1/10^decimals1)
    END)
    AS tvl_usd_net
    
    FROM get_liquidity_sums l
    
) bh
GROUP BY 1

),
trade_counters AS
(SELECT
SUM(total_usd)::decimal /1000000000 AS bil_usd_volume, -- all volume no filter
SUM(total_fees_usd)::decimal /1000000 AS mil_usd_fees, -- all fees no filter
SUM(CASE WHEN pair_rank_vol <=15 THEN total_usd ELSE 0 END)::decimal /1000000000 AS bil_usd_volume_top15, -- volume of top 15 pairs by volume
SUM(CASE WHEN pair_rank_fee <=15 THEN total_fees_usd ELSE 0 END)::decimal /1000000 AS mil_usd_fees_top15--, -- fees of top 15 pairs by fees


FROM pairs
),
liq_counters AS(
SELECT
SUM(liq_usd_added)::decimal /1000000 AS mil_lp_usd_added,
SUM(liq_usd_net)::decimal /1000000 AS mil_lp_usd_net
FROM total_liq
)

SELECT
bil_usd_volume, mil_usd_fees,
bil_usd_volume_top15, mil_usd_fees_top15,
mil_lp_usd_added, mil_lp_usd_net
FROM trade_counters,liq_counters
"
55949,Uni v3 -2D Top LPs by Fees Earned,,"[{""id"": 110831, ""type"": ""table"", ""name"": ""Query results"", ""options"": {""columns"": [{""name"": ""total_usd"", ""numberFormat"": ""$0a""}]}, ""created_at"": ""2021-05-31T22:24:15.350432+00:00"", ""__typename"": ""visualizations""}, {""id"": 110832, ""type"": ""table"", ""name"": ""LP Positions by Fees"", ""options"": {""columns"": [{""name"": ""pair"", ""title"": ""Pair (A/B)""}, {""name"": ""atob_lower_bound"", ""title"": ""A/B Lower"", ""alignContent"": ""right"", ""numberFormat"": ""0,0.000""}, {""name"": ""atob_upper_bound"", ""title"": ""A/B Upper"", ""alignContent"": ""right"", ""numberFormat"": ""0,0.000""}, {""name"": ""fee_tier"", ""title"": ""Fee Tier"", ""numberFormat"": ""0.00%""}, {""name"": ""fees_collected_usd"", ""title"": ""*Fees (Approx)*"", ""alignContent"": ""center"", ""numberFormat"": ""$0.00a""}, {""name"": ""last_tvl_usd"", ""title"": ""Last LP Value"", ""alignContent"": ""right"", ""numberFormat"": ""$0.00a""}, {""name"": ""usd_volume"", ""title"": ""In-Range Volume |"", ""numberFormat"": ""$0.00a""}, {""name"": ""feel_to_tvl"", ""numberFormat"": ""0.00%""}, {""name"": ""fees_to_tvl"", ""title"": ""*Fees/LP*"", ""alignContent"": ""center"", ""numberFormat"": ""0.00%""}, {""name"": ""tokenId"", ""title"": ""NFT ID""}, {""name"": ""url"", ""title"": ""LP URL""}, {""name"": ""liq_start"", ""title"": ""Position Opened""}, {""name"": ""?column?"", ""numberFormat"": """"}, {""name"": ""pos_age"", ""title"": ""Age (Days H:M:S)""}, {""name"": ""inrange_vol"", ""title"": ""In-Range Volume"", ""alignContent"": ""right"", ""numberFormat"": ""$0.00a""}, {""name"": ""pair_vol"", ""title"": ""Total Pair Volume"", ""alignContent"": ""right"", ""numberFormat"": ""$0.00a""}, {""name"": ""share_of_possible_fees"", ""title"": ""% of Pool Fees"", ""alignContent"": ""center"", ""numberFormat"": ""0.0%""}, {""name"": ""range_efficiency"", ""title"": ""% In-Range |"", ""alignContent"": ""center"", ""numberFormat"": ""0.0%""}, {""name"": ""lp_status"", ""title"": ""LP Status""}, {""name"": ""lp_tag"", ""title"": ""LP Tag (ID - Pair)""}, {""name"": ""pos_close"", ""title"": ""Closed""}, {""name"": ""lp_radius"", ""title"": ""LP Radius |"", ""alignContent"": ""center"", ""numberFormat"": ""0.0%""}, {""name"": ""lp_end"", ""title"": ""Closed""}, {""name"": ""fees_to_tvl_apy"", ""title"": ""APY"", ""alignContent"": ""center"", ""numberFormat"": ""0.0a%""}, {""name"": ""fee_rank"", ""title"": ""By Fees"", ""alignContent"": ""center""}, {""name"": ""pair_fee"", ""title"": ""Pair Tag (Pair - Fee)""}, {""name"": ""creator_address"", ""title"": ""LP Creator""}, {""name"": ""share_of_pair_fees"", ""title"": ""% of Pair Fees |"", ""alignContent"": ""center"", ""numberFormat"": ""0.0%""}, {""name"": ""most_tvl_usd"", ""title"": ""Peak LP Value"", ""alignContent"": ""center"", ""numberFormat"": ""$0.00a""}, {""name"": ""fee_tag"", ""title"": ""Fee Tier""}]}, ""created_at"": ""2021-05-31T22:24:15.350432+00:00"", ""__typename"": ""visualizations""}, {""id"": 110830, ""type"": ""chart"", ""name"": ""Fees by LP Value (Dot is NFT ID)"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""LP Value""}, ""tickFormat"": ""$0a""}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Fees Collected""}, ""tickFormat"": ""$0a""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""$0.0a"", ""columnMapping"": {""lp_tag"": ""series"", ""last_tvl_usd"": ""x"", ""most_tvl_usd"": ""x"", ""fees_collected_usd"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""scatter""}, ""created_at"": ""2021-05-31T22:24:15.350432+00:00"", ""__typename"": ""visualizations""}, {""id"": 111166, ""type"": ""chart"", ""name"": ""LP Competitiveness by Pair (Higher Dot = Greater LP Dependency)"", ""options"": {""sortX"": false, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Pair""}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Share of Fees Earned for Each LP""}, ""tickFormat"": ""0%""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""0.0%"", ""columnMapping"": {"""": ""y"", ""tokenId"": ""series"", ""pair_fee"": ""x"", ""share_of_possible_fees"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""scatter""}, ""created_at"": ""2021-06-01T03:10:11.131858+00:00"", ""__typename"": ""visualizations""}, {""id"": 111269, ""type"": ""chart"", ""name"": ""Fees/LP by Pair Volume"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""logarithmic""}, ""yAxis"": [{""type"": ""-""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""0.00%"", ""columnMapping"": {""lp_tag"": ""series"", ""pair_vol"": ""x"", ""fees_to_tvl"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""scatter""}, ""created_at"": ""2021-06-01T04:46:45.240492+00:00"", ""__typename"": ""visualizations""}, {""id"": 116034, ""type"": ""chart"", ""name"": ""Share of Pair Fees by Creator"", ""options"": {""sortX"": false, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""percentValues"": false}, ""reverseX"": false, ""numberFormat"": ""0.0%"", ""columnMapping"": {""pair_fee"": ""x"", ""creator_address"": ""series"", ""share_of_possible_fees"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""scatter""}, ""created_at"": ""2021-06-05T05:17:25.461245+00:00"", ""__typename"": ""visualizations""}]","WITH params AS
(
SELECT
'2 days' as tp,
--'{{LP - Top X Pairs}}'::decimal as min_pair_rank,
'{{3 Min LP Fees - k}}'::decimal*1000 AS min_fees, 
'{{2 Min LP TVL - k}}'::decimal*1000 AS min_tvl,
'{{1 Min Pair Volume - M}}'::decimal*1e6 AS min_vol_mil
),

top_pools AS
(
SELECT
""exchange_contract_address"",total_usd, total_fees
FROM (
    SELECT
    ""exchange_contract_address"",
    p.fee,
    SUM(""usd_amount"") AS total_usd,
    SUM(""usd_amount""*p.fee/1e6) AS total_fees,
    RANK() OVER (ORDER BY SUM(""usd_amount"") DESC) AS pair_rank
    FROM dex.""trades"" t
    INNER JOIN uniswap_v3.""Factory_call_createPool"" p --get pool data
    ON t.exchange_contract_address = p.output_pool
    WHERE project = 'Uniswap'
    AND version = '3'
    AND category = 'DEX'
    AND block_time >= '05-05-2021 17:00' -- Uni v3 launch date/hr
    AND block_time >= (DATE_TRUNC('minute',CURRENT_TIMESTAMP) - '2 days'::INTERVAL)
    --AND ""exchange_contract_address"" = '\x8ad599c3a0ff1de082011efddc58f1908eb6e6d8'
    AND (""usd_amount"" IS NOT NULL)
    GROUP BY 1,2
    ) a
--WHERE pair_rank <=  (SELECT min_pair_rank from params)
WHERE total_usd >= (SELECT min_vol_mil FROM params)
AND (total_usd IS NOT NULL)
),

v3_trunc AS (
SELECT *--,
--ROW_NUMBER() OVER () AS rown
FROM
    (
    SELECT
    --t.block_time,
    date_trunc('hour',t.block_time) + --5 minute blocks // This is for preformance: takes ~5 mins to run if we trunc by minute, ~3 mins by 5 mins, 1 min by 15 minsm 1 min by hour... trying to find a happy medium
        ( --chose 15 minutes as a tradeoff between accuracy (shorter window) and filter flexibility (bigger windwo)
        (FLOOR(extract(minute FROM t.block_time)::int / 15)*15 || 'minutes')::interval --trying 5 mins for accuracy
        )
    AS block_fifteenmins, --make this hour if query hangs
    
    t.""exchange_contract_address"",
    t.""token_a_address"",t.""token_a_symbol"",
    t.""token_b_address"",t.""token_b_symbol"",
    CASE --filling in missing addresses for coins. Maybe not worth keeping up, some are memes.
    WHEN t.token_a_symbol::text = 'WETH' THEN 'ETH'
    WHEN t.token_a_address::text = '\x0000000000000000000000000000000000000000' THEN 'Burn Addr'
    WHEN t.token_a_address::text = '\xde30da39c46104798bb5aa3fe8b9e0e1f348163f' THEN 'GTC'
    WHEN t.token_a_address::text = '\xa47c8bf37f92abed4a126bda807a7b7498661acd' THEN 'UST'
    WHEN t.token_a_address::text = '\x6c28AeF8977c9B773996d0e8376d2EE379446F2f' THEN 'QUICK'
    WHEN t.token_a_address::text = '\x519c1001d550c0a1dae7d1fc220f7d14c2a521bb' THEN 'PSWAP'
    WHEN t.token_a_address::text = '\xf411903cbc70a74d22900a5de66a2dda66507255' THEN 'VERA'
    WHEN t.token_a_address::text = '\x2f109021afe75b949429fe30523ee7c0d5b27207' THEN 'OCC'
    WHEN t.token_a_address::text = '\x4691937a7508860f876c9c0a2a617e7d9e945d4b' THEN 'WOO'
    WHEN t.token_a_address::text = '\x9695e0114e12c0d3a3636fab5a18e6b737529023' THEN 'DFYN'
    WHEN t.token_a_address::text = '\xc834fa996fa3bec7aad3693af486ae53d8aa8b50' THEN 'CONV'
    WHEN t.token_a_address::text = '\x3431f91b3a388115f00c5ba9fdb899851d005fb5' THEN 'GERO'
    WHEN t.token_a_address::text = '\x038a68ff68c393373ec894015816e33ad41bd564' THEN 'GLCH'
    WHEN t.token_a_address::text = '\xa2b4c0af19cc16a6cfacce81f192b024d625817d' THEN 'KISHU'
    WHEN t.token_a_address::text = '\x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce' THEN 'SHIB'
    WHEN t.token_a_address::text = '\x761d38e5ddf6ccf6cf7c55759d5210750b5d60f3' THEN 'ELON'
    WHEN t.token_a_address::text = '\x3301ee63fb29f863f2333bd4466acb46cd8323e6' THEN 'AKITA'
    WHEN t.token_a_address::text = '\x5218e472cfcfe0b64a064f055b43b4cdc9efd3a6' THEN 'eRSDL'
    WHEN t.token_a_address::text = '\x1453dbb8a29551ade11d89825ca812e05317eaeb' THEN 'TEND'
    WHEN t.token_a_address::text = '\x35a532d376ffd9a705d0bb319532837337a398e7' THEN 'WDOGE'
    WHEN t.token_a_address::text = '\x17ef75aa22dd5f6c2763b8304ab24f40ee54d48a' THEN 'RVP'
    WHEN t.token_a_address::text = '\x6dea81c8171d0ba574754ef6f8b412f2ed88c54d' THEN 'LQTY'
    WHEN t.token_a_address::text = '\x3832d2f059e55934220881f831be501d180671a7' THEN 'renDOGE'
    WHEN t.token_a_address::text = '\xf16e4d813f4dcfde4c5b44f305c908742de84ef0' THEN 'ETH2x ADL'
    WHEN t.token_a_address::text = '\x77fba179c79de5b7653f68b5039af940ada60ce0' THEN 'FORTH'
    WHEN t.token_a_address::text = '\xf65b5c5104c4fafd4b709d9d60a185eae063276c' THEN 'TRU'
    WHEN t.token_a_address::text = '\xc7283b66eb1eb5fb86327f08e1b5816b0720212b' THEN 'TRIBE'
    WHEN t.token_a_address::text = '\xc8807f0f5ba3fa45ffbdc66928d71c5289249014' THEN 'ISP'
    WHEN t.token_a_address::text = '\x27c70cd1946795b66be9d954418546998b546634' THEN 'LEASH'
    WHEN t.token_a_address::text = '\x956f47f50a910163d8bf957cf5846d573e7f87ca' THEN 'FEI'
    WHEN t.token_a_address::text = '\x5f98805a4e8be255a32880fdec7f6728c6568ba0' THEN 'LUSD'
    WHEN t.token_a_address::text = '\xb525ecee288b99216cd481c56b6efbdbe9bf90b5' THEN 'KUMA'
    WHEN t.token_a_address::text = '\xd291e7a03283640fdc51b121ac401383a46cc623' THEN 'RGT'
    WHEN t.token_a_address::text = '\x3d6f0dea3ac3c607b3998e6ce14b6350721752d9' THEN 'CARDS'
    WHEN t.token_a_address::text = '\x841fb148863454a3b3570f515414759be9091465' THEN 'SHIH'
    WHEN t.token_a_address::text = '\xd0660cd418a64a1d44e9214ad8e459324d8157f1' THEN 'WOOFY'
    WHEN t.token_a_address::text = '\x853d955acef822db058eb8505911ed77f175b99e' THEN 'FRAX'
    WHEN t.token_a_address::text = '\x5e74c9036fb86bd7ecdcb084a0673efc32ea31cb' THEN 'sETH'
    WHEN t.token_a_address::text = '\xae7ab96520de3a18e5e111b5eaab095312d7fe84' THEN 'stETH'
    WHEN t.token_a_address::text = '\xe95a203b1a91a908f9b9ce46459d101078c2c3cb' THEN 'ankrETH'
    WHEN t.token_a_address::text = '\x9559aaa82d9649c7a7b220e7c461d2e74c9a3593' THEN 'rETH'
    WHEN t.token_a_address::text = '\x4ddc2d193948926d02f9b1fe9e1daa0718270ed5' THEN 'cETH'
    
    ELSE COALESCE(t.token_a_symbol,
    CONCAT(LEFT(t.token_a_address::text,3),'...',RIGHT(t.token_a_address::text,3))
    )
    END AS token_a,
    CASE --filling in missing addresses for coins. Maybe not worth keeping up, some are memes.
    WHEN t.token_b_symbol::text = 'WETH' THEN 'ETH'
    WHEN t.token_b_address::text = '\x0000000000000000000000000000000000000000' THEN 'Burn Addr'
    WHEN t.token_b_address::text = '\xde30da39c46104798bb5aa3fe8b9e0e1f348163f' THEN 'GTC'
    WHEN t.token_b_address::text = '\xa47c8bf37f92abed4a126bda807a7b7498661acd' THEN 'UST'
    WHEN t.token_b_address::text = '\x6c28AeF8977c9B773996d0e8376d2EE379446F2f' THEN 'QUICK'
    WHEN t.token_b_address::text = '\x519c1001d550c0a1dae7d1fc220f7d14c2a521bb' THEN 'PSWAP'
    WHEN t.token_b_address::text = '\xf411903cbc70a74d22900a5de66a2dda66507255' THEN 'VERA'
    WHEN t.token_b_address::text = '\x2f109021afe75b949429fe30523ee7c0d5b27207' THEN 'OCC'
    WHEN t.token_b_address::text = '\xc834fa996fa3bec7aad3693af486ae53d8aa8b50' THEN 'CONV'
    WHEN t.token_b_address::text = '\x4691937a7508860f876c9c0a2a617e7d9e945d4b' THEN 'WOO'
    WHEN t.token_b_address::text = '\x9695e0114e12c0d3a3636fab5a18e6b737529023' THEN 'DFYN'
    WHEN t.token_b_address::text = '\x3431f91b3a388115f00c5ba9fdb899851d005fb5' THEN 'GERO'
    WHEN t.token_b_address::text = '\x038a68ff68c393373ec894015816e33ad41bd564' THEN 'GLCH'
    WHEN t.token_b_address::text = '\xa2b4c0af19cc16a6cfacce81f192b024d625817d' THEN 'KISHU'
    WHEN t.token_b_address::text = '\x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce' THEN 'SHIB'
    WHEN t.token_b_address::text = '\x761d38e5ddf6ccf6cf7c55759d5210750b5d60f3' THEN 'ELON'
    WHEN t.token_b_address::text = '\x3301ee63fb29f863f2333bd4466acb46cd8323e6' THEN 'AKITA'
    WHEN t.token_b_address::text = '\x5218e472cfcfe0b64a064f055b43b4cdc9efd3a6' THEN 'eRSDL'
    WHEN t.token_b_address::text = '\x1453dbb8a29551ade11d89825ca812e05317eaeb' THEN 'TEND'
    WHEN t.token_b_address::text = '\x35a532d376ffd9a705d0bb319532837337a398e7' THEN 'WDOGE'
    WHEN t.token_b_address::text = '\x17ef75aa22dd5f6c2763b8304ab24f40ee54d48a' THEN 'RVP'
    WHEN t.token_b_address::text = '\x6dea81c8171d0ba574754ef6f8b412f2ed88c54d' THEN 'LQTY'
    WHEN t.token_b_address::text = '\x3832d2f059e55934220881f831be501d180671a7' THEN 'renDOGE'
    WHEN t.token_b_address::text = '\xf16e4d813f4dcfde4c5b44f305c908742de84ef0' THEN 'ETH2x ADL'
    WHEN t.token_b_address::text = '\x77fba179c79de5b7653f68b5039af940ada60ce0' THEN 'FORTH'
    WHEN t.token_b_address::text = '\xf65b5c5104c4fafd4b709d9d60a185eae063276c' THEN 'TRU'
    WHEN t.token_b_address::text = '\xc7283b66eb1eb5fb86327f08e1b5816b0720212b' THEN 'TRIBE'
    WHEN t.token_b_address::text = '\xc8807f0f5ba3fa45ffbdc66928d71c5289249014' THEN 'ISP'
    WHEN t.token_b_address::text = '\x27c70cd1946795b66be9d954418546998b546634' THEN 'LEASH'
    WHEN t.token_b_address::text = '\x956f47f50a910163d8bf957cf5846d573e7f87ca' THEN 'FEI'
    WHEN t.token_b_address::text = '\x5f98805a4e8be255a32880fdec7f6728c6568ba0' THEN 'LUSD'
    WHEN t.token_b_address::text = '\xb525ecee288b99216cd481c56b6efbdbe9bf90b5' THEN 'KUMA'
    WHEN t.token_b_address::text = '\xd291e7a03283640fdc51b121ac401383a46cc623' THEN 'RGT'
    WHEN t.token_b_address::text = '\x3d6f0dea3ac3c607b3998e6ce14b6350721752d9' THEN 'CARDS'
    WHEN t.token_b_address::text = '\x841fb148863454a3b3570f515414759be9091465' THEN 'SHIH'
    WHEN t.token_b_address::text = '\xd0660cd418a64a1d44e9214ad8e459324d8157f1' THEN 'WOOFY'
    WHEN t.token_b_address::text = '\x853d955acef822db058eb8505911ed77f175b99e' THEN 'FRAX'
    WHEN t.token_b_address::text = '\x5e74c9036fb86bd7ecdcb084a0673efc32ea31cb' THEN 'sETH'
    WHEN t.token_b_address::text = '\xae7ab96520de3a18e5e111b5eaab095312d7fe84' THEN 'stETH'
    WHEN t.token_b_address::text = '\xe95a203b1a91a908f9b9ce46459d101078c2c3cb' THEN 'ankrETH'
    WHEN t.token_b_address::text = '\x9559aaa82d9649c7a7b220e7c461d2e74c9a3593' THEN 'rETH'
    WHEN t.token_b_address::text = '\x4ddc2d193948926d02f9b1fe9e1daa0718270ed5' THEN 'cETH'
    
    ELSE COALESCE(t.token_b_symbol,
    CONCAT(LEFT(t.token_b_address::text,3),'...',RIGHT(t.token_b_address::text,3))
    )
    END AS token_b,
    AVG(s.liquidity) as weighted_liquidity,
    SUM(t.""usd_amount"") AS usd_vol,
    SUM(t.token_a_amount_raw) AS token_a_amount_raw_sum,
    SUM(t.token_b_amount_raw) AS token_b_amount_raw_sum,

    --AVG(s.tick) AS avg_tick,
    SUM(s.tick*t.""usd_amount"")/SUM(t.""usd_amount"") AS weighted_tick
    
    FROM dex.""trades"" t
    
    INNER JOIN uniswap_v3.""Pair_evt_Swap"" s -- Get liquidity available and tick value of the trade
        ON t.tx_hash = s.evt_tx_hash
        AND t.block_time = s.evt_block_time
        AND t.""exchange_contract_address"" = s.""contract_address""

    
    WHERE t.project = 'Uniswap'
    AND t.version = '3'
    AND t.category = 'DEX'
    AND t.block_time >= (DATE_TRUNC('minute',CURRENT_TIMESTAMP) - (SELECT tp FROM params)::INTERVAL)
    AND s.evt_block_time >= (DATE_TRUNC('minute',CURRENT_TIMESTAMP) - (SELECT tp FROM params)::INTERVAL)
    AND t.""exchange_contract_address"" IN (SELECT exchange_contract_address FROM top_pools)
    AND (t.""usd_amount"">0) AND (t.""usd_amount"" IS NOT NULL)
    
    GROUP BY 1,2,3,4,5,6,7,8
    ) v
WHERE
(
    '{{7 Exclude}}' NOT LIKE '%' || token_a || '%'
    AND
    '{{7 Exclude}}' NOT LIKE '%' ||token_a || '%'
)
AND
(1 = 
    CASE
    WHEN '{{6 Include}}' = 'All Tokens' THEN 1
    WHEN '{{6 Include}}' LIKE '%' || token_a || '%' THEN 1
    WHEN '{{6 Include}}' LIKE '%' || token_b || '%' THEN 1
    ELSE 0
    END
)
),

dex_price AS 
( --this was originally multiple queries that I combined for preformance, so it looks very confusing now
SELECT 
c.t_one,
    CASE WHEN direction = 'forward' THEN (l.usd_vol::decimal)/(l.token_a_amount_raw_sum/(10^18))::decimal --token a price
    ELSE (l.usd_vol::decimal)/(l.token_b_amount_raw_sum/(10^18))::decimal --token b price
    END AS price_18
FROM
    ( --get most recent price
    SELECT d.*
    FROM (
        SELECT DISTINCT
        block_fifteenmins, exchange_contract_address,
        token_a_address, token_b_address,
        token_a_amount_raw_sum, token_b_amount_raw_sum,
        usd_vol,
        DENSE_RANK() OVER(PARTITION BY exchange_contract_address ORDER BY block_fifteenmins DESC, usd_vol DESC) AS tr_rank
        FROM v3_trunc
        WHERE block_fifteenmins >= (DATE_TRUNC('minute',CURRENT_TIMESTAMP) - (SELECT tp FROM params)::INTERVAL)
        AND usd_vol IS NOT NULL
        ) d
    WHERE d.tr_rank = 1
    ) l
INNER JOIN 
    ( --dex_trades AS --get most popular pair, use that for price
    SELECT b.* FROM (
        SELECT
        direction,exchange_contract_address,t_one,t_two,
        DENSE_RANK() OVER (PARTITION BY t_one ORDER BY total_usd DESC,exchange_contract_address DESC) AS t_rank
        FROM
            (
            SELECT
            'forward' as direction,
            exchange_contract_address,
            ""token_a_address"" as t_one, ""token_b_address"" as t_two,

            SUM(usd_vol) AS total_usd
            FROM v3_trunc
            WHERE
            ""token_b_address"" = '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'
            GROUP BY 1,2,3,4
            
            UNION
            
            SELECT
            'backward' as direction, --flipping token a and b here, so it's easier to calc what's the best pair for each token
            exchange_contract_address,
            ""token_b_address"" as t_one, ""token_a_address"" AS t_two, 
    
            SUM(usd_vol) AS total_usd
            FROM v3_trunc
            WHERE
            ""token_a_address"" = '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'
            GROUP BY 1,2,3,4
            ) a
        ) b
    WHERE t_rank = 1
    ) c
ON c.exchange_contract_address = l.exchange_contract_address

),

final_trading_pairs AS( --building the mapping table for pairs
SELECT
a.exchange_contract_address,
a.forward_pair, a.backward_pair,
a.sum_usd,b.sum_usd,

CASE
WHEN RIGHT(a.backward_pair,3)='ETH' THEN a.backward_pair
WHEN RIGHT(a.forward_pair,3)='ETH' THEN a.forward_pair -- if the backward version ends in WETH, do forward
WHEN RIGHT(a.backward_pair,4)='WBTC' THEN a.backward_pair
WHEN RIGHT(a.forward_pair,4)='WBTC' THEN a.forward_pair
WHEN (a.sum_usd >= b.sum_usd) -- when a > b --Caring less about this now, just force ETH to thr right, otherwise take the UNI order
OR b.sum_usd IS NULL -- or if backward usd is null
THEN a.forward_pair -- select forward
ELSE a.backward_pair --else select backward in every other circumstance
END AS trading_pair

FROM 
    ( --sum_pairs AS
    SELECT 
    exchange_contract_address,
    CONCAT(token_a,'/',token_b) AS forward_pair -- Trading pair
    ,CONCAT(token_b,'/',token_a) AS backward_pair -- For joining buys/sells later
    ,SUM(usd_vol) AS sum_usd

    FROM v3_trunc
    GROUP BY 1,2,3
    ) a
LEFT JOIN 
    (
    SELECT --sum_pairs AS
    exchange_contract_address,
    CONCAT(token_a,'/',token_b) AS forward_pair -- Trading pair
    ,CONCAT(token_b,'/',token_a) AS backward_pair -- For joining buys/sells later
    ,SUM(usd_vol) AS sum_usd
    
    FROM v3_trunc
    GROUP BY 1,2,3
    )
    b
ON a.forward_pair = b.backward_pair
AND a.exchange_contract_address = b.exchange_contract_address
),

get_liquidity AS ( --this is to find the liquidity of each position at trade time
SELECT * FROM
    (
    SELECT *,
    lead(running_amount, 1, running_amount) OVER (PARTITION BY ""tokenId"" ORDER BY call_block_time asc) AS next_lp_amount
    FROM
    (
        SELECT amount, amount0, amount1, contract_address,call_block_time, call_tx_hash,
        ""tickLower"",""tickUpper"", /*liquidity,*/ ""tokenId"", tr_type,
        lead(call_block_time, 1, now()) OVER (PARTITION BY ""tokenId"" ORDER BY call_block_time asc) AS next_lp, --to help key in on the right lp when joining - for preformance
        lag(call_block_time, 1, '01-01-2000') OVER (PARTITION BY ""tokenId"" ORDER BY call_block_time asc) AS previous_lp,
        SUM(amount) OVER(PARTITION BY ""tokenId"" ORDER BY call_block_time ASC) AS running_amount,
        SUM(amount0) OVER(PARTITION BY ""tokenId"" ORDER BY call_block_time ASC) AS running_amount0,
        SUM(amount1) OVER(PARTITION BY ""tokenId"" ORDER BY call_block_time ASC) AS running_amount1,
        MIN(call_block_time) OVER(PARTITION BY ""tokenId"") AS liq_start
        
        FROM ( --this is a mess. We union new mints + adds to liquidity + new burns + removals from liquidity. eesh
            -- NEW MINTS
            SELECT
            m.amount, m.output_amount0 AS amount0, m.output_amount1 AS amount1, m.contract_address,
            m.call_block_time, m.call_tx_hash, m.""tickLower"", m.""tickUpper"",
            /*l.liquidity,*/ l.""output_tokenId""::text AS ""tokenId"", 'Mint' AS tr_type
            FROM uniswap_v3.""Pair_call_mint"" m
           
            INNER JOIN uniswap_v3.""NonfungibleTokenPositionManager_call_mint"" l
            ON m.call_tx_hash = l.call_tx_hash
            AND m.call_block_time = l.call_block_time
            
            WHERE l.""output_tokenId""::text IS NOT NULL --Some of these are blank, but the transactions are batched/kind of weird or have 0 amount. Maybe revisit, but these seem like duplicates/multiples within a larger transaction that we catch
            AND (m.amount != 0) --only events that do something
            AND m.contract_address IN (SELECT exchange_contract_address FROM top_pools)
            AND m.call_success = 'true' AND l.call_success = 'true'
            
            UNION ALL
            --ADDITIONS TO LIQUIDITY INCREASE
            SELECT
            m.amount, m.output_amount0 AS amount0, m.output_amount1 AS amount1, m.contract_address,
            m.call_block_time, m.call_tx_hash, m.""tickLower"", m.""tickUpper"",
            /*l.liquidity,*/ (l.params->'tokenId')::text AS ""tokenId"", 'Mint' AS tr_type
            FROM uniswap_v3.""Pair_call_mint"" m
           
            INNER JOIN uniswap_v3.""NonfungibleTokenPositionManager_call_increaseLiquidity"" l
            ON m.call_tx_hash = l.call_tx_hash
            AND m.call_block_time = l.call_block_time
            
            WHERE (l.params->'tokenId')::text IS NOT NULL --Some of these are blank, but the transactions are batched/kind of weird or have 0 amount. Maybe revisit, but these seem like duplicates/multiples within a larger transaction that we catch
            AND (m.amount != 0) --only events that do something
            AND m.contract_address IN (SELECT exchange_contract_address FROM top_pools)
            AND m.call_success = 'true' AND l.call_success = 'true'
            
            UNION ALL
            -- NEW BURNS // uniswap_v3.""NonfungibleTokenPositionManager_call_burn"" doesn't do anything so jsut decrease liq
            SELECT --negate because these are burns
            (-1)*b.amount AS amount, (-1)*b.output_amount0 AS amount0, (-1)*b.output_amount1 AS amount1, b.contract_address,
            b.call_block_time, b.call_tx_hash, b.""tickLower"", b.""tickUpper"",
            /*l.liquidity,*/ (l.params->'tokenId')::text AS tokenId, 'Burn' AS tr_type
            FROM uniswap_v3.""Pair_call_burn"" b
            
            INNER JOIN uniswap_v3.""NonfungibleTokenPositionManager_call_decreaseLiquidity"" l
            ON b.call_tx_hash = l.call_tx_hash
            AND b.call_block_time = l.call_block_time
            
            WHERE (l.params->'tokenId')::text IS NOT NULL --Some of these are blank, but the transactions are batched/kind of weird or have 0 amount. Maybe revisit, but these seem like duplicates/multiples within a larger transaction that we catch
            AND (b.amount != 0) --only events that do something
            AND b.contract_address IN (SELECT exchange_contract_address FROM top_pools)
            AND b.call_success = 'true'
            AND l.call_success = 'true'
            
            ) lq
        ) la
    --Since we already calc'd running amounts, we can ditch all LP events besides the last one before the 2 day / stuff within the 2 day.
    -- We'll use 'next LP' to do this
    WHERE next_lp >= (DATE_TRUNC('minute',CURRENT_TIMESTAMP) - '2 days'::INTERVAL)
) a
WHERE running_amount >0 --check this later, but we should be able to ditch these too since matching is on block time and next lp

),

avail_lps AS(
SELECT b.*,
SUM(lp_amount_per_tick) OVER(PARTITION BY block_fifteenmins, ""exchange_contract_address"") AS in_range_lp,
lp_amount_per_tick / (SUM(lp_amount_per_tick) OVER(PARTITION BY block_fifteenmins, ""exchange_contract_address"")) AS share_at_tick,
usd_amount*(fee/1e6)*(
lp_amount_per_tick / (SUM(lp_amount_per_tick) OVER(PARTITION BY block_fifteenmins, ""exchange_contract_address""))
) AS fees_collected
FROM
(
    SELECT a.*, p.fee
    FROM (
        SELECT
        t.block_fifteenmins,
        t.""exchange_contract_address"",
        t.token_a_address, --for joining
        t.token_b_address, --for joining
        t.token_a,
        t.token_b,
        t.usd_vol AS usd_amount,
        t.weighted_liquidity,
        
        g.running_amount AS lp_amount,--liquidity value of the distinct lp position
        1.0001^(g.""tickUpper"" - g.""tickLower"") AS tick_range,
        g.running_amount / (1.0001^(g.""tickUpper"" - g.""tickLower"")) AS lp_amount_per_tick,
        g.running_amount0 AS lp_amount0,
        g.running_amount1 AS lp_amount1,
        liq_start,
        g.""tokenId"",
        g.""tickLower"", g.""tickUpper"", g.amount0, g.amount1, g.next_lp, g.next_lp_amount,
        g.call_block_time,
        ROW_NUMBER() OVER (PARTITION BY t.block_fifteenmins, g.""tokenId"" ORDER BY g.call_block_time DESC) AS token_lp_rank --Find the most recent liquidity for the lp position for each trade
        ---^ (if the lp adds/removes a bunch of times, we'll see all their transactions. So we want to pick the last one because that should be what their liquidity was at the time of the trade.)
        FROM v3_trunc t
        
        
        INNER JOIN get_liquidity g-- all liquidity options
        ON g.contract_address = t.exchange_contract_address
            AND g.call_block_time <= t.block_fifteenmins --Get previous liquidity statuses before the trade
            AND g.next_lp > t.block_fifteenmins -- pick the transaction whose next transaction is after this trade (i.e. only the latest one)
            AND g.previous_lp <= t.block_fifteenmins --just adding to do it
            AND g.""tickLower"" <= t.weighted_tick
            AND g.""tickUpper"" >= t.weighted_tick
        
        WHERE
        /*t.project = 'Uniswap'
        AND t.version = '3'
        AND t.block_time >= (DATE_TRUNC('minute',CURRENT_TIMESTAMP) - (SELECT tp FROM params)::INTERVAL)
        AND t.usd_amount > 0 AND (t.usd_amount IS NOT NULL)
        AND*/ g.running_amount >0 --since we join on next > tx_time, we can do this to remove inactive LPs
        AND
        t.""exchange_contract_address"" IN (SELECT exchange_contract_address FROM top_pools)
        AND t.block_fifteenmins >= (DATE_TRUNC('minute',CURRENT_TIMESTAMP) - (SELECT tp FROM params)::INTERVAL)
        AND g.next_lp >= (DATE_TRUNC('minute',CURRENT_TIMESTAMP) - (SELECT tp FROM params)::INTERVAL)
        
        ) a
        INNER JOIN uniswap_v3.""Factory_call_createPool"" p --get pool data
        ON a.exchange_contract_address = p.output_pool
        WHERE token_lp_rank = 1
    ) b
),

fees_by_lp AS (
SELECT *,
RANK() OVER (PARTITION BY ""tokenId"" ORDER BY tvl_usd DESC, block_fifteenmins DESC) AS token_tvl_usd_rank
FROM
(
    --i was getting divide by zero... not sure why so this
    --total liquidity still a tiny bit off.... maybe it's collections? Figure this out
    SELECT DISTINCT l.*, --some pairs have duplicate rows and idk why
    fees_collected AS fees_received_usd,
    CASE WHEN (l.lp_amount0 IS NULL) OR (l.lp_amount0 IS NULL) OR (t0.decimals IS NULL)
    THEN (l.lp_amount0/10^18) --if null, assume 18
    ELSE (l.lp_amount0/10^t0.decimals)
    END AS amount_a,
    
    CASE WHEN (l.lp_amount1 IS NULL) OR (l.lp_amount1 IS NULL) OR (t1.decimals IS NULL)
    THEN (l.lp_amount1/10^18)
    ELSE (l.lp_amount1/10^t1.decimals)
    END AS amount_b,
    
    CASE WHEN (l.lp_amount0 IS NULL) OR (l.lp_amount0 IS NULL) OR (t0.decimals IS NULL)
    THEN dpa.price_18*(l.lp_amount0/10^18)
    ELSE t0.price*(l.lp_amount0/10^t0.decimals)
    END AS amount_a_usd,
    
    CASE WHEN (l.lp_amount1 IS NULL) OR (l.lp_amount1 IS NULL) OR (t1.decimals IS NULL)
    THEN dpb.price_18*(l.lp_amount1/10^18)
    ELSE t1.price*(l.lp_amount1/10^t1.decimals)
    END AS amount_b_usd,
    (CASE WHEN (l.lp_amount0 IS NULL) OR (l.lp_amount0 IS NULL) OR (t0.decimals IS NULL)
    THEN dpa.price_18*(l.lp_amount0/10^18)
    ELSE t0.price*(l.lp_amount0/10^t0.decimals)
    END)
    +
    (CASE WHEN (l.lp_amount1 IS NULL) OR (l.lp_amount1 IS NULL) OR (t1.decimals IS NULL)
    THEN dpb.price_18*(l.lp_amount1/10^18)
    ELSE t1.price*(l.lp_amount1/10^t1.decimals)
    END)
    AS tvl_usd,
    --SUM(l.lp_amount) OVER (PARTITION BY l.block_fifteenmins, l.""exchange_contract_address"") AS concentrated_liquidity,
    
    CASE WHEN
    ((SUM(l.lp_amount) OVER (PARTITION BY l.block_fifteenmins, l.""exchange_contract_address"")) = 0)
    OR ((SUM(l.lp_amount) OVER (PARTITION BY l.block_fifteenmins, l.""exchange_contract_address"")) IS NULL) THEN 0
    ELSE l.lp_amount::decimal / ((SUM(l.lp_amount) OVER (PARTITION BY l.block_fifteenmins, l.""exchange_contract_address""))::decimal)
    END AS share_of_pool,
     CASE WHEN
    ((SUM(l.lp_amount_per_tick) OVER (PARTITION BY l.block_fifteenmins, l.""exchange_contract_address"")) = 0)
    OR ((SUM(l.lp_amount_per_tick) OVER (PARTITION BY l.block_fifteenmins, l.""exchange_contract_address"")) IS NULL) THEN 0
    ELSE l.lp_amount_per_tick::decimal / ((SUM(l.lp_amount_per_tick) OVER (PARTITION BY l.block_fifteenmins, l.""exchange_contract_address""))::decimal)
    END AS share_of_pool_per_tick,
    
   /* CASE WHEN
    ((SUM(l.lp_amount_per_tick) OVER (PARTITION BY l.block_fifteenmins, l.""exchange_contract_address"")) = 0)
    OR ((SUM(l.lp_amount_per_tick) OVER (PARTITION BY l.block_fifteenmins, l.""exchange_contract_address"")) IS NULL) THEN 0
    ELSE l.lp_amount_per_tick::decimal / (l.liquidity::decimal)
    END AS share_of_pool_per_tick_liquidity,*/
    
    --CASE WHEN
    --((SUM(l.lp_amount) OVER (PARTITION BY l.block_fifteenmins, l.""exchange_contract_address"")) = 0)
    --OR ((SUM(l.lp_amount) OVER (PARTITION BY l.block_fifteenmins, l.""exchange_contract_address"")) IS NULL) THEN 0
    --ELSE
    --(l.usd_amount::decimal * (p.fee/1e6)::decimal) *
    --(l.lp_amount::decimal / ((SUM(l.lp_amount) OVER (PARTITION BY l.block_fifteenmins, l.""exchange_contract_address"")))::decimal)
    --END AS fees_received_usd_v2_OLD, 
    --TODO - VALIDATE IF FEES ARE CALC'D AS PROPORTION OF LIQUIDITY PER TICK, OR SOMETHING ELSE (LIKE SQRT): https://uniswap.org/whitepaper-v3.pdf
    CASE WHEN
    ((SUM(l.lp_amount_per_tick) OVER (PARTITION BY l.block_fifteenmins, l.""exchange_contract_address"")) = 0)
    OR ((SUM(l.lp_amount_per_tick) OVER (PARTITION BY l.block_fifteenmins, l.""exchange_contract_address"")) IS NULL) THEN 0
    ELSE
    (l.usd_amount::decimal * (p.fee/1e6)::decimal) *
    (l.lp_amount_per_tick::decimal / ((SUM(l.lp_amount_per_tick) OVER (PARTITION BY l.block_fifteenmins, l.""exchange_contract_address"")))::decimal)
    END AS fees_received_usd_old, --TODO: See if I'm calc'ing this right, or of width of ticks has an impact?
    
    
    /*CASE WHEN
    ((SUM(l.lp_amount_per_tick) OVER (PARTITION BY l.block_fifteenmins, l.""exchange_contract_address"")) = 0)
    OR ((SUM(l.lp_amount_per_tick) OVER (PARTITION BY l.block_fifteenmins, l.""exchange_contract_address"")) IS NULL) THEN 0
    ELSE
    (l.usd_amount::decimal * (p.fee/1e6)::decimal) *
    (l.lp_amount_per_tick::decimal / (l.liquidity::decimal))
    END AS fees_received_usd_liq, --TODO: See if I'm calc'ing this right, or of width of ticks has an impact?
    */
    
    --p.fee,
    p.fee/1e6::decimal AS fee_tier,
    p.""tokenA"", p.""tokenB"",
     CASE  --assuming 18 for decimals if null
        WHEN ""tickLower"" < 0 THEN (1.0001^(""tickLower"")) * (10^(ABS(COALESCE(t0.decimals,18)-COALESCE(t1.decimals,18))))
        ELSE (1.0001^(""tickLower"")) / (10^(ABS(COALESCE(t0.decimals,18)-COALESCE(t1.decimals,18))))
    END AS price_lower,
    CASE 
        WHEN ""tickUpper"" < 0 THEN (1.0001^(""tickUpper"")) * (10^(ABS(COALESCE(t0.decimals,18)-COALESCE(t1.decimals,18))))
        ELSE (1.0001^(""tickUpper"")) / (10^(ABS(COALESCE(t0.decimals,18)-COALESCE(t1.decimals,18))))
    END AS price_upper,
    
    RANK() OVER (PARTITION BY l.""tokenId"" ORDER BY l.block_fifteenmins DESC) AS token_tvl_rank --Find the tvl by lp when the last trade was made.
    
    FROM avail_lps l
    
    INNER JOIN uniswap_v3.""Factory_call_createPool"" p --get pool data
    ON l.exchange_contract_address = p.output_pool
    LEFT JOIN prices.""usd"" t0
    ON DATE_TRUNC('minute',l.call_block_time) = t0.minute
    AND l.token_a_address = t0.""contract_address""
    LEFT JOIN prices.""usd"" t1
    ON DATE_TRUNC('minute',l.call_block_time) = t1.minute
    AND l.token_b_address = t1.""contract_address""
    LEFT JOIN dex_price dpa
    ON l.token_a_address = dpa.t_one
    AND t0.price IS NULL
    LEFT JOIN dex_price dpb
    ON l.token_b_address = dpb.t_one
    AND t1.price IS NULL
    
    WHERE /*token_lp_rank = 1 -- only pick most recent liquidity position per lp
    AND*/ lp_amount>0 
    AND usd_amount > 0 --we're losing some pairs that dune doesn't have... to do for later maybe is try to map these (maybe sqrt price?)
    -- fees per Lp is total_usd * fee_tier * share_of_pool
    AND t0.minute >= (DATE_TRUNC('minute',CURRENT_TIMESTAMP) - (SELECT tp FROM params)::INTERVAL)
    AND t1.minute >= (DATE_TRUNC('minute',CURRENT_TIMESTAMP) - (SELECT tp FROM params)::INTERVAL)
)  a

),

final_lps AS
(
SELECT
lp.token_a,
lp.token_b,
f1.trading_pair,
f2.trading_pair,
COALESCE(f1.trading_pair, f2.trading_pair) AS pair,
lp.""tokenId"",
lp.liq_start,
lp.exchange_contract_address,
--""tickLower"" as tick_lower,
--""tickUpper"" as tick_upper,
CASE WHEN (lp.price_upper IS NULL) THEN 0
WHEN (f1.trading_pair IS NULL) THEN lp.price_lower --if backwards, keep, if forwards flip
WHEN (lp.price_upper = 0) THEN 0
ELSE 1/lp.price_upper
END AS atob_lower_bound, --since we're doing 1/price

CASE WHEN(lp.price_lower IS NULL) THEN 0
WHEN (f1.trading_pair IS NULL) THEN lp.price_upper
WHEN (lp.price_lower = 0) THEN 0
ELSE 1/lp.price_lower
END AS atob_upper_bound, --upper and lower flip. This isn't a mistake

fee_tier,
CONCAT('https://app.uniswap.org/#/pool/',""tokenId"") AS url,
--MAX(CASE WHEN next_lp IS NULL THEN now() ELSE next_lp END) AS last_lp,
SUM(CASE WHEN lp.token_tvl_rank = 1 THEN lp.lp_amount ELSE 0 END) AS last_tvl,--to grab the last tvl. Anything that's not the most recent one is ignored.
SUM(CASE WHEN token_tvl_usd_rank =1 THEN lp.tvl_usd ELSE 0 END)
    AS most_tvl_usd, --to grab the max tvl. There is some weird aesthetic error where apys and fees/tvl inflate when current is way less than max
SUM(CASE WHEN lp.token_tvl_rank = 1 THEN lp.tvl_usd ELSE 0 END) AS last_tvl_usd,
SUM(CASE WHEN lp.token_tvl_rank = 1 THEN lp.tvl_usd/tick_range ELSE 0 END) AS last_tvl_usd_per_tick,
MAX(CASE WHEN lp.token_tvl_rank = 1 THEN lp.next_lp ELSE '01-01-2000' END) AS last_next_lp,
MAX(CASE WHEN lp.token_tvl_rank = 1 THEN lp.next_lp_amount ELSE 0 END) AS last_next_lp_amount,

SUM(lp.usd_amount) as usd_volume,
SUM(lp.fees_received_usd) AS fees_collected_usd
--SUM(fees_received_usd) / SUM(CASE WHEN token_tvl_rank = 1 THEN tvl_usd ELSE 0 END) AS fees_to_tvl
FROM fees_by_lp lp

LEFT JOIN final_trading_pairs f1 --check if the pair maps with the forward version
ON CONCAT(lp.token_a,'/',lp.token_b) = f1.trading_pair
AND lp.exchange_contract_address = f1.exchange_contract_address 
LEFT JOIN final_trading_pairs f2 --check if the pair maps with the backward version
ON CONCAT(lp.token_b,'/',lp.token_a) = f2.trading_pair
AND lp.exchange_contract_address = f2.exchange_contract_address 

GROUP BY 1,2,3,4,5,6,7,8
,9,10,11,12

),

pair_metrics AS --top pools calculates at the pool level, this is for pair level
(
SELECT
--t.exchange_contract_address,
f1.trading_pair AS pair,
SUM(total_usd) AS usd_pair_volume,
SUM(total_fees) AS fee_pair_volume

FROM top_pools t
LEFT JOIN 
(SELECT DISTINCT exchange_contract_address, trading_pair FROM final_trading_pairs) f1 --check if the pair maps with the forward version
ON t.exchange_contract_address = f1.exchange_contract_address 

WHERE f1.trading_pair IS NOT NULL --If it's a pair we exclude in the filter, then it shows null, so just get rid of these

GROUP BY 1

)

SELECT
DENSE_RANK() OVER(ORDER BY fees_collected_usd DESC) AS fee_rank,
d.*,
l.creator_address
FROM
    (
    SELECT
    final_lps.pair, CONCAT(ROUND(fee_tier*100,2), '%') AS fee_tag, atob_lower_bound, atob_upper_bound,
    
    CASE WHEN (atob_lower_bound = 0) OR (atob_upper_bound = 0) THEN 0
    ELSE (atob_upper_bound - (atob_lower_bound+atob_upper_bound)/2) --upper distance from mid
    / ((atob_lower_bound+atob_upper_bound)/2) --divided by mid
    END AS lp_radius,
    fees_collected_usd, /*last_tvl_usd,*/ most_tvl_usd,
    
    CASE WHEN (most_tvl_usd = 0) OR (most_tvl_usd IS NULL) THEN 0
    ELSE fees_collected_usd::decimal/most_tvl_usd::decimal
    END AS fees_to_tvl,
    
    CASE WHEN (most_tvl_usd = 0) OR (most_tvl_usd IS NULL) THEN 0
    ELSE
    (fees_collected_usd::decimal/most_tvl_usd::decimal)*
    (365/
    --Calculate the decimal in days that the position was open (in this 2 day period)
    -- i.e. $100 in fees for a 2 day position has a lower APY than $100 in a 5 minute position
        (
        EXTRACT( epoch FROM
            ( --Gives amount of time within the 2 day period that the position was open
            CASE WHEN (liq_start < DATE_TRUNC('minute',CURRENT_TIMESTAMP) - (SELECT tp FROM params)::INTERVAL) --when position older than 2 days
            THEN last_next_lp - (DATE_TRUNC('minute',CURRENT_TIMESTAMP) - (SELECT tp FROM params)::INTERVAL) --set start as start of period
            ELSE (last_next_lp-liq_start)::INTERVAL
            END
            )
        )
        / EXTRACT(epoch FROM '1 day'::INTERVAL) --to get # days open
        )
    )
    END AS fees_to_tvl_apy,
    
    CASE WHEN (top_pools.total_usd=0) OR (top_pools.total_usd IS NULL) OR (fee_tier=0) OR (fee_tier IS NULL) THEN 0
    ELSE
    fees_collected_usd::decimal/
    ((top_pools.total_usd::decimal)*(fee_tier::decimal)) 
    END AS share_of_possible_fees, -- of the fees collected by a pool, what % did the LP take?
    
    CASE WHEN (top_pools.total_usd=0) OR (top_pools.total_usd IS NULL) OR (fee_tier=0) OR (fee_tier IS NULL) THEN 0
    ELSE
    fees_collected_usd::decimal/
    ((pair_metrics.fee_pair_volume::decimal)) 
    END AS share_of_pair_fees, -- of the fees collected by a pair, what % did the LP take?
    
    usd_volume AS inrange_vol,
    top_pools.total_usd AS pair_vol,
    CASE WHEN (top_pools.total_usd=0) OR (top_pools.total_usd IS NULL) THEN 0
    ELSE (usd_volume::decimal)/(pair_metrics.usd_pair_volume::decimal)
    END AS range_efficiency, -- how much % of a pair's volume was the LP in range for?
    
    
    liq_start, 
    CASE WHEN last_next_lp_amount >0 THEN NULL
    ELSE last_next_lp
    END AS lp_end,
    
    DATE_TRUNC('minute',last_next_lp-liq_start) AS pos_age,
    
    CASE WHEN last_next_lp_amount >0 THEN 'Active'
    ELSE 'Inactive'
    END AS lp_status,
    ""tokenId"",
    url,
    CONCAT(final_lps.pair, ' - ',
    ROUND(fee_tier*100,2), '%') AS pair_fee,
    CONCAT(""tokenId"", ' - ', CONCAT(final_lps.pair, ' - ',
    ROUND(fee_tier*100,2), '%')) AS lp_tag
    
    
    FROM final_lps
    
    INNER JOIN top_pools --pool level (i.e. usdc/eth 0.3%)
    ON top_pools.exchange_contract_address = final_lps.exchange_contract_address
    
    INNER JOIN pair_metrics --pair level (i.e. usdc/eth)
    ON pair_metrics.pair = final_lps.pair
    
    WHERE fees_collected_usd > (SELECT min_fees FROM params)
    AND most_tvl_usd > (SELECT min_tvl FROM params)
    
    ) d
LEFT JOIN (SELECT DISTINCT ""output_tokenId"" AS ""tokenId"", (params->>'recipient') as creator_address FROM uniswap_v3.""NonfungibleTokenPositionManager_call_mint"") l
ON l.""tokenId""::text = d.""tokenId""::text

WHERE
1 =
(
CASE WHEN '{{4 LP Status}}' = 'All' THEN 1
WHEN '{{4 LP Status}}' = lp_status THEN 1
ELSE 0
END
)
AND
1=
(
CASE WHEN '{{5 Fees}}' = 'All Tiers' THEN 1
WHEN '{{5 Fees}}' = fee_tag THEN 1
ELSE 0
END
)
ORDER BY fees_collected_usd DESC, share_of_possible_fees DESC"
55962,Uni v3 - 2D Time Series,,"[{""id"": 110862, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-05-31T23:18:40.564387+00:00"", ""__typename"": ""visualizations""}, {""id"": 110864, ""type"": ""chart"", ""name"": ""Hourly Trade Volume, Fees, Liquidity Added"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""USD Volume""}, ""tickFormat"": ""$0a""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": null}, ""reverseX"": false, ""numberFormat"": ""$0.0a"", ""columnMapping"": {"""": ""y"", ""day_hr"": ""x"", ""total_usd"": ""y"", ""liq_usd_net"": ""y"", ""liq_usd_added"": ""y"", ""total_fees_usd"": ""y""}, ""seriesOptions"": {""total_usd"": {""name"": ""Trade Volume"", ""type"": ""area"", ""yAxis"": 0, ""zIndex"": 0}, ""liq_usd_net"": {""name"": ""Net New Liquidity"", ""type"": ""line"", ""color"": ""#FFFAAD"", ""yAxis"": 0, ""zIndex"": 3}, ""liq_usd_added"": {""name"": ""Liquidity Volume"", ""type"": ""area"", ""yAxis"": 0, ""zIndex"": 1}, ""total_fees_usd"": {""name"": ""Trading Fees"", ""type"": ""area"", ""yAxis"": 1, ""zIndex"": 2}}, ""valuesOptions"": {}, ""showDataLabels"": false, ""globalSeriesType"": ""area""}, ""created_at"": ""2021-05-31T23:18:40.564387+00:00"", ""__typename"": ""visualizations""}, {""id"": 110863, ""type"": ""table"", ""name"": ""Last 7 Days - Sorted by USD Volume"", ""options"": {""columns"": [{""name"": ""trading_pair"", ""title"": ""Trading Pair""}, {""name"": ""num_trades"", ""title"": ""# of Trades"", ""numberFormat"": "",""}, {""name"": ""total_usd"", ""title"": ""USD Volume"", ""numberFormat"": ""$0,.00""}, {""name"": ""total_fees_usd"", ""title"": ""Total Fees (USD)"", ""numberFormat"": ""$0,.00""}, {""name"": ""fee_tier"", ""title"": ""Fee Tier"", ""numberFormat"": ""0.00%""}]}, ""created_at"": ""2021-05-31T23:18:40.564387+00:00"", ""__typename"": ""visualizations""}]","WITH all_trades AS
(SELECT
t.block_time
,t.token_a_symbol,t.token_a_address::text
,t.token_b_symbol,t.token_b_address::text
,t.token_a_amount
,t.token_b_amount
,t.exchange_contract_address -- exchange_contract_address is the v3 LP Position
,t.tx_hash -- transaction addr (for spot checks)
,t.usd_amount --TODO: Find some way to pull in USD of any missing tokens
,c.fee/1e6 AS fee_tier --Converting fee tier to a multiplier (i.e. for 0.3%, 3000 -> 0.003)
,t.usd_amount*(c.fee/1e6) AS fees_collected_usd --USD Amount * %fee = fees collected
FROM dex.""trades"" t

LEFT JOIN uniswap_v3.""Factory_call_createPool"" c --1. Join With Pool creation on LP contract address to pull fee tier
ON t.exchange_contract_address = c.output_pool
WHERE t.project = 'Uniswap'
AND t.version = '3'
AND t.block_time >= '05-05-2021 17:00' -- Uni v3 launch date/hr
AND t.block_time >= (DATE_TRUNC('hour',CURRENT_TIMESTAMP) - '2 days'::INTERVAL)
ORDER BY t.block_time DESC
),

v3_trades AS ( --clean table of trades to work with for building visuals
SELECT
atx.block_time,
atx.token_a_symbol,
atx.token_b_symbol,
atx.usd_amount,
atx.fee_tier,
atx.fees_collected_usd,
atx.tx_hash
FROM all_trades atx
),

get_liquidity_sums AS ( --this is to find the liquidity of each position at trade time
SELECT
--amount, amount0, amount1, 
lq.contract_address,
DATE_TRUNC('minute',lq.call_block_time) AS call_block_time,
t1.decimals AS decimals1,
t0.decimals AS decimals0,
t1.price AS price1,
t0.price AS price0,

SUM(CASE WHEN lq.tr_type = 'Mint' THEN lq.amount0 ELSE 0 END) AS liq_added0,
SUM(lq.amount0) AS liq_net0,
SUM(CASE WHEN lq.tr_type = 'Mint' THEN lq.amount1 ELSE 0 END) AS liq_added1,
SUM(lq.amount1) AS liq_net1,
COUNT(DISTINCT CASE WHEN lq.tr_type = 'Mint' THEN ""tokenId"" ELSE NULL END) AS num_positions_added

FROM ( --this is a mess. We union new mints + adds to liquidity + new burns + removals from liquidity. eesh
    -- NEW MINTS
    SELECT DISTINCT * FROM ( --some pairs have duplicate rows and idk why
    SELECT
    m.amount, m.output_amount0 AS amount0, m.output_amount1 AS amount1, m.contract_address,
    m.call_block_time, m.call_tx_hash, m.""tickLower"", m.""tickUpper"",
    /*l.liquidity,*/ l.""output_tokenId""::text AS ""tokenId"", 'Mint' AS tr_type
    FROM uniswap_v3.""Pair_call_mint"" m
   
    INNER JOIN uniswap_v3.""NonfungibleTokenPositionManager_call_mint"" l
    ON m.call_tx_hash = l.call_tx_hash
    AND m.call_block_time = l.call_block_time
    
    WHERE l.""output_tokenId""::text IS NOT NULL --Some of these are blank, but the transactions are batched/kind of weird or have 0 amount. Maybe revisit, but these seem like duplicates/multiples within a larger transaction that we catch
    AND (m.amount != 0) --only events that do something
    --AND m.contract_address IN (SELECT exchange_contract_address FROM top_pools)
    AND m.call_success = 'true' AND l.call_success = 'true'
    -- since we only want liquidity added at this moment, we can filter on date
    AND m.call_block_time >= (DATE_TRUNC('hour',CURRENT_TIMESTAMP) - '2 days'::INTERVAL)
    AND l.call_block_time >= (DATE_TRUNC('hour',CURRENT_TIMESTAMP) - '2 days'::INTERVAL)
    
    UNION
    --ADDITIONS TO LIQUIDITY INCREASE
    SELECT
    m.amount, m.output_amount0 AS amount0, m.output_amount1 AS amount1, m.contract_address,
    m.call_block_time, m.call_tx_hash, m.""tickLower"", m.""tickUpper"",
    /*l.liquidity,*/ (l.params->'tokenId')::text AS ""tokenId"", 'Mint' AS tr_type
    FROM uniswap_v3.""Pair_call_mint"" m
   
    INNER JOIN uniswap_v3.""NonfungibleTokenPositionManager_call_increaseLiquidity"" l
    ON m.call_tx_hash = l.call_tx_hash
    AND m.call_block_time = l.call_block_time
    
    WHERE (l.params->'tokenId')::text IS NOT NULL --Some of these are blank, but the transactions are batched/kind of weird or have 0 amount. Maybe revisit, but these seem like duplicates/multiples within a larger transaction that we catch
    AND (m.amount != 0) --only events that do something
    --AND m.contract_address IN (SELECT exchange_contract_address FROM top_pools)
    AND m.call_success = 'true' AND l.call_success = 'true'
    -- since we only want liquidity added at this moment, we can filter on date
    AND m.call_block_time >= (DATE_TRUNC('hour',CURRENT_TIMESTAMP) - '2 days'::INTERVAL)
    AND l.call_block_time >= (DATE_TRUNC('hour',CURRENT_TIMESTAMP) - '2 days'::INTERVAL)

    UNION
    -- NEW BURNS // uniswap_v3.""NonfungibleTokenPositionManager_call_burn"" doesn't do anything so jsut decrease liq
    SELECT --negate because these are burns
    (-1)*b.amount AS amount, (-1)*b.output_amount0 AS amount0, (-1)*b.output_amount1 AS amount1, b.contract_address,
    b.call_block_time, b.call_tx_hash, b.""tickLower"", b.""tickUpper"",
    /*l.liquidity,*/ (l.params->'tokenId')::text AS tokenId, 'Burn' AS tr_type
    FROM uniswap_v3.""Pair_call_burn"" b
    
    INNER JOIN uniswap_v3.""NonfungibleTokenPositionManager_call_decreaseLiquidity"" l
    ON b.call_tx_hash = l.call_tx_hash
    AND l.call_block_time = l.call_block_time
    
    WHERE (l.params->'tokenId')::text IS NOT NULL --Some of these are blank, but the transactions are batched/kind of weird or have 0 amount. Maybe revisit, but these seem like duplicates/multiples within a larger transaction that we catch
    AND (b.amount != 0) --only events that do something
   -- AND b.contract_address IN (SELECT exchange_contract_address FROM top_pools)
    AND b.call_success = 'true'
    AND l.call_success = 'true'
    -- since we only want liquidity added at this moment, we can filter on date
    AND b.call_block_time >= (DATE_TRUNC('hour',CURRENT_TIMESTAMP) - '2 days'::INTERVAL)
    AND l.call_block_time >= (DATE_TRUNC('hour',CURRENT_TIMESTAMP) - '2 days'::INTERVAL)
    ) ld
    ) lq
    INNER JOIN uniswap_v3.""Factory_call_createPool"" p --get pool data
    ON lq.contract_address = p.output_pool
    INNER JOIN prices.""usd"" t0 --inner since we're summing all up
    ON DATE_TRUNC('minute',lq.call_block_time) = t0.minute
    AND p.""tokenA"" = t0.""contract_address""
    INNER JOIN prices.""usd"" t1 --inner since we're summing all up
    ON DATE_TRUNC('minute',lq.call_block_time) = t1.minute
    AND p.""tokenB"" = t1.""contract_address""
WHERE t1.minute >= (DATE_TRUNC('hour',CURRENT_TIMESTAMP) - '2 days'::INTERVAL)
AND t0.minute >= (DATE_TRUNC('hour',CURRENT_TIMESTAMP) - '2 days'::INTERVAL)
GROUP BY 1,2,3,4,5,6
),

total_liq AS (
SELECT
DATE_TRUNC('hour',call_block_time) AS block_hour,
SUM(tvl_usd_added) AS liq_usd_added,
SUM(tvl_usd_net) AS liq_usd_net,
SUM(num_positions_added) AS num_new_positions

FROM
(
    SELECT DISTINCT
    l.call_block_time,
    l.contract_address,
    l.num_positions_added,
    
    -- Sum all liquidity added (liquidity volume) by hour
    (CASE WHEN (l.liq_added0 IS NULL) OR (l.liq_added0 IS NULL) OR (decimals0 IS NULL) THEN 0
    ELSE price0*(l.liq_added0/10^decimals0)
    END)
    +
    (CASE WHEN (l.liq_added1 IS NULL) OR (l.liq_added1 IS NULL) OR (decimals1 IS NULL) THEN 0
    ELSE price1*(l.liq_added1/10^decimals1)
    END)
    AS tvl_usd_added,
    -- Sum all net liquidity added by hour (change in liquidity)
    (CASE WHEN (l.liq_net0 IS NULL) OR (l.liq_net0 IS NULL) OR (decimals0 IS NULL) THEN 0
    ELSE price0*(l.liq_net0/10^decimals0)
    END)
    +
    (CASE WHEN (l.liq_net1 IS NULL) OR (l.liq_added1 IS NULL) OR (decimals1 IS NULL) THEN 0
    ELSE price1*(l.liq_net1/10^decimals1)
    END)
    AS tvl_usd_net
    
    FROM get_liquidity_sums l
    
) bh
GROUP BY 1

)

, trade_stats AS(
SELECT
DATE_TRUNC('hour',block_time) AS day_hr
--trading_pair
,COUNT(block_time) AS num_trades
,SUM(usd_amount) AS total_usd
,SUM(fees_collected_usd) AS total_fees_usd
--,fee_tier
FROM v3_trades
WHERE block_time >= (DATE_TRUNC('hour',CURRENT_TIMESTAMP) - '2 days'::INTERVAL)
AND usd_amount IS NOT NULL -- Eventually see if Dune adds new tokens, or we need to manually
GROUP BY DATE_TRUNC('hour',block_time)--,trading_pair--, fee_tier
)

SELECT 
d.day_hr,
d.num_trades, d.total_usd, d.total_fees_usd,
l.num_new_positions, l.liq_usd_added, l.liq_usd_net

FROM trade_stats d

LEFT JOIN total_liq l
ON d.day_hr = l.block_hour
"
58590,Uni v3 -2D Top LPs by Fees Earned - Radius Distribution,,"[{""id"": 116464, ""type"": ""table"", ""name"": ""Query results"", ""options"": {""columns"": [{""name"": ""total_usd"", ""numberFormat"": ""$0a""}]}, ""created_at"": ""2021-06-05T18:05:59.08826+00:00"", ""__typename"": ""visualizations""}, {""id"": 116467, ""type"": ""chart"", ""name"": ""Fees by LP Value (Dot is NFT ID)"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""LP Value""}, ""tickFormat"": ""$0.0a""}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Fees Collected""}}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""$0.0a"", ""columnMapping"": {""lp_tag"": ""series"", ""last_tvl_usd"": ""x"", ""fees_collected_usd"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""scatter""}, ""created_at"": ""2021-06-05T18:05:59.08826+00:00"", ""__typename"": ""visualizations""}, {""id"": 116469, ""type"": ""chart"", ""name"": ""Share of Pair Fees by Creator"", ""options"": {""sortX"": false, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""percentValues"": false}, ""reverseX"": false, ""numberFormat"": ""0.0%"", ""columnMapping"": {""pair_fee"": ""x"", ""creator_address"": ""series"", ""share_of_possible_fees"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""scatter""}, ""created_at"": ""2021-06-05T18:05:59.08826+00:00"", ""__typename"": ""visualizations""}, {""id"": 116465, ""type"": ""chart"", ""name"": ""Total Fees Earned by LP Radius"", ""options"": {""sortX"": false, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""LP Radius Range""}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Total Fees Collected""}, ""tickFormat"": ""$0a""}, {""type"": ""linear""}], ""legend"": {""enabled"": false}, ""series"": {""stacking"": ""stack""}, ""reverseX"": true, ""numberFormat"": ""$0.0a"", ""columnMapping"": {"""": ""y"", ""lp_tag"": ""series"", ""radius_group"": ""x"", ""fees_collected_usd"": ""y""}, ""seriesOptions"": {""last_tvl_usd"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 0}, ""fees_to_tvl_apy"": {""type"": ""scatter"", ""yAxis"": 1, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2021-06-05T18:05:59.08826+00:00"", ""__typename"": ""visualizations""}, {""id"": 116470, ""type"": ""chart"", ""name"": ""APY by LP Radius"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""LP Radius (%)""}, ""tickFormat"": ""0""}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Fees/TVL/Time Active (APY %)""}, ""tickFormat"": ""0%""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""0.0a%"", ""columnMapping"": {""lp_tag"": ""series"", ""radius_map"": ""x"", ""fees_to_tvl_apy"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""scatter""}, ""created_at"": ""2021-06-05T18:05:59.08826+00:00"", ""__typename"": ""visualizations""}, {""id"": 116641, ""type"": ""chart"", ""name"": ""APY by Position Age"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Fees/TVL/Time Active (APY %)""}, ""tickFormat"": ""%""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""0a%"", ""columnMapping"": {""lp_tag"": ""series"", ""pos_age"": ""x"", ""fees_to_tvl_apy"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""scatter""}, ""created_at"": ""2021-06-05T21:38:35.595217+00:00"", ""__typename"": ""visualizations""}]","WITH params AS
(
SELECT
'2 days' as tp,
--'{{LP - Top X Pairs}}'::decimal as min_pair_rank,
'{{3 Min LP Fees - k}}'::decimal*1000 AS min_fees, 
'{{2 Min LP TVL - k}}'::decimal*1000 AS min_tvl,
'{{1 Min Pair Volume - M}}'::decimal*1e6 AS min_vol_mil
),

top_pools AS
(
SELECT
""exchange_contract_address"",total_usd, total_fees
FROM (
    SELECT
    ""exchange_contract_address"",
    p.fee,
    SUM(""usd_amount"") AS total_usd,
    SUM(""usd_amount""*p.fee/1e6) AS total_fees,
    RANK() OVER (ORDER BY SUM(""usd_amount"") DESC) AS pair_rank
    FROM dex.""trades"" t
    INNER JOIN uniswap_v3.""Factory_call_createPool"" p --get pool data
    ON t.exchange_contract_address = p.output_pool
    WHERE project = 'Uniswap'
    AND version = '3'
    AND category = 'DEX'
    AND block_time >= '05-05-2021 17:00' -- Uni v3 launch date/hr
    AND block_time >= (DATE_TRUNC('minute',CURRENT_TIMESTAMP) - '2 days'::INTERVAL)
    --AND ""exchange_contract_address"" = '\x8ad599c3a0ff1de082011efddc58f1908eb6e6d8'
    AND (""usd_amount"" IS NOT NULL)
    GROUP BY 1,2
    ) a
--WHERE pair_rank <=  (SELECT min_pair_rank from params)
WHERE total_usd >= (SELECT min_vol_mil FROM params)
AND (total_usd IS NOT NULL)
),

v3_trunc AS (
SELECT *--,
--ROW_NUMBER() OVER () AS rown
FROM
    (
    SELECT
    --t.block_time,
    date_trunc('hour',t.block_time) + --5 minute blocks // This is for preformance: takes ~5 mins to run if we trunc by minute, ~3 mins by 5 mins, 1 min by 15 minsm 1 min by hour... trying to find a happy medium
        ( --chose 15 minutes as a tradeoff between accuracy (shorter window) and filter flexibility (bigger windwo)
        (FLOOR(extract(minute FROM t.block_time)::int / 15)*15 || 'minutes')::interval --trying 5 mins for accuracy
        )
    AS block_fifteenmins, --make this hour if query hangs
    
    t.""exchange_contract_address"",
    t.""token_a_address"",t.""token_a_symbol"",
    t.""token_b_address"",t.""token_b_symbol"",
    CASE --filling in missing addresses for coins. Maybe not worth keeping up, some are memes.
    WHEN t.token_a_symbol::text = 'WETH' THEN 'ETH'
    WHEN t.token_a_address::text = '\x0000000000000000000000000000000000000000' THEN 'Burn Addr'
    WHEN t.token_a_address::text = '\xde30da39c46104798bb5aa3fe8b9e0e1f348163f' THEN 'GTC'
    WHEN t.token_a_address::text = '\xa47c8bf37f92abed4a126bda807a7b7498661acd' THEN 'UST'
    WHEN t.token_a_address::text = '\x6c28AeF8977c9B773996d0e8376d2EE379446F2f' THEN 'QUICK'
    WHEN t.token_a_address::text = '\x519c1001d550c0a1dae7d1fc220f7d14c2a521bb' THEN 'PSWAP'
    WHEN t.token_a_address::text = '\xf411903cbc70a74d22900a5de66a2dda66507255' THEN 'VERA'
    WHEN t.token_a_address::text = '\x2f109021afe75b949429fe30523ee7c0d5b27207' THEN 'OCC'
    WHEN t.token_a_address::text = '\x4691937a7508860f876c9c0a2a617e7d9e945d4b' THEN 'WOO'
    WHEN t.token_a_address::text = '\x9695e0114e12c0d3a3636fab5a18e6b737529023' THEN 'DFYN'
    WHEN t.token_a_address::text = '\xc834fa996fa3bec7aad3693af486ae53d8aa8b50' THEN 'CONV'
    WHEN t.token_a_address::text = '\x3431f91b3a388115f00c5ba9fdb899851d005fb5' THEN 'GERO'
    WHEN t.token_a_address::text = '\x038a68ff68c393373ec894015816e33ad41bd564' THEN 'GLCH'
    WHEN t.token_a_address::text = '\xa2b4c0af19cc16a6cfacce81f192b024d625817d' THEN 'KISHU'
    WHEN t.token_a_address::text = '\x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce' THEN 'SHIB'
    WHEN t.token_a_address::text = '\x761d38e5ddf6ccf6cf7c55759d5210750b5d60f3' THEN 'ELON'
    WHEN t.token_a_address::text = '\x3301ee63fb29f863f2333bd4466acb46cd8323e6' THEN 'AKITA'
    WHEN t.token_a_address::text = '\x5218e472cfcfe0b64a064f055b43b4cdc9efd3a6' THEN 'eRSDL'
    WHEN t.token_a_address::text = '\x1453dbb8a29551ade11d89825ca812e05317eaeb' THEN 'TEND'
    WHEN t.token_a_address::text = '\x35a532d376ffd9a705d0bb319532837337a398e7' THEN 'WDOGE'
    WHEN t.token_a_address::text = '\x17ef75aa22dd5f6c2763b8304ab24f40ee54d48a' THEN 'RVP'
    WHEN t.token_a_address::text = '\x6dea81c8171d0ba574754ef6f8b412f2ed88c54d' THEN 'LQTY'
    WHEN t.token_a_address::text = '\x3832d2f059e55934220881f831be501d180671a7' THEN 'renDOGE'
    WHEN t.token_a_address::text = '\xf16e4d813f4dcfde4c5b44f305c908742de84ef0' THEN 'ETH2x ADL'
    WHEN t.token_a_address::text = '\x77fba179c79de5b7653f68b5039af940ada60ce0' THEN 'FORTH'
    WHEN t.token_a_address::text = '\xf65b5c5104c4fafd4b709d9d60a185eae063276c' THEN 'TRU'
    WHEN t.token_a_address::text = '\xc7283b66eb1eb5fb86327f08e1b5816b0720212b' THEN 'TRIBE'
    WHEN t.token_a_address::text = '\xc8807f0f5ba3fa45ffbdc66928d71c5289249014' THEN 'ISP'
    WHEN t.token_a_address::text = '\x27c70cd1946795b66be9d954418546998b546634' THEN 'LEASH'
    WHEN t.token_a_address::text = '\x956f47f50a910163d8bf957cf5846d573e7f87ca' THEN 'FEI'
    WHEN t.token_a_address::text = '\x5f98805a4e8be255a32880fdec7f6728c6568ba0' THEN 'LUSD'
    WHEN t.token_a_address::text = '\xb525ecee288b99216cd481c56b6efbdbe9bf90b5' THEN 'KUMA'
    WHEN t.token_a_address::text = '\xd291e7a03283640fdc51b121ac401383a46cc623' THEN 'RGT'
    WHEN t.token_a_address::text = '\x3d6f0dea3ac3c607b3998e6ce14b6350721752d9' THEN 'CARDS'
    WHEN t.token_a_address::text = '\x841fb148863454a3b3570f515414759be9091465' THEN 'SHIH'
    WHEN t.token_a_address::text = '\xd0660cd418a64a1d44e9214ad8e459324d8157f1' THEN 'WOOFY'
    WHEN t.token_a_address::text = '\x853d955acef822db058eb8505911ed77f175b99e' THEN 'FRAX'
    WHEN t.token_a_address::text = '\x5e74c9036fb86bd7ecdcb084a0673efc32ea31cb' THEN 'sETH'
    WHEN t.token_a_address::text = '\xae7ab96520de3a18e5e111b5eaab095312d7fe84' THEN 'stETH'
    WHEN t.token_a_address::text = '\xe95a203b1a91a908f9b9ce46459d101078c2c3cb' THEN 'ankrETH'
    WHEN t.token_a_address::text = '\x9559aaa82d9649c7a7b220e7c461d2e74c9a3593' THEN 'rETH'
    WHEN t.token_a_address::text = '\x4ddc2d193948926d02f9b1fe9e1daa0718270ed5' THEN 'cETH'
    
    ELSE COALESCE(t.token_a_symbol,
    CONCAT(LEFT(t.token_a_address::text,3),'...',RIGHT(t.token_a_address::text,3))
    )
    END AS token_a,
    CASE --filling in missing addresses for coins. Maybe not worth keeping up, some are memes.
    WHEN t.token_b_symbol::text = 'WETH' THEN 'ETH'
    WHEN t.token_b_address::text = '\x0000000000000000000000000000000000000000' THEN 'Burn Addr'
    WHEN t.token_b_address::text = '\xde30da39c46104798bb5aa3fe8b9e0e1f348163f' THEN 'GTC'
    WHEN t.token_b_address::text = '\xa47c8bf37f92abed4a126bda807a7b7498661acd' THEN 'UST'
    WHEN t.token_b_address::text = '\x6c28AeF8977c9B773996d0e8376d2EE379446F2f' THEN 'QUICK'
    WHEN t.token_b_address::text = '\x519c1001d550c0a1dae7d1fc220f7d14c2a521bb' THEN 'PSWAP'
    WHEN t.token_b_address::text = '\xf411903cbc70a74d22900a5de66a2dda66507255' THEN 'VERA'
    WHEN t.token_b_address::text = '\x2f109021afe75b949429fe30523ee7c0d5b27207' THEN 'OCC'
    WHEN t.token_b_address::text = '\xc834fa996fa3bec7aad3693af486ae53d8aa8b50' THEN 'CONV'
    WHEN t.token_b_address::text = '\x4691937a7508860f876c9c0a2a617e7d9e945d4b' THEN 'WOO'
    WHEN t.token_b_address::text = '\x9695e0114e12c0d3a3636fab5a18e6b737529023' THEN 'DFYN'
    WHEN t.token_b_address::text = '\x3431f91b3a388115f00c5ba9fdb899851d005fb5' THEN 'GERO'
    WHEN t.token_b_address::text = '\x038a68ff68c393373ec894015816e33ad41bd564' THEN 'GLCH'
    WHEN t.token_b_address::text = '\xa2b4c0af19cc16a6cfacce81f192b024d625817d' THEN 'KISHU'
    WHEN t.token_b_address::text = '\x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce' THEN 'SHIB'
    WHEN t.token_b_address::text = '\x761d38e5ddf6ccf6cf7c55759d5210750b5d60f3' THEN 'ELON'
    WHEN t.token_b_address::text = '\x3301ee63fb29f863f2333bd4466acb46cd8323e6' THEN 'AKITA'
    WHEN t.token_b_address::text = '\x5218e472cfcfe0b64a064f055b43b4cdc9efd3a6' THEN 'eRSDL'
    WHEN t.token_b_address::text = '\x1453dbb8a29551ade11d89825ca812e05317eaeb' THEN 'TEND'
    WHEN t.token_b_address::text = '\x35a532d376ffd9a705d0bb319532837337a398e7' THEN 'WDOGE'
    WHEN t.token_b_address::text = '\x17ef75aa22dd5f6c2763b8304ab24f40ee54d48a' THEN 'RVP'
    WHEN t.token_b_address::text = '\x6dea81c8171d0ba574754ef6f8b412f2ed88c54d' THEN 'LQTY'
    WHEN t.token_b_address::text = '\x3832d2f059e55934220881f831be501d180671a7' THEN 'renDOGE'
    WHEN t.token_b_address::text = '\xf16e4d813f4dcfde4c5b44f305c908742de84ef0' THEN 'ETH2x ADL'
    WHEN t.token_b_address::text = '\x77fba179c79de5b7653f68b5039af940ada60ce0' THEN 'FORTH'
    WHEN t.token_b_address::text = '\xf65b5c5104c4fafd4b709d9d60a185eae063276c' THEN 'TRU'
    WHEN t.token_b_address::text = '\xc7283b66eb1eb5fb86327f08e1b5816b0720212b' THEN 'TRIBE'
    WHEN t.token_b_address::text = '\xc8807f0f5ba3fa45ffbdc66928d71c5289249014' THEN 'ISP'
    WHEN t.token_b_address::text = '\x27c70cd1946795b66be9d954418546998b546634' THEN 'LEASH'
    WHEN t.token_b_address::text = '\x956f47f50a910163d8bf957cf5846d573e7f87ca' THEN 'FEI'
    WHEN t.token_b_address::text = '\x5f98805a4e8be255a32880fdec7f6728c6568ba0' THEN 'LUSD'
    WHEN t.token_b_address::text = '\xb525ecee288b99216cd481c56b6efbdbe9bf90b5' THEN 'KUMA'
    WHEN t.token_b_address::text = '\xd291e7a03283640fdc51b121ac401383a46cc623' THEN 'RGT'
    WHEN t.token_b_address::text = '\x3d6f0dea3ac3c607b3998e6ce14b6350721752d9' THEN 'CARDS'
    WHEN t.token_b_address::text = '\x841fb148863454a3b3570f515414759be9091465' THEN 'SHIH'
    WHEN t.token_b_address::text = '\xd0660cd418a64a1d44e9214ad8e459324d8157f1' THEN 'WOOFY'
    WHEN t.token_b_address::text = '\x853d955acef822db058eb8505911ed77f175b99e' THEN 'FRAX'
    WHEN t.token_b_address::text = '\x5e74c9036fb86bd7ecdcb084a0673efc32ea31cb' THEN 'sETH'
    WHEN t.token_b_address::text = '\xae7ab96520de3a18e5e111b5eaab095312d7fe84' THEN 'stETH'
    WHEN t.token_b_address::text = '\xe95a203b1a91a908f9b9ce46459d101078c2c3cb' THEN 'ankrETH'
    WHEN t.token_b_address::text = '\x9559aaa82d9649c7a7b220e7c461d2e74c9a3593' THEN 'rETH'
    WHEN t.token_b_address::text = '\x4ddc2d193948926d02f9b1fe9e1daa0718270ed5' THEN 'cETH'
    
    ELSE COALESCE(t.token_b_symbol,
    CONCAT(LEFT(t.token_b_address::text,3),'...',RIGHT(t.token_b_address::text,3))
    )
    END AS token_b,
    AVG(s.liquidity) as weighted_liquidity,
    SUM(t.""usd_amount"") AS usd_vol,
    SUM(t.token_a_amount_raw) AS token_a_amount_raw_sum,
    SUM(t.token_b_amount_raw) AS token_b_amount_raw_sum,

    --AVG(s.tick) AS avg_tick,
    SUM(s.tick*t.""usd_amount"")/SUM(t.""usd_amount"") AS weighted_tick
    
    FROM dex.""trades"" t
    
    INNER JOIN uniswap_v3.""Pair_evt_Swap"" s -- Get liquidity available and tick value of the trade
        ON t.tx_hash = s.evt_tx_hash
        AND t.block_time = s.evt_block_time
        AND t.""exchange_contract_address"" = s.""contract_address""

    
    WHERE t.project = 'Uniswap'
    AND t.version = '3'
    AND t.category = 'DEX'
    AND t.block_time >= (DATE_TRUNC('minute',CURRENT_TIMESTAMP) - (SELECT tp FROM params)::INTERVAL)
    AND s.evt_block_time >= (DATE_TRUNC('minute',CURRENT_TIMESTAMP) - (SELECT tp FROM params)::INTERVAL)
    AND t.""exchange_contract_address"" IN (SELECT exchange_contract_address FROM top_pools)
    AND (t.""usd_amount"">0) AND (t.""usd_amount"" IS NOT NULL)
    
    GROUP BY 1,2,3,4,5,6,7,8
    ) v
WHERE
(
    '{{7 Exclude}}' NOT LIKE '%' || token_a || '%'
    AND
    '{{7 Exclude}}' NOT LIKE '%' ||token_a || '%'
)
AND
(1 = 
    CASE
    WHEN '{{6 Include}}' = 'All Tokens' THEN 1
    WHEN '{{6 Include}}' LIKE '%' || token_a || '%' THEN 1
    WHEN '{{6 Include}}' LIKE '%' || token_b || '%' THEN 1
    ELSE 0
    END
)
),

dex_price AS 
( --this was originally multiple queries that I combined for preformance, so it looks very confusing now
SELECT 
c.t_one,
    CASE WHEN direction = 'forward' THEN (l.usd_vol::decimal)/(l.token_a_amount_raw_sum/(10^18))::decimal --token a price
    ELSE (l.usd_vol::decimal)/(l.token_b_amount_raw_sum/(10^18))::decimal --token b price
    END AS price_18
FROM
    ( --get most recent price
    SELECT d.*
    FROM (
        SELECT DISTINCT
        block_fifteenmins, exchange_contract_address,
        token_a_address, token_b_address,
        token_a_amount_raw_sum, token_b_amount_raw_sum,
        usd_vol,
        DENSE_RANK() OVER(PARTITION BY exchange_contract_address ORDER BY block_fifteenmins DESC, usd_vol DESC) AS tr_rank
        FROM v3_trunc
        WHERE block_fifteenmins >= (DATE_TRUNC('minute',CURRENT_TIMESTAMP) - (SELECT tp FROM params)::INTERVAL)
        AND usd_vol IS NOT NULL
        ) d
    WHERE d.tr_rank = 1
    ) l
INNER JOIN 
    ( --dex_trades AS --get most popular pair, use that for price
    SELECT b.* FROM (
        SELECT
        direction,exchange_contract_address,t_one,t_two,
        DENSE_RANK() OVER (PARTITION BY t_one ORDER BY total_usd DESC,exchange_contract_address DESC) AS t_rank
        FROM
            (
            SELECT
            'forward' as direction,
            exchange_contract_address,
            ""token_a_address"" as t_one, ""token_b_address"" as t_two,

            SUM(usd_vol) AS total_usd
            FROM v3_trunc
            WHERE
            ""token_b_address"" = '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'
            GROUP BY 1,2,3,4
            
            UNION
            
            SELECT
            'backward' as direction, --flipping token a and b here, so it's easier to calc what's the best pair for each token
            exchange_contract_address,
            ""token_b_address"" as t_one, ""token_a_address"" AS t_two, 
    
            SUM(usd_vol) AS total_usd
            FROM v3_trunc
            WHERE
            ""token_a_address"" = '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'
            GROUP BY 1,2,3,4
            ) a
        ) b
    WHERE t_rank = 1
    ) c
ON c.exchange_contract_address = l.exchange_contract_address

),

final_trading_pairs AS( --building the mapping table for pairs
SELECT
a.exchange_contract_address,
a.forward_pair, a.backward_pair,
a.sum_usd,b.sum_usd,

CASE
WHEN RIGHT(a.backward_pair,3)='ETH' THEN a.backward_pair
WHEN RIGHT(a.forward_pair,3)='ETH' THEN a.forward_pair -- if the backward version ends in WETH, do forward
WHEN RIGHT(a.backward_pair,4)='WBTC' THEN a.backward_pair
WHEN RIGHT(a.forward_pair,4)='WBTC' THEN a.forward_pair
WHEN (a.sum_usd >= b.sum_usd) -- when a > b --Caring less about this now, just force ETH to thr right, otherwise take the UNI order
OR b.sum_usd IS NULL -- or if backward usd is null
THEN a.forward_pair -- select forward
ELSE a.backward_pair --else select backward in every other circumstance
END AS trading_pair

FROM 
    ( --sum_pairs AS
    SELECT 
    exchange_contract_address,
    CONCAT(token_a,'/',token_b) AS forward_pair -- Trading pair
    ,CONCAT(token_b,'/',token_a) AS backward_pair -- For joining buys/sells later
    ,SUM(usd_vol) AS sum_usd

    FROM v3_trunc
    GROUP BY 1,2,3
    ) a
LEFT JOIN 
    (
    SELECT --sum_pairs AS
    exchange_contract_address,
    CONCAT(token_a,'/',token_b) AS forward_pair -- Trading pair
    ,CONCAT(token_b,'/',token_a) AS backward_pair -- For joining buys/sells later
    ,SUM(usd_vol) AS sum_usd
    
    FROM v3_trunc
    GROUP BY 1,2,3
    )
    b
ON a.forward_pair = b.backward_pair
AND a.exchange_contract_address = b.exchange_contract_address
),

get_liquidity AS ( --this is to find the liquidity of each position at trade time
SELECT * FROM
    (
    SELECT *,
    lead(running_amount, 1, running_amount) OVER (PARTITION BY ""tokenId"" ORDER BY call_block_time asc) AS next_lp_amount
    FROM
    (
        SELECT amount, amount0, amount1, contract_address,call_block_time, call_tx_hash,
        ""tickLower"",""tickUpper"", /*liquidity,*/ ""tokenId"", tr_type,
        lead(call_block_time, 1, now()) OVER (PARTITION BY ""tokenId"" ORDER BY call_block_time asc) AS next_lp, --to help key in on the right lp when joining - for preformance
        lag(call_block_time, 1, '01-01-2000') OVER (PARTITION BY ""tokenId"" ORDER BY call_block_time asc) AS previous_lp,
        SUM(amount) OVER(PARTITION BY ""tokenId"" ORDER BY call_block_time ASC) AS running_amount,
        SUM(amount0) OVER(PARTITION BY ""tokenId"" ORDER BY call_block_time ASC) AS running_amount0,
        SUM(amount1) OVER(PARTITION BY ""tokenId"" ORDER BY call_block_time ASC) AS running_amount1,
        MIN(call_block_time) OVER(PARTITION BY ""tokenId"") AS liq_start
        
        FROM ( --this is a mess. We union new mints + adds to liquidity + new burns + removals from liquidity. eesh
            -- NEW MINTS
            SELECT
            m.amount, m.output_amount0 AS amount0, m.output_amount1 AS amount1, m.contract_address,
            m.call_block_time, m.call_tx_hash, m.""tickLower"", m.""tickUpper"",
            /*l.liquidity,*/ l.""output_tokenId""::text AS ""tokenId"", 'Mint' AS tr_type
            FROM uniswap_v3.""Pair_call_mint"" m
           
            INNER JOIN uniswap_v3.""NonfungibleTokenPositionManager_call_mint"" l
            ON m.call_tx_hash = l.call_tx_hash
            AND m.call_block_time = l.call_block_time
            
            WHERE l.""output_tokenId""::text IS NOT NULL --Some of these are blank, but the transactions are batched/kind of weird or have 0 amount. Maybe revisit, but these seem like duplicates/multiples within a larger transaction that we catch
            AND (m.amount != 0) --only events that do something
            AND m.contract_address IN (SELECT exchange_contract_address FROM top_pools)
            AND m.call_success = 'true' AND l.call_success = 'true'
            
            UNION
            --ADDITIONS TO LIQUIDITY INCREASE
            SELECT
            m.amount, m.output_amount0 AS amount0, m.output_amount1 AS amount1, m.contract_address,
            m.call_block_time, m.call_tx_hash, m.""tickLower"", m.""tickUpper"",
            /*l.liquidity,*/ (l.params->'tokenId')::text AS ""tokenId"", 'Mint' AS tr_type
            FROM uniswap_v3.""Pair_call_mint"" m
           
            INNER JOIN uniswap_v3.""NonfungibleTokenPositionManager_call_increaseLiquidity"" l
            ON m.call_tx_hash = l.call_tx_hash
            AND m.call_block_time = l.call_block_time
            
            WHERE (l.params->'tokenId')::text IS NOT NULL --Some of these are blank, but the transactions are batched/kind of weird or have 0 amount. Maybe revisit, but these seem like duplicates/multiples within a larger transaction that we catch
            AND (m.amount != 0) --only events that do something
            AND m.contract_address IN (SELECT exchange_contract_address FROM top_pools)
            AND m.call_success = 'true' AND l.call_success = 'true'
            
            UNION
            -- NEW BURNS // uniswap_v3.""NonfungibleTokenPositionManager_call_burn"" doesn't do anything so jsut decrease liq
            SELECT --negate because these are burns
            (-1)*b.amount AS amount, (-1)*b.output_amount0 AS amount0, (-1)*b.output_amount1 AS amount1, b.contract_address,
            b.call_block_time, b.call_tx_hash, b.""tickLower"", b.""tickUpper"",
            /*l.liquidity,*/ (l.params->'tokenId')::text AS tokenId, 'Burn' AS tr_type
            FROM uniswap_v3.""Pair_call_burn"" b
            
            INNER JOIN uniswap_v3.""NonfungibleTokenPositionManager_call_decreaseLiquidity"" l
            ON b.call_tx_hash = l.call_tx_hash
            AND b.call_block_time = l.call_block_time
            
            WHERE (l.params->'tokenId')::text IS NOT NULL --Some of these are blank, but the transactions are batched/kind of weird or have 0 amount. Maybe revisit, but these seem like duplicates/multiples within a larger transaction that we catch
            AND (b.amount != 0) --only events that do something
            AND b.contract_address IN (SELECT exchange_contract_address FROM top_pools)
            AND b.call_success = 'true'
            AND l.call_success = 'true'
            
            ) lq
        ) la
    --Since we already calc'd running amounts, we can ditch all LP events besides the last one before the 2 day / stuff within the 2 day.
    -- We'll use 'next LP' to do this
    WHERE next_lp >= (DATE_TRUNC('minute',CURRENT_TIMESTAMP) - '2 days'::INTERVAL)
) a
WHERE running_amount >0 --check this later, but we should be able to ditch these too since matching is on block time and next lp

),

avail_lps AS(
SELECT b.*,
SUM(lp_amount_per_tick) OVER(PARTITION BY block_fifteenmins, ""exchange_contract_address"") AS in_range_lp,
lp_amount_per_tick / (SUM(lp_amount_per_tick) OVER(PARTITION BY block_fifteenmins, ""exchange_contract_address"")) AS share_at_tick,
usd_amount*(fee/1e6)*(
lp_amount_per_tick / (SUM(lp_amount_per_tick) OVER(PARTITION BY block_fifteenmins, ""exchange_contract_address""))
) AS fees_collected
FROM
(
    SELECT a.*, p.fee
    FROM (
        SELECT
        t.block_fifteenmins,
        t.""exchange_contract_address"",
        t.token_a_address, --for joining
        t.token_b_address, --for joining
        t.token_a,
        t.token_b,
        t.usd_vol AS usd_amount,
        t.weighted_liquidity,
        
        g.running_amount AS lp_amount,--liquidity value of the distinct lp position
        1.0001^(g.""tickUpper"" - g.""tickLower"") AS tick_range,
        g.running_amount / (1.0001^(g.""tickUpper"" - g.""tickLower"")) AS lp_amount_per_tick,
        g.running_amount0 AS lp_amount0,
        g.running_amount1 AS lp_amount1,
        liq_start,
        g.""tokenId"",
        g.""tickLower"", g.""tickUpper"", g.amount0, g.amount1, g.next_lp, g.next_lp_amount,
        g.call_block_time,
        ROW_NUMBER() OVER (PARTITION BY t.block_fifteenmins, g.""tokenId"" ORDER BY g.call_block_time DESC) AS token_lp_rank --Find the most recent liquidity for the lp position for each trade
        ---^ (if the lp adds/removes a bunch of times, we'll see all their transactions. So we want to pick the last one because that should be what their liquidity was at the time of the trade.)
        FROM v3_trunc t
        
        
        INNER JOIN get_liquidity g-- all liquidity options
        ON g.contract_address = t.exchange_contract_address
            AND g.call_block_time <= t.block_fifteenmins --Get previous liquidity statuses before the trade
            AND g.next_lp > t.block_fifteenmins -- pick the transaction whose next transaction is after this trade (i.e. only the latest one)
            AND g.previous_lp <= t.block_fifteenmins --just adding to do it
            AND g.""tickLower"" <= t.weighted_tick
            AND g.""tickUpper"" >= t.weighted_tick
        
        WHERE
        /*t.project = 'Uniswap'
        AND t.version = '3'
        AND t.block_time >= (DATE_TRUNC('minute',CURRENT_TIMESTAMP) - (SELECT tp FROM params)::INTERVAL)
        AND t.usd_amount > 0 AND (t.usd_amount IS NOT NULL)
        AND*/ g.running_amount >0 --since we join on next > tx_time, we can do this to remove inactive LPs
        AND
        t.""exchange_contract_address"" IN (SELECT exchange_contract_address FROM top_pools)
        AND t.block_fifteenmins >= (DATE_TRUNC('minute',CURRENT_TIMESTAMP) - (SELECT tp FROM params)::INTERVAL)
        AND g.next_lp >= (DATE_TRUNC('minute',CURRENT_TIMESTAMP) - (SELECT tp FROM params)::INTERVAL)
        
        ) a
        INNER JOIN uniswap_v3.""Factory_call_createPool"" p --get pool data
        ON a.exchange_contract_address = p.output_pool
        WHERE token_lp_rank = 1
    ) b
),

fees_by_lp AS (
SELECT *,
RANK() OVER (PARTITION BY ""tokenId"" ORDER BY tvl_usd DESC, block_fifteenmins DESC) AS token_tvl_usd_rank
FROM
(
    --i was getting divide by zero... not sure why so this
    --total liquidity still a tiny bit off.... maybe it's collections? Figure this out
    SELECT DISTINCT l.*, --some pairs have duplicate rows and idk why
    fees_collected AS fees_received_usd,
    CASE WHEN (l.lp_amount0 IS NULL) OR (l.lp_amount0 IS NULL) OR (t0.decimals IS NULL)
    THEN (l.lp_amount0/10^18) --if null, assume 18
    ELSE (l.lp_amount0/10^t0.decimals)
    END AS amount_a,
    
    CASE WHEN (l.lp_amount1 IS NULL) OR (l.lp_amount1 IS NULL) OR (t1.decimals IS NULL)
    THEN (l.lp_amount1/10^18)
    ELSE (l.lp_amount1/10^t1.decimals)
    END AS amount_b,
    
    CASE WHEN (l.lp_amount0 IS NULL) OR (l.lp_amount0 IS NULL) OR (t0.decimals IS NULL)
    THEN dpa.price_18*(l.lp_amount0/10^18)
    ELSE t0.price*(l.lp_amount0/10^t0.decimals)
    END AS amount_a_usd,
    
    CASE WHEN (l.lp_amount1 IS NULL) OR (l.lp_amount1 IS NULL) OR (t1.decimals IS NULL)
    THEN dpb.price_18*(l.lp_amount1/10^18)
    ELSE t1.price*(l.lp_amount1/10^t1.decimals)
    END AS amount_b_usd,
    (CASE WHEN (l.lp_amount0 IS NULL) OR (l.lp_amount0 IS NULL) OR (t0.decimals IS NULL)
    THEN dpa.price_18*(l.lp_amount0/10^18)
    ELSE t0.price*(l.lp_amount0/10^t0.decimals)
    END)
    +
    (CASE WHEN (l.lp_amount1 IS NULL) OR (l.lp_amount1 IS NULL) OR (t1.decimals IS NULL)
    THEN dpb.price_18*(l.lp_amount1/10^18)
    ELSE t1.price*(l.lp_amount1/10^t1.decimals)
    END)
    AS tvl_usd,
    --SUM(l.lp_amount) OVER (PARTITION BY l.block_fifteenmins, l.""exchange_contract_address"") AS concentrated_liquidity,
    
    CASE WHEN
    ((SUM(l.lp_amount) OVER (PARTITION BY l.block_fifteenmins, l.""exchange_contract_address"")) = 0)
    OR ((SUM(l.lp_amount) OVER (PARTITION BY l.block_fifteenmins, l.""exchange_contract_address"")) IS NULL) THEN 0
    ELSE l.lp_amount::decimal / ((SUM(l.lp_amount) OVER (PARTITION BY l.block_fifteenmins, l.""exchange_contract_address""))::decimal)
    END AS share_of_pool,
     CASE WHEN
    ((SUM(l.lp_amount_per_tick) OVER (PARTITION BY l.block_fifteenmins, l.""exchange_contract_address"")) = 0)
    OR ((SUM(l.lp_amount_per_tick) OVER (PARTITION BY l.block_fifteenmins, l.""exchange_contract_address"")) IS NULL) THEN 0
    ELSE l.lp_amount_per_tick::decimal / ((SUM(l.lp_amount_per_tick) OVER (PARTITION BY l.block_fifteenmins, l.""exchange_contract_address""))::decimal)
    END AS share_of_pool_per_tick,
    
   /* CASE WHEN
    ((SUM(l.lp_amount_per_tick) OVER (PARTITION BY l.block_fifteenmins, l.""exchange_contract_address"")) = 0)
    OR ((SUM(l.lp_amount_per_tick) OVER (PARTITION BY l.block_fifteenmins, l.""exchange_contract_address"")) IS NULL) THEN 0
    ELSE l.lp_amount_per_tick::decimal / (l.liquidity::decimal)
    END AS share_of_pool_per_tick_liquidity,*/
    
    --CASE WHEN
    --((SUM(l.lp_amount) OVER (PARTITION BY l.block_fifteenmins, l.""exchange_contract_address"")) = 0)
    --OR ((SUM(l.lp_amount) OVER (PARTITION BY l.block_fifteenmins, l.""exchange_contract_address"")) IS NULL) THEN 0
    --ELSE
    --(l.usd_amount::decimal * (p.fee/1e6)::decimal) *
    --(l.lp_amount::decimal / ((SUM(l.lp_amount) OVER (PARTITION BY l.block_fifteenmins, l.""exchange_contract_address"")))::decimal)
    --END AS fees_received_usd_v2_OLD, 
    --TODO - VALIDATE IF FEES ARE CALC'D AS PROPORTION OF LIQUIDITY PER TICK, OR SOMETHING ELSE (LIKE SQRT): https://uniswap.org/whitepaper-v3.pdf
    CASE WHEN
    ((SUM(l.lp_amount_per_tick) OVER (PARTITION BY l.block_fifteenmins, l.""exchange_contract_address"")) = 0)
    OR ((SUM(l.lp_amount_per_tick) OVER (PARTITION BY l.block_fifteenmins, l.""exchange_contract_address"")) IS NULL) THEN 0
    ELSE
    (l.usd_amount::decimal * (p.fee/1e6)::decimal) *
    (l.lp_amount_per_tick::decimal / ((SUM(l.lp_amount_per_tick) OVER (PARTITION BY l.block_fifteenmins, l.""exchange_contract_address"")))::decimal)
    END AS fees_received_usd_old, --TODO: See if I'm calc'ing this right, or of width of ticks has an impact?
    
    
    /*CASE WHEN
    ((SUM(l.lp_amount_per_tick) OVER (PARTITION BY l.block_fifteenmins, l.""exchange_contract_address"")) = 0)
    OR ((SUM(l.lp_amount_per_tick) OVER (PARTITION BY l.block_fifteenmins, l.""exchange_contract_address"")) IS NULL) THEN 0
    ELSE
    (l.usd_amount::decimal * (p.fee/1e6)::decimal) *
    (l.lp_amount_per_tick::decimal / (l.liquidity::decimal))
    END AS fees_received_usd_liq, --TODO: See if I'm calc'ing this right, or of width of ticks has an impact?
    */
    
    --p.fee,
    p.fee/1e6::decimal AS fee_tier,
    p.""tokenA"", p.""tokenB"",
     CASE  --assuming 18 for decimals if null
        WHEN ""tickLower"" < 0 THEN (1.0001^(""tickLower"")) * (10^(ABS(COALESCE(t0.decimals,18)-COALESCE(t1.decimals,18))))
        ELSE (1.0001^(""tickLower"")) / (10^(ABS(COALESCE(t0.decimals,18)-COALESCE(t1.decimals,18))))
    END AS price_lower,
    CASE 
        WHEN ""tickUpper"" < 0 THEN (1.0001^(""tickUpper"")) * (10^(ABS(COALESCE(t0.decimals,18)-COALESCE(t1.decimals,18))))
        ELSE (1.0001^(""tickUpper"")) / (10^(ABS(COALESCE(t0.decimals,18)-COALESCE(t1.decimals,18))))
    END AS price_upper,
    
    RANK() OVER (PARTITION BY l.""tokenId"" ORDER BY l.block_fifteenmins DESC) AS token_tvl_rank --Find the tvl by lp when the last trade was made.
    
    FROM avail_lps l
    
    INNER JOIN uniswap_v3.""Factory_call_createPool"" p --get pool data
    ON l.exchange_contract_address = p.output_pool
    LEFT JOIN prices.""usd"" t0
    ON DATE_TRUNC('minute',l.call_block_time) = t0.minute
    AND l.token_a_address = t0.""contract_address""
    LEFT JOIN prices.""usd"" t1
    ON DATE_TRUNC('minute',l.call_block_time) = t1.minute
    AND l.token_b_address = t1.""contract_address""
    LEFT JOIN dex_price dpa
    ON l.token_a_address = dpa.t_one
    LEFT JOIN dex_price dpb
    ON l.token_b_address = dpb.t_one
    
    WHERE /*token_lp_rank = 1 -- only pick most recent liquidity position per lp
    AND*/ lp_amount>0 
    AND usd_amount > 0 --we're losing some pairs that dune doesn't have... to do for later maybe is try to map these (maybe sqrt price?)
    -- fees per Lp is total_usd * fee_tier * share_of_pool
    AND t0.minute >= (DATE_TRUNC('minute',CURRENT_TIMESTAMP) - (SELECT tp FROM params)::INTERVAL)
    AND t1.minute >= (DATE_TRUNC('minute',CURRENT_TIMESTAMP) - (SELECT tp FROM params)::INTERVAL)
)  a

),

final_lps AS
(
SELECT
lp.token_a,
lp.token_b,
f1.trading_pair,
f2.trading_pair,
COALESCE(f1.trading_pair, f2.trading_pair) AS pair,
lp.""tokenId"",
lp.liq_start,
lp.exchange_contract_address,
--""tickLower"" as tick_lower,
--""tickUpper"" as tick_upper,
CASE WHEN (lp.price_upper IS NULL) THEN 0
WHEN (f1.trading_pair IS NULL) THEN lp.price_lower --if backwards, keep, if forwards flip
WHEN (lp.price_upper = 0) THEN 0
ELSE 1/lp.price_upper
END AS atob_lower_bound, --since we're doing 1/price

CASE WHEN(lp.price_lower IS NULL) THEN 0
WHEN (f1.trading_pair IS NULL) THEN lp.price_upper
WHEN (lp.price_lower = 0) THEN 0
ELSE 1/lp.price_lower
END AS atob_upper_bound, --upper and lower flip. This isn't a mistake

fee_tier,
CONCAT('https://app.uniswap.org/#/pool/',""tokenId"") AS url,
--MAX(CASE WHEN next_lp IS NULL THEN now() ELSE next_lp END) AS last_lp,
SUM(CASE WHEN lp.token_tvl_rank = 1 THEN lp.lp_amount ELSE 0 END) AS last_tvl,--to grab the last tvl. Anything that's not the most recent one is ignored.
SUM(CASE WHEN token_tvl_usd_rank =1 THEN lp.tvl_usd ELSE 0 END)
    AS most_tvl_usd, --to grab the max tvl. There is some weird aesthetic error where apys and fees/tvl inflate when current is way less than max
SUM(CASE WHEN lp.token_tvl_rank = 1 THEN lp.tvl_usd ELSE 0 END) AS last_tvl_usd,
SUM(CASE WHEN lp.token_tvl_rank = 1 THEN lp.tvl_usd/tick_range ELSE 0 END) AS last_tvl_usd_per_tick,
MAX(CASE WHEN lp.token_tvl_rank = 1 THEN lp.next_lp ELSE '01-01-2000' END) AS last_next_lp,
MAX(CASE WHEN lp.token_tvl_rank = 1 THEN lp.next_lp_amount ELSE 0 END) AS last_next_lp_amount,

SUM(lp.usd_amount) as usd_volume,
SUM(lp.fees_received_usd) AS fees_collected_usd
--SUM(fees_received_usd) / SUM(CASE WHEN token_tvl_rank = 1 THEN tvl_usd ELSE 0 END) AS fees_to_tvl
FROM fees_by_lp lp

LEFT JOIN final_trading_pairs f1 --check if the pair maps with the forward version
ON CONCAT(lp.token_a,'/',lp.token_b) = f1.trading_pair
AND lp.exchange_contract_address = f1.exchange_contract_address 
LEFT JOIN final_trading_pairs f2 --check if the pair maps with the backward version
ON CONCAT(lp.token_b,'/',lp.token_a) = f2.trading_pair
AND lp.exchange_contract_address = f2.exchange_contract_address 

GROUP BY 1,2,3,4,5,6,7,8
,9,10,11,12

),

pair_metrics AS --top pools calculates at the pool level, this is for pair level
(
SELECT
--t.exchange_contract_address,
f1.trading_pair AS pair,
SUM(total_usd) AS usd_pair_volume,
SUM(total_fees) AS fee_pair_volume

FROM top_pools t
LEFT JOIN 
(SELECT DISTINCT exchange_contract_address, trading_pair FROM final_trading_pairs) f1 --check if the pair maps with the forward version
ON t.exchange_contract_address = f1.exchange_contract_address 

WHERE f1.trading_pair IS NOT NULL --If it's a pair we exclude in the filter, then it shows null, so just get rid of these

GROUP BY 1

)

SELECT
DENSE_RANK() OVER(ORDER BY fees_collected_usd DESC) AS fee_rank,
CASE
WHEN lp_radius*100 <= 0.1 THEN '< 0.1%'
WHEN lp_radius*100 <= 0.2 THEN '0.1% - 0.2%'
WHEN lp_radius*100 <= 0.3 THEN '0.2% - 0.3%'
WHEN lp_radius*100 <= 0.4 THEN '0.3% - 0.4%'
WHEN lp_radius*100 <= 0.5 THEN '0.4% - 0.5%'
WHEN lp_radius*100 <= 1 THEN '0.5% - 1%'
WHEN lp_radius*100 <= 5 THEN '1% - 5%'
WHEN lp_radius*100 <= 10 THEN '5% - 10%'
WHEN lp_radius*100 <= 15 THEN '10% - 15%'
WHEN lp_radius*100 <= 20 THEN '15% - 20%'
WHEN lp_radius*100 <= 25 THEN '20% - 25%'
ELSE '25%+'
END AS radius_group,
CASE
WHEN lp_radius*100 <= 0.1 THEN 1
WHEN lp_radius*100 <= 0.2 THEN 2
WHEN lp_radius*100 <= 0.3 THEN 3
WHEN lp_radius*100 <= 0.4 THEN 4
WHEN lp_radius*100 <= 0.5 THEN 5
WHEN lp_radius*100 <= 1 THEN 6
WHEN lp_radius*100 <= 5 THEN 7
WHEN lp_radius*100 <= 10 THEN 8
WHEN lp_radius*100 <= 15 THEN 9
WHEN lp_radius*100 <= 20 THEN 10
WHEN lp_radius*100 <= 25 THEN 11
ELSE 12
END AS radius_group_order,
CONCAT(ROUND(lp_radius::decimal*100,2), '%') AS radius_map,
d.*,
l.creator_address
FROM
    (
    SELECT
    final_lps.pair, CONCAT(ROUND(fee_tier*100,2), '%') AS fee_tag, atob_lower_bound, atob_upper_bound,
    
    CASE WHEN (atob_lower_bound = 0) OR (atob_upper_bound = 0) THEN 0
    ELSE (atob_upper_bound - (atob_lower_bound+atob_upper_bound)/2) --upper distance from mid
    / ((atob_lower_bound+atob_upper_bound)/2) --divided by mid
    END AS lp_radius,
    fees_collected_usd, last_tvl_usd,
    
    CASE WHEN (last_tvl_usd = 0) OR (last_tvl_usd IS NULL) THEN 0
    ELSE fees_collected_usd::decimal/last_tvl_usd::decimal
    END AS fees_to_tvl,
    
        CASE WHEN (last_tvl_usd = 0) OR (last_tvl_usd IS NULL) THEN 0
        ELSE
        (fees_collected_usd::decimal/last_tvl_usd::decimal)*
        (365/
        --Calculate the decimal in days that the position was open (in this 2 day period)
        -- i.e. $100 in fees for a 2 day position has a lower APY than $100 in a 5 minute position
            (
            EXTRACT( epoch FROM
                ( --Gives amount of time within the 2 day period that the position was open
                CASE WHEN (liq_start < DATE_TRUNC('minute',CURRENT_TIMESTAMP) - (SELECT tp FROM params)::INTERVAL) --when position older than 2 days
                THEN last_next_lp - (DATE_TRUNC('minute',CURRENT_TIMESTAMP) - (SELECT tp FROM params)::INTERVAL) --set start as start of period
                ELSE (last_next_lp-liq_start)::INTERVAL
                END
                )
            )
            / EXTRACT(epoch FROM '1 day'::INTERVAL) --to get # days open
            )
            
            --/ EXTRACT( epoch FROM ((SELECT tp FROM params)::INTERVAL))--(60*60*24*2) --2 days in seconds
        )
        END AS fees_to_tvl_apy,
        /*EXTRACT( epoch FROM
                ( --Gives amount of time within the 2 day period that the position was open
                CASE WHEN (liq_start < DATE_TRUNC('minute',CURRENT_TIMESTAMP) - (SELECT tp FROM params)::INTERVAL) --when position older than 2 days
                THEN last_next_lp - (DATE_TRUNC('minute',CURRENT_TIMESTAMP) - (SELECT tp FROM params)::INTERVAL) --set start as start of period
                ELSE (last_next_lp-liq_start)::INTERVAL
                END
                )
            )
            / EXTRACT(epoch FROM '1 day'::INTERVAL)
            
            --/ EXTRACT( epoch FROM ((SELECT tp FROM params)::INTERVAL))--(60*60*24*2) --2 days in seconds
            AS fractional_2day,*/
    
    CASE WHEN (top_pools.total_usd=0) OR (top_pools.total_usd IS NULL) OR (fee_tier=0) OR (fee_tier IS NULL) THEN 0
    ELSE
    fees_collected_usd::decimal/
    ((top_pools.total_usd::decimal)*(fee_tier::decimal)) 
    END AS share_of_possible_fees, -- of the fees collected by a pool, what % did the LP take?
    
    CASE WHEN (top_pools.total_usd=0) OR (top_pools.total_usd IS NULL) OR (fee_tier=0) OR (fee_tier IS NULL) THEN 0
    ELSE
    fees_collected_usd::decimal/
    ((pair_metrics.fee_pair_volume::decimal)) 
    END AS share_of_pair_fees, -- of the fees collected by a pair, what % did the LP take?
    
    usd_volume AS inrange_vol,
    top_pools.total_usd AS pair_vol,
    CASE WHEN (top_pools.total_usd=0) OR (top_pools.total_usd IS NULL) THEN 0
    ELSE (usd_volume::decimal)/(pair_metrics.usd_pair_volume::decimal)
    END AS range_efficiency, -- how much % of a pair's volume was the LP in range for?
    
    
    liq_start, 
    CASE WHEN last_next_lp_amount >0 THEN NULL
    ELSE last_next_lp
    END AS lp_end,
    
    CASE WHEN DATE_TRUNC('minute',last_next_lp-liq_start)::INTERVAL > '2 days' THEN '2 days'
    ELSE DATE_TRUNC('minute',last_next_lp-liq_start)::INTERVAL
    END AS pos_age,
    CASE WHEN last_next_lp_amount >0 THEN 'Active'
    ELSE 'Inactive'
    END AS lp_status,
    ""tokenId"",
    url,
    CONCAT(final_lps.pair, ' - ',
    ROUND(fee_tier*100,2), '%') AS pair_fee,
    CONCAT(""tokenId"", ' - ', CONCAT(final_lps.pair, ' - ',
    ROUND(fee_tier*100,2), '%')) AS lp_tag
    
    
    FROM final_lps
    
    INNER JOIN top_pools --pool level (i.e. usdc/eth 0.3%)
    ON top_pools.exchange_contract_address = final_lps.exchange_contract_address
    
    INNER JOIN pair_metrics --pair level (i.e. usdc/eth)
    ON pair_metrics.pair = final_lps.pair
    
    WHERE fees_collected_usd > (SELECT min_fees FROM params)
    AND last_tvl_usd > (SELECT min_tvl FROM params)
    
    ) d
LEFT JOIN (SELECT DISTINCT ""output_tokenId"" AS ""tokenId"", (params->>'recipient') as creator_address FROM uniswap_v3.""NonfungibleTokenPositionManager_call_mint"") l
ON l.""tokenId""::text = d.""tokenId""::text

--LP Status
WHERE
1 =
(
CASE WHEN '{{4 LP Status}}' = 'All' THEN 1
WHEN '{{4 LP Status}}' = lp_status THEN 1
ELSE 0
END
)
AND
--Fee Tier
1=
(
CASE WHEN '{{5 Fees}}' = 'All Tiers' THEN 1
WHEN '{{5 Fees}}' = fee_tag THEN 1
ELSE 0
END
)

ORDER BY radius_group_order DESC, fees_collected_usd DESC, share_of_possible_fees DESC"
56126,Uni v3 - 2D Time Series by Pair,,"[{""id"": 111247, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-06-01T04:24:03.785703+00:00"", ""__typename"": ""visualizations""}, {""id"": 111248, ""type"": ""table"", ""name"": ""Last 7 Days - Sorted by USD Volume"", ""options"": {""columns"": [{""name"": ""trading_pair"", ""title"": ""Trading Pair""}, {""name"": ""num_trades"", ""title"": ""# of Trades"", ""numberFormat"": "",""}, {""name"": ""total_usd"", ""title"": ""USD Volume"", ""numberFormat"": ""$0,.00""}, {""name"": ""total_fees_usd"", ""title"": ""Total Fees (USD)"", ""numberFormat"": ""$0,.00""}, {""name"": ""fee_tier"", ""title"": ""Fee Tier"", ""numberFormat"": ""0.00%""}]}, ""created_at"": ""2021-06-01T04:24:03.785703+00:00"", ""__typename"": ""visualizations""}, {""id"": 111251, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""numberFormat"": ""$0.0a"", ""columnMapping"": {""day_hr"": ""x"", ""total_usd"": ""y"", ""trading_pair"": ""series""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""area""}, ""created_at"": ""2021-06-01T04:26:53.607078+00:00"", ""__typename"": ""visualizations""}, {""id"": 111249, ""type"": ""chart"", ""name"": ""Hourly Volume and Fees"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""USD Volume""}}], ""legend"": {""enabled"": false}, ""series"": {""stacking"": null}, ""reverseX"": false, ""numberFormat"": ""$,"", ""columnMapping"": {"""": ""y"", ""day_hr"": ""x"", ""total_usd"": ""y"", ""total_fees_usd"": ""y""}, ""seriesOptions"": {""total_usd"": {""name"": ""Volume"", ""type"": ""area"", ""yAxis"": 0, ""zIndex"": 0}, ""total_fees_usd"": {""name"": ""Fees"", ""type"": ""area"", ""yAxis"": 1, ""zIndex"": 1}}, ""valuesOptions"": {}, ""showDataLabels"": false, ""globalSeriesType"": ""area""}, ""created_at"": ""2021-06-01T04:24:03.785703+00:00"", ""__typename"": ""visualizations""}, {""id"": 113372, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""0,0.0a"", ""columnMapping"": {""rel_fees"": ""y"", ""total_usd"": ""y"", ""trading_pair"": ""x"", ""rel_price_100"": ""y""}, ""seriesOptions"": {""rel_fees"": {""type"": ""scatter"", ""yAxis"": 0, ""zIndex"": 1}, ""total_usd"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 0}, ""rel_price_100"": {""type"": ""scatter"", ""yAxis"": 1, ""zIndex"": 2}}, ""valuesOptions"": {}, ""showDataLabels"": false, ""globalSeriesType"": ""area""}, ""created_at"": ""2021-06-03T00:57:06.910311+00:00"", ""__typename"": ""visualizations""}, {""id"": 113379, ""type"": ""chart"", ""name"": ""2-Day Fees Generated ('1 Min Pair Volume' Filter Applied)"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": null}, ""reverseX"": false, ""numberFormat"": ""$0.0a"", ""columnMapping"": {""day_hr"": ""x"", ""pair_fee"": ""series"", ""total_fees_usd"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""area""}, ""created_at"": ""2021-06-03T01:06:38.699701+00:00"", ""__typename"": ""visualizations""}, {""id"": 111313, ""type"": ""chart"", ""name"": ""2-Day Price Change"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""% Change vs Start of Period""}, ""tickFormat"": ""%""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""(0.0%)"", ""columnMapping"": {"""": ""y"", ""day_hr"": ""x"", ""rel_price"": ""y"", ""trading_pair"": ""series""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""line""}, ""created_at"": ""2021-06-01T05:03:27.781241+00:00"", ""__typename"": ""visualizations""}, {""id"": 116016, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack"", ""percentValues"": true}, ""reverseX"": false, ""columnMapping"": {""day_hr"": ""x"", ""pair_fee"": ""series"", ""total_fees_usd"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""area""}, ""created_at"": ""2021-06-05T04:37:35.877861+00:00"", ""__typename"": ""visualizations""}, {""id"": 113362, ""type"": ""chart"", ""name"": ""2-Day Volume"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""-"", ""tickFormat"": ""$0a""}], ""legend"": {""enabled"": false}, ""series"": {""stacking"": null, ""percentValues"": false}, ""reverseX"": false, ""numberFormat"": ""$0.0a"", ""columnMapping"": {"""": ""y"", ""day_hr"": ""x"", ""total_usd"": ""y"", ""trading_pair"": ""series""}, ""seriesOptions"": {""DAI/ETH"": {""type"": ""area"", ""yAxis"": 0, ""zIndex"": 4}, ""UNI/ETH"": {""type"": ""area"", ""yAxis"": 0, ""zIndex"": 11}, ""DAI/USDC"": {""type"": ""area"", ""yAxis"": 0, ""zIndex"": 3}, ""DAI/USDT"": {""type"": ""area"", ""yAxis"": 0, ""zIndex"": 7}, ""LINK/ETH"": {""type"": ""area"", ""yAxis"": 0, ""zIndex"": 8}, ""USDC/ETH"": {""type"": ""area"", ""yAxis"": 0, ""zIndex"": 0}, ""USDT/ETH"": {""type"": ""area"", ""yAxis"": 0, ""zIndex"": 1}, ""WBTC/ETH"": {""type"": ""area"", ""yAxis"": 0, ""zIndex"": 5}, ""MATIC/ETH"": {""type"": ""area"", ""yAxis"": 0, ""zIndex"": 6}, ""USDC/EURS"": {""type"": ""area"", ""yAxis"": 0, ""zIndex"": 10}, ""USDC/USDT"": {""type"": ""area"", ""yAxis"": 0, ""zIndex"": 2}, ""USDC/WBTC"": {""type"": ""area"", ""yAxis"": 0, ""zIndex"": 9}}, ""valuesOptions"": {}, ""globalSeriesType"": ""area""}, ""created_at"": ""2021-06-03T00:52:04.601804+00:00"", ""__typename"": ""visualizations""}]","WITH params AS
(
SELECT
'2 days' as tp,
--25 as min_pair_rank--,
--1000::decimal AS min_fees,
'{{1 Min Pair Volume - M}}'::decimal*1e6 AS min_vol_mil
),

top_pools AS
(
SELECT
""exchange_contract_address"",total_usd
FROM (
    SELECT
    ""exchange_contract_address"",
    RANK() OVER (ORDER BY SUM(""usd_amount"") DESC) AS pair_rank,
    SUM(""usd_amount"") AS total_usd
    FROM dex.""trades""
    WHERE project = 'Uniswap'
    AND version = '3'
    AND block_time >= '05-05-2021 17:00' -- Uni v3 launch date/hr
    AND block_time >= (DATE_TRUNC('minute',CURRENT_TIMESTAMP) - (SELECT tp FROM params)::INTERVAL)
    AND (""usd_amount"" IS NOT NULL)
    GROUP BY 1
    ) a
--WHERE pair_rank <=  (SELECT min_pair_rank from params)
WHERE total_usd >= (SELECT min_vol_mil FROM params)
AND (total_usd IS NOT NULL)
),

 all_trades AS
(
    SELECT * FROM
    (
    SELECT
    t.block_time, t.token_a_address, t.token_b_address,
    CASE --filling in missing addresses for coins. Maybe not worth keeping up, some are memes.
    WHEN t.token_a_symbol::text = 'WETH' THEN 'ETH'
    WHEN t.token_a_address::text = '\x0000000000000000000000000000000000000000' THEN 'Burn Addr'
    WHEN t.token_a_address::text = '\xde30da39c46104798bb5aa3fe8b9e0e1f348163f' THEN 'GTC'
    WHEN t.token_a_address::text = '\xa47c8bf37f92abed4a126bda807a7b7498661acd' THEN 'UST'
    WHEN t.token_a_address::text = '\x6c28AeF8977c9B773996d0e8376d2EE379446F2f' THEN 'QUICK'
    WHEN t.token_a_address::text = '\x519c1001d550c0a1dae7d1fc220f7d14c2a521bb' THEN 'PSWAP'
    WHEN t.token_a_address::text = '\xf411903cbc70a74d22900a5de66a2dda66507255' THEN 'VERA'
    WHEN t.token_a_address::text = '\x2f109021afe75b949429fe30523ee7c0d5b27207' THEN 'OCC'
    WHEN t.token_a_address::text = '\x4691937a7508860f876c9c0a2a617e7d9e945d4b' THEN 'WOO'
    WHEN t.token_a_address::text = '\x9695e0114e12c0d3a3636fab5a18e6b737529023' THEN 'DFYN'
    WHEN t.token_a_address::text = '\xc834fa996fa3bec7aad3693af486ae53d8aa8b50' THEN 'CONV'
    WHEN t.token_a_address::text = '\x3431f91b3a388115f00c5ba9fdb899851d005fb5' THEN 'GERO'
    WHEN t.token_a_address::text = '\x038a68ff68c393373ec894015816e33ad41bd564' THEN 'GLCH'
    WHEN t.token_a_address::text = '\xa2b4c0af19cc16a6cfacce81f192b024d625817d' THEN 'KISHU'
    WHEN t.token_a_address::text = '\x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce' THEN 'SHIB'
    WHEN t.token_a_address::text = '\x761d38e5ddf6ccf6cf7c55759d5210750b5d60f3' THEN 'ELON'
    WHEN t.token_a_address::text = '\x3301ee63fb29f863f2333bd4466acb46cd8323e6' THEN 'AKITA'
    WHEN t.token_a_address::text = '\x5218e472cfcfe0b64a064f055b43b4cdc9efd3a6' THEN 'eRSDL'
    WHEN t.token_a_address::text = '\x1453dbb8a29551ade11d89825ca812e05317eaeb' THEN 'TEND'
    WHEN t.token_a_address::text = '\x35a532d376ffd9a705d0bb319532837337a398e7' THEN 'WDOGE'
    WHEN t.token_a_address::text = '\x17ef75aa22dd5f6c2763b8304ab24f40ee54d48a' THEN 'RVP'
    WHEN t.token_a_address::text = '\x6dea81c8171d0ba574754ef6f8b412f2ed88c54d' THEN 'LQTY'
    WHEN t.token_a_address::text = '\x3832d2f059e55934220881f831be501d180671a7' THEN 'renDOGE'
    WHEN t.token_a_address::text = '\xf16e4d813f4dcfde4c5b44f305c908742de84ef0' THEN 'ETH2x ADL'
    WHEN t.token_a_address::text = '\x77fba179c79de5b7653f68b5039af940ada60ce0' THEN 'FORTH'
    WHEN t.token_a_address::text = '\xf65b5c5104c4fafd4b709d9d60a185eae063276c' THEN 'TRU'
    WHEN t.token_a_address::text = '\xc7283b66eb1eb5fb86327f08e1b5816b0720212b' THEN 'TRIBE'
    WHEN t.token_a_address::text = '\xc8807f0f5ba3fa45ffbdc66928d71c5289249014' THEN 'ISP'
    WHEN t.token_a_address::text = '\x27c70cd1946795b66be9d954418546998b546634' THEN 'LEASH'
    WHEN t.token_a_address::text = '\x956f47f50a910163d8bf957cf5846d573e7f87ca' THEN 'FEI'
    WHEN t.token_a_address::text = '\x5f98805a4e8be255a32880fdec7f6728c6568ba0' THEN 'LUSD'
    WHEN t.token_a_address::text = '\xb525ecee288b99216cd481c56b6efbdbe9bf90b5' THEN 'KUMA'
    WHEN t.token_a_address::text = '\xd291e7a03283640fdc51b121ac401383a46cc623' THEN 'RGT'
    WHEN t.token_a_address::text = '\x3d6f0dea3ac3c607b3998e6ce14b6350721752d9' THEN 'CARDS'
    WHEN t.token_a_address::text = '\x841fb148863454a3b3570f515414759be9091465' THEN 'SHIH'
    WHEN t.token_a_address::text = '\xd0660cd418a64a1d44e9214ad8e459324d8157f1' THEN 'WOOFY'
    WHEN t.token_a_address::text = '\x853d955acef822db058eb8505911ed77f175b99e' THEN 'FRAX'
    WHEN t.token_a_address::text = '\x5e74c9036fb86bd7ecdcb084a0673efc32ea31cb' THEN 'sETH'
    WHEN t.token_a_address::text = '\xae7ab96520de3a18e5e111b5eaab095312d7fe84' THEN 'stETH'
    WHEN t.token_a_address::text = '\xe95a203b1a91a908f9b9ce46459d101078c2c3cb' THEN 'ankrETH'
    WHEN t.token_a_address::text = '\x9559aaa82d9649c7a7b220e7c461d2e74c9a3593' THEN 'rETH'
    WHEN t.token_a_address::text = '\x4ddc2d193948926d02f9b1fe9e1daa0718270ed5' THEN 'cETH'
    
    ELSE COALESCE(t.token_a_symbol,t.token_a_address::text)
    END AS token_a,
    CASE --filling in missing addresses for coins. Maybe not worth keeping up, some are memes.
    WHEN t.token_b_symbol::text = 'WETH' THEN 'ETH'
    WHEN t.token_b_address::text = '\x0000000000000000000000000000000000000000' THEN 'Burn Addr'
    WHEN t.token_b_address::text = '\xde30da39c46104798bb5aa3fe8b9e0e1f348163f' THEN 'GTC'
    WHEN t.token_b_address::text = '\xa47c8bf37f92abed4a126bda807a7b7498661acd' THEN 'UST'
    WHEN t.token_b_address::text = '\x6c28AeF8977c9B773996d0e8376d2EE379446F2f' THEN 'QUICK'
    WHEN t.token_b_address::text = '\x519c1001d550c0a1dae7d1fc220f7d14c2a521bb' THEN 'PSWAP'
    WHEN t.token_b_address::text = '\xf411903cbc70a74d22900a5de66a2dda66507255' THEN 'VERA'
    WHEN t.token_b_address::text = '\x2f109021afe75b949429fe30523ee7c0d5b27207' THEN 'OCC'
    WHEN t.token_b_address::text = '\xc834fa996fa3bec7aad3693af486ae53d8aa8b50' THEN 'CONV'
    WHEN t.token_b_address::text = '\x4691937a7508860f876c9c0a2a617e7d9e945d4b' THEN 'WOO'
    WHEN t.token_b_address::text = '\x9695e0114e12c0d3a3636fab5a18e6b737529023' THEN 'DFYN'
    WHEN t.token_b_address::text = '\x3431f91b3a388115f00c5ba9fdb899851d005fb5' THEN 'GERO'
    WHEN t.token_b_address::text = '\x038a68ff68c393373ec894015816e33ad41bd564' THEN 'GLCH'
    WHEN t.token_b_address::text = '\xa2b4c0af19cc16a6cfacce81f192b024d625817d' THEN 'KISHU'
    WHEN t.token_b_address::text = '\x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce' THEN 'SHIB'
    WHEN t.token_b_address::text = '\x761d38e5ddf6ccf6cf7c55759d5210750b5d60f3' THEN 'ELON'
    WHEN t.token_b_address::text = '\x3301ee63fb29f863f2333bd4466acb46cd8323e6' THEN 'AKITA'
    WHEN t.token_b_address::text = '\x5218e472cfcfe0b64a064f055b43b4cdc9efd3a6' THEN 'eRSDL'
    WHEN t.token_b_address::text = '\x1453dbb8a29551ade11d89825ca812e05317eaeb' THEN 'TEND'
    WHEN t.token_b_address::text = '\x35a532d376ffd9a705d0bb319532837337a398e7' THEN 'WDOGE'
    WHEN t.token_b_address::text = '\x17ef75aa22dd5f6c2763b8304ab24f40ee54d48a' THEN 'RVP'
    WHEN t.token_b_address::text = '\x6dea81c8171d0ba574754ef6f8b412f2ed88c54d' THEN 'LQTY'
    WHEN t.token_b_address::text = '\x3832d2f059e55934220881f831be501d180671a7' THEN 'renDOGE'
    WHEN t.token_b_address::text = '\xf16e4d813f4dcfde4c5b44f305c908742de84ef0' THEN 'ETH2x ADL'
    WHEN t.token_b_address::text = '\x77fba179c79de5b7653f68b5039af940ada60ce0' THEN 'FORTH'
    WHEN t.token_b_address::text = '\xf65b5c5104c4fafd4b709d9d60a185eae063276c' THEN 'TRU'
    WHEN t.token_b_address::text = '\xc7283b66eb1eb5fb86327f08e1b5816b0720212b' THEN 'TRIBE'
    WHEN t.token_b_address::text = '\xc8807f0f5ba3fa45ffbdc66928d71c5289249014' THEN 'ISP'
    WHEN t.token_b_address::text = '\x27c70cd1946795b66be9d954418546998b546634' THEN 'LEASH'
    WHEN t.token_b_address::text = '\x956f47f50a910163d8bf957cf5846d573e7f87ca' THEN 'FEI'
    WHEN t.token_b_address::text = '\x5f98805a4e8be255a32880fdec7f6728c6568ba0' THEN 'LUSD'
    WHEN t.token_b_address::text = '\xb525ecee288b99216cd481c56b6efbdbe9bf90b5' THEN 'KUMA'
    WHEN t.token_b_address::text = '\xd291e7a03283640fdc51b121ac401383a46cc623' THEN 'RGT'
    WHEN t.token_b_address::text = '\x3d6f0dea3ac3c607b3998e6ce14b6350721752d9' THEN 'CARDS'
    WHEN t.token_b_address::text = '\x841fb148863454a3b3570f515414759be9091465' THEN 'SHIH'
    WHEN t.token_b_address::text = '\xd0660cd418a64a1d44e9214ad8e459324d8157f1' THEN 'WOOFY'
    WHEN t.token_b_address::text = '\x853d955acef822db058eb8505911ed77f175b99e' THEN 'FRAX'
    WHEN t.token_b_address::text = '\x5e74c9036fb86bd7ecdcb084a0673efc32ea31cb' THEN 'sETH'
    WHEN t.token_b_address::text = '\xae7ab96520de3a18e5e111b5eaab095312d7fe84' THEN 'stETH'
    WHEN t.token_b_address::text = '\xe95a203b1a91a908f9b9ce46459d101078c2c3cb' THEN 'ankrETH'
    WHEN t.token_b_address::text = '\x9559aaa82d9649c7a7b220e7c461d2e74c9a3593' THEN 'rETH'
    WHEN t.token_b_address::text = '\x4ddc2d193948926d02f9b1fe9e1daa0718270ed5' THEN 'cETH'
    
    ELSE COALESCE(t.token_b_symbol,t.token_b_address::text)
    END AS token_b
    ,t.token_a_amount
    ,t.token_b_amount
    ,t.exchange_contract_address -- exchange_contract_address is the v3 LP Position
    ,t.tx_hash -- transaction addr (for spot checks)
    ,t.usd_amount --TODO: Find some way to pull in USD of any missing tokens
    ,c.fee/1e6 AS fee_tier --Converting fee tier to a multiplier (i.e. for 0.3%, 3000 -> 0.003)
    ,t.usd_amount*(c.fee/1e6) AS fees_collected_usd --USD Amount * %fee = fees collected
    FROM dex.""trades"" t
    
    INNER JOIN top_pools top
    ON t.exchange_contract_address = top.""exchange_contract_address""
    
    LEFT JOIN uniswap_v3.""Factory_call_createPool"" c --1. Join With Pool creation on LP contract address to pull fee tier
    ON t.exchange_contract_address = c.output_pool
    WHERE t.project = 'Uniswap'
    AND t.version = '3'
    AND t.block_time >= '05-05-2021 17:00' -- Uni v3 launch date/hr
    AND t.block_time >= (DATE_TRUNC('hour',CURRENT_TIMESTAMP) - (SELECT tp FROM params)::INTERVAL)
    ORDER BY t.block_time DESC
    ) v
--WHERE
--token_a NOT IN ({{5 LP: Excluded List}})
--AND
--token_b NOT IN ({{5 LP: Excluded List}})
),

sum_pairs AS( -- Using this to decide which trading pair order to pick (i.e WBTC/USDC vs USDC/WBTC). We'll pick the one with the greatest usd volume.
--starting set
SELECT 
CONCAT(token_a,'/',token_b) AS forward_pair -- Trading pair
,CONCAT(token_b,'/',token_a) AS backward_pair -- For joining buys/sells later
,SUM(usd_amount) AS sum_usd
FROM all_trades
GROUP BY 1,2
),

final_trading_pairs AS( --building the mapping table for pairs
SELECT
a.forward_pair, a.backward_pair,
a.sum_usd,b.sum_usd,
CASE
WHEN RIGHT(a.backward_pair,3)='ETH' THEN a.backward_pair
WHEN RIGHT(a.forward_pair,3)='ETH' THEN a.forward_pair -- if the backward version ends in WETH, do forward
WHEN RIGHT(a.backward_pair,4)='WBTC' THEN a.backward_pair
WHEN RIGHT(a.forward_pair,4)='WBTC' THEN a.forward_pair
WHEN (a.sum_usd >= b.sum_usd) -- when a > b
OR b.sum_usd IS NULL -- or if backward usd is null
THEN a.forward_pair -- select forward
ELSE a.backward_pair --else select backward in every other circumstance
END AS trading_pair

FROM sum_pairs a
LEFT JOIN sum_pairs b
ON a.forward_pair = b.backward_pair
),

v3_trades AS ( --clean table of trades to work with for building visuals
SELECT
atx.block_time,
COALESCE(f1.trading_pair, f2.trading_pair) AS trading_pair,

--CONCAT(atx.token_a, '/', atx.token_b) AS trading_pair, --pick the mapped trading pair (see joins)
-- if forward pair, the price a is front. If backward, then price b is front
CASE WHEN CONCAT(atx.token_a, '/', atx.token_b) = COALESCE(f1.trading_pair, f2.trading_pair) THEN pa.price
ELSE pb.price
END AS pricea,
CASE WHEN CONCAT(atx.token_a, '/', atx.token_b) = COALESCE(f1.trading_pair, f2.trading_pair) THEN pb.price
ELSE pa.price
END AS priceb,

atx.usd_amount,
atx.fee_tier,
atx.fees_collected_usd,
atx.tx_hash
FROM all_trades atx
LEFT JOIN prices.""usd"" pa
ON DATE_TRUNC('minute',atx.block_time) = pa.minute
AND atx.token_a_address = pa.""contract_address""
LEFT JOIN prices.""usd"" pb
ON DATE_TRUNC('minute',atx.block_time) = pb.minute
AND atx.token_b_address = pb.""contract_address""

LEFT JOIN final_trading_pairs f1 --check if the pair maps with the forward version
ON CONCAT(atx.token_a,'/',atx.token_b) = f1.forward_pair
LEFT JOIN final_trading_pairs f2 --check if the pair maps with the backward version
ON CONCAT(atx.token_a,'/',atx.token_b) = f2.backward_pair

WHERE
pa.minute  >= (DATE_TRUNC('minute',CURRENT_TIMESTAMP) - (SELECT tp FROM params)::INTERVAL)
AND pb.minute  >= (DATE_TRUNC('minute',CURRENT_TIMESTAMP) - (SELECT tp FROM params)::INTERVAL)

),

first_set_stats AS(
SELECT
DATE_TRUNC('hour',block_time) AS day_hr,
trading_pair
,fee_tier
,CONCAT(trading_pair, ' - ',
ROUND(fee_tier*100,2), '%') AS pair_fee
,SUM(usd_amount) AS total_usd
,SUM(fees_collected_usd) AS total_fees_usd
,AVG(pricea::decimal/priceb::decimal) AS pair_price
--,fee_tier
FROM v3_trades
WHERE block_time >= (DATE_TRUNC('hour',CURRENT_TIMESTAMP) - (SELECT tp FROM params)::INTERVAL)
AND usd_amount IS NOT NULL -- Eventually see if Dune adds new tokens, or we need to manually
GROUP BY 1,2,3,4
)
SELECT *,
(pair_price - (FIRST_VALUE(pair_price) OVER(PARTITION BY trading_pair ORDER BY day_hr ASC)))
/ (FIRST_VALUE(pair_price) OVER(PARTITION BY trading_pair ORDER BY day_hr ASC)) AS rel_price,
((pair_price - (FIRST_VALUE(pair_price) OVER(PARTITION BY trading_pair ORDER BY day_hr ASC)))
/ (FIRST_VALUE(pair_price) OVER(PARTITION BY trading_pair ORDER BY day_hr ASC)))*100 AS rel_price_100,
(total_fees_usd - (FIRST_VALUE(total_fees_usd) OVER(PARTITION BY trading_pair ORDER BY day_hr ASC)))
/ (FIRST_VALUE(total_fees_usd) OVER(PARTITION BY trading_pair ORDER BY day_hr ASC)) AS rel_fees,
((total_fees_usd - (FIRST_VALUE(total_fees_usd) OVER(PARTITION BY trading_pair ORDER BY day_hr ASC)))
/ (FIRST_VALUE(total_fees_usd) OVER(PARTITION BY trading_pair ORDER BY day_hr ASC)))*100 AS rel_fees_100

FROM first_set_stats
ORDER BY total_fees_usd DESC
"
58375,Uni v3 -2D Top LPs by Fees Earned (Creator-Level),,"[{""id"": 118022, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""columnMapping"": {""pair"": ""x"", ""creator_address"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""scatter""}, ""created_at"": ""2021-06-07T04:01:50.850481+00:00"", ""__typename"": ""visualizations""}, {""id"": 116035, ""type"": ""table"", ""name"": ""Query results"", ""options"": {""columns"": [{""name"": ""total_usd"", ""numberFormat"": ""$0a""}]}, ""created_at"": ""2021-06-05T05:19:59.858209+00:00"", ""__typename"": ""visualizations""}, {""id"": 116036, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""columnMapping"": {""pair"": ""x"", ""fees_collected_usd"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""pie""}, ""created_at"": ""2021-06-05T05:19:59.858209+00:00"", ""__typename"": ""visualizations""}, {""id"": 116040, ""type"": ""table"", ""name"": ""LP Positions by Fees"", ""options"": {""columns"": [{""name"": ""pair"", ""title"": ""Pair (A/B)""}, {""name"": ""atob_lower_bound"", ""title"": ""A/B Lower"", ""alignContent"": ""right"", ""numberFormat"": ""0,0.000""}, {""name"": ""atob_upper_bound"", ""title"": ""A/B Upper"", ""alignContent"": ""right"", ""numberFormat"": ""0,0.000""}, {""name"": ""fee_tier"", ""title"": ""Fee Tier"", ""numberFormat"": ""0.00%""}, {""name"": ""fees_collected_usd"", ""title"": ""*Fees (Approx)*"", ""alignContent"": ""center"", ""numberFormat"": ""$0.00a""}, {""name"": ""last_tvl_usd"", ""title"": ""LP Value"", ""alignContent"": ""right"", ""numberFormat"": ""$0.00a""}, {""name"": ""usd_volume"", ""title"": ""In-Range Volume |"", ""numberFormat"": ""$0.00a""}, {""name"": ""feel_to_tvl"", ""numberFormat"": ""0.00%""}, {""name"": ""fees_to_tvl"", ""title"": ""*Fees/LP*"", ""alignContent"": ""center"", ""numberFormat"": ""0.00%""}, {""name"": ""tokenId"", ""title"": ""NFT ID""}, {""name"": ""url"", ""title"": ""LP URL""}, {""name"": ""liq_start"", ""title"": ""Position Opened""}, {""name"": ""?column?"", ""numberFormat"": """"}, {""name"": ""pos_age"", ""title"": ""Age (Days H:M:S)""}, {""name"": ""inrange_vol"", ""title"": ""In-Range Volume"", ""alignContent"": ""right"", ""numberFormat"": ""$0.00a""}, {""name"": ""pair_vol"", ""title"": ""Total Pair Volume"", ""alignContent"": ""right"", ""numberFormat"": ""$0.00a""}, {""name"": ""share_of_possible_fees"", ""title"": ""Share of Pair Fees |"", ""alignContent"": ""center"", ""numberFormat"": ""0.0%""}, {""name"": ""range_efficiency"", ""title"": ""% In-Range |"", ""alignContent"": ""center"", ""numberFormat"": ""0.0%""}, {""name"": ""lp_status"", ""title"": ""LP Status""}, {""name"": ""lp_tag"", ""title"": ""LP Tag (ID - Pair)""}, {""name"": ""pos_close"", ""title"": ""Closed""}, {""name"": ""lp_radius"", ""title"": ""LP Radius |"", ""alignContent"": ""center"", ""numberFormat"": ""0.0%""}, {""name"": ""lp_end"", ""title"": ""Closed""}, {""name"": ""fees_to_tvl_apy"", ""title"": ""APY"", ""alignContent"": ""center"", ""numberFormat"": ""0.0a%""}, {""name"": ""fee_rank"", ""title"": ""By Fees"", ""alignContent"": ""center""}, {""name"": ""pair_fee"", ""title"": ""Pair Tag (Pair - Fee)""}, {""name"": ""creator_address"", ""title"": ""LP Creator""}]}, ""created_at"": ""2021-06-05T05:19:59.858209+00:00"", ""__typename"": ""visualizations""}, {""id"": 116042, ""type"": ""chart"", ""name"": ""Share of Pair Fees by LP Creator"", ""options"": {""sortX"": false, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Trading Pair (Sorted by Total Fees)""}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""% Share of Pair Volume""}, ""tickFormat"": ""%""}], ""legend"": {""enabled"": false}, ""series"": {""percentValues"": false}, ""reverseX"": false, ""numberFormat"": ""0.0%"", ""columnMapping"": {""pair"": ""x"", ""addr_map"": ""series"", ""share_of_fees"": ""y"", ""share_of_possible_fees"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""scatter""}, ""created_at"": ""2021-06-05T05:19:59.858209+00:00"", ""__typename"": ""visualizations""}, {""id"": 116043, ""type"": ""chart"", ""name"": ""Top LP Creators by Fees (% Within Filters)"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""$0.0a"", ""columnMapping"": {""total_fees"": ""y"", ""creator_fees"": ""y"", ""creator_address"": ""x""}, ""seriesOptions"": {""creator_fees"": {""name"": ""Total Fees Earned"", ""type"": ""pie"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2021-06-05T05:28:29.645285+00:00"", ""__typename"": ""visualizations""}, {""id"": 116044, ""type"": ""chart"", ""name"": ""LP Creator Competitiveness by Pair"", ""options"": {""sortX"": false, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""0.0%"", ""columnMapping"": {""pair"": ""x"", ""addr_map"": ""series"", ""share_of_fees"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""scatter""}, ""created_at"": ""2021-06-05T05:36:46.194117+00:00"", ""__typename"": ""visualizations""}]","WITH params AS
(
SELECT
'2 days' as tp,
--'{{LP - Top X Pairs}}'::decimal as min_pair_rank,
'{{3 Min LP Fees - k}}'::decimal*1000 AS min_fees, 
'{{2 Min LP TVL - k}}'::decimal*1000 AS min_tvl,
'{{1 Min Pair Volume - M}}'::decimal*1e6 AS min_vol_mil
),

top_pools AS
(
SELECT
""exchange_contract_address"",total_usd, total_fees
FROM (
    SELECT
    ""exchange_contract_address"",
    p.fee,
    SUM(""usd_amount"") AS total_usd,
    SUM(""usd_amount""*p.fee/1e6) AS total_fees,
    RANK() OVER (ORDER BY SUM(""usd_amount"") DESC) AS pair_rank
    FROM dex.""trades"" t
    INNER JOIN uniswap_v3.""Factory_call_createPool"" p --get pool data
    ON t.exchange_contract_address = p.output_pool
    WHERE project = 'Uniswap'
    AND version = '3'
    AND category = 'DEX'
    AND block_time >= '05-05-2021 17:00' -- Uni v3 launch date/hr
    AND block_time >= (DATE_TRUNC('minute',CURRENT_TIMESTAMP) - '2 days'::INTERVAL)
    --AND ""exchange_contract_address"" = '\x8ad599c3a0ff1de082011efddc58f1908eb6e6d8'
    AND (""usd_amount"" IS NOT NULL)
    GROUP BY 1,2
    ) a
--WHERE pair_rank <=  (SELECT min_pair_rank from params)
WHERE total_usd >= (SELECT min_vol_mil FROM params)
AND (total_usd IS NOT NULL)
),

v3_trunc AS (
SELECT *--,
--ROW_NUMBER() OVER () AS rown
FROM
    (
    SELECT
    --t.block_time,
    date_trunc('hour',t.block_time) + --5 minute blocks // This is for preformance: takes ~5 mins to run if we trunc by minute, ~3 mins by 5 mins, 1 min by 15 minsm 1 min by hour... trying to find a happy medium
        ( --chose 15 minutes as a tradeoff between accuracy (shorter window) and filter flexibility (bigger windwo)
        (FLOOR(extract(minute FROM t.block_time)::int / 15)*15 || 'minutes')::interval --trying 5 mins for accuracy
        )
    AS block_fifteenmins, --make this hour if query hangs
    
    t.""exchange_contract_address"",
    t.""token_a_address"",t.""token_a_symbol"",
    t.""token_b_address"",t.""token_b_symbol"",
    CASE --filling in missing addresses for coins. Maybe not worth keeping up, some are memes.
    WHEN t.token_a_symbol::text = 'WETH' THEN 'ETH'
    WHEN t.token_a_address::text = '\x0000000000000000000000000000000000000000' THEN 'Burn Addr'
    WHEN t.token_a_address::text = '\xde30da39c46104798bb5aa3fe8b9e0e1f348163f' THEN 'GTC'
    WHEN t.token_a_address::text = '\xa47c8bf37f92abed4a126bda807a7b7498661acd' THEN 'UST'
    WHEN t.token_a_address::text = '\x6c28AeF8977c9B773996d0e8376d2EE379446F2f' THEN 'QUICK'
    WHEN t.token_a_address::text = '\x519c1001d550c0a1dae7d1fc220f7d14c2a521bb' THEN 'PSWAP'
    WHEN t.token_a_address::text = '\xf411903cbc70a74d22900a5de66a2dda66507255' THEN 'VERA'
    WHEN t.token_a_address::text = '\x2f109021afe75b949429fe30523ee7c0d5b27207' THEN 'OCC'
    WHEN t.token_a_address::text = '\x4691937a7508860f876c9c0a2a617e7d9e945d4b' THEN 'WOO'
    WHEN t.token_a_address::text = '\x9695e0114e12c0d3a3636fab5a18e6b737529023' THEN 'DFYN'
    WHEN t.token_a_address::text = '\xc834fa996fa3bec7aad3693af486ae53d8aa8b50' THEN 'CONV'
    WHEN t.token_a_address::text = '\x3431f91b3a388115f00c5ba9fdb899851d005fb5' THEN 'GERO'
    WHEN t.token_a_address::text = '\x038a68ff68c393373ec894015816e33ad41bd564' THEN 'GLCH'
    WHEN t.token_a_address::text = '\xa2b4c0af19cc16a6cfacce81f192b024d625817d' THEN 'KISHU'
    WHEN t.token_a_address::text = '\x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce' THEN 'SHIB'
    WHEN t.token_a_address::text = '\x761d38e5ddf6ccf6cf7c55759d5210750b5d60f3' THEN 'ELON'
    WHEN t.token_a_address::text = '\x3301ee63fb29f863f2333bd4466acb46cd8323e6' THEN 'AKITA'
    WHEN t.token_a_address::text = '\x5218e472cfcfe0b64a064f055b43b4cdc9efd3a6' THEN 'eRSDL'
    WHEN t.token_a_address::text = '\x1453dbb8a29551ade11d89825ca812e05317eaeb' THEN 'TEND'
    WHEN t.token_a_address::text = '\x35a532d376ffd9a705d0bb319532837337a398e7' THEN 'WDOGE'
    WHEN t.token_a_address::text = '\x17ef75aa22dd5f6c2763b8304ab24f40ee54d48a' THEN 'RVP'
    WHEN t.token_a_address::text = '\x6dea81c8171d0ba574754ef6f8b412f2ed88c54d' THEN 'LQTY'
    WHEN t.token_a_address::text = '\x3832d2f059e55934220881f831be501d180671a7' THEN 'renDOGE'
    WHEN t.token_a_address::text = '\xf16e4d813f4dcfde4c5b44f305c908742de84ef0' THEN 'ETH2x ADL'
    WHEN t.token_a_address::text = '\x77fba179c79de5b7653f68b5039af940ada60ce0' THEN 'FORTH'
    WHEN t.token_a_address::text = '\xf65b5c5104c4fafd4b709d9d60a185eae063276c' THEN 'TRU'
    WHEN t.token_a_address::text = '\xc7283b66eb1eb5fb86327f08e1b5816b0720212b' THEN 'TRIBE'
    WHEN t.token_a_address::text = '\xc8807f0f5ba3fa45ffbdc66928d71c5289249014' THEN 'ISP'
    WHEN t.token_a_address::text = '\x27c70cd1946795b66be9d954418546998b546634' THEN 'LEASH'
    WHEN t.token_a_address::text = '\x956f47f50a910163d8bf957cf5846d573e7f87ca' THEN 'FEI'
    WHEN t.token_a_address::text = '\x5f98805a4e8be255a32880fdec7f6728c6568ba0' THEN 'LUSD'
    WHEN t.token_a_address::text = '\xb525ecee288b99216cd481c56b6efbdbe9bf90b5' THEN 'KUMA'
    WHEN t.token_a_address::text = '\xd291e7a03283640fdc51b121ac401383a46cc623' THEN 'RGT'
    WHEN t.token_a_address::text = '\x3d6f0dea3ac3c607b3998e6ce14b6350721752d9' THEN 'CARDS'
    WHEN t.token_a_address::text = '\x841fb148863454a3b3570f515414759be9091465' THEN 'SHIH'
    WHEN t.token_a_address::text = '\xd0660cd418a64a1d44e9214ad8e459324d8157f1' THEN 'WOOFY'
    WHEN t.token_a_address::text = '\x853d955acef822db058eb8505911ed77f175b99e' THEN 'FRAX'
    WHEN t.token_a_address::text = '\x5e74c9036fb86bd7ecdcb084a0673efc32ea31cb' THEN 'sETH'
    WHEN t.token_a_address::text = '\xae7ab96520de3a18e5e111b5eaab095312d7fe84' THEN 'stETH'
    WHEN t.token_a_address::text = '\xe95a203b1a91a908f9b9ce46459d101078c2c3cb' THEN 'ankrETH'
    WHEN t.token_a_address::text = '\x9559aaa82d9649c7a7b220e7c461d2e74c9a3593' THEN 'rETH'
    WHEN t.token_a_address::text = '\x4ddc2d193948926d02f9b1fe9e1daa0718270ed5' THEN 'cETH'
    
    ELSE COALESCE(t.token_a_symbol,
    CONCAT(LEFT(t.token_a_address::text,3),'...',RIGHT(t.token_a_address::text,3))
    )
    END AS token_a,
    CASE --filling in missing addresses for coins. Maybe not worth keeping up, some are memes.
    WHEN t.token_b_symbol::text = 'WETH' THEN 'ETH'
    WHEN t.token_b_address::text = '\x0000000000000000000000000000000000000000' THEN 'Burn Addr'
    WHEN t.token_b_address::text = '\xde30da39c46104798bb5aa3fe8b9e0e1f348163f' THEN 'GTC'
    WHEN t.token_b_address::text = '\xa47c8bf37f92abed4a126bda807a7b7498661acd' THEN 'UST'
    WHEN t.token_b_address::text = '\x6c28AeF8977c9B773996d0e8376d2EE379446F2f' THEN 'QUICK'
    WHEN t.token_b_address::text = '\x519c1001d550c0a1dae7d1fc220f7d14c2a521bb' THEN 'PSWAP'
    WHEN t.token_b_address::text = '\xf411903cbc70a74d22900a5de66a2dda66507255' THEN 'VERA'
    WHEN t.token_b_address::text = '\x2f109021afe75b949429fe30523ee7c0d5b27207' THEN 'OCC'
    WHEN t.token_b_address::text = '\xc834fa996fa3bec7aad3693af486ae53d8aa8b50' THEN 'CONV'
    WHEN t.token_b_address::text = '\x4691937a7508860f876c9c0a2a617e7d9e945d4b' THEN 'WOO'
    WHEN t.token_b_address::text = '\x9695e0114e12c0d3a3636fab5a18e6b737529023' THEN 'DFYN'
    WHEN t.token_b_address::text = '\x3431f91b3a388115f00c5ba9fdb899851d005fb5' THEN 'GERO'
    WHEN t.token_b_address::text = '\x038a68ff68c393373ec894015816e33ad41bd564' THEN 'GLCH'
    WHEN t.token_b_address::text = '\xa2b4c0af19cc16a6cfacce81f192b024d625817d' THEN 'KISHU'
    WHEN t.token_b_address::text = '\x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce' THEN 'SHIB'
    WHEN t.token_b_address::text = '\x761d38e5ddf6ccf6cf7c55759d5210750b5d60f3' THEN 'ELON'
    WHEN t.token_b_address::text = '\x3301ee63fb29f863f2333bd4466acb46cd8323e6' THEN 'AKITA'
    WHEN t.token_b_address::text = '\x5218e472cfcfe0b64a064f055b43b4cdc9efd3a6' THEN 'eRSDL'
    WHEN t.token_b_address::text = '\x1453dbb8a29551ade11d89825ca812e05317eaeb' THEN 'TEND'
    WHEN t.token_b_address::text = '\x35a532d376ffd9a705d0bb319532837337a398e7' THEN 'WDOGE'
    WHEN t.token_b_address::text = '\x17ef75aa22dd5f6c2763b8304ab24f40ee54d48a' THEN 'RVP'
    WHEN t.token_b_address::text = '\x6dea81c8171d0ba574754ef6f8b412f2ed88c54d' THEN 'LQTY'
    WHEN t.token_b_address::text = '\x3832d2f059e55934220881f831be501d180671a7' THEN 'renDOGE'
    WHEN t.token_b_address::text = '\xf16e4d813f4dcfde4c5b44f305c908742de84ef0' THEN 'ETH2x ADL'
    WHEN t.token_b_address::text = '\x77fba179c79de5b7653f68b5039af940ada60ce0' THEN 'FORTH'
    WHEN t.token_b_address::text = '\xf65b5c5104c4fafd4b709d9d60a185eae063276c' THEN 'TRU'
    WHEN t.token_b_address::text = '\xc7283b66eb1eb5fb86327f08e1b5816b0720212b' THEN 'TRIBE'
    WHEN t.token_b_address::text = '\xc8807f0f5ba3fa45ffbdc66928d71c5289249014' THEN 'ISP'
    WHEN t.token_b_address::text = '\x27c70cd1946795b66be9d954418546998b546634' THEN 'LEASH'
    WHEN t.token_b_address::text = '\x956f47f50a910163d8bf957cf5846d573e7f87ca' THEN 'FEI'
    WHEN t.token_b_address::text = '\x5f98805a4e8be255a32880fdec7f6728c6568ba0' THEN 'LUSD'
    WHEN t.token_b_address::text = '\xb525ecee288b99216cd481c56b6efbdbe9bf90b5' THEN 'KUMA'
    WHEN t.token_b_address::text = '\xd291e7a03283640fdc51b121ac401383a46cc623' THEN 'RGT'
    WHEN t.token_b_address::text = '\x3d6f0dea3ac3c607b3998e6ce14b6350721752d9' THEN 'CARDS'
    WHEN t.token_b_address::text = '\x841fb148863454a3b3570f515414759be9091465' THEN 'SHIH'
    WHEN t.token_b_address::text = '\xd0660cd418a64a1d44e9214ad8e459324d8157f1' THEN 'WOOFY'
    WHEN t.token_b_address::text = '\x853d955acef822db058eb8505911ed77f175b99e' THEN 'FRAX'
    WHEN t.token_b_address::text = '\x5e74c9036fb86bd7ecdcb084a0673efc32ea31cb' THEN 'sETH'
    WHEN t.token_b_address::text = '\xae7ab96520de3a18e5e111b5eaab095312d7fe84' THEN 'stETH'
    WHEN t.token_b_address::text = '\xe95a203b1a91a908f9b9ce46459d101078c2c3cb' THEN 'ankrETH'
    WHEN t.token_b_address::text = '\x9559aaa82d9649c7a7b220e7c461d2e74c9a3593' THEN 'rETH'
    WHEN t.token_b_address::text = '\x4ddc2d193948926d02f9b1fe9e1daa0718270ed5' THEN 'cETH'
    
    ELSE COALESCE(t.token_b_symbol,
    CONCAT(LEFT(t.token_b_address::text,3),'...',RIGHT(t.token_b_address::text,3))
    )
    END AS token_b,
    AVG(s.liquidity) as weighted_liquidity,
    SUM(t.""usd_amount"") AS usd_vol,
    SUM(t.token_a_amount_raw) AS token_a_amount_raw_sum,
    SUM(t.token_b_amount_raw) AS token_b_amount_raw_sum,

    --AVG(s.tick) AS avg_tick,
    SUM(s.tick*t.""usd_amount"")/SUM(t.""usd_amount"") AS weighted_tick
    
    FROM dex.""trades"" t
    
    INNER JOIN uniswap_v3.""Pair_evt_Swap"" s -- Get liquidity available and tick value of the trade
        ON t.tx_hash = s.evt_tx_hash
        AND t.block_time = s.evt_block_time
        AND t.""exchange_contract_address"" = s.""contract_address""

    
    WHERE t.project = 'Uniswap'
    AND t.version = '3'
    AND t.category = 'DEX'
    AND t.block_time >= (DATE_TRUNC('minute',CURRENT_TIMESTAMP) - (SELECT tp FROM params)::INTERVAL)
    AND s.evt_block_time >= (DATE_TRUNC('minute',CURRENT_TIMESTAMP) - (SELECT tp FROM params)::INTERVAL)
    AND t.""exchange_contract_address"" IN (SELECT exchange_contract_address FROM top_pools)
    AND (t.""usd_amount"">0) AND (t.""usd_amount"" IS NOT NULL)
    
    GROUP BY 1,2,3,4,5,6,7,8
    ) v
WHERE
(
    '{{7 Exclude}}' NOT LIKE '%' || token_a || '%'
    AND
    '{{7 Exclude}}' NOT LIKE '%' ||token_a || '%'
)
AND
(1 = 
    CASE
    WHEN '{{6 Include}}' = 'All Tokens' THEN 1
    WHEN '{{6 Include}}' LIKE '%' || token_a || '%' THEN 1
    WHEN '{{6 Include}}' LIKE '%' || token_b || '%' THEN 1
    ELSE 0
    END
)
),

dex_price AS 
( --this was originally multiple queries that I combined for preformance, so it looks very confusing now
SELECT 
c.t_one,
    CASE WHEN direction = 'forward' THEN (l.usd_vol::decimal)/(l.token_a_amount_raw_sum/(10^18))::decimal --token a price
    ELSE (l.usd_vol::decimal)/(l.token_b_amount_raw_sum/(10^18))::decimal --token b price
    END AS price_18
FROM
    ( --get most recent price
    SELECT d.*
    FROM (
        SELECT DISTINCT
        block_fifteenmins, exchange_contract_address,
        token_a_address, token_b_address,
        token_a_amount_raw_sum, token_b_amount_raw_sum,
        usd_vol,
        DENSE_RANK() OVER(PARTITION BY exchange_contract_address ORDER BY block_fifteenmins DESC, usd_vol DESC) AS tr_rank
        FROM v3_trunc
        WHERE block_fifteenmins >= (DATE_TRUNC('minute',CURRENT_TIMESTAMP) - (SELECT tp FROM params)::INTERVAL)
        AND usd_vol IS NOT NULL
        ) d
    WHERE d.tr_rank = 1
    ) l
INNER JOIN 
    ( --dex_trades AS --get most popular pair, use that for price
    SELECT b.* FROM (
        SELECT
        direction,exchange_contract_address,t_one,t_two,
        DENSE_RANK() OVER (PARTITION BY t_one ORDER BY total_usd DESC,exchange_contract_address DESC) AS t_rank
        FROM
            (
            SELECT
            'forward' as direction,
            exchange_contract_address,
            ""token_a_address"" as t_one, ""token_b_address"" as t_two,

            SUM(usd_vol) AS total_usd
            FROM v3_trunc
            WHERE
            ""token_b_address"" = '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'
            GROUP BY 1,2,3,4
            
            UNION
            
            SELECT
            'backward' as direction, --flipping token a and b here, so it's easier to calc what's the best pair for each token
            exchange_contract_address,
            ""token_b_address"" as t_one, ""token_a_address"" AS t_two, 
    
            SUM(usd_vol) AS total_usd
            FROM v3_trunc
            WHERE
            ""token_a_address"" = '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'
            GROUP BY 1,2,3,4
            ) a
        ) b
    WHERE t_rank = 1
    ) c
ON c.exchange_contract_address = l.exchange_contract_address

),

final_trading_pairs AS( --building the mapping table for pairs
SELECT
a.exchange_contract_address,
a.forward_pair, a.backward_pair,
a.sum_usd,b.sum_usd,

CASE
WHEN RIGHT(a.backward_pair,3)='ETH' THEN a.backward_pair
WHEN RIGHT(a.forward_pair,3)='ETH' THEN a.forward_pair -- if the backward version ends in WETH, do forward
WHEN RIGHT(a.backward_pair,4)='WBTC' THEN a.backward_pair
WHEN RIGHT(a.forward_pair,4)='WBTC' THEN a.forward_pair
WHEN (a.sum_usd >= b.sum_usd) -- when a > b --Caring less about this now, just force ETH to thr right, otherwise take the UNI order
OR b.sum_usd IS NULL -- or if backward usd is null
THEN a.forward_pair -- select forward
ELSE a.backward_pair --else select backward in every other circumstance
END AS trading_pair

FROM 
    ( --sum_pairs AS
    SELECT 
    exchange_contract_address,
    CONCAT(token_a,'/',token_b) AS forward_pair -- Trading pair
    ,CONCAT(token_b,'/',token_a) AS backward_pair -- For joining buys/sells later
    ,SUM(usd_vol) AS sum_usd

    FROM v3_trunc
    GROUP BY 1,2,3
    ) a
LEFT JOIN 
    (
    SELECT --sum_pairs AS
    exchange_contract_address,
    CONCAT(token_a,'/',token_b) AS forward_pair -- Trading pair
    ,CONCAT(token_b,'/',token_a) AS backward_pair -- For joining buys/sells later
    ,SUM(usd_vol) AS sum_usd
    
    FROM v3_trunc
    GROUP BY 1,2,3
    )
    b
ON a.forward_pair = b.backward_pair
AND a.exchange_contract_address = b.exchange_contract_address
),

get_liquidity AS ( --this is to find the liquidity of each position at trade time
SELECT * FROM
    (
    SELECT *,
    lead(running_amount, 1, running_amount) OVER (PARTITION BY ""tokenId"" ORDER BY call_block_time asc) AS next_lp_amount
    FROM
    (
        SELECT amount, amount0, amount1, contract_address,call_block_time, call_tx_hash,
        ""tickLower"",""tickUpper"", /*liquidity,*/ ""tokenId"", tr_type,
        lead(call_block_time, 1, now()) OVER (PARTITION BY ""tokenId"" ORDER BY call_block_time asc) AS next_lp, --to help key in on the right lp when joining - for preformance
        lag(call_block_time, 1, '01-01-2000') OVER (PARTITION BY ""tokenId"" ORDER BY call_block_time asc) AS previous_lp,
        SUM(amount) OVER(PARTITION BY ""tokenId"" ORDER BY call_block_time ASC) AS running_amount,
        SUM(amount0) OVER(PARTITION BY ""tokenId"" ORDER BY call_block_time ASC) AS running_amount0,
        SUM(amount1) OVER(PARTITION BY ""tokenId"" ORDER BY call_block_time ASC) AS running_amount1,
        MIN(call_block_time) OVER(PARTITION BY ""tokenId"") AS liq_start
        
        FROM ( --this is a mess. We union new mints + adds to liquidity + new burns + removals from liquidity. eesh
            -- NEW MINTS
            SELECT
            m.amount, m.output_amount0 AS amount0, m.output_amount1 AS amount1, m.contract_address,
            m.call_block_time, m.call_tx_hash, m.""tickLower"", m.""tickUpper"",
            /*l.liquidity,*/ l.""output_tokenId""::text AS ""tokenId"", 'Mint' AS tr_type
            FROM uniswap_v3.""Pair_call_mint"" m
           
            INNER JOIN uniswap_v3.""NonfungibleTokenPositionManager_call_mint"" l
            ON m.call_tx_hash = l.call_tx_hash
            AND m.call_block_time = l.call_block_time
            
            WHERE l.""output_tokenId""::text IS NOT NULL --Some of these are blank, but the transactions are batched/kind of weird or have 0 amount. Maybe revisit, but these seem like duplicates/multiples within a larger transaction that we catch
            AND (m.amount != 0) --only events that do something
            AND m.contract_address IN (SELECT exchange_contract_address FROM top_pools)
            AND m.call_success = 'true' AND l.call_success = 'true'
            
            UNION
            --ADDITIONS TO LIQUIDITY INCREASE
            SELECT
            m.amount, m.output_amount0 AS amount0, m.output_amount1 AS amount1, m.contract_address,
            m.call_block_time, m.call_tx_hash, m.""tickLower"", m.""tickUpper"",
            /*l.liquidity,*/ (l.params->'tokenId')::text AS ""tokenId"", 'Mint' AS tr_type
            FROM uniswap_v3.""Pair_call_mint"" m
           
            INNER JOIN uniswap_v3.""NonfungibleTokenPositionManager_call_increaseLiquidity"" l
            ON m.call_tx_hash = l.call_tx_hash
            AND m.call_block_time = l.call_block_time
            
            WHERE (l.params->'tokenId')::text IS NOT NULL --Some of these are blank, but the transactions are batched/kind of weird or have 0 amount. Maybe revisit, but these seem like duplicates/multiples within a larger transaction that we catch
            AND (m.amount != 0) --only events that do something
            AND m.contract_address IN (SELECT exchange_contract_address FROM top_pools)
            AND m.call_success = 'true' AND l.call_success = 'true'
            
            UNION
            -- NEW BURNS // uniswap_v3.""NonfungibleTokenPositionManager_call_burn"" doesn't do anything so jsut decrease liq
            SELECT --negate because these are burns
            (-1)*b.amount AS amount, (-1)*b.output_amount0 AS amount0, (-1)*b.output_amount1 AS amount1, b.contract_address,
            b.call_block_time, b.call_tx_hash, b.""tickLower"", b.""tickUpper"",
            /*l.liquidity,*/ (l.params->'tokenId')::text AS tokenId, 'Burn' AS tr_type
            FROM uniswap_v3.""Pair_call_burn"" b
            
            INNER JOIN uniswap_v3.""NonfungibleTokenPositionManager_call_decreaseLiquidity"" l
            ON b.call_tx_hash = l.call_tx_hash
            AND b.call_block_time = l.call_block_time
            
            WHERE (l.params->'tokenId')::text IS NOT NULL --Some of these are blank, but the transactions are batched/kind of weird or have 0 amount. Maybe revisit, but these seem like duplicates/multiples within a larger transaction that we catch
            AND (b.amount != 0) --only events that do something
            AND b.contract_address IN (SELECT exchange_contract_address FROM top_pools)
            AND b.call_success = 'true'
            AND l.call_success = 'true'
            
            ) lq
        ) la
    --Since we already calc'd running amounts, we can ditch all LP events besides the last one before the 2 day / stuff within the 2 day.
    -- We'll use 'next LP' to do this
    WHERE next_lp >= (DATE_TRUNC('minute',CURRENT_TIMESTAMP) - '2 days'::INTERVAL)
) a
WHERE running_amount >0 --check this later, but we should be able to ditch these too since matching is on block time and next lp

),

avail_lps AS(
SELECT b.*,
SUM(lp_amount_per_tick) OVER(PARTITION BY block_fifteenmins, ""exchange_contract_address"") AS in_range_lp,
lp_amount_per_tick / (SUM(lp_amount_per_tick) OVER(PARTITION BY block_fifteenmins, ""exchange_contract_address"")) AS share_at_tick,
usd_amount*(fee/1e6)*(
lp_amount_per_tick / (SUM(lp_amount_per_tick) OVER(PARTITION BY block_fifteenmins, ""exchange_contract_address""))
) AS fees_collected
FROM
(
    SELECT a.*, p.fee
    FROM (
        SELECT
        t.block_fifteenmins,
        t.""exchange_contract_address"",
        t.token_a_address, --for joining
        t.token_b_address, --for joining
        t.token_a,
        t.token_b,
        t.usd_vol AS usd_amount,
        t.weighted_liquidity,
        
        g.running_amount AS lp_amount,--liquidity value of the distinct lp position
        1.0001^(g.""tickUpper"" - g.""tickLower"") AS tick_range,
        g.running_amount / (1.0001^(g.""tickUpper"" - g.""tickLower"")) AS lp_amount_per_tick,
        g.running_amount0 AS lp_amount0,
        g.running_amount1 AS lp_amount1,
        liq_start,
        g.""tokenId"",
        g.""tickLower"", g.""tickUpper"", g.amount0, g.amount1, g.next_lp, g.next_lp_amount,
        g.call_block_time,
        ROW_NUMBER() OVER (PARTITION BY t.block_fifteenmins, g.""tokenId"" ORDER BY g.call_block_time DESC) AS token_lp_rank --Find the most recent liquidity for the lp position for each trade
        ---^ (if the lp adds/removes a bunch of times, we'll see all their transactions. So we want to pick the last one because that should be what their liquidity was at the time of the trade.)
        FROM v3_trunc t
        
        
        INNER JOIN get_liquidity g-- all liquidity options
        ON g.contract_address = t.exchange_contract_address
            AND g.call_block_time <= t.block_fifteenmins --Get previous liquidity statuses before the trade
            AND g.next_lp > t.block_fifteenmins -- pick the transaction whose next transaction is after this trade (i.e. only the latest one)
            AND g.previous_lp <= t.block_fifteenmins --just adding to do it
            AND g.""tickLower"" <= t.weighted_tick
            AND g.""tickUpper"" >= t.weighted_tick
        
        WHERE
        /*t.project = 'Uniswap'
        AND t.version = '3'
        AND t.block_time >= (DATE_TRUNC('minute',CURRENT_TIMESTAMP) - (SELECT tp FROM params)::INTERVAL)
        AND t.usd_amount > 0 AND (t.usd_amount IS NOT NULL)
        AND*/ g.running_amount >0 --since we join on next > tx_time, we can do this to remove inactive LPs
        AND
        t.""exchange_contract_address"" IN (SELECT exchange_contract_address FROM top_pools)
        AND t.block_fifteenmins >= (DATE_TRUNC('minute',CURRENT_TIMESTAMP) - (SELECT tp FROM params)::INTERVAL)
        AND g.next_lp >= (DATE_TRUNC('minute',CURRENT_TIMESTAMP) - (SELECT tp FROM params)::INTERVAL)
        
        ) a
        INNER JOIN uniswap_v3.""Factory_call_createPool"" p --get pool data
        ON a.exchange_contract_address = p.output_pool
        WHERE token_lp_rank = 1
    ) b
),

fees_by_lp AS (
SELECT *,
RANK() OVER (PARTITION BY ""tokenId"" ORDER BY tvl_usd DESC, block_fifteenmins DESC) AS token_tvl_usd_rank
FROM
(
    --i was getting divide by zero... not sure why so this
    --total liquidity still a tiny bit off.... maybe it's collections? Figure this out
    SELECT DISTINCT l.*, --some pairs have duplicate rows and idk why
    fees_collected AS fees_received_usd,
    CASE WHEN (l.lp_amount0 IS NULL) OR (l.lp_amount0 IS NULL) OR (t0.decimals IS NULL)
    THEN (l.lp_amount0/10^18) --if null, assume 18
    ELSE (l.lp_amount0/10^t0.decimals)
    END AS amount_a,
    
    CASE WHEN (l.lp_amount1 IS NULL) OR (l.lp_amount1 IS NULL) OR (t1.decimals IS NULL)
    THEN (l.lp_amount1/10^18)
    ELSE (l.lp_amount1/10^t1.decimals)
    END AS amount_b,
    
    CASE WHEN (l.lp_amount0 IS NULL) OR (l.lp_amount0 IS NULL) OR (t0.decimals IS NULL)
    THEN dpa.price_18*(l.lp_amount0/10^18)
    ELSE t0.price*(l.lp_amount0/10^t0.decimals)
    END AS amount_a_usd,
    
    CASE WHEN (l.lp_amount1 IS NULL) OR (l.lp_amount1 IS NULL) OR (t1.decimals IS NULL)
    THEN dpb.price_18*(l.lp_amount1/10^18)
    ELSE t1.price*(l.lp_amount1/10^t1.decimals)
    END AS amount_b_usd,
    (CASE WHEN (l.lp_amount0 IS NULL) OR (l.lp_amount0 IS NULL) OR (t0.decimals IS NULL)
    THEN dpa.price_18*(l.lp_amount0/10^18)
    ELSE t0.price*(l.lp_amount0/10^t0.decimals)
    END)
    +
    (CASE WHEN (l.lp_amount1 IS NULL) OR (l.lp_amount1 IS NULL) OR (t1.decimals IS NULL)
    THEN dpb.price_18*(l.lp_amount1/10^18)
    ELSE t1.price*(l.lp_amount1/10^t1.decimals)
    END)
    AS tvl_usd,
    --SUM(l.lp_amount) OVER (PARTITION BY l.block_fifteenmins, l.""exchange_contract_address"") AS concentrated_liquidity,
    
    CASE WHEN
    ((SUM(l.lp_amount) OVER (PARTITION BY l.block_fifteenmins, l.""exchange_contract_address"")) = 0)
    OR ((SUM(l.lp_amount) OVER (PARTITION BY l.block_fifteenmins, l.""exchange_contract_address"")) IS NULL) THEN 0
    ELSE l.lp_amount::decimal / ((SUM(l.lp_amount) OVER (PARTITION BY l.block_fifteenmins, l.""exchange_contract_address""))::decimal)
    END AS share_of_pool,
     CASE WHEN
    ((SUM(l.lp_amount_per_tick) OVER (PARTITION BY l.block_fifteenmins, l.""exchange_contract_address"")) = 0)
    OR ((SUM(l.lp_amount_per_tick) OVER (PARTITION BY l.block_fifteenmins, l.""exchange_contract_address"")) IS NULL) THEN 0
    ELSE l.lp_amount_per_tick::decimal / ((SUM(l.lp_amount_per_tick) OVER (PARTITION BY l.block_fifteenmins, l.""exchange_contract_address""))::decimal)
    END AS share_of_pool_per_tick,
    
   /* CASE WHEN
    ((SUM(l.lp_amount_per_tick) OVER (PARTITION BY l.block_fifteenmins, l.""exchange_contract_address"")) = 0)
    OR ((SUM(l.lp_amount_per_tick) OVER (PARTITION BY l.block_fifteenmins, l.""exchange_contract_address"")) IS NULL) THEN 0
    ELSE l.lp_amount_per_tick::decimal / (l.liquidity::decimal)
    END AS share_of_pool_per_tick_liquidity,*/
    
    --CASE WHEN
    --((SUM(l.lp_amount) OVER (PARTITION BY l.block_fifteenmins, l.""exchange_contract_address"")) = 0)
    --OR ((SUM(l.lp_amount) OVER (PARTITION BY l.block_fifteenmins, l.""exchange_contract_address"")) IS NULL) THEN 0
    --ELSE
    --(l.usd_amount::decimal * (p.fee/1e6)::decimal) *
    --(l.lp_amount::decimal / ((SUM(l.lp_amount) OVER (PARTITION BY l.block_fifteenmins, l.""exchange_contract_address"")))::decimal)
    --END AS fees_received_usd_v2_OLD, 
    --TODO - VALIDATE IF FEES ARE CALC'D AS PROPORTION OF LIQUIDITY PER TICK, OR SOMETHING ELSE (LIKE SQRT): https://uniswap.org/whitepaper-v3.pdf
    CASE WHEN
    ((SUM(l.lp_amount_per_tick) OVER (PARTITION BY l.block_fifteenmins, l.""exchange_contract_address"")) = 0)
    OR ((SUM(l.lp_amount_per_tick) OVER (PARTITION BY l.block_fifteenmins, l.""exchange_contract_address"")) IS NULL) THEN 0
    ELSE
    (l.usd_amount::decimal * (p.fee/1e6)::decimal) *
    (l.lp_amount_per_tick::decimal / ((SUM(l.lp_amount_per_tick) OVER (PARTITION BY l.block_fifteenmins, l.""exchange_contract_address"")))::decimal)
    END AS fees_received_usd_old, --TODO: See if I'm calc'ing this right, or of width of ticks has an impact?
    
    
    /*CASE WHEN
    ((SUM(l.lp_amount_per_tick) OVER (PARTITION BY l.block_fifteenmins, l.""exchange_contract_address"")) = 0)
    OR ((SUM(l.lp_amount_per_tick) OVER (PARTITION BY l.block_fifteenmins, l.""exchange_contract_address"")) IS NULL) THEN 0
    ELSE
    (l.usd_amount::decimal * (p.fee/1e6)::decimal) *
    (l.lp_amount_per_tick::decimal / (l.liquidity::decimal))
    END AS fees_received_usd_liq, --TODO: See if I'm calc'ing this right, or of width of ticks has an impact?
    */
    
    --p.fee,
    p.fee/1e6::decimal AS fee_tier,
    p.""tokenA"", p.""tokenB"",
     CASE  --assuming 18 for decimals if null
        WHEN ""tickLower"" < 0 THEN (1.0001^(""tickLower"")) * (10^(ABS(COALESCE(t0.decimals,18)-COALESCE(t1.decimals,18))))
        ELSE (1.0001^(""tickLower"")) / (10^(ABS(COALESCE(t0.decimals,18)-COALESCE(t1.decimals,18))))
    END AS price_lower,
    CASE 
        WHEN ""tickUpper"" < 0 THEN (1.0001^(""tickUpper"")) * (10^(ABS(COALESCE(t0.decimals,18)-COALESCE(t1.decimals,18))))
        ELSE (1.0001^(""tickUpper"")) / (10^(ABS(COALESCE(t0.decimals,18)-COALESCE(t1.decimals,18))))
    END AS price_upper,
    
    RANK() OVER (PARTITION BY l.""tokenId"" ORDER BY l.block_fifteenmins DESC) AS token_tvl_rank --Find the tvl by lp when the last trade was made.
    
    FROM avail_lps l
    
    INNER JOIN uniswap_v3.""Factory_call_createPool"" p --get pool data
    ON l.exchange_contract_address = p.output_pool
    LEFT JOIN prices.""usd"" t0
    ON DATE_TRUNC('minute',l.call_block_time) = t0.minute
    AND l.token_a_address = t0.""contract_address""
    LEFT JOIN prices.""usd"" t1
    ON DATE_TRUNC('minute',l.call_block_time) = t1.minute
    AND l.token_b_address = t1.""contract_address""
    LEFT JOIN dex_price dpa
    ON l.token_a_address = dpa.t_one
    LEFT JOIN dex_price dpb
    ON l.token_b_address = dpb.t_one
    
    WHERE /*token_lp_rank = 1 -- only pick most recent liquidity position per lp
    AND*/ lp_amount>0 
    AND usd_amount > 0 --we're losing some pairs that dune doesn't have... to do for later maybe is try to map these (maybe sqrt price?)
    -- fees per Lp is total_usd * fee_tier * share_of_pool
    AND t0.minute >= (DATE_TRUNC('minute',CURRENT_TIMESTAMP) - (SELECT tp FROM params)::INTERVAL)
    AND t1.minute >= (DATE_TRUNC('minute',CURRENT_TIMESTAMP) - (SELECT tp FROM params)::INTERVAL)
)  a

),

final_lps AS
(
SELECT
lp.token_a,
lp.token_b,
f1.trading_pair,
f2.trading_pair,
COALESCE(f1.trading_pair, f2.trading_pair) AS pair,
lp.""tokenId"",
lp.liq_start,
lp.exchange_contract_address,
--""tickLower"" as tick_lower,
--""tickUpper"" as tick_upper,
CASE WHEN (lp.price_upper IS NULL) THEN 0
WHEN (f1.trading_pair IS NULL) THEN lp.price_lower --if backwards, keep, if forwards flip
WHEN (lp.price_upper = 0) THEN 0
ELSE 1/lp.price_upper
END AS atob_lower_bound, --since we're doing 1/price

CASE WHEN(lp.price_lower IS NULL) THEN 0
WHEN (f1.trading_pair IS NULL) THEN lp.price_upper
WHEN (lp.price_lower = 0) THEN 0
ELSE 1/lp.price_lower
END AS atob_upper_bound, --upper and lower flip. This isn't a mistake

fee_tier,
CONCAT('https://app.uniswap.org/#/pool/',""tokenId"") AS url,
--MAX(CASE WHEN next_lp IS NULL THEN now() ELSE next_lp END) AS last_lp,
SUM(CASE WHEN lp.token_tvl_rank = 1 THEN lp.lp_amount ELSE 0 END) AS last_tvl,--to grab the last tvl. Anything that's not the most recent one is ignored.
SUM(CASE WHEN token_tvl_usd_rank =1 THEN lp.tvl_usd ELSE 0 END)
    AS most_tvl_usd, --to grab the max tvl. There is some weird aesthetic error where apys and fees/tvl inflate when current is way less than max
SUM(CASE WHEN lp.token_tvl_rank = 1 THEN lp.tvl_usd ELSE 0 END) AS last_tvl_usd,
SUM(CASE WHEN lp.token_tvl_rank = 1 THEN lp.tvl_usd/tick_range ELSE 0 END) AS last_tvl_usd_per_tick,
MAX(CASE WHEN lp.token_tvl_rank = 1 THEN lp.next_lp ELSE '01-01-2000' END) AS last_next_lp,
MAX(CASE WHEN lp.token_tvl_rank = 1 THEN lp.next_lp_amount ELSE 0 END) AS last_next_lp_amount,

SUM(lp.usd_amount) as usd_volume,
SUM(lp.fees_received_usd) AS fees_collected_usd
--SUM(fees_received_usd) / SUM(CASE WHEN token_tvl_rank = 1 THEN tvl_usd ELSE 0 END) AS fees_to_tvl
FROM fees_by_lp lp

LEFT JOIN final_trading_pairs f1 --check if the pair maps with the forward version
ON CONCAT(lp.token_a,'/',lp.token_b) = f1.trading_pair
AND lp.exchange_contract_address = f1.exchange_contract_address 
LEFT JOIN final_trading_pairs f2 --check if the pair maps with the backward version
ON CONCAT(lp.token_b,'/',lp.token_a) = f2.trading_pair
AND lp.exchange_contract_address = f2.exchange_contract_address 

GROUP BY 1,2,3,4,5,6,7,8
,9,10,11,12

),

pair_metrics AS --top pools calculates at the pool level, this is for pair level
(
SELECT
--t.exchange_contract_address,
f1.trading_pair AS pair,
SUM(total_usd) AS usd_pair_volume,
SUM(total_fees) AS fee_pair_volume

FROM top_pools t
LEFT JOIN 
(SELECT DISTINCT exchange_contract_address, trading_pair FROM final_trading_pairs) f1 --check if the pair maps with the forward version
ON t.exchange_contract_address = f1.exchange_contract_address 

WHERE f1.trading_pair IS NOT NULL --If it's a pair we exclude in the filter, then it shows null, so just get rid of these

GROUP BY 1

)
SELECT
*,
creator_fees/fee_pair_volume AS share_of_fees,
DENSE_RANK()
    OVER(PARTITION BY pair ORDER BY creator_fees/fee_pair_volume DESC,creator_address DESC) AS creator_pair_rank,
CASE WHEN DENSE_RANK()
    OVER(PARTITION BY pair ORDER BY creator_fees/fee_pair_volume DESC,creator_address DESC) <= 10 THEN creator_address
ELSE 'Other'
END AS addr_map

FROM
(
    
    SELECT
        d.pair, --fee_tier, d.pair_fee, pair_vol,
        l.creator_address, --fees_collected_usd,
        fee_pair_volume,
        usd_pair_volume,
        --SUM(fees_collected_usd) AS total_fees,
        SUM(fees_collected_usd) AS creator_fees
        
        FROM
            (
            SELECT
            final_lps.pair, CONCAT(ROUND(fee_tier*100,2), '%') AS fee_tag, atob_lower_bound, atob_upper_bound,
            pair_metrics.fee_pair_volume,
            pair_metrics.usd_pair_volume,
            
            CASE WHEN (atob_lower_bound = 0) OR (atob_upper_bound = 0) THEN 0
            ELSE (atob_upper_bound - (atob_lower_bound+atob_upper_bound)/2) --upper distance from mid
            / ((atob_lower_bound+atob_upper_bound)/2) --divided by mid
            END AS lp_radius,
            fees_collected_usd, most_tvl_usd,
            
            CASE WHEN (most_tvl_usd = 0) OR (most_tvl_usd IS NULL) THEN 0
            ELSE fees_collected_usd::decimal/most_tvl_usd::decimal
            END AS fees_to_tvl,
            
            CASE WHEN (most_tvl_usd = 0) OR (most_tvl_usd IS NULL) THEN 0
            ELSE
            (fees_collected_usd::decimal/most_tvl_usd::decimal)*
            (365/
            --Calculate the decimal in days that the position was open (in this 2 day period)
            -- i.e. $100 in fees for a 2 day position has a lower APY than $100 in a 5 minute position
                (
                EXTRACT( epoch FROM
                    ( --Gives amount of time within the 2 day period that the position was open
                    CASE WHEN (liq_start < DATE_TRUNC('minute',CURRENT_TIMESTAMP) - (SELECT tp FROM params)::INTERVAL) --when position older than 2 days
                    THEN last_next_lp - (DATE_TRUNC('minute',CURRENT_TIMESTAMP) - (SELECT tp FROM params)::INTERVAL) --set start as start of period
                    ELSE (last_next_lp-liq_start)::INTERVAL
                    END
                    )
                )
                / EXTRACT(epoch FROM '1 day'::INTERVAL) --to get # days open
                )
                
                --/ EXTRACT( epoch FROM ((SELECT tp FROM params)::INTERVAL))--(60*60*24*2) --2 days in seconds
            )
            END AS fees_to_tvl_apy,
            /*EXTRACT( epoch FROM
                    ( --Gives amount of time within the 2 day period that the position was open
                    CASE WHEN (liq_start < DATE_TRUNC('minute',CURRENT_TIMESTAMP) - (SELECT tp FROM params)::INTERVAL) --when position older than 2 days
                    THEN last_next_lp - (DATE_TRUNC('minute',CURRENT_TIMESTAMP) - (SELECT tp FROM params)::INTERVAL) --set start as start of period
                    ELSE (last_next_lp-liq_start)::INTERVAL
                    END
                    )
                )
                / EXTRACT(epoch FROM '1 day'::INTERVAL)
                
                --/ EXTRACT( epoch FROM ((SELECT tp FROM params)::INTERVAL))--(60*60*24*2) --2 days in seconds
                AS fractional_2day,*/
            
            CASE WHEN (top_pools.total_usd=0) OR (top_pools.total_usd IS NULL) OR (fee_tier=0) OR (fee_tier IS NULL) THEN 0
            ELSE
            fees_collected_usd::decimal/
            ((top_pools.total_usd::decimal)*(fee_tier::decimal)) 
            END AS share_of_possible_fees, -- of the fees collected by a pool, what % did the LP take?
            
            --TODO
            CASE WHEN (top_pools.total_usd=0) OR (top_pools.total_usd IS NULL) OR (fee_tier=0) OR (fee_tier IS NULL) THEN 0
            ELSE
            fees_collected_usd::decimal/
            ((pair_metrics.fee_pair_volume::decimal)) 
            END AS share_of_pair_fees, -- of the fees collected by a pair, what % did the LP take?
            
            usd_volume AS inrange_vol,
            top_pools.total_usd AS pair_vol,
            CASE WHEN (top_pools.total_usd=0) OR (top_pools.total_usd IS NULL) THEN 0
            ELSE (usd_volume::decimal)/(pair_metrics.usd_pair_volume::decimal)
            END AS range_efficiency, -- how much % of a pair's volume was the LP in range for?
            
            
            liq_start, 
            CASE WHEN last_next_lp_amount >0 THEN NULL
            ELSE last_next_lp
            END AS lp_end,
            
            DATE_TRUNC('minute',last_next_lp-liq_start) AS pos_age,
            CASE WHEN last_next_lp_amount >0 THEN 'Active'
            ELSE 'Inactive'
            END AS lp_status,
            ""tokenId"",
            url,
            CONCAT(final_lps.pair, ' - ',
            ROUND(fee_tier*100,2), '%') AS pair_fee,
            CONCAT(""tokenId"", ' - ', CONCAT(final_lps.pair, ' - ',
            ROUND(fee_tier*100,2), '%')) AS lp_tag
            
            
            FROM final_lps
            
            INNER JOIN top_pools --pool level (i.e. usdc/eth 0.3%)
            ON top_pools.exchange_contract_address = final_lps.exchange_contract_address
            
            INNER JOIN pair_metrics --pair level (i.e. usdc/eth)
            ON pair_metrics.pair = final_lps.pair
            
            WHERE fees_collected_usd > (SELECT min_fees FROM params)
            AND most_tvl_usd > (SELECT min_tvl FROM params)
            
            ) d
        LEFT JOIN (SELECT DISTINCT ""output_tokenId"" AS ""tokenId"", (params->>'recipient') as creator_address FROM uniswap_v3.""NonfungibleTokenPositionManager_call_mint"") l
        ON l.""tokenId""::text = d.""tokenId""::text
        
        WHERE
        1 =
        (
        CASE WHEN '{{4 LP Status}}' = 'All' THEN 1
        WHEN '{{4 LP Status}}' = lp_status THEN 1
        ELSE 0
        END
        )
        AND
        1=
        (
        CASE WHEN '{{5 Fees}}' = 'All Tiers' THEN 1
        WHEN '{{5 Fees}}' = fee_tag THEN 1
        ELSE 0
        END
        )
    GROUP BY 1,2,3,4--,5,6
) a

ORDER BY fee_pair_volume DESC, creator_fees DESC"
195658,【0xBi】以太坊著名巨鲸每日持仓情况,,"[{""id"": 365441, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-10-06T19:22:26.921953+00:00"", ""__typename"": ""visualizations""}, {""id"": 381763, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2021-10-14T18:06:09.422073+00:00"", ""__typename"": ""visualizations""}, {""id"": 366060, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": true, ""columnMapping"": {""block_minute"": ""x"", ""block_number"": ""x"", ""gas_price_fast"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""line""}, ""created_at"": ""2021-10-07T03:59:50.249079+00:00"", ""__typename"": ""visualizations""}]","select
    *
from dune_user_generated.pro_0xBi_smart_money_erc20_balance_daily
order by
    钱包地址
     ,持有USD总金额  desc"
198621,特定钱包ERC20代币Balance,,"[{""id"": 381798, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2021-10-14T18:10:55.013223+00:00"", ""__typename"": ""visualizations""}, {""id"": 370728, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-10-09T07:04:07.572076+00:00"", ""__typename"": ""visualizations""}, {""id"": 380455, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2021-10-14T01:32:27.051804+00:00"", ""__typename"": ""visualizations""}]"," select
     replace(cast(钱包地址 as varchar),'\','0')  as 钱包地址
    ,replace(cast(持有代币合约地址 as varchar),'\','0')  as 钱包地址
    ,持有代币名称
    ,持有代币余额
    ,持有代币价格
    ,round(持有代币余额 * 持有代币价格::decimal,3) as 持有USD总金额
 from 
 (
     select
         address as 钱包地址
        ,token_address as 持有代币合约地址
        ,symbol as 持有代币名称
        ,round(balance::decimal,50) as 持有代币余额
        ,round(median_price::decimal,3) as 持有代币价格
     from 
     (
         SELECT
            address
            ,token_address
            ,symbol
            ,case
                when token_address in ('\xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48','\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2') then balance/(10^6)
                when token_address not in ('\xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48','\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2') then balance/(10^18)
            end as balance
            ,median_price
         from 
         (
            
            SELECT  
                -- day,
                address, 
                token_address, 
                sum(amount) AS balance -- Net inflow or outflow per day
            FROM
            (
                SELECT  date_trunc('day', evt_block_time) AS day,
                        ""to"" AS address,
                        tr.contract_address AS token_address,
                        value AS amount
                FROM erc20.""ERC20_evt_Transfer"" tr
                WHERE ""to"" = cast(concat('\',substring(cast(('{{contract_address}}') as varchar),2,41)) as BYTEA)
                and tr.contract_address not in ('\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2','\xdac17f958d2ee523a2206206994597c13d831ec7','\xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48','\x4fabb145d64652a948d72533023f6e7a623c7c53')
                
                UNION ALL
                
                SELECT  date_trunc('day', evt_block_time) AS day,
                        ""from"" AS address,
                        tr.contract_address AS token_address,
                        -value AS amount
                FROM erc20.""ERC20_evt_Transfer"" tr
                WHERE ""from"" = cast(concat('\',substring(cast(('{{contract_address}}') as varchar),2,41)) as BYTEA)
               and tr.contract_address not in ('\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2','\xdac17f958d2ee523a2206206994597c13d831ec7','\xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48','\x4fabb145d64652a948d72533023f6e7a623c7c53')

            ) t
            GROUP BY 
                 address,
                 token_address
           
        ) balances_info
        join 
        (
        
            SELECT
                contract_address
                ,symbol
            from  erc20.tokens erc 
        )erc
        ON  balances_info.token_address = erc.contract_address
        LEFT JOIN  
        ( 
            
            select
                contract_address
                ,max(median_price) as median_price
            from 
            (
                select
                    view_token_prices.""contract_address"" as contract_address
                    ,""median_price"" as median_price 
                from 
                (
                    select
                        ""contract_address""
                        ,""median_price""
                        ,""hour""
                    from dex.view_token_prices
                )view_token_prices
                join
                (
                    select
                        ""contract_address""
                        ,max(hour) as max_hour
                    from dex.view_token_prices
                    group by
                        ""contract_address""
                ) max_hour
                on (max_hour.contract_address = view_token_prices.contract_address and max_hour = hour)
               

                union all 


                select
                    contract_address
                    ,price as median_price 
                from 
                (
                    select
                        (""minute"" + '8 hour'::interval) as time 
                        ,""contract_address"" as contract_address
                        ,""symbol"" as symbol
                        ,""price"" as price
                        ,ROW_NUMBER() OVER( partition BY ""contract_address"" order by ""minute"" DESC )  as rank_num 
                    from prices.usd
                    where ""minute"" > (now() - '1 hour'::interval) 
                ) a 
                where rank_num  = 1
            ) a 
            group by
                contract_address
        ) prices
        ON balances_info.token_address = prices.contract_address
    ) a 

) a 
where  
持有代币价格 is not null 
and round(持有代币余额 * 持有代币价格::decimal,3) >100
order by
     持有USD总金额  desc

"
204446,【0xBi】巨鲸钱包地址汇总,,"[{""id"": 381806, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2021-10-14T18:21:02.398145+00:00"", ""__typename"": ""visualizations""}, {""id"": 381802, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-10-14T18:19:54.790072+00:00"", ""__typename"": ""visualizations""}]","select
    *
from  dune_user_generated.pro_0xBi_smart_money_address_dim 
"
45758,"0x API RFQT Volume, weekly",,"[{""id"": 90006, ""type"": ""table"", ""name"": ""Query results"", ""options"": {""columns"": [{""name"": ""total_volume"", ""numberFormat"": ""$%,.0f""}]}, ""created_at"": ""2021-05-12T00:08:02.24227+00:00"", ""__typename"": ""visualizations""}, {""id"": 90007, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""tickFormat"": """"}, ""yAxis"": [{""type"": ""linear"", ""tickFormat"": """"}, {""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": """", ""columnMapping"": {""date"": ""x"", ""num_fills"": ""y"", ""total_volume"": ""y""}, ""seriesOptions"": {""num_fills"": {""type"": ""line"", ""yAxis"": 1, ""zIndex"": 1}, ""total_volume"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": false, ""globalSeriesType"": ""column""}, ""created_at"": ""2021-05-12T00:08:42.284698+00:00"", ""__typename"": ""visualizations""}]","with rfq_tx as (
    select distinct evt_tx_hash, evt_index
    from zeroex.""ExchangeProxy_evt_RfqOrderFilled"" 
)
select date_trunc('day', f.block_time)  as date
        ,sum(volume_usd) as total_volume
        , count(*) as num_fills
from zeroex.view_0x_api_fills f
join rfq_tx on tx_hash = rfq_tx.evt_tx_hash and rfq_tx.evt_index = f.evt_index
where swap_flag is true
group by 1"
42735,"Market Share %, 0x Protocol vs Others",`0x Protocol` = `0x Native` + `0x Uniswap VIP` + `0x Sushiswap VIP` +`0x Bridge Fill` + `0x PLP`  0x API directed volume on other DEXes are deducted from theirs. Thus no overlap volume in this chart.,"[{""id"": 85489, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack"", ""percentValues"": true}, ""reverseX"": false, ""columnMapping"": {""week"": ""x"", ""Project"": ""series"", ""usd_volume"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""area""}, ""created_at"": ""2021-05-06T19:04:16.614452+00:00"", ""__typename"": ""visualizations""}, {""id"": 83998, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""Project"", ""type"": ""string"", ""order"": 100000, ""title"": ""Project"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""string"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""left"", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}, {""name"": ""usd_volume"", ""type"": ""float"", ""order"": 100001, ""title"": ""usd_volume"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""number"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""right"", ""numberFormat"": ""0,0.00"", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}], ""autoHeight"": true, ""minColumns"": 2, ""defaultRows"": 14, ""itemsPerPage"": 25, ""defaultColumns"": 3}, ""created_at"": ""2021-05-05T18:02:10.241594+00:00"", ""__typename"": ""visualizations""}]","WITH uniswap_0x as (
    select distinct tx_hash -- , evt_index
    from zeroex.view_0x_api_fills 
    where ""type"" in ('UniswapV2 Direct','UniswapV3 Direct')
    and block_time > now() - interval '6 months'
), sushiswap_0x as (
    select distinct tx_hash -- , evt_index
    from zeroex.view_0x_api_fills 
    where ""type"" = 'Sushiswap Direct'
    and block_time > now() - interval '6 months'
), bridge_0x as (
    select distinct tx_hash
    from zeroex.view_0x_api_fills 
    where ""type"" = 'Bridge Fill'
    and block_time > now() - interval '6 months'
) 
    select week, ""Project"", sum(usd_volume) as usd_volume
    from (
        SELECT  date_trunc('week',t.block_time) as week,
             case when project = '0x Native' then '0x Protocol (combined)'
                    when (u.tx_hash is not null or s.tx_hash is not null or b.tx_hash is not null) then '0x Protocol (combined)'
                    -- when project = 'Uniswap' then 'Uniswap (excluding 0x VIP)'
                    -- when project = 'Sushiswap' then 'Sushiswap (excluding 0x VIP)'
                    else project end AS ""Project"",
                usd_amount as usd_volume                                                                               
        FROM dex.""trades"" t        
        left join uniswap_0x u on u.tx_hash = t.tx_hash -- and u.evt_index = t.evt_index
        left join sushiswap_0x s on s.tx_hash = t.tx_hash -- and s.evt_index = t.evt_index
        left join bridge_0x b on b.tx_hash = t.tx_hash 
        WHERE block_time > now() - interval '6 months'
        AND category = 'DEX'
    
        union all
        
        select date_trunc('week',block_time) as week,
                '0x Protocol (combined)' as ""Project"",
                volume_usd as usd_volume
        from zeroex.view_0x_api_fills
        where type = 'PLP Direct'
        and block_time > now() - interval '6 months'
        ) a
        group by 1,2

"
4043,"0x Protocol, # of Fills, Monthly",,"[{""id"": 7864, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2020-05-29T20:59:39.311102+00:00"", ""__typename"": ""visualizations""}, {""id"": 7863, ""type"": ""chart"", ""name"": """", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": false}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": null}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,"", ""columnMapping"": {""date"": ""x"", ""fills"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""fills"": {""type"": ""line"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": true, ""globalSeriesType"": ""line""}, ""created_at"": ""2020-05-29T20:59:39.311+00:00"", ""__typename"": ""visualizations""}]","with fills as (
    select date_trunc('month',block_time) as date,
        tx_hash
    from zeroex.view_0x_api_fills
    where type not in ('Native Fill v3','Native Fill v4') and swap_flag
    and block_time::date >now()-'270 days'::interval
    
    union all

    select date_trunc('month',""timestamp"") as date,
            transaction_hash as tx_hash
    from zeroex.view_fills
    where ""timestamp""::date >now()-'270 days'::interval
) select date, count(*) as fills
    from fills 
    group by 1"
5508,"0x Protocol Volume (USD), Monthly",,"[{""id"": 10872, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2020-07-02T22:26:20.694855+00:00"", ""__typename"": ""visualizations""}, {""id"": 10873, ""type"": ""chart"", ""name"": """", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": false}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": ""stack""}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""$0,"", ""columnMapping"": {""date"": ""x"", ""total_volume"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""total_volume"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": true, ""globalSeriesType"": ""column""}, ""created_at"": ""2020-07-02T22:26:20.694+00:00"", ""__typename"": ""visualizations""}]","with volume as (
    select date_trunc('month',block_time) as date,
            volume_usd
    from zeroex.view_0x_api_fills
    where type not in ('Native Fill v3','Native Fill v4') and swap_flag
    and block_time::date >now()-'270 days'::interval
    
    union all
    
    select date_trunc('month',""timestamp"") as date,
            volume_usd
    from zeroex.view_fills
    where ""timestamp""::date >now()-'270 days'::interval
) select date, sum(volume_usd) as total_volume
    from volume
    group by 1
"
22385,"0x Protocol, 24 Hours Volume",combined global with dedup,"[{""id"": 46290, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""defaultRows"": 5, ""counterLabel"": ""Volume last 24 hours\ud83d\udea8"", ""stringPrefix"": ""$"", ""stringDecChar"": ""."", ""stringDecimal"": 0, ""stringThouSep"": "","", ""counterColName"": ""sum"", ""defaultColumns"": 2, ""targetRowNumber"": 1}, ""created_at"": ""2021-03-09T22:33:20.138+00:00"", ""__typename"": ""visualizations""}, {""id"": 46292, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""defaultRows"": 5, ""counterLabel"": ""Volume last 24 hours \ud83d\udcab"", ""stringPrefix"": ""$"", ""stringSuffix"": ""B"", ""stringDecChar"": ""."", ""stringDecimal"": 2, ""stringThouSep"": "","", ""counterColName"": ""billion_volume"", ""defaultColumns"": 2, ""targetRowNumber"": 1}, ""created_at"": ""2021-03-09T22:33:20.138241+00:00"", ""__typename"": ""visualizations""}, {""id"": 46291, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""sum"", ""type"": ""float"", ""order"": 100000, ""title"": ""USD volume"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""number"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""right"", ""numberFormat"": ""0,0."", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}], ""autoHeight"": true, ""minColumns"": 2, ""defaultRows"": 14, ""itemsPerPage"": 25, ""defaultColumns"": 3}, ""created_at"": ""2021-03-09T22:33:20.138241+00:00"", ""__typename"": ""visualizations""}]","select sum(volume_usd)
from (

select volume_usd
from zeroex.view_0x_api_fills
where type not in ('Native Fill v3','Native Fill v4') and swap_flag
and block_time > (select max(block_time) from zeroex.view_0x_api_fills) - interval '24 hours'

union all

select volume_usd
from zeroex.view_fills
where timestamp > (select max(timestamp) from zeroex.view_fills) - interval '24 hours'

) a
"
22416,"0x Protocol, Cumulative # of Unique Users, To Date",combined global with dedup (0x Native v0 & v1 not included),"[{""id"": 46393, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""defaultRows"": 5, ""counterLabel"": ""Total # of Users"", ""stringDecChar"": ""."", ""stringDecimal"": 0, ""stringThouSep"": "","", ""counterColName"": ""count"", ""defaultColumns"": 2, ""targetRowNumber"": 1}, ""created_at"": ""2021-03-10T05:27:45.098774+00:00"", ""__typename"": ""visualizations""}, {""id"": 46388, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2021-03-10T05:20:38.081003+00:00"", ""__typename"": ""visualizations""}]","select count( user)
from (

select trader_a as user
from dex.""trades""
where project in ('Matcha','0x API','0x Native') 

union 

select trader_b as user
from dex.""trades""
where project in ('Matcha','0x API','0x Native') 

union 

select tx_from as user
from dex.""trades""
where project in ('Matcha','0x API','0x Native') 

) a

"
67781,"0x API RFQT Volume Share, weekly",,"[{""id"": 135093, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-06-23T17:03:37.390281+00:00"", ""__typename"": ""visualizations""}, {""id"": 1470473, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack"", ""percentValues"": true}, ""reverseX"": false, ""columnMapping"": {""rfq"": ""y"", ""date"": ""x"", ""other_sources"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""area""}, ""created_at"": ""2022-05-25T07:21:10.825114+00:00"", ""__typename"": ""visualizations""}, {""id"": 135094, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack"", ""percentValues"": false}, ""reverseX"": false, ""numberFormat"": ""$,"", ""columnMapping"": {""rfq"": ""y"", ""date"": ""x"", ""rfqt_volume"": ""y"", ""other_volume"": ""y"", ""other_sources"": ""y""}, ""seriesOptions"": {""num_fills"": {""type"": ""line"", ""yAxis"": 1, ""zIndex"": 1}, ""total_volume"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": false, ""globalSeriesType"": ""column""}, ""created_at"": ""2021-06-23T17:03:37.390281+00:00"", ""__typename"": ""visualizations""}]","with rfq_tx as (
    select distinct evt_tx_hash, evt_index
    from zeroex.""ExchangeProxy_evt_RfqOrderFilled"" 
)
select date_trunc('week', f.block_time)  as date
        ,SUM (CASE 
            WHEN rfq_tx.evt_tx_hash IS NOT NULL THEN volume_usd
            ELSE 0
            END 
        ) as rfq
        , SUM (CASE 
            WHEN rfq_tx.evt_tx_hash IS NULL THEN volume_usd
            ELSE 0
            END 
        ) as other_sources
        , sum(volume_usd) as total_volume
        , count(*) as num_fills
from zeroex.view_0x_api_fills f
left join rfq_tx on tx_hash = rfq_tx.evt_tx_hash and rfq_tx.evt_index = f.evt_index
where swap_flag is true and date_trunc('day', f.block_time) > '2021-02-01'
group by 1"
22387,"Volume Across 0x Protocol, daily last 30d",,"[{""id"": 46297, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""Rank"", ""type"": ""integer"", ""order"": 100000, ""title"": ""Rank"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""number"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""right"", ""numberFormat"": ""0,0"", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}, {""name"": ""Project"", ""type"": ""string"", ""order"": 100001, ""title"": ""Project"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""string"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""left"", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}, {""name"": ""sum"", ""type"": ""float"", ""order"": 100002, ""title"": ""USD volume"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""number"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""right"", ""numberFormat"": ""0,0."", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}], ""autoHeight"": true, ""minColumns"": 2, ""defaultRows"": 14, ""itemsPerPage"": 25, ""defaultColumns"": 3}, ""created_at"": ""2021-03-09T23:05:50.691151+00:00"", ""__typename"": ""visualizations""}, {""id"": 46298, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Billion USD Volume""}}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": null, ""percentValues"": false}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0[.]00000"", ""columnMapping"": {""day"": ""x"", ""sum"": ""y"", ""type"": ""series""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""0x API"": {""type"": ""column"", ""color"": ""#FB8D3D"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}, ""Matcha"": {""type"": ""column"", ""color"": ""#3BD973"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 2}, ""0x Native"": {""type"": ""column"", ""color"": ""#799CFF"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""column""}, ""created_at"": ""2021-03-09T23:05:50.691+00:00"", ""__typename"": ""visualizations""}]","select day, ""type"",sum(volume_usd)
from (

select date_trunc('day', block_time) AS day, '0x API' as ""type"", volume_usd
from zeroex.view_0x_api_fills
where type not in ('Native Fill v3','Native Fill v4') and swap_flag
and block_time > now() - interval '30 days'
        and block_time::date < now()::date

union all

select date_trunc('day', timestamp) AS day, '0x Native' as ""type"", volume_usd
from zeroex.view_fills
where timestamp > now() - interval '30 days'
        and timestamp::date < now()::date

union all
select date_trunc('day', block_time) AS day, 'Matcha' as ""type"", volume_usd
from zeroex.view_0x_api_fills
where affiliate_address= '\x86003b044f70dac0abc80ac8957305b6370893ed'
and block_time > now() - interval '30 days'
        and block_time::date < now()::date

) a

GROUP BY 1,2 "
22418,"0x Protocol, Volume To Date",combined global with dedup (0x Native v0 & v1 not included),"[{""id"": 46395, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""defaultRows"": 5, ""counterLabel"": ""Volume To Date"", ""stringPrefix"": ""$"", ""stringSuffix"": """", ""stringDecChar"": ""."", ""stringDecimal"": null, ""stringThouSep"": "","", ""counterColName"": ""sum"", ""defaultColumns"": 2, ""targetRowNumber"": 1}, ""created_at"": ""2021-03-10T05:35:20.253+00:00"", ""__typename"": ""visualizations""}, {""id"": 46394, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""Rank"", ""type"": ""integer"", ""order"": 100000, ""title"": ""Rank"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""number"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""right"", ""numberFormat"": ""0,0"", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}, {""name"": ""Project"", ""type"": ""string"", ""order"": 100001, ""title"": ""Project"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""string"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""left"", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}, {""name"": ""sum"", ""type"": ""float"", ""order"": 100002, ""title"": ""USD volume"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""number"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""right"", ""numberFormat"": ""0,0."", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}], ""autoHeight"": true, ""minColumns"": 2, ""defaultRows"": 14, ""itemsPerPage"": 25, ""defaultColumns"": 3}, ""created_at"": ""2021-03-10T05:35:20.253554+00:00"", ""__typename"": ""visualizations""}]","select sum(volume_usd)
from (

select volume_usd
from zeroex.view_0x_api_fills
where type not in ('Native Fill v3','Native Fill v4') and swap_flag

union all

select volume_usd
from zeroex.view_fills

) a

"
22390,"Unique # of Users Across 0x Protocol, daily last 30d",,"[{""id"": 46302, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2021-03-09T23:15:25.519902+00:00"", ""__typename"": ""visualizations""}, {""id"": 46303, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": null}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0[.]00000"", ""columnMapping"": {""day"": ""x"", ""count"": ""y"", ""product"": ""series""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""0x API"": {""type"": ""line"", ""color"": ""#FB8D3D"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}, ""Matcha"": {""type"": ""line"", ""color"": ""#3BD973"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 2}, ""0x Native"": {""type"": ""line"", ""color"": ""#799CFF"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""line""}, ""created_at"": ""2021-03-09T23:15:56.527+00:00"", ""__typename"": ""visualizations""}]","select day, product, 
        count(distinct trader)
from (

select date_trunc('day', block_time) AS day, project as product,
    trader_a as trader
from dex.""trades""
where project in ('Matcha','0x API','0x Native') 
and block_time::date > now() - interval '30 days'
    and block_time::date < now()::date

union 

select date_trunc('day', block_time) AS day, project as product,
    trader_b as trader
from dex.""trades""
where project in ('Matcha','0x API','0x Native') 
and block_time::date > now() - interval '30 days'
    and block_time::date < now()::date

union 
select date_trunc('day', block_time) AS day, project as product,
    tx_from as trader
from dex.""trades""
where project in ('Matcha','0x API','0x Native') 
and block_time::date > now() - interval '30 days'
    and block_time::date < now()::date

) a
GROUP BY 1,2 "
23017,0x Protocol vs Others,`0x Protocol` = `0x Native` + `0x Uniswap VIP` + `0x Sushiswap VIP` +`0x Bridge Fill` + `0x PLP`  0x API directed volume on other DEXes are deducted from theirs. Thus no overlap volume in this chart.,"[{""id"": 47646, ""type"": ""chart"", ""name"": ""Market Share \ud83c\udf70"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": null}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""$0,0[.]"", ""columnMapping"": {""Rank"": ""unused"", ""Project"": ""x"", ""7 Days Volume"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""7 Days Volume"": {""type"": ""pie"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {""DDEX"": {""color"": ""#3BD973""}, ""dYdX"": {""color"": ""#356AFF""}, ""Curve"": {}, ""Kyber"": {""color"": ""#E92828""}, ""Uniswap"": {}, ""0x - PLP"": {""color"": ""#FB8D3D""}, ""Balancer"": {}, ""LINKSWAP"": {""color"": ""#50F5ED""}, ""0x Native"": {""color"": ""#FB8D3D""}, ""Mooniswap"": {""color"": ""#604FE9""}, ""Sushiswap"": {}, ""Synthetix"": {""color"": ""#3BD973""}, ""Bancor Network"": {}, ""Gnosis Protocol"": {""color"": ""#799CFF""}, ""0x - Bridge Fill"": {""color"": ""#FB8D3D""}, ""0x - Uniswap VIP"": {""color"": ""#FB8D3D""}, ""0x - Sushiswap VIP"": {""color"": ""#FB8D3D""}}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2021-03-16T07:51:42.664424+00:00"", ""__typename"": ""visualizations""}, {""id"": 47652, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""Project"", ""type"": ""string"", ""order"": 100000, ""title"": ""Project"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""string"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""left"", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}, {""name"": ""usd_volume"", ""type"": ""float"", ""order"": 100001, ""title"": ""usd_volume"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""number"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""right"", ""numberFormat"": ""0,0.00"", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}], ""autoHeight"": true, ""minColumns"": 2, ""defaultRows"": 14, ""itemsPerPage"": 25, ""defaultColumns"": 3}, ""created_at"": ""2021-03-16T08:21:17.222407+00:00"", ""__typename"": ""visualizations""}]","WITH uniswap_0x as (
    select distinct tx_hash -- , evt_index
    from zeroex.view_0x_api_fills 
    where ""type"" in ('UniswapV2 Direct','UniswapV3 Direct')
    and block_time > now() - interval '7 days'
), sushiswap_0x as (
    select distinct tx_hash -- , evt_index
    from zeroex.view_0x_api_fills 
    where ""type"" = 'Sushiswap Direct'
    and block_time > now() - interval '7 days'
), bridge_0x as (
    select distinct tx_hash
    from zeroex.view_0x_api_fills 
    where ""type"" = 'Bridge Fill'
    and block_time > now() - interval '7 days'
), seven_day_volume AS(
    select ""Project"", sum(usd_volume) as usd_volume
    from (
        SELECT  
             case when project = '0x Native' then '0x Protocol (combined)'
                    when (u.tx_hash is not null or s.tx_hash is not null or b.tx_hash is not null) then '0x Protocol (combined)'
                    -- when project = 'Uniswap' then 'Uniswap (excluding 0x VIP)'
                    -- when project = 'Sushiswap' then 'Sushiswap (excluding 0x VIP)'
                    else project end AS ""Project"",
                usd_amount as usd_volume                                                                               
        FROM dex.""trades"" t        
        left join uniswap_0x u on u.tx_hash = t.tx_hash -- and u.evt_index = t.evt_index
        left join sushiswap_0x s on s.tx_hash = t.tx_hash -- and s.evt_index = t.evt_index
        left join bridge_0x b on b.tx_hash = t.tx_hash 
        WHERE block_time > now() - interval '7 days'
        AND category = 'DEX'
    
        union all
        
        select '0x Protocol (combined)' as ""Project"",
                volume_usd as usd_volume
        from zeroex.view_0x_api_fills
        where type = 'PLP Direct'
        and block_time > now() - interval '7 days'
        ) a
        group by 1

), one_day_volume AS (

    select ""Project"", sum(usd_volume) as usd_volume
    from (
        SELECT  
             case when project = '0x Native' then '0x Protocol (combined)'
                    when (u.tx_hash is not null or s.tx_hash is not null or b.tx_hash is not null) then '0x Protocol (combined)'
                    -- when project = 'Uniswap' then 'Uniswap (excluding 0x VIP)'
                    -- when project = 'Sushiswap' then 'Sushiswap (excluding 0x VIP)'
                    else project end AS ""Project"",
                usd_amount as usd_volume                                                                               
        FROM dex.""trades"" t        
        left join uniswap_0x u on u.tx_hash = t.tx_hash -- and u.evt_index = t.evt_index
        left join sushiswap_0x s on s.tx_hash = t.tx_hash -- and s.evt_index = t.evt_index
        left join bridge_0x b on b.tx_hash = t.tx_hash 
        WHERE block_time > now() - interval '1 days'
        AND category = 'DEX'
    
        union all
        
        select '0x Protocol (combined)' as ""Project"",
                volume_usd as usd_volume
        from zeroex.view_0x_api_fills
        where type = 'PLP Direct'
        and block_time > now() - interval '1 days'
        ) a
        group by 1
    
)

SELECT  ROW_NUMBER () OVER (ORDER BY SUM(seven.usd_volume) DESC) AS ""Rank"",
        seven.""Project"",
        SUM(seven.usd_volume) AS ""7 Days Volume"",
        SUM(one.usd_volume) AS ""24 Hours Volume""
FROM  seven_day_volume seven
LEFT JOIN one_day_volume one ON seven.""Project"" = one.""Project"" 
GROUP BY 2
ORDER BY 3 DESC NULLS LAST;"
22419,"0x Protocol, # of Unique Users, Last 7 Days",,"[{""id"": 46397, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""defaultRows"": 5, ""counterLabel"": ""# of Users, Last 7 Days"", ""stringDecChar"": ""."", ""stringDecimal"": 0, ""stringThouSep"": "","", ""counterColName"": ""count"", ""defaultColumns"": 2, ""targetRowNumber"": 1}, ""created_at"": ""2021-03-10T05:36:50.576+00:00"", ""__typename"": ""visualizations""}, {""id"": 46396, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2021-03-10T05:36:50.576854+00:00"", ""__typename"": ""visualizations""}]","select count( user)
from (

select trader_a as user
from dex.""trades""
where project in ('Matcha','0x API','0x Native') 
and block_time >= now() - interval '7 days'

union 

select trader_b as user
from dex.""trades""
where project in ('Matcha','0x API','0x Native') 
and block_time >= now() - interval '7 days'

union 

select tx_from as user
from dex.""trades""
where project in ('Matcha','0x API','0x Native') 
and block_time >= now() - interval '7 days'

) a

"
22420,"0x Protocol, # of Unique Users, Last 24 Hours",,"[{""id"": 46398, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2021-03-10T05:37:30.834558+00:00"", ""__typename"": ""visualizations""}, {""id"": 46399, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""defaultRows"": 5, ""counterLabel"": ""# of Users, Last 24 Hours"", ""stringDecChar"": ""."", ""stringDecimal"": 0, ""stringThouSep"": "","", ""counterColName"": ""count"", ""defaultColumns"": 2, ""targetRowNumber"": 1}, ""created_at"": ""2021-03-10T05:37:30.834+00:00"", ""__typename"": ""visualizations""}]","select count( user)
from (

select trader_a as user
from dex.""trades""
where project in ('Matcha','0x API','0x Native') 
and block_time >= now() - interval '1 days'

union 

select trader_b as user
from dex.""trades""
where project in ('Matcha','0x API','0x Native') 
and block_time >= now() - interval '1 days'

union 

select tx_from as user
from dex.""trades""
where project in ('Matcha','0x API','0x Native') 
and block_time >= now() - interval '1 days'

) a

"
23012,"0x Native Volume (USD), Daily, by Protocol Version",,"[{""id"": 47636, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2021-03-16T07:11:15.773612+00:00"", ""__typename"": ""visualizations""}, {""id"": 47637, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": ""stack"", ""percentValues"": false}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0[.]00000"", ""columnMapping"": {""date"": ""x"", ""type"": ""series"", ""total_volume"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""v2"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}, ""v3"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 1}, ""v4"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 2}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""column""}, ""created_at"": ""2021-03-16T07:11:15.773612+00:00"", ""__typename"": ""visualizations""}]","select date, ""type"", sum(volume_usd) as total_volume
from 
(
    select date_trunc('day',""timestamp"") as date,
            protocol_version  as ""type"",
            volume_usd
    from zeroex.view_fills
    where ""timestamp"">now()-'270 days'::interval 
            and ""timestamp""::date< now()::date
    ) a 
group by 1,2"
6586,"0x Native, Protocol Fees Collected, Daily",,"[{""id"": 13077, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2020-07-21T21:54:44.589161+00:00"", ""__typename"": ""visualizations""}, {""id"": 13078, ""type"": ""chart"", ""name"": """", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": null}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,"", ""columnMapping"": {""dt"": ""x"", ""protocol_fees_eth"": ""y"", ""protocol_fees_usd"": ""unused"", ""median_gas_price_gwei"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""protocol_fees_eth"": {""name"": ""Protocol Fees (ETH)"", ""type"": ""line"", ""color"": ""#356AFF"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}, ""median_gas_price_gwei"": {""type"": ""line"", ""index"": 0, ""yAxis"": 1, ""zIndex"": 1}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""line""}, ""created_at"": ""2020-07-21T21:54:44.589+00:00"", ""__typename"": ""visualizations""}]","SELECT
    DATE_TRUNC('day',timestamp) AS dt
    , SUM(protocol_fee_paid_eth) AS protocol_fees_eth
    , SUM(protocol_fee_paid_eth * eth.price) AS protocol_fees_usd
FROM zeroex.view_fills vf
LEFT JOIN prices.layer1_usd_eth eth ON eth.minute = DATE_TRUNC('minute',vf.timestamp)
WHERE
    DATE_TRUNC('day',timestamp) BETWEEN (CURRENT_DATE - '28 days'::INTERVAL)
        AND (CURRENT_DATE - '1 day'::INTERVAL)
GROUP BY 1
ORDER BY 1;
"
4042,"0x Protocol Total Volume (USD), Monthly, by Protocol Version",,"[{""id"": 7861, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2020-05-29T20:55:00.26887+00:00"", ""__typename"": ""visualizations""}, {""id"": 10871, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": ""stack"", ""percentValues"": true}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0[.]00000"", ""columnMapping"": {""date"": ""x"", ""type"": ""series"", ""total_volume"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""v2"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}, ""v3"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 1}, ""v4"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 2}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""column""}, ""created_at"": ""2020-07-02T22:26:15.023+00:00"", ""__typename"": ""visualizations""}]","select date, ""type"", sum(volume_usd) as total_volume
from 
(
    select date_trunc('month',block_time) as date,
            case 
            when (""type"" in ('UniswapV2 Direct', 'UniswapV3 Direct','Sushiswap Direct','Bridge Fill','PLP Direct') and block_time::date>='2021-01-24') then 'v4'
            when (""type"" in ('UniswapV2 Direct','Sushiswap Direct','Bridge Fill','PLP Direct') and block_time::date<'2021-01-24') then 'v3'
            else ""type"" end as ""type"",
            volume_usd
    from zeroex.view_0x_api_fills
    where type not in ('Native Fill v3','Native Fill v4') and swap_flag
    and block_time>now()-'270 days'::interval

    union all
    
    select date_trunc('month',""timestamp"") as date,
            protocol_version  as ""type"",
            volume_usd
    from zeroex.view_fills
    where ""timestamp"">now()-'270 days'::interval ) a 
group by 1,2"
22414,DEX Volume Share 🏦,"Trades sent by 0x to all other DEXes are excluded on them and listed separately (as `0x - Uniswap VIP` , `0x - Sushiswap VIP` and `0x - Bridge Fill` ). 

Only DEXes are included in this piechart, thus there is no double counting. `0x - PLP` is 0x's private AMM and is not reported in dex-metrics dashboard.","[{""id"": 46379, ""type"": ""chart"", ""name"": ""Market Share \ud83c\udf70"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": null}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""$0,0[.]"", ""columnMapping"": {""Rank"": ""unused"", ""Project"": ""x"", ""7 Days Volume"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""7 Days Volume"": {""type"": ""pie"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {""DDEX"": {""color"": ""#3BD973""}, ""dYdX"": {""color"": ""#356AFF""}, ""Curve"": {}, ""Kyber"": {""color"": ""#E92828""}, ""Uniswap"": {}, ""0x - PLP"": {""color"": ""#FB8D3D""}, ""Balancer"": {}, ""LINKSWAP"": {""color"": ""#50F5ED""}, ""0x Native"": {""color"": ""#FB8D3D""}, ""Mooniswap"": {""color"": ""#604FE9""}, ""Sushiswap"": {}, ""Synthetix"": {""color"": ""#3BD973""}, ""Bancor Network"": {}, ""Gnosis Protocol"": {""color"": ""#799CFF""}, ""0x - Bridge Fill"": {""color"": ""#FB8D3D""}, ""0x - Uniswap VIP"": {""color"": ""#FB8D3D""}, ""0x - Sushiswap VIP"": {""color"": ""#FB8D3D""}}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2021-03-10T04:44:48.435+00:00"", ""__typename"": ""visualizations""}]","WITH uniswap_0x as (
    select distinct tx_hash --, evt_index
    from zeroex.view_0x_api_fills 
    where ""type"" in ('UniswapV2 Direct','UniswapV3 Direct')
    and block_time > now() - interval '7 days'
), sushiswap_0x as (
    select distinct tx_hash --, evt_index
    from zeroex.view_0x_api_fills 
    where ""type"" = 'Sushiswap Direct'
    and block_time > now() - interval '7 days'
), bridge_0x as (
    select distinct tx_hash
    from zeroex.view_0x_api_fills 
    where ""type"" = 'Bridge Fill'
    and block_time > now() - interval '7 days'
), seven_day_volume AS(
    SELECT  case when project = '0x' then '0x Native'
                when u.tx_hash is not null then '0x - Uniswap VIP'
                when s.tx_hash is not null then '0x - Sushiswap VIP'
                when b.tx_hash is not null then '0x - Bridge Fill'
                -- when project = 'Uniswap' then 'Uniswap (excluding 0x VIP)'
                -- when project = 'Sushiswap' then 'Sushiswap (excluding 0x VIP)'
                else project end AS ""Project"",
            SUM(usd_amount) as usd_volume                                                                             
    FROM dex.""trades"" t     
    left join uniswap_0x u on u.tx_hash = t.tx_hash --and u.evt_index = t.evt_index
    left join sushiswap_0x s on s.tx_hash = t.tx_hash --and s.evt_index = t.evt_index
    left join bridge_0x b on b.tx_hash = t.tx_hash 
    WHERE block_time > now() - interval '7 days'
    AND category = 'DEX'
    GROUP BY 1
    
    union all
    
    select '0x - PLP' as ""Project"",
    sum(volume_usd) as usd_volume
    from zeroex.view_0x_api_fills
    where type = 'PLP Direct'
    and block_time > now() - interval '7 days'

), one_day_volume AS (
    SELECT  case when project = '0x' then '0x Native'
                when u.tx_hash is not null then '0x - Uniswap VIP'
                when s.tx_hash is not null then '0x - Sushiswap VIP'
                when b.tx_hash is not null then '0x - Bridge Fill'
                -- when project = 'Uniswap' then 'Uniswap (excluding 0x VIP)'
                -- when project = 'Sushiswap' then 'Sushiswap (excluding 0x VIP)'
                else project end AS ""Project"",
            SUM(usd_amount) as usd_volume                                                                             
    FROM dex.""trades"" t        
    left join uniswap_0x u on u.tx_hash = t.tx_hash --and u.evt_index = t.evt_index
    left join sushiswap_0x s on s.tx_hash = t.tx_hash --and s.evt_index = t.evt_index
    left join bridge_0x b on b.tx_hash = t.tx_hash 
    WHERE block_time > now() - interval '1 days'
    AND category = 'DEX'
    GROUP BY 1
    
    union all
    
    select '0x - PLP' as ""Project"",
    sum(volume_usd) as usd_volume
    from zeroex.view_0x_api_fills
    where type = 'PLP Direct'
    and block_time > now() - interval '1 days'
    
)

SELECT  ROW_NUMBER () OVER (ORDER BY SUM(seven.usd_volume) DESC) AS ""Rank"",
        seven.""Project"",
        SUM(seven.usd_volume) AS ""7 Days Volume"",
        SUM(one.usd_volume) AS ""24 Hours Volume""
FROM  seven_day_volume seven
LEFT JOIN one_day_volume one ON seven.""Project"" = one.""Project""
where seven.""Project"" is not null and one.""Project"" is not null
GROUP BY 2
ORDER BY 3 DESC;"
22386,"0x Protocol, 7 Days Volume",combined global with dedup,"[{""id"": 46295, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""defaultRows"": 5, ""counterLabel"": ""Volume last 7 days\ud83c\udf9a"", ""stringPrefix"": ""$"", ""stringSuffix"": """", ""stringDecChar"": ""."", ""stringDecimal"": null, ""stringThouSep"": "","", ""counterColName"": ""sum"", ""defaultColumns"": 2, ""targetRowNumber"": 1}, ""created_at"": ""2021-03-09T23:02:29.318+00:00"", ""__typename"": ""visualizations""}, {""id"": 46293, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""Rank"", ""type"": ""integer"", ""order"": 100000, ""title"": ""Rank"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""number"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""right"", ""numberFormat"": ""0,0"", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}, {""name"": ""Project"", ""type"": ""string"", ""order"": 100001, ""title"": ""Project"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""string"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""left"", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}, {""name"": ""sum"", ""type"": ""float"", ""order"": 100002, ""title"": ""USD volume"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""number"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""right"", ""numberFormat"": ""0,0."", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}], ""autoHeight"": true, ""minColumns"": 2, ""defaultRows"": 14, ""itemsPerPage"": 25, ""defaultColumns"": 3}, ""created_at"": ""2021-03-09T23:02:29.318111+00:00"", ""__typename"": ""visualizations""}]","select sum(volume_usd)
from (

select volume_usd
from zeroex.view_0x_api_fills
where type not in ('Native Fill v3','Native Fill v4') and swap_flag
and block_time > now() - interval '7 days'

union all

select volume_usd
from zeroex.view_fills
where timestamp > now() - interval '7 days'

) a

"
23011,"0x Native Volume (USD), Monthly, by Protocol Version",,"[{""id"": 47634, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2021-03-16T07:10:07.816307+00:00"", ""__typename"": ""visualizations""}, {""id"": 47635, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": ""stack"", ""percentValues"": false}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0[.]00000"", ""columnMapping"": {""date"": ""x"", ""type"": ""series"", ""total_volume"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""v2"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}, ""v3"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 1}, ""v4"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 2}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""column""}, ""created_at"": ""2021-03-16T07:10:07.816+00:00"", ""__typename"": ""visualizations""}]","select date, ""type"", sum(volume_usd) as total_volume
from 
(
    
    select date_trunc('month',""timestamp"") as date,
            protocol_version  as ""type"",
            volume_usd
    from zeroex.view_fills
    where ""timestamp"">now()-'270 days'::interval ) a 
group by 1,2"
4036,"0x Protocol Volume (USD), Daily, by Pair",,"[{""id"": 7848, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2020-05-29T17:42:09.09957+00:00"", ""__typename"": ""visualizations""}, {""id"": 35499, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": false}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": ""stack"", ""percentValues"": true}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0[.]00000"", ""columnMapping"": {""date"": ""x"", ""pair"": ""series"", ""total_volume"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""Others"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 17}, ""USDC-DAI"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}, ""USDT-DAI"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 1}, ""WBTC-DAI"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 4}, ""WETH-DAI"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 7}, ""WETH-UNI"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 9}, ""YFI-WETH"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 13}, ""USDT-LINK"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 2}, ""USDT-USDC"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 3}, ""WBTC-USDC"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 5}, ""WBTC-USDT"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 6}, ""WETH-USDC"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 10}, ""WETH-USDT"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 11}, ""WETH-WBTC"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 12}, ""WETH-SUSHI"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 8}, ""imBTC-USDT"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 15}, ""imBTC-WBTC"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 16}, ""\\x368b3a58b5f49392e5c9e4c998cb0bb966752e51-USDT"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 14}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""column""}, ""created_at"": ""2021-01-19T00:08:36.254+00:00"", ""__typename"": ""visualizations""}]","WITH daily_volume_by_pair AS
  (SELECT date_trunc('day',block_time) AS date,
          (CASE
               WHEN coalesce(mt.symbol, maker_token::text) >coalesce(tt.symbol, taker_token::text) THEN concat(coalesce(mt.symbol, maker_token::text),'-',coalesce(tt.symbol, taker_token::text))
               ELSE concat(coalesce(tt.symbol, taker_token::text),'-',coalesce(mt.symbol, maker_token::text))
           END) AS pair,
          sum(volume_usd) AS volume
   FROM zeroex.view_0x_api_fills
   LEFT JOIN erc20.tokens mt ON mt.contract_address = maker_token
   LEFT JOIN erc20.tokens tt ON tt.contract_address = taker_token
   WHERE type not in ('Native Fill v3','Native Fill v4') 
     AND swap_flag
     AND block_time>now()-'14 days'::interval
     AND volume_usd IS NOT NULL
   GROUP BY 1,
            2
   UNION ALL SELECT date_trunc('day',""timestamp"") AS date,
                    (CASE
                         WHEN coalesce(maker_symbol, maker_token::text) >coalesce(taker_symbol, taker_token::text) THEN concat(coalesce(maker_symbol, maker_token::text),'-',coalesce(taker_symbol, taker_token::text))
                         ELSE concat(coalesce(taker_symbol, taker_token::text),'-',coalesce(maker_symbol, maker_token::text))
                     END) AS pair,
                    sum(volume_usd) AS volume
   FROM zeroex.view_fills
   WHERE ""timestamp"">now()-'14 days'::interval
     AND volume_usd IS NOT NULL
   GROUP BY 1,
            2),
     with_rank AS
  (SELECT date, pair,
                volume,
                rank() OVER (PARTITION BY ""date""
                             ORDER BY volume DESC) AS ""rank""
   FROM daily_volume_by_pair),
     combine_other_pairs AS
  (SELECT date, (CASE
                     WHEN ""rank""<10 THEN pair
                     ELSE 'Others'
                 END) AS pair,
                volume
   FROM with_rank)
SELECT date, pair,
             sum(volume) AS total_volume
FROM combine_other_pairs
GROUP BY 1,
         2
ORDER BY 1,
         3 desc"
36859,"0x API, Volume To Date",/swap endpoint only (/sra endpoint not included),"[{""id"": 73137, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""defaultRows"": 5, ""counterLabel"": ""Volume To Date"", ""stringPrefix"": ""$"", ""stringSuffix"": """", ""stringDecChar"": ""."", ""stringDecimal"": null, ""stringThouSep"": "","", ""counterColName"": ""zeroex_api_volume"", ""defaultColumns"": 2, ""targetRowNumber"": 1}, ""created_at"": ""2021-04-22T23:37:45.593323+00:00"", ""__typename"": ""visualizations""}, {""id"": 73136, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""Rank"", ""type"": ""integer"", ""order"": 100000, ""title"": ""Rank"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""number"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""right"", ""numberFormat"": ""0,0"", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}, {""name"": ""Project"", ""type"": ""string"", ""order"": 100001, ""title"": ""Project"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""string"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""left"", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}, {""name"": ""sum"", ""type"": ""float"", ""order"": 100002, ""title"": ""USD volume"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""number"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""right"", ""numberFormat"": ""0,0."", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}], ""autoHeight"": true, ""minColumns"": 2, ""defaultRows"": 14, ""itemsPerPage"": 25, ""defaultColumns"": 3}, ""created_at"": ""2021-04-22T23:37:45.593323+00:00"", ""__typename"": ""visualizations""}]","SELECT  SUM(volume_usd) as zeroex_api_volume
FROM zeroex.view_0x_api_fills
WHERE swap_flag is true 
"
4035,"0x Protocol Volume (USD), Daily by on-chain settlements",,"[{""id"": 7846, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2020-05-29T17:35:56.492959+00:00"", ""__typename"": ""visualizations""}, {""id"": 7847, ""type"": ""chart"", ""name"": """", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": ""stack""}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""$0,"", ""columnMapping"": {""date"": ""x"", ""type"": ""series"", ""total_volume"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""PLP Direct"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 6}, ""Bridge Fill"": {""name"": """", ""type"": ""column"", ""color"": ""#3BD973"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 2}, ""Native Fill v2"": {""name"": """", ""type"": ""column"", ""color"": ""#799CFF"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}, ""Native Fill v3"": {""type"": ""column"", ""color"": ""#50F5ED"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 1}, ""Native Fill v4"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 5}, ""Sushiswap Direct"": {""type"": ""column"", ""color"": ""#FB8D3D"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 3}, ""UniswapV2 Direct"": {""type"": ""column"", ""color"": ""#E92828"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 4}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""column""}, ""created_at"": ""2020-05-29T17:36:33.937+00:00"", ""__typename"": ""visualizations""}, {""id"": 726463, ""type"": ""chart"", ""name"": ""Normalized"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack"", ""percentValues"": true}, ""reverseX"": false, ""columnMapping"": {"""": ""y"", ""date"": ""x"", ""type"": ""series"", ""total_volume"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-01-27T21:29:11.722194+00:00"", ""__typename"": ""visualizations""}]","select date_trunc('week',block_time) as date,
        ""type"",
        sum(volume_usd) as total_volume
from zeroex.view_0x_api_fills
where type not in ('Native Fill v3','Native Fill v4') and swap_flag
and block_time>now()-'180 days'::interval
    and block_time::date <now()::date
group by 1, 2

union all

select date_trunc('week',""timestamp"") as date,
        concat('Native Fill ', '') as ""type"",
        sum(volume_usd) as total_volume
from zeroex.view_fills
where ""timestamp"">now()-'180 days'::interval
        and ""timestamp""::date <now()::date

group by 1,2"
4045,"0x Protocol Volume (USD), Monthly, by Pair",,"[{""id"": 7867, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2020-05-29T21:03:59.232938+00:00"", ""__typename"": ""visualizations""}, {""id"": 7868, ""type"": ""chart"", ""name"": """", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": false}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": ""stack"", ""percentValues"": true}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""$0,"", ""columnMapping"": {""date"": ""x"", ""pair"": ""series"", ""total_volume"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""Others"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 15}, ""USDT-HT"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 3}, ""USDC-DAI"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}, ""USDT-DAI"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 2}, ""USDT-PAX"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 4}, ""WETH-DAI"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 9}, ""USDC-TUSD"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 1}, ""USDT-TUSD"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 5}, ""USDT-USDC"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 6}, ""WBTC-USDC"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 7}, ""WBTC-USDT"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 8}, ""WETH-USDC"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 10}, ""WETH-USDT"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 11}, ""WETH-WBTC"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 12}, ""imBTC-USDT"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 13}, ""imBTC-WBTC"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 14}, ""\\x50cb61afa3f023d17276dcfb35abf85c710d1cff-\\x33d019eb137b853f0cdf555a5d5bd2749135ac31"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 16}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""column""}, ""created_at"": ""2020-05-29T21:03:59.232+00:00"", ""__typename"": ""visualizations""}]","WITH daily_volume_by_pair AS
  (SELECT date_trunc('month',block_time) AS date,
          (CASE
               WHEN coalesce(mt.symbol, maker_token::text) >coalesce(tt.symbol, taker_token::text) THEN concat(coalesce(mt.symbol, maker_token::text),'-',coalesce(tt.symbol, taker_token::text))
               ELSE concat(coalesce(tt.symbol, taker_token::text),'-',coalesce(mt.symbol, maker_token::text))
           END) AS pair,
          sum(volume_usd) AS volume
   FROM zeroex.view_0x_api_fills
   LEFT JOIN erc20.tokens mt ON mt.contract_address = maker_token
   LEFT JOIN erc20.tokens tt ON tt.contract_address = taker_token
   WHERE type not in ('Native Fill v3','Native Fill v4')
     AND swap_flag
     AND block_time>now()-'270 days'::interval
     AND volume_usd IS NOT NULL
   GROUP BY 1,
            2
   UNION ALL SELECT date_trunc('month',""timestamp"") AS date,
                    (CASE
                         WHEN coalesce(maker_symbol, maker_token::text) >coalesce(taker_symbol, taker_token::text) THEN concat(coalesce(maker_symbol, maker_token::text),'-',coalesce(taker_symbol, taker_token::text))
                         ELSE concat(coalesce(taker_symbol, taker_token::text),'-',coalesce(maker_symbol, maker_token::text))
                     END) AS pair,
                    sum(volume_usd) AS volume
   FROM zeroex.view_fills
   WHERE ""timestamp"">now()-'270 days'::interval
     AND volume_usd IS NOT NULL
   GROUP BY 1,
            2),
     with_rank AS
  (SELECT date, pair,
                volume,
                rank() OVER (PARTITION BY ""date""
                             ORDER BY volume DESC) AS ""rank""
   FROM daily_volume_by_pair),
     combine_other_pairs AS
  (SELECT date, (CASE
                     WHEN ""rank""<10 THEN pair
                     ELSE 'Others'
                 END) AS pair,
                volume
   FROM with_rank)
SELECT date, pair,
             sum(volume) AS total_volume
FROM combine_other_pairs
GROUP BY 1,
         2
ORDER BY 1,
         3 desc"
22391,"# of Unique Traders, Ranked by 7d Total 🏟","Count of unique addresses that traded: inclduing **maker** **taker** and **tx_sender** , trailing last 7 days.","[{""id"": 46304, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""Rank"", ""type"": ""integer"", ""order"": 100000, ""title"": ""Rank"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""number"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""right"", ""numberFormat"": ""0,0"", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}, {""name"": ""Project"", ""type"": ""string"", ""order"": 100001, ""title"": ""Project"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""string"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""left"", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}, {""name"": ""Number of Traders"", ""type"": ""float"", ""order"": 100002, ""title"": ""Number of Traders"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""number"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""right"", ""numberFormat"": ""0,0."", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}], ""autoHeight"": true, ""minColumns"": 2, ""defaultRows"": 14, ""itemsPerPage"": 25, ""defaultColumns"": 3}, ""created_at"": ""2021-03-09T23:18:58.473178+00:00"", ""__typename"": ""visualizations""}]","WITH traders AS (

  SELECT project, category, trader_a AS trader
  FROM dex.""trades""
  WHERE block_time > now() - interval '7 days'
  
  UNION 
  
  SELECT project, category, trader_b AS trader
  FROM dex.""trades""
  WHERE block_time > now() - interval '7 days'
  
  
  UNION 
  
  SELECT project, category, tx_from AS trader
  FROM dex.""trades""
  WHERE block_time > now() - interval '7 days'
  
)

SELECT ROW_NUMBER () OVER (ORDER BY SUM(traders) DESC) AS ""Rank"", project AS ""Project"", category as ""Category"", SUM(traders) AS ""Number of Traders"" FROM
(
  SELECT project, category, COUNT(distinct trader) AS traders
  FROM traders
  GROUP BY 1,2
) users
GROUP BY 2,3
ORDER BY 1 asc;
"
42746,"Market Share %, 0x Native vs Other DEXes",,"[{""id"": 84017, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack"", ""percentValues"": true}, ""reverseX"": false, ""columnMapping"": {""week"": ""x"", ""Project"": ""series"", ""project"": ""series"", ""usd_volume"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""area""}, ""created_at"": ""2021-05-05T18:43:09.888752+00:00"", ""__typename"": ""visualizations""}, {""id"": 84016, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""Project"", ""type"": ""string"", ""order"": 100000, ""title"": ""Project"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""string"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""left"", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}, {""name"": ""usd_volume"", ""type"": ""float"", ""order"": 100001, ""title"": ""usd_volume"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""number"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""right"", ""numberFormat"": ""0,0.00"", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}], ""autoHeight"": true, ""minColumns"": 2, ""defaultRows"": 14, ""itemsPerPage"": 25, ""defaultColumns"": 3}, ""created_at"": ""2021-05-05T18:43:09.888752+00:00"", ""__typename"": ""visualizations""}]","SELECT  date_trunc('week', t.block_time) as week,
        project,
        SUM(usd_amount) as usd_volume                                                                             
FROM dex.""trades"" t     
WHERE block_time > now() - interval '6 months'
AND category = 'DEX'
GROUP BY 1,2"
4047,"0x Native, Protocol Fees Collected, Monthly",,"[{""id"": 7872, ""type"": ""chart"", ""name"": """", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": null}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,"", ""columnMapping"": {""dt"": ""x"", ""protocol_fees_eth"": ""y"", ""protocol_fees_usd"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""protocol_fees_eth"": {""name"": ""Protocol Fees (ETH)"", ""type"": ""line"", ""color"": ""#356AFF"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}, ""protocol_fees_usd"": {""name"": ""USD Equiv."", ""type"": ""line"", ""color"": ""#3BD973"", ""index"": 0, ""yAxis"": 1, ""zIndex"": 1}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""line""}, ""created_at"": ""2020-05-29T21:09:31.207+00:00"", ""__typename"": ""visualizations""}, {""id"": 7871, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2020-05-29T21:09:31.207142+00:00"", ""__typename"": ""visualizations""}]","SELECT
    DATE_TRUNC('month',timestamp) AS dt
    , SUM(protocol_fee_paid_eth) AS protocol_fees_eth
    , SUM(protocol_fee_paid_eth * eth.price) AS protocol_fees_usd
FROM zeroex.view_fills vf
LEFT JOIN prices.layer1_usd_eth eth ON eth.minute = DATE_TRUNC('minute',vf.timestamp)
WHERE
    DATE_TRUNC('month',timestamp) BETWEEN (CURRENT_DATE - '270 days'::INTERVAL) AND (CURRENT_DATE - '3 days'::INTERVAL)
GROUP BY 1
ORDER BY 1;"
4037,"0x Protocol # of Fills, Daily",,"[{""id"": 7850, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2020-05-29T17:55:20.822259+00:00"", ""__typename"": ""visualizations""}, {""id"": 7851, ""type"": ""chart"", ""name"": """", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": false}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": null}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,"", ""columnMapping"": {""date"": ""x"", ""fills"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""fills"": {""type"": ""line"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": true, ""globalSeriesType"": ""line""}, ""created_at"": ""2020-05-29T17:55:20.822+00:00"", ""__typename"": ""visualizations""}]","with fills as (
    select date_trunc('day',block_time) as date,
        tx_hash
    from zeroex.view_0x_api_fills
    where type not in ('Native Fill v3','Native Fill v4') and swap_flag
    and block_time::date >now()-'14 days'::interval
        and block_time::date < now()::date
  
    union all

    select date_trunc('day',""timestamp"") as date,
            transaction_hash as tx_hash
    from zeroex.view_fills
    where ""timestamp""::date  > now()-'14 days'::interval
            and ""timestamp""::date < now()::date

) select date, count(*) as fills
    from fills 
    group by 1"
22389,DEX & Aggregators Rank 🏦,"Trades sent by 0x API to Uniswap/Sushi are excluded on them and listed separately. Other DEXes' volume bridged via 0x API are not excluded on them. Volume may be overlapped and shared across projects, as it includes both aggregators and DEXes.","[{""id"": 46301, ""type"": ""table"", ""name"": ""DEX & Aggregators Volume, Ranked by 7d Total \ud83e\udd47"", ""options"": {""columns"": [{""name"": ""Rank"", ""type"": ""integer"", ""order"": 100000, ""title"": ""Rank"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""number"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""right"", ""numberFormat"": """", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}, {""name"": ""Project"", ""type"": ""string"", ""order"": 100001, ""title"": ""Project"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""string"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""left"", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}, {""name"": ""category"", ""type"": ""string"", ""order"": 100002, ""title"": ""category"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""string"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""left"", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}, {""name"": ""7 Days Volume"", ""type"": ""float"", ""order"": 100003, ""title"": ""7 Days Volume \ud83d\udcc8"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""number"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""right"", ""numberFormat"": ""$0,0."", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}, {""name"": ""24 Hours Volume"", ""type"": ""float"", ""order"": 100004, ""title"": ""24 Hours Volume \ud83d\udcb8"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""number"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""right"", ""numberFormat"": ""$0,0."", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}], ""autoHeight"": true, ""minColumns"": 2, ""defaultRows"": 14, ""itemsPerPage"": 25, ""defaultColumns"": 3}, ""created_at"": ""2021-03-09T23:15:22.371+00:00"", ""__typename"": ""visualizations""}]","WITH uniswap_0x as (
    select distinct tx_hash --, evt_index
    from zeroex.view_0x_api_fills 
    where ""type"" in ('UniswapV2 Direct','UniswapV3 Direct')
    and block_time > now() - interval '7 days'
), sushiswap_0x as (
    select distinct tx_hash --, evt_index
    from zeroex.view_0x_api_fills 
    where ""type"" = 'Sushiswap Direct'
    and block_time > now() - interval '7 days'
), seven_day_volume AS

(
    SELECT  case when (u.tx_hash is not null and project='0x API') then '0x API (Uniswap VIP)'
                when (s.tx_hash is not null and project='0x API') then '0x API (Sushiswap VIP)'
                when (u.tx_hash is not null or s.tx_hash is not null) and project = 'Matcha' then 'Matcha'
                when (u.tx_hash is not null or s.tx_hash is not null) then null
                when project = 'Uniswap' then 'Uniswap (excluding 0x VIP)'
                when project = 'Sushiswap' then 'Sushiswap (excluding 0x VIP)'
                else project end AS ""Project"",
                category,
            SUM(usd_amount) as usd_volume                                                                             
    FROM dex.""trades"" t     
    left join uniswap_0x u on u.tx_hash = t.tx_hash -- and u.evt_index = t.evt_index
    left join sushiswap_0x s on s.tx_hash = t.tx_hash -- and s.evt_index = t.evt_index
    WHERE block_time > now() - interval '7 days'
    AND project !='0x API'
    GROUP BY 1,2
    
    
    union all
    
    (
        select '0x Protocol (all combined)' as ""Project"",
                    'Aggregator & DEX' as category,
                    sum(volume_usd)
        from (
        
        select volume_usd
        from zeroex.view_0x_api_fills
        where type not in ('Native Fill v3','Native Fill v4') and swap_flag
        and block_time > now() - interval '7 days'
        
        union all
        
        select volume_usd
        from zeroex.view_fills
        where timestamp > now() - interval '7 days'
        
        ) a
        
    )
    
    union all
    
    select '0x API (Bridge Fill)' as ""Project"",
            'Aggregator' as category,
            sum(volume_usd) as usd_volume
    from zeroex.view_0x_api_fills 
    where ""type"" = 'Bridge Fill'
    and block_time > now() - interval '7 days'
    
    union all
    
    select '0x PLP' as ""Project"",
            'DEX' as category,
            sum(volume_usd) as usd_volume
    from zeroex.view_0x_api_fills
    where type = 'PLP Direct'
    and block_time > now() - interval '7 days'
    
    union all 
    select '0x API' as ""Project"",
            'Aggregator' as category,
            sum(volume_usd) as usd_volume
    from zeroex.view_0x_api_fills
    where swap_flag 
    and block_time > now() - interval '7 days'

), one_day_volume AS (
        SELECT case when (u.tx_hash is not null and project='0x API') then '0x API (Uniswap VIP)'
                when (s.tx_hash is not null and project='0x API') then '0x API (Sushiswap VIP)'
                when (u.tx_hash is not null or s.tx_hash is not null) and project = 'Matcha' then 'Matcha'
                when (u.tx_hash is not null or s.tx_hash is not null) then null
                when project = 'Uniswap' then 'Uniswap (excluding 0x VIP)'
                when project = 'Sushiswap' then 'Sushiswap (excluding 0x VIP)'
                else project end AS ""Project"",
                category,
            SUM(usd_amount) as usd_volume                                                                             
    FROM dex.""trades"" t     
    left join uniswap_0x u on u.tx_hash = t.tx_hash -- and u.evt_index = t.evt_index
    left join sushiswap_0x s on s.tx_hash = t.tx_hash -- and s.evt_index = t.evt_index                                               
    WHERE block_time > now() - interval '1 days'
    AND project !='0x API'
    GROUP BY 1,2
    
    union all
    
    (
            select '0x Protocol (all combined)' as ""Project"",
                    'Aggregator & DEX' as category,
                    sum(volume_usd)
        from (
        
        select volume_usd
        from zeroex.view_0x_api_fills
        where type not in ('Native Fill v3','Native Fill v4') and swap_flag
        and block_time > now() - interval '1 days'
        
        union all
        
        select volume_usd
        from zeroex.view_fills
        where timestamp > now() - interval '1 days'
        
        ) a
    
    )
    
    union all
    
    select '0x API (Bridge Fill)' as ""Project"",
            'Aggregator' as category,
            sum(volume_usd) as usd_volume
    from zeroex.view_0x_api_fills 
    where ""type"" = 'Bridge Fill'
    and block_time > now() - interval '1 days'
    
    union all
    
    select '0x PLP' as ""Project"",
            'DEX' as category,
            sum(volume_usd) as usd_volume
    from zeroex.view_0x_api_fills
    where type = 'PLP Direct'
    and block_time > now() - interval '1 days'
    
    union all 
    
    select '0x API' as ""Project"",
            'Aggregator' as category,
            sum(volume_usd) as usd_volume
    from zeroex.view_0x_api_fills
    where swap_flag 
    and block_time > now() - interval '1 days'
)

SELECT  ROW_NUMBER () OVER (ORDER BY SUM(seven.usd_volume) DESC NULLS LAST) AS ""Rank"",
        seven.""Project"",
        seven.category,
        SUM(seven.usd_volume) AS ""7 Days Volume"",
        SUM(one.usd_volume) AS ""24 Hours Volume""
FROM  seven_day_volume seven
LEFT JOIN one_day_volume one ON seven.""Project"" = one.""Project"" and seven.""category"" = one.""category""
where one.""Project"" is not null and seven.""Project"" is not null
GROUP BY 2,3
ORDER BY 4 DESC NULLS LAST;
"
274468,【0xBi】Early Holder Change  with Parameter,,"[{""id"": 517357, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-12-03T06:50:45.510682+00:00"", ""__typename"": ""visualizations""}]","
WITH  early_holder as (
    select
        buy_wallet_address
    from 
    (
        SELECT 
            evt_block_time
            ,""to"" as buy_wallet_address
            ,row_number( ) over(order by evt_block_time)  as num_rank
            ,*
        FROM erc20.""ERC20_evt_Transfer""
        WHERE contract_address = CONCAT('\x', substring('{{contract address}}' from 3))::bytea -- Token address
    ) a 
    where num_rank <=100
    group by 1
),

uniswap_pool_info AS(
    SELECT 
       ""pair"" as contract_address
    FROM uniswap_v2.""Factory_evt_PairCreated"" 
    WHERE (token0  = CONCAT('\x', substring('{{contract address}}' from 3))::bytea   or token1  = CONCAT('\x', substring('{{contract address}}' from 3))::bytea  )
),


label_info AS(
        select
             CONCAT('\x', substring(address from 3))::bytea  as address
            ,cate as label
        from  dune_user_generated.pro_0xBi_address_label_dim 
        group by 1,2
),

today_info AS(
    select 
        wallet_address
        ,token_address
        ,amount_raw
        ,amount_raw / power(10,{{decimals}})  as amount 
    from erc20.""view_token_balances_latest""
    where token_address = CONCAT('\x', substring('{{contract address}}' from 3))::bytea -- Token address
    and wallet_address in 
    (
        select  buy_wallet_address
        from early_holder
    )
    order by 
        amount_raw desc
),

hour_info AS(
    select 
        wallet_address
        ,token_address
        ,amount_raw
        ,amount_raw / power(10,{{decimals}})  as amount
        ,hour
    from erc20.view_token_balances_hourly
    where token_address = CONCAT('\x', substring('{{contract address}}' from 3))::bytea -- Token address
    and amount_raw > 0
    and hour = date_trunc('hour', now()- interval '6 hour') 
    order by amount_raw desc
),






yesterday_info AS(

    select 
        wallet_address
        ,token_address
        ,amount_raw
        ,amount_raw / power(10,{{decimals}})  as amount
        ,day
    from erc20.""view_token_balances_daily""
    where token_address = CONCAT('\x', substring('{{contract address}}' from 3))::bytea -- Token address
    and amount_raw > 0
    and day = date_trunc('day', now()- interval '1 day') 
    order by amount_raw desc
),

last_week_info AS(

    select 
        wallet_address
        ,token_address
        ,amount_raw
        ,amount_raw / power(10,{{decimals}})  as amount
        ,day 
    from erc20.""view_token_balances_daily""
    where token_address = CONCAT('\x', substring('{{contract address}}' from 3))::bytea -- Token address
    and amount_raw > 0
    and day = date_trunc('day', now()- interval '7 days') 
    order by amount_raw desc
),


last_month_info AS(

    select 
        wallet_address
        ,token_address
        ,amount_raw
        ,amount_raw / power(10,{{decimals}})  as amount
        ,day from erc20.""view_token_balances_daily""
    where token_address = CONCAT('\x', substring('{{contract address}}' from 3))::bytea -- Token address
    and amount_raw > 0
    and day = date_trunc('day', now()- interval '1 month') 
    order by amount_raw desc
),



flow_out_info AS(

    SELECT 
        ""from"" AS address
        , -SUM(value / power(10,{{decimals}})  ) AS total_sell_amount
    FROM erc20.""ERC20_evt_Transfer""
    WHERE contract_address =  CONCAT('\x', substring('{{contract address}}' from 3))::bytea -- Token address
    and  ""from""   in  
    (
        select  buy_wallet_address
        from early_holder
    )
    GROUP BY 1
),



flow_in_info AS(

    SELECT 
        ""to"" AS address
        , SUM(value/ power(10,{{decimals}}) ) AS total_buy_amount
    FROM erc20.""ERC20_evt_Transfer""
    WHERE contract_address =  CONCAT('\x', substring('{{contract address}}' from 3))::bytea -- Token address
    and 
    ""to"" in 
    (
        select  buy_wallet_address
        from early_holder
    )
    GROUP BY 1
)



select
    (now()+ '8 hour'::interval) as data_current_time
  ,replace(cast(wallet_address as varchar),'\','0') as wallet_address
  ,标签
  ,today_info_amount as Today_total_hold_amount
  ,total_buy_amount
  ,total_sell_amount
  ,(-total_sell_amount / total_buy_amount) as sell_rate
  ,case when hour_info_amount =0 then 99999999 else today_info_amount  / hour_info_amount -1 end as Δ_prev_6h
  ,case when yesterday_info_amount =0 then 99999999 else today_info_amount  / yesterday_info_amount -1 end as Δ_prev_1d
  ,case when last_week_info_amount =0 then 99999999 else today_info_amount  / last_week_info_amount -1 end as Δ_prev_1week
  ,case when last_month_info_amount =0 then 99999999 else today_info_amount  / last_month_info_amount -1 end as Δ_prev_1month
from 
(
    select
        today_info.wallet_address as wallet_address
        ,today_info.amount as today_info_amount
        ,hour_info.amount as hour_info_amount
        ,yesterday_info.amount as yesterday_info_amount
        ,last_week_info.amount as last_week_info_amount
        ,last_month_info.amount as last_month_info_amount
         ,case 
            when   uniswap_pool_info.contract_address  is not null then 'Uniswap池子'
            when label_info.address is not null then label 
            else '' 
         end  as 标签
         ,total_sell_amount
         ,total_buy_amount
    from  
    (
        SELECT 
          wallet_address
          ,amount
        FROM today_info
        ORDER BY amount desc
        LIMIT 100
    )today_info
    left join 
    (
         SELECT 
          wallet_address
          ,amount
        FROM hour_info
    )hour_info
    on today_info.wallet_address = hour_info.wallet_address
    left join 
    (
         SELECT 
          wallet_address
          ,amount
        FROM yesterday_info
    )yesterday_info
    on today_info.wallet_address = yesterday_info.wallet_address
    left join 
    (
         SELECT 
          wallet_address
          ,amount
        FROM last_week_info
    )last_week_info
    on today_info.wallet_address = last_week_info.wallet_address
    left join 
    (
         SELECT 
          wallet_address
          ,amount
        FROM last_week_info
    )last_month_info
    on today_info.wallet_address = last_month_info.wallet_address
    left outer join 
    (
       select 
            address 
            ,label
       from  label_info
    )label_info
    on label_info.address = today_info.wallet_address
    left outer join 
    (
       select 
            contract_address 
       from  uniswap_pool_info
    )uniswap_pool_info
    on uniswap_pool_info.contract_address = today_info.wallet_address 
    left outer join 
    (
        select
            address
            ,total_sell_amount
        from flow_out_info
    )flow_out_info
    on flow_out_info.address = today_info.wallet_address 
    left outer join 
    (
        select
            address
            ,total_buy_amount
        from flow_in_info
    )flow_in_info
    on flow_in_info.address = today_info.wallet_address 
) a 
ORDER BY total_buy_amount desc




"
256225,【0xBi】Altcoin Exchange Net Position Change,,"[{""id"": 487401, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}}, ""yAxis"": [{""type"": ""-""}, {""type"": ""logarithmic""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""columnMapping"": {"""": ""y"", ""day"": ""x"", ""usd_price"": ""y"", ""net_flow_amount"": ""y"", ""exchange_net_flow"": ""y"", ""exchange_net_position_change"": ""y"", ""\u4eca\u65e5\u51c0\u6d41\u5165\u4ea4\u6613\u6240\u6570\u91cf"": ""y""}, ""seriesOptions"": {""usd_price"": {""type"": ""line"", ""yAxis"": 1, ""zIndex"": 1}, ""\u4eca\u65e5\u51c0\u6d41\u5165\u4ea4\u6613\u6240\u6570\u91cf"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": false, ""globalSeriesType"": ""line""}, ""created_at"": ""2021-11-24T02:11:20.132795+00:00"", ""__typename"": ""visualizations""}, {""id"": 480891, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-11-22T16:18:59.131904+00:00"", ""__typename"": ""visualizations""}]","With flow_in as (
    SELECT 
        date_trunc('day', evt_block_time) AS DAY
        ,SUM(value / power(10,{{decimals}})) AS exchange_in_amount
    FROM erc20.""ERC20_evt_Transfer""
    WHERE contract_address = CONCAT('\x', substring('{{contract address}}' from 3))::bytea -- Token address
    and evt_block_time > '{{start_date}}'
    and upper(replace(cast(""to"" as varchar),'\','0')) in 
    (
        select
             upper(""address"") as address
        from  dune_user_generated.pro_0xBi_address_label_dim 
        where  cate in ('Exchange地址')
        group by
             upper(""address"") 
    
    )
    and   upper(replace(cast(""from"" as varchar),'\','0'))  not in 
    (
        select
            upper(""address"") as address
        from  dune_user_generated.pro_0xBi_address_label_dim 
        where  cate in ('Exchange地址')
        group by
            upper(""address"") 
    )
    group by
        date_trunc('day', evt_block_time) 
    order by
         date_trunc('day', evt_block_time) 
),

flow_out as 
(
    SELECT 
        date_trunc('day', evt_block_time) AS DAY
        ,SUM(value/ power(10,{{decimals}})  ) AS exchange_out_amount
    FROM erc20.""ERC20_evt_Transfer""
    WHERE contract_address = CONCAT('\x', substring('{{contract address}}' from 3))::bytea -- Token address
    and evt_block_time > '{{start_date}}'
    and upper(replace(cast(""from"" as varchar),'\','0')) in 
    (
        select
             upper(""address"") as address
        from  dune_user_generated.pro_0xBi_address_label_dim 
        where  cate in ('Exchange地址')
        group by
             upper(""address"") 

    )
    and   upper(replace(cast(""to"" as varchar),'\','0'))  not in 
    (
        select
            upper(""address"") as address
        from  dune_user_generated.pro_0xBi_address_label_dim 
        where  cate in ('Exchange地址')
        group by
            upper(""address"") 
    )
    group by
        date_trunc('day', evt_block_time) 
    order by
         date_trunc('day', evt_block_time) 
),

price_info as 
(
   select
        hour
        ,usd_price
        ,trans_eth_volume
    from 
    (
        select
            hour
            ,avg((eth_amt/other_amt)*eth_prc) AS usd_price
            ,sum(eth_amt) as trans_eth_volume
        from 
        (
            select
                Swap.hour as hour
                ,CASE WHEN token0 in ('\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2') then ""amount0In"" + ""amount0Out"" ELSE ""amount1In"" + ""amount1Out"" END/1e18 AS eth_amt
                ,CASE WHEN token0  not in ('\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2')  then ""amount0In"" + ""amount0Out"" ELSE ""amount1In"" + ""amount1Out"" END/power(10,""decimals"")  AS other_amt -- If the token is not in the erc20.tokens list 
                ,eth_prc
            from 
            (
                SELECT 
                    contract_address  AS contract
                    ,date_trunc('day', ""evt_block_time"") AS hour
                    ,*
                FROM uniswap_v2.""Pair_evt_Swap"" 
                WHERE   evt_block_time > '{{start_date}}'
            ) Swap
            join 
            (
                SELECT 
                    ""pair"" AS contract
                    ,""token0""
                    ,""token1""
                    ,case when ""token0"" in  ('\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2') then ""token0"" else ""token1""  end as eth_address
                    ,case when ""token0"" not in  ('\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2') then ""token0"" else ""token1""  end as other_address
                FROM uniswap_v2.""Factory_evt_PairCreated"" 
                WHERE 
                (""token0"" in ('\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2') and ""token1"" in (CONCAT('\x', substring('{{contract address}}' from 3))::bytea) )
                or  
                ( ""token0"" in (CONCAT('\x', substring('{{contract address}}' from 3))::bytea) and ""token1"" in ('\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2') )
            )Factory_evt_PairCreated 
            on Swap.contract =Factory_evt_PairCreated.contract
            left outer join 
            (
                SELECT 
                    date_trunc('hour', minute) AS hour
                    ,avg(price) eth_prc
                FROM prices.layer1_usd_eth
                WHERE minute > '{{start_date}}'
                group by 1
            )eth_prcs
            on eth_prcs.hour  = Swap.hour
            left outer join 
            (
                select
                    ""symbol""
                    ,""contract_address""
                    ,""decimals""
                from  erc20.""tokens"" 
            )erc20
            on erc20.contract_address = Factory_evt_PairCreated.other_address
        ) a 
        group by 1
    )trans_volume
    
)



select
    flow_out.DAY
    -- ,exchange_out_amount
    -- ,exchange_in_amount
     ,ceil(exchange_in_amount - exchange_out_amount) as 今日净流入交易所数量
    ,usd_price
from 
(
    select
        DAY
        ,exchange_out_amount
    from flow_out
)flow_out
left outer join 
(
    select
        DAY
        ,exchange_in_amount
    from flow_in
)flow_in
on flow_in.DAY = flow_out.DAY
left outer join 
(
    select
         hour 
        ,usd_price
    from price_info
)price_info
on  flow_out.DAY = hour
order by 
    flow_out.DAY




"
261564,【0xBi】Daily Dex Volume Usd Amount with Parameter,,"[{""id"": 491853, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-11-25T09:59:15.382904+00:00"", ""__typename"": ""visualizations""}, {""id"": 491857, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""columnMapping"": {""stat_date"": ""x"", ""volume_usd_amount"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2021-11-25T10:01:31.125101+00:00"", ""__typename"": ""visualizations""}]","select 
    (stat_date + '8 hour'::interval) as stat_date
    ,sum(volume_usd_amount) as volume_usd_amount
from 
(
        select 
             
            date_trunc('hour', block_time) AS stat_date
            ,sum(usd_amount) / sum(""token_a_amount"") as price
            ,sum(usd_amount  *  power(10,{{decimals}}) ) / sum(""token_a_amount_raw"") as a_price
            ,sum(usd_amount) as volume_usd_amount
        from dex.trades
        where ""token_a_address"" = CONCAT('\x', substring('{{contract address}}' from 3))::bytea -- Token address
        and ""token_b_amount_raw"" >0
        and block_time > '{{start_date}}'
        group by 1    

        union all 

        select 
            date_trunc('hour', block_time) AS stat_date
            ,sum(usd_amount)  / sum(""token_b_amount"") as price
            ,sum(usd_amount  * power(10,{{decimals}}) )  / sum(""token_b_amount_raw"") as a_price
            ,sum(usd_amount) as volume_usd_amount
        from dex.trades
        where ""token_b_address"" = CONCAT('\x', substring('{{contract address}}' from 3))::bytea -- Token address
        and ""token_b_amount_raw"" >0
        and block_time > '{{start_date}}'
        group by 1
) pr
group by
    (stat_date + '8 hour'::interval)
order by
    (stat_date + '8 hour'::interval)"
261501,【0xBi】Daily Holder Growth by Day with Parameter,,"[{""id"": 491756, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-11-25T09:20:50.65673+00:00"", ""__typename"": ""visualizations""}, {""id"": 491758, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""columnMapping"": {""stat_date"": ""x"", ""daily_holder_growth"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2021-11-25T09:22:26.320445+00:00"", ""__typename"": ""visualizations""}]","WITH transfers AS (
    SELECT 
        DAY,
        address,
        token_address,
        sum(amount) AS amount 
    FROM
    ( 
        SELECT date_trunc('hour', evt_block_time) AS DAY,
            ""to"" AS address,
            tr.contract_address AS token_address,
            value AS amount
        FROM erc20.""ERC20_evt_Transfer"" tr
        WHERE contract_address =  CONCAT('\x', substring('{{contract address}}' from 3))::bytea -- Token address
        
        UNION ALL 
        
        SELECT date_trunc('hour', evt_block_time) AS DAY,
            ""from"" AS address,
            tr.contract_address AS token_address, -value AS amount
        FROM erc20.""ERC20_evt_Transfer"" tr
        WHERE contract_address =  CONCAT('\x', substring('{{contract address}}' from 3))::bytea -- Token address
    ) t
    GROUP BY 1, 2, 3
),
balances_with_gap_days AS ( 
    SELECT 
        t.day,
        address,
        SUM(amount) OVER (PARTITION BY address ORDER BY t.day) AS balance,
        lead(DAY, 1, now()) OVER (PARTITION BY address ORDER BY t.day) AS next_day
    FROM transfers t 
),
days AS ( 
    SELECT generate_series('{{start_date}}'::TIMESTAMP, date_trunc('hour', NOW()), '1 hour') AS DAY
),
balance_all_days AS ( 
    
    SELECT 
        d.day,
        address,
        SUM(balance/{{decimals}}) AS balance
    FROM balances_with_gap_days b
    INNER JOIN days d ON b.day <= d.day
    AND d.day < b.next_day
    GROUP BY 1, 2
    ORDER BY 1, 2 
),

Hodler_info as (

    SELECT 
        b.day AS stat_date,
        COUNT(address) AS Total_Holder,
        COUNT(address) - lag(COUNT(address)) OVER (ORDER BY b.day) AS Daily_Holder_Growth
    FROM balance_all_days b
    WHERE balance > 0
    GROUP BY 1
    ORDER BY stat_date 
)

select 
    (stat_date + '8 hour'::interval) as stat_date
    -- ,Total_Holder
    ,Daily_Holder_Growth
from Hodler_info
order by
    (stat_date + '8 hour'::interval)"
261169,【0xBi】Total Holder  by Day with Parameter,,"[{""id"": 491164, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-11-25T05:15:52.759349+00:00"", ""__typename"": ""visualizations""}, {""id"": 491304, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""columnMapping"": {"""": ""y"", ""day"": ""x"", ""\u65e5\u671f"": ""x"", ""stat_date"": ""x"", ""total_holder"": ""y"", ""\u7d2f\u8ba1hodler\u6570"": ""y"", ""\u7d2f\u8ba1holder\u6570"": ""y"", ""total_address_cnt"": ""y"", ""\u65e5\u65b0\u589eholder\u6570"": ""y""}, ""seriesOptions"": {""total_holder"": {""type"": ""column"", ""yAxis"": 0, ""zIndex"": 0}, ""today_holder_growth"": {""type"": ""column"", ""yAxis"": 1, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2021-11-25T06:27:34.041915+00:00"", ""__typename"": ""visualizations""}]","WITH transfers AS (
    SELECT 
        DAY,
        address,
        token_address,
        sum(amount) AS amount 
    FROM
    ( 
        SELECT date_trunc('hour', evt_block_time) AS DAY,
            ""to"" AS address,
            tr.contract_address AS token_address,
            value AS amount
        FROM erc20.""ERC20_evt_Transfer"" tr
        WHERE contract_address =  CONCAT('\x', substring('{{contract address}}' from 3))::bytea -- Token address
        
        UNION ALL 
        
        SELECT date_trunc('hour', evt_block_time) AS DAY,
            ""from"" AS address,
            tr.contract_address AS token_address, -value AS amount
        FROM erc20.""ERC20_evt_Transfer"" tr
        WHERE contract_address =  CONCAT('\x', substring('{{contract address}}' from 3))::bytea -- Token address
    ) t
    GROUP BY 1, 2, 3
),
balances_with_gap_days AS ( 
    SELECT 
        t.day,
        address,
        SUM(amount) OVER (PARTITION BY address ORDER BY t.day) AS balance,
        lead(DAY, 1, now()) OVER (PARTITION BY address ORDER BY t.day) AS next_day
    FROM transfers t 
),
days AS ( 
    SELECT generate_series('{{start_date}}'::TIMESTAMP, date_trunc('hour', NOW()), '1 hour') AS DAY
),
balance_all_days AS ( 
    
    SELECT d.day,
        address,
        SUM(balance/{{decimals}}) AS balance
    FROM balances_with_gap_days b
    INNER JOIN days d ON b.day <= d.day
    AND d.day < b.next_day
    GROUP BY 1, 2
    ORDER BY 1, 2 
),

Hodler_info as (

    SELECT 
        b.day AS stat_date,
        COUNT(address) AS Total_Holder,
        COUNT(address) - lag(COUNT(address)) OVER (ORDER BY b.day) AS Today_Holder_Growth
    FROM balance_all_days b
    WHERE balance > 0
    GROUP BY 1
    ORDER BY stat_date 
)

select 
    (stat_date + '8 hour'::interval) as stat_date
    ,Total_Holder
    -- ,Today_Holder_Growth
from Hodler_info
order by
    (stat_date + '8 hour'::interval)"
264807,【0xBi】Whale Holder Change  with Parameter,,"[{""id"": 497743, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-11-27T16:52:40.758122+00:00"", ""__typename"": ""visualizations""}]","WITH today_info AS(
    select 
        wallet_address
        ,token_address
        ,amount_raw
        ,amount_raw / power(10,{{decimals}})  as amount 
    from erc20.""view_token_balances_latest""
    where token_address = CONCAT('\x', substring('{{contract address}}' from 3))::bytea -- Token address
    and amount_raw > 0
    order by 
        amount_raw desc
),



flow_out_info AS(

    SELECT 
        ""from"" AS address
        , -SUM(value / power(10,{{decimals}})  ) AS total_sell_amount
    FROM erc20.""ERC20_evt_Transfer""
    WHERE contract_address =  CONCAT('\x', substring('{{contract address}}' from 3))::bytea -- Token address
    and  ""from""   in  
    (
            select
                wallet_address
            from 
            (
                select 
                    wallet_address
                    ,amount_raw
                from erc20.""view_token_balances_daily""
                where token_address = CONCAT('\x', substring('{{contract address}}' from 3))::bytea -- Token address
                and amount_raw > 0
                and day = date_trunc('day', now())
                group by 1,2
                order by 2 desc
                limit 100
            ) a 
    )
    GROUP BY 1
),



flow_in_info AS(

    SELECT 
        ""to"" AS address
        , SUM(value/ power(10,{{decimals}}) ) AS total_buy_amount
    FROM erc20.""ERC20_evt_Transfer""
    WHERE contract_address =  CONCAT('\x', substring('{{contract address}}' from 3))::bytea -- Token address
    and 
    ""to"" in 
    (
            select
                wallet_address
            from 
            (
                select 
                    wallet_address
                    ,amount_raw
                from erc20.""view_token_balances_daily""
                where token_address = CONCAT('\x', substring('{{contract address}}' from 3))::bytea -- Token address
                and amount_raw > 0
                and day = date_trunc('day', now())
                group by 1,2
                order by 2 desc
                limit 100
            ) a 
    )
    GROUP BY 1
),


uniswap_pool_info AS(
    SELECT 
       ""pair"" as contract_address
    FROM uniswap_v2.""Factory_evt_PairCreated"" 
    WHERE (token0  = CONCAT('\x', substring('{{contract address}}' from 3))::bytea   or token1  = CONCAT('\x', substring('{{contract address}}' from 3))::bytea  )
),


label_info AS(
        select
             CONCAT('\x', substring(address from 3))::bytea  as address
            ,cate as label
        from  dune_user_generated.pro_0xBi_address_label_dim 
        group by 1,2
),






hour_info_1_hour AS(
    select 
        wallet_address
        ,token_address
        ,amount_raw
        ,amount_raw / power(10,{{decimals}})  as amount
        ,hour
    from erc20.view_token_balances_hourly
    where token_address = CONCAT('\x', substring('{{contract address}}' from 3))::bytea -- Token address
    and amount_raw > 0
    and hour = date_trunc('hour', now()- interval '1 hour') 
    order by amount_raw desc
),




hour_info_6_hour AS(
    select 
        wallet_address
        ,token_address
        ,amount_raw
        ,amount_raw / power(10,{{decimals}})  as amount
        ,hour
    from erc20.view_token_balances_hourly
    where token_address = CONCAT('\x', substring('{{contract address}}' from 3))::bytea -- Token address
    and amount_raw > 0
    and hour = date_trunc('hour', now()- interval '6 hour') 
    order by amount_raw desc
),



yesterday_info AS(

    select 
        wallet_address
        ,token_address
        ,amount_raw
        ,amount_raw / power(10,{{decimals}})  as amount
        ,day
    from erc20.""view_token_balances_daily""
    where token_address = CONCAT('\x', substring('{{contract address}}' from 3))::bytea -- Token address
    and amount_raw > 0
    and day = date_trunc('day', now()- interval '1 day') 
    order by amount_raw desc
),

last_week_info AS(

    select 
        wallet_address
        ,token_address
        ,amount_raw
        ,amount_raw / power(10,{{decimals}})  as amount
        ,day 
    from erc20.""view_token_balances_daily""
    where token_address = CONCAT('\x', substring('{{contract address}}' from 3))::bytea -- Token address
    and amount_raw > 0
    and day = date_trunc('day', now()- interval '7 days') 
    order by amount_raw desc
),


last_month_info AS(

    select 
        wallet_address
        ,token_address
        ,amount_raw
        ,amount_raw / power(10,{{decimals}})  as amount
        ,day from erc20.""view_token_balances_daily""
    where token_address = CONCAT('\x', substring('{{contract address}}' from 3))::bytea -- Token address
    and amount_raw > 0
    and day = date_trunc('day', now()- interval '1 month') 
    order by amount_raw desc
),

early_holder as (
    select
        buy_wallet_address
    from 
    (
        SELECT 
            evt_block_time
            ,""to"" as buy_wallet_address
            ,row_number( ) over(order by evt_block_time)  as num_rank
            ,*
        FROM erc20.""ERC20_evt_Transfer""
        WHERE contract_address = CONCAT('\x', substring('{{contract address}}' from 3))::bytea -- Token address
    ) a 
    where num_rank <=100
    group by 1
)



select
    (now()+ '8 hour'::interval) as data_current_time
  ,replace(cast(wallet_address as varchar),'\','0') as wallet_address
  ,标签
  ,today_info_amount as Today_total_hold_amount
  ,total_buy_amount
  ,total_sell_amount
  ,(-total_sell_amount / total_buy_amount) as sell_rate
--   ,case when hour_info_1_hour_amount =0 then 99999999 else today_info_amount  / hour_info_1_hour_amount -1 end as Δ_prev_1h
  ,case when hour_info_6_hour_amount =0 then 99999999 else today_info_amount  / hour_info_6_hour_amount -1 end as Δ_prev_6h
  ,case when yesterday_info_amount =0 then 99999999 else today_info_amount  / yesterday_info_amount -1 end as Δ_prev_1d
  ,case when last_week_info_amount =0 then 99999999 else today_info_amount  / last_week_info_amount -1 end as Δ_prev_1week
  ,case when last_month_info_amount =0 then 99999999 else today_info_amount  / last_month_info_amount -1 end as Δ_prev_1month
from 
(
    select
        today_info.wallet_address as wallet_address
        ,today_info.amount as today_info_amount
        ,hour_info_1_hour.amount as hour_info_1_hour_amount
        ,hour_info_6_hour.amount as hour_info_6_hour_amount
        ,yesterday_info.amount as yesterday_info_amount
        ,last_week_info.amount as last_week_info_amount
        ,last_month_info.amount as last_month_info_amount
        ,case 
            when   uniswap_pool_info.contract_address  is not null then 'Uniswap池子'
            when label_info.address is not null then label 
            else '' 
        end  as 标签
        ,total_sell_amount
        ,total_buy_amount
    from  
    (
        SELECT 
          wallet_address
          ,amount
        FROM today_info
        ORDER BY amount desc
        LIMIT 100
    )today_info
    left join 
    (
         SELECT 
          wallet_address
          ,amount
        FROM hour_info_1_hour
    )hour_info_1_hour
    on today_info.wallet_address = hour_info_1_hour.wallet_address
    left join 
    (
         SELECT 
          wallet_address
          ,amount
        FROM hour_info_6_hour
    )hour_info_6_hour
    on today_info.wallet_address = hour_info_6_hour.wallet_address
    left join 
    (
         SELECT 
          wallet_address
          ,amount
        FROM yesterday_info
    )yesterday_info
    on today_info.wallet_address = yesterday_info.wallet_address
    left join 
    (
         SELECT 
          wallet_address
          ,amount
        FROM last_week_info
    )last_week_info
    on today_info.wallet_address = last_week_info.wallet_address
    left join 
    (
         SELECT 
          wallet_address
          ,amount
        FROM last_week_info
    )last_month_info
    on today_info.wallet_address = last_month_info.wallet_address
    left outer join 
    (
       select 
            address 
            ,label
       from  label_info
    )label_info
    on label_info.address = today_info.wallet_address
    left outer join 
    (
       select 
            contract_address 
       from  uniswap_pool_info
    )uniswap_pool_info
    on uniswap_pool_info.contract_address = today_info.wallet_address 
    left outer join 
    (
        select
            address
            ,total_sell_amount
        from flow_out_info
    )flow_out_info
    on flow_out_info.address = today_info.wallet_address 
    left outer join 
    (
        select
            address
            ,total_buy_amount
        from flow_in_info
    )flow_in_info
    on flow_in_info.address = today_info.wallet_address 
) a 
ORDER BY today_info_amount desc"
240004,【0xBi】ETH Flow From  The Ethereum Foundation Address_Trend,,"[{""id"": 449016, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-11-12T15:31:03.662506+00:00"", ""__typename"": ""visualizations""}, {""id"": 449018, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""columnMapping"": {""stat_date"": ""x"", ""eth_out_value"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2021-11-12T15:31:39.908051+00:00"", ""__typename"": ""visualizations""}]","select
    stat_date
    ,sum(eth_out_value) as eth_out_value
from 
(
    select
        date_trunc('day', ""block_time"") AS stat_date
        ,value / 1000000000000000000 as eth_out_value
    from Ethereum.Traces
    where  ""from""  in  ('\xde0b295669a9fd93d5f28d9ec85e40f4cb697bae')
    and ""block_time""  > '2017-01-01'
) a 
group by
    stat_date
order by
    stat_date"
240007,【0xBi】ETH Flow From The Ethereum Foundation Address_Detail,,"[{""id"": 449022, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-11-12T15:35:15.460064+00:00"", ""__typename"": ""visualizations""}, {""id"": 449128, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2021-11-12T16:08:05.586132+00:00"", ""__typename"": ""visualizations""}]","select
    detail_info.stat_date as 日期
    ,block_time as 时间
    ,replace(cast(tx_hash as varchar),'\','0') as tx_hash
    ,replace(cast(""to"" as varchar),'\','0') as 转出目标地址
    ,ETH_flow_Out_Amount as 基金会地址ETH转出金额 
from 
(
    select
        date_trunc('day', ""block_time"") AS stat_date
        ,*
        ,value / 1000000000000000000 as ETH_flow_Out_Amount
    from Ethereum.Traces
    where  ""from""  in  ('\xde0b295669a9fd93d5f28d9ec85e40f4cb697bae')
    and ""block_time""  > '2017-01-01'
    and success is true
)detail_info
join 
(
    select
        stat_date
        ,sum(eth_out_value) as eth_out_value
    from 
    (
        select
            date_trunc('day', ""block_time"") AS stat_date
            ,value / 1000000000000000000 as eth_out_value
        from Ethereum.Traces
        where  ""from""  in  ('\xde0b295669a9fd93d5f28d9ec85e40f4cb697bae')
        and ""block_time""  > '2017-01-01'
    ) a 
    group by
        stat_date
    having sum(eth_out_value) >=1000
) target_info
on target_info.stat_date = detail_info.stat_date
order by
    时间 desc 
"
636441,0x NFT Market Sales by Token,,"[{""id"": 1185948, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-04-25T10:57:01.978521+00:00"", ""__typename"": ""visualizations""}, {""id"": 1185952, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""$ Volume""}, ""tickFormat"": """"}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""numberFormat"": ""$1,000"", ""columnMapping"": {""day"": ""x"", ""usd"": ""y"", ""symbol"": ""series""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-04-25T10:57:44.809203+00:00"", ""__typename"": ""visualizations""}]","with total_table as (select 
    evt_block_time,
    maker, 
    taker,
    matcher,
    ""erc721Token"" as nft_address, 
    ""erc721TokenId"" as nft_id,
    'erc721' as label, 
    case when ""erc20Token""='\xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee' then '\xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2'  else ""erc20Token"" end as price_label ,
    ""erc20Token"",
    ""erc20TokenAmount""
   -- *
    from zeroex.""ExchangeProxy_evt_ERC721OrderFilled""
    union all 
    select  
    evt_block_time,
    maker, 
    taker,
    matcher,
    ""erc1155Token"" as nft_address,
    ""erc1155TokenId"" as nft_id,
    'erc1155' as label, 
    case when ""erc20Token""='\xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee' then '\xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2' else ""erc20Token"" end as price_label ,
    ""erc20Token"",
    ""erc20FillAmount"" as  ""erc20TokenAmount""
    from zeroex.""ExchangeProxy_evt_ERC1155OrderFilled""
    ), 
    
total_table_join as (
    select 
    t1.*, 
    case when  ""erc20Token""='\xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee' then 'ETH' else t2.symbol end as symbol, 
    t2.price*(t1.""erc20TokenAmount""/10^t2.decimals) as USD, 
    (t1.""erc20TokenAmount""/10^t2.decimals) as native, 
    t3.name
    from total_table as t1
    left join prices.""usd"" as t2 on date_trunc('minute',t1.evt_block_time)=t2.minute and t1.price_label=t2.contract_address
    left join nft.""tokens"" as t3 on nft_address=t3.contract_address

)

select date_trunc('week', evt_block_time) as day, symbol, sum(native) ,sum(usd) as usd 
from total_table_join 
group by day, symbol
"
636454,0x NFT Market Sales by Project,,"[{""id"": 1185982, ""type"": ""table"", ""name"": ""Query results"", ""options"": {""columns"": [{""name"": ""from"", ""title"": ""Seller""}, {""name"": ""to"", ""title"": ""Buyer""}, {""name"": ""id"", ""title"": ""Token ID""}, {""name"": ""nft_address"", ""title"": ""NFT address""}, {""name"": ""eth"", ""title"": ""ETH""}, {""name"": ""name"", ""title"": ""Project Name""}]}, ""created_at"": ""2022-04-25T11:03:33.164779+00:00"", ""__typename"": ""visualizations""}, {""id"": 1185983, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""from"", ""title"": ""From""}, {""name"": ""to"", ""title"": ""To""}, {""name"": ""id"", ""title"": ""TokenID""}, {""name"": ""nft_address"", ""title"": ""NFT Address""}, {""name"": ""eth"", ""title"": ""ETH"", ""numberFormat"": ""1,000.00""}, {""name"": ""name"", ""title"": ""Project Name""}, {""name"": ""evt_block_time"", ""title"": ""Time""}, {""name"": ""nft_id"", ""title"": ""ID""}, {""name"": ""usd"", ""title"": ""USD"", ""numberFormat"": ""$1,000""}, {""name"": ""native"", ""title"": ""Native"", ""numberFormat"": ""1,000""}, {""name"": ""maker"", ""title"": ""Seller""}, {""name"": ""taker"", ""title"": ""Buyer""}, {""name"": ""label"", ""title"": ""Label""}, {""name"": ""rank"", ""title"": ""Rank""}, {""name"": ""volume"", ""title"": ""$ Volume"", ""numberFormat"": ""$1,000""}, {""name"": ""txs"", ""title"": ""# Txs""}]}, ""created_at"": ""2022-04-25T11:03:33.164779+00:00"", ""__typename"": ""visualizations""}]","with total_table as (select 
    evt_block_time,
    maker, 
    taker,
    matcher,
    ""erc721Token"" as nft_address, 
    ""erc721TokenId"" as nft_id,
    'erc721' as label, 
    case when ""erc20Token""='\xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee' then '\xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2'  else ""erc20Token"" end as price_label ,
    ""erc20Token"",
    ""erc20TokenAmount""
   -- *
    from zeroex.""ExchangeProxy_evt_ERC721OrderFilled""
    union all 
    select  
    evt_block_time,
    maker, 
    taker,
    matcher,
    ""erc1155Token"" as nft_address,
    ""erc1155TokenId"" as nft_id,
    'erc1155' as label, 
    case when ""erc20Token""='\xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee' then '\xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2' else ""erc20Token"" end as price_label ,
    ""erc20Token"",
    ""erc20FillAmount"" as  ""erc20TokenAmount""
    from zeroex.""ExchangeProxy_evt_ERC1155OrderFilled""
    ), 
    
total_table_join as (
    select 
    t1.*, 
    case when  ""erc20Token""='\xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee' then 'ETH' else t2.symbol end as symbol, 
    t2.price*(t1.""erc20TokenAmount""/10^t2.decimals) as USD, 
    (t1.""erc20TokenAmount""/10^t2.decimals) as native, 
    t3.name
    from total_table as t1
    left join prices.""usd"" as t2 on date_trunc('minute',t1.evt_block_time)=t2.minute and t1.price_label=t2.contract_address
    left join nft.""tokens"" as t3 on nft_address=t3.contract_address

)

select RANK() OVER (Order BY sum(usd) DESC), name, sum(usd) as volume, count(*) as txs  from total_table_join
where name is not null
group by name
order by volume desc"
636461,0x NFT Market Sales by NFT Token,,"[{""id"": 1185993, ""type"": ""table"", ""name"": ""Query results"", ""options"": {""columns"": [{""name"": ""from"", ""title"": ""Seller""}, {""name"": ""to"", ""title"": ""Buyer""}, {""name"": ""id"", ""title"": ""Token ID""}, {""name"": ""nft_address"", ""title"": ""NFT address""}, {""name"": ""eth"", ""title"": ""ETH""}, {""name"": ""name"", ""title"": ""Project Name""}]}, ""created_at"": ""2022-04-25T11:07:52.908693+00:00"", ""__typename"": ""visualizations""}, {""id"": 1185999, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""$ Volume""}}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack"", ""percentValues"": false}, ""reverseX"": false, ""numberFormat"": ""$1,000"", ""columnMapping"": {""day"": ""x"", ""label"": ""series"", ""volume"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-04-25T11:08:49.091926+00:00"", ""__typename"": ""visualizations""}]","with total_table as (select 
    evt_block_time,
    maker, 
    taker,
    matcher,
    ""erc721Token"" as nft_address, 
    ""erc721TokenId"" as nft_id,
    'erc721' as label, 
    case when ""erc20Token""='\xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee' then '\xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2'  else ""erc20Token"" end as price_label ,
    ""erc20Token"",
    ""erc20TokenAmount""
   -- *
    from zeroex.""ExchangeProxy_evt_ERC721OrderFilled""
    union all 
    select  
    evt_block_time,
    maker, 
    taker,
    matcher,
    ""erc1155Token"" as nft_address,
    ""erc1155TokenId"" as nft_id,
    'erc1155' as label, 
    case when ""erc20Token""='\xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee' then '\xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2' else ""erc20Token"" end as price_label ,
    ""erc20Token"",
    ""erc20FillAmount"" as  ""erc20TokenAmount""
    from zeroex.""ExchangeProxy_evt_ERC1155OrderFilled""
    ), 
    
total_table_join as (
    select 
    t1.*, 
    case when  ""erc20Token""='\xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee' then 'ETH' else t2.symbol end as symbol, 
    t2.price*(t1.""erc20TokenAmount""/10^t2.decimals) as USD, 
    (t1.""erc20TokenAmount""/10^t2.decimals) as native, 
    t3.name
    from total_table as t1
    left join prices.""usd"" as t2 on date_trunc('minute',t1.evt_block_time)=t2.minute and t1.price_label=t2.contract_address
    left join nft.""tokens"" as t3 on nft_address=t3.contract_address

)

select date_trunc('week', evt_block_time) as day, label, sum(usd) as volume from total_table_join
--where name is not null
group by label, day
--order by volume desc"
622913,0x NFT Market Totals,,"[{""id"": 1162045, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-04-20T22:09:31.543697+00:00"", ""__typename"": ""visualizations""}, {""id"": 1162049, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Total transactoins"", ""counterColName"": ""count""}, ""created_at"": ""2022-04-20T22:11:11.002276+00:00"", ""__typename"": ""visualizations""}, {""id"": 1162053, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Total ETH Volume"", ""stringDecimal"": 2, ""counterColName"": ""eth""}, ""created_at"": ""2022-04-20T22:11:22.947153+00:00"", ""__typename"": ""visualizations""}, {""id"": 1162055, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Total USD volume"", ""stringPrefix"": ""$"", ""counterColName"": ""usd""}, ""created_at"": ""2022-04-20T22:11:40.284692+00:00"", ""__typename"": ""visualizations""}]","with total_table as (select 
    evt_block_time,
    maker, 
    taker,
    matcher,
    ""erc721Token"" as nft_address, 
    ""erc721TokenId"" as nft_id,
    'erc721' as label, 
    case when ""erc20Token""='\xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee' then '\xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2'  else ""erc20Token"" end as price_label ,
    ""erc20Token"",
    ""erc20TokenAmount""
   -- *
    from zeroex.""ExchangeProxy_evt_ERC721OrderFilled""
    union all 
    select  
    evt_block_time,
    maker, 
    taker,
    matcher,
    ""erc1155Token"" as nft_address,
    ""erc1155TokenId"" as nft_id,
    'erc1155' as label, 
    case when ""erc20Token""='\xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee' then '\xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2' else ""erc20Token"" end as price_label ,
    ""erc20Token"",
    ""erc20FillAmount"" as  ""erc20TokenAmount""
    from zeroex.""ExchangeProxy_evt_ERC1155OrderFilled""
    ), 
    
total_table_join as (
    select 
    t1.*, 
    case when  ""erc20Token""='\xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee' then 'ETH' else t2.symbol end as symbol, 
    t2.price*(t1.""erc20TokenAmount""/10^t2.decimals) as USD, 
    (t1.""erc20TokenAmount""/10^t2.decimals) as native, 
    t3.name
    from total_table as t1
    left join prices.""usd"" as t2 on date_trunc('minute',t1.evt_block_time)=t2.minute and t1.price_label=t2.contract_address
    left join nft.""tokens"" as t3 on nft_address=t3.contract_address

)
select --date_trunc('day', block_time) as day,
count(*), sum(case when symbol='ETH' then native end) as eth, sum(usd) as usd 
from total_table_join 
--group by day
"
622763,0x NFT Market Sales,,"[{""id"": 1161725, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-04-20T21:10:45.130263+00:00"", ""__typename"": ""visualizations""}, {""id"": 1161798, ""type"": ""chart"", ""name"": ""0x NFT Market # Transactions"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": """"}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""# Transactions""}}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""1,000"", ""columnMapping"": {""day"": ""x"", ""count"": ""y""}, ""seriesOptions"": {""count"": {""name"": ""Txs"", ""type"": ""column"", ""color"": ""#0A0A0A"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-04-20T21:23:44.481566+00:00"", ""__typename"": ""visualizations""}, {""id"": 1161801, ""type"": ""chart"", ""name"": ""0x NFT Market $ Volume"", ""options"": {""sortX"": false, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""$ Volume""}}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""$1,000.00"", ""columnMapping"": {"""": ""y"", ""day"": ""x"", ""usd"": ""y""}, ""seriesOptions"": {""usd"": {""name"": ""USD Volume"", ""type"": ""column"", ""color"": ""#0D0D0D"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-04-20T21:24:29.83878+00:00"", ""__typename"": ""visualizations""}, {""id"": 1162023, ""type"": ""chart"", ""name"": ""0x NFT Market ETH Volume"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""ETH""}, ""tickFormat"": """"}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""1,000.00"", ""columnMapping"": {""day"": ""x"", ""eth"": ""y"", ""sum"": ""y""}, ""seriesOptions"": {""eth"": {""name"": ""ETH"", ""type"": ""column"", ""color"": ""#050505"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-04-20T21:58:30.138143+00:00"", ""__typename"": ""visualizations""}]","with total_table as (select 
    evt_block_time,
    maker, 
    taker,
    matcher,
    ""erc721Token"" as nft_address, 
    ""erc721TokenId"" as nft_id,
    'erc721' as label, 
    case when ""erc20Token""='\xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee' then '\xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2'  else ""erc20Token"" end as price_label ,
    ""erc20Token"",
    ""erc20TokenAmount""  
   -- *
    from zeroex.""ExchangeProxy_evt_ERC721OrderFilled""
    union all 
    select  
    evt_block_time,
    maker, 
    taker,
    matcher,
    ""erc1155Token"" as nft_address,
    ""erc1155TokenId"" as nft_id,
    'erc1155' as label, 
    case when ""erc20Token""='\xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee' then '\xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2' else ""erc20Token"" end as price_label ,
    ""erc20Token"",
    ""erc20FillAmount"" as  ""erc20TokenAmount""
    from zeroex.""ExchangeProxy_evt_ERC1155OrderFilled""
    ), 
    
total_table_join as (
    select 
    t1.*, 
    case when  ""erc20Token""='\xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee' then 'ETH' else t2.symbol end as symbol, 
    t2.price*(t1.""erc20TokenAmount""/10^t2.decimals) as USD, 
    (t1.""erc20TokenAmount""/10^t2.decimals) as native, 
    t3.name
    from total_table as t1
    left join prices.""usd"" as t2 on date_trunc('minute',t1.evt_block_time)=t2.minute and t1.price_label=t2.contract_address
    left join nft.""tokens"" as t3 on nft_address=t3.contract_address

)

select date_trunc('week', evt_block_time) as day, count(*) ,sum(usd) as usd 
from total_table_join 
group by day
"
622939,0x NFT Market Unique Users over time,*unique buyers and sellers,"[{""id"": 1162094, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-04-20T22:28:29.469426+00:00"", ""__typename"": ""visualizations""}, {""id"": 1162107, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Unique users""}}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""columnMapping"": {""cum_from"": ""y"", ""fst_date"": ""x""}, ""seriesOptions"": {""cum_from"": {""name"": ""Unique users"", ""type"": ""area"", ""color"": ""#050505"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""area""}, ""created_at"": ""2022-04-20T22:31:46.670538+00:00"", ""__typename"": ""visualizations""}]","with total_table as (select 
    evt_block_time,
    maker, 
    taker,
    matcher,
    ""erc721Token"" as nft_address, 
    ""erc721TokenId"" as nft_id,
    'erc721' as label, 
    case when ""erc20Token""='\xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee' then '\xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2'  else ""erc20Token"" end as price_label ,
    ""erc20Token"",
    ""erc20TokenAmount""
   -- *
    from zeroex.""ExchangeProxy_evt_ERC721OrderFilled""
    union all 
    select  
    evt_block_time,
    maker, 
    taker,
    matcher,
    ""erc1155Token"" as nft_address,
    ""erc1155TokenId"" as nft_id,
    'erc1155' as label, 
    case when ""erc20Token""='\xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee' then '\xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2' else ""erc20Token"" end as price_label ,
    ""erc20Token"",
    ""erc20FillAmount"" as  ""erc20TokenAmount""
    from zeroex.""ExchangeProxy_evt_ERC1155OrderFilled""
    ), 
    
all_users as(
select evt_block_time, ""maker"" as user, 'seller' as label
from total_table 
union all 
select evt_block_time, ""taker"" as user ,'buyer' as label 
from total_table
)

select distinct fst_date, count(fst_date) over (order by fst_date ) cum_from
from (
SELECT t1.user, min(date_trunc('day',evt_block_time)) fst_date FROM 
(select * from all_users) as t1
GROUP BY  t1.user
 ) t order by fst_date asc
"
622813,0x NFT Market Sales Data,,"[{""id"": 1161838, ""type"": ""table"", ""name"": ""Query results"", ""options"": {""columns"": [{""name"": ""from"", ""title"": ""Seller""}, {""name"": ""to"", ""title"": ""Buyer""}, {""name"": ""id"", ""title"": ""Token ID""}, {""name"": ""nft_address"", ""title"": ""NFT address""}, {""name"": ""eth"", ""title"": ""ETH""}, {""name"": ""name"", ""title"": ""Project Name""}]}, ""created_at"": ""2022-04-20T21:28:36.51325+00:00"", ""__typename"": ""visualizations""}, {""id"": 1162127, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""from"", ""title"": ""From""}, {""name"": ""to"", ""title"": ""To""}, {""name"": ""id"", ""title"": ""TokenID""}, {""name"": ""nft_address"", ""title"": ""NFT Address""}, {""name"": ""eth"", ""title"": ""ETH"", ""numberFormat"": ""1,000.00""}, {""name"": ""name"", ""title"": ""Project Name""}, {""name"": ""evt_block_time"", ""title"": ""Time""}, {""name"": ""nft_id"", ""title"": ""ID""}, {""name"": ""usd"", ""title"": ""USD"", ""numberFormat"": ""$1,000""}, {""name"": ""native"", ""title"": ""Native"", ""numberFormat"": ""1,000.000""}, {""name"": ""maker"", ""title"": ""Seller""}, {""name"": ""taker"", ""title"": ""Buyer""}, {""name"": ""label"", ""title"": ""Label""}, {""name"": ""symbol"", ""title"": ""Symbol""}]}, ""created_at"": ""2022-04-20T22:37:16.054227+00:00"", ""__typename"": ""visualizations""}]","with total_table as (select 
    evt_block_time,
    maker, 
    taker,
    matcher,
    ""erc721Token"" as nft_address, 
    ""erc721TokenId"" as nft_id,
    'erc721' as label, 
    case when ""erc20Token""='\xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee' then '\xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2'  else ""erc20Token"" end as price_label ,
    ""erc20Token"",
    ""erc20TokenAmount""
   -- *
    from zeroex.""ExchangeProxy_evt_ERC721OrderFilled""
    union all 
    select  
    evt_block_time,
    maker, 
    taker,
    matcher,
    ""erc1155Token"" as nft_address,
    ""erc1155TokenId"" as nft_id,
    'erc1155' as label, 
    case when ""erc20Token""='\xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee' then '\xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2' else ""erc20Token"" end as price_label ,
    ""erc20Token"",
    ""erc20FillAmount"" as  ""erc20TokenAmount""
    from zeroex.""ExchangeProxy_evt_ERC1155OrderFilled""
    ), 
    
total_table_join as (
    select 
    t1.*, 
    case when  ""erc20Token""='\xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee' then 'ETH' else t2.symbol end as symbol, 
    t2.price*(t1.""erc20TokenAmount""/10^t2.decimals) as USD, 
    (t1.""erc20TokenAmount""/10^t2.decimals) as native, 
    t3.name
    from total_table as t1
    left join prices.""usd"" as t2 on date_trunc('minute',t1.evt_block_time)=t2.minute and t1.price_label=t2.contract_address
    left join nft.""tokens"" as t3 on nft_address=t3.contract_address

)

select evt_block_time, name, nft_address, nft_id, usd, native, symbol, label, maker, taker from total_table_join
order by evt_block_time desc"
622951,0x NFT Market Unique Sellers,,"[{""id"": 1162112, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-04-20T22:32:28.271341+00:00"", ""__typename"": ""visualizations""}, {""id"": 1162137, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Sellers"", ""counterColName"": ""count""}, ""created_at"": ""2022-04-20T22:38:39.552238+00:00"", ""__typename"": ""visualizations""}]","with total_table as (select 
    evt_block_time,
    maker, 
    taker,
    matcher,
    ""erc721Token"" as nft_address, 
    ""erc721TokenId"" as nft_id,
    'erc721' as label, 
    case when ""erc20Token""='\xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee' then '\xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2'  else ""erc20Token"" end as price_label ,
    ""erc20Token"",
    ""erc20TokenAmount""
   -- *
    from zeroex.""ExchangeProxy_evt_ERC721OrderFilled""
    union all 
    select  
    evt_block_time,
    maker, 
    taker,
    matcher,
    ""erc1155Token"" as nft_address,
    ""erc1155TokenId"" as nft_id,
    'erc1155' as label, 
    case when ""erc20Token""='\xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee' then '\xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2' else ""erc20Token"" end as price_label ,
    ""erc20Token"",
    ""erc20FillAmount"" as  ""erc20TokenAmount""
    from zeroex.""ExchangeProxy_evt_ERC1155OrderFilled""
    ), 
    
all_users as(
select evt_block_time, ""maker"" as user, 'seller' as label
from total_table 
--union all 
--select evt_block_time, ""taker"" as user ,'buyer' as label 
--from total_table
)

select count(distinct ""user"") from all_users
--group by label"
622954,0x NFT Market Unique Buyers,,"[{""id"": 1162118, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-04-20T22:35:47.812073+00:00"", ""__typename"": ""visualizations""}, {""id"": 1162136, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Buyers"", ""counterColName"": ""count""}, ""created_at"": ""2022-04-20T22:38:16.960681+00:00"", ""__typename"": ""visualizations""}]","with total_table as (select 
    evt_block_time,
    maker, 
    taker,
    matcher,
    ""erc721Token"" as nft_address, 
    ""erc721TokenId"" as nft_id,
    'erc721' as label, 
    case when ""erc20Token""='\xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee' then '\xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2'  else ""erc20Token"" end as price_label ,
    ""erc20Token"",
    ""erc20TokenAmount""
   -- *
    from zeroex.""ExchangeProxy_evt_ERC721OrderFilled""
    union all 
    select  
    evt_block_time,
    maker, 
    taker,
    matcher,
    ""erc1155Token"" as nft_address,
    ""erc1155TokenId"" as nft_id,
    'erc1155' as label, 
    case when ""erc20Token""='\xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee' then '\xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2' else ""erc20Token"" end as price_label ,
    ""erc20Token"",
    ""erc20FillAmount"" as  ""erc20TokenAmount""
    from zeroex.""ExchangeProxy_evt_ERC1155OrderFilled""
    ), 
    
all_users as(
--select evt_block_time, ""maker"" as user, 'seller' as label
--from total_table 
--union all 
select evt_block_time, ""taker"" as user ,'buyer' as label 
from total_table
)

select count(distinct ""user"") from all_users
--group by label
"
622965,0x NFT Market Total Users,*unique buyers + sellers,"[{""id"": 1162140, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Total Users"", ""counterColName"": ""count""}, ""created_at"": ""2022-04-20T22:41:15.020733+00:00"", ""__typename"": ""visualizations""}, {""id"": 1162139, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-04-20T22:41:15.020733+00:00"", ""__typename"": ""visualizations""}]","with total_table as (select 
    evt_block_time,
    maker, 
    taker,
    matcher,
    ""erc721Token"" as nft_address, 
    ""erc721TokenId"" as nft_id,
    'erc721' as label, 
    case when ""erc20Token""='\xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee' then '\xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2'  else ""erc20Token"" end as price_label ,
    ""erc20Token"",
    ""erc20TokenAmount""
   -- *
    from zeroex.""ExchangeProxy_evt_ERC721OrderFilled""
    union all 
    select  
    evt_block_time,
    maker, 
    taker,
    matcher,
    ""erc1155Token"" as nft_address,
    ""erc1155TokenId"" as nft_id,
    'erc1155' as label, 
    case when ""erc20Token""='\xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee' then '\xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2' else ""erc20Token"" end as price_label ,
    ""erc20Token"",
    ""erc20FillAmount"" as  ""erc20TokenAmount""
    from zeroex.""ExchangeProxy_evt_ERC1155OrderFilled""
    ), 
    
all_users as(
select evt_block_time, ""maker"" as user, 'seller' as label
from total_table 
union all 
select evt_block_time, ""taker"" as user ,'buyer' as label 
from total_table
)

select count(distinct ""user"") from all_users
--group by label
"
672501,0x NFT Market Approval/Revoked,,"[{""id"": 1247905, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-05-04T18:22:30.027488+00:00"", ""__typename"": ""visualizations""}, {""id"": 1248357, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""# Approval/revoked""}}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""columnMapping"": {""day"": ""x"", ""count"": ""y"", ""approval"": ""series""}, ""seriesOptions"": {""True"": {""name"": ""Approved"", ""type"": ""column"", ""color"": ""#131313"", ""yAxis"": 0, ""zIndex"": 0}, ""False"": {""name"": ""Revoked"", ""type"": ""column"", ""color"": ""#bcb6b6"", ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-05-04T19:48:37.400759+00:00"", ""__typename"": ""visualizations""}]","with approvals as (select contract_address, block_time, data from ethereum.logs
where-- tx_hash='\x9aa7a8ff3c78d1e1c06a8bd57c061986b334a7d88a444fa3287a7badbd52b403'

topic1='\x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31'
and topic3='\x000000000000000000000000def1c0ded9bec7f1a1670819833240f027b25eff'
and block_time>DATE '2022-03-01'), 

total_approvals as (
    select t1.block_time, t1.contract_address, case when right(data::text, 1)='1' then 'True' else 'False' end as approval
    --, 
   -- t2.name
    from approvals as t1
 --   left join nft.""tokens"" as t2 on t1.contract_address=t2.contract_address
) 

select date_trunc('week', block_time) as day, count(*), approval
from total_approvals
group by day, approval
"
672768,0x NFT Market Daily Users ,,"[{""id"": 1248413, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-05-04T20:07:37.842456+00:00"", ""__typename"": ""visualizations""}, {""id"": 1248418, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""# Users""}}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""columnMapping"": {""day"": ""x"", ""count"": ""y"", ""fst_date"": ""x""}, ""seriesOptions"": {""count"": {""name"": ""Users"", ""type"": ""column"", ""color"": ""#000000"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-05-04T20:09:14.174121+00:00"", ""__typename"": ""visualizations""}]","with total_table as (select 
    evt_block_time,
    maker, 
    taker,
    matcher,
    ""erc721Token"" as nft_address, 
    ""erc721TokenId"" as nft_id,
    'erc721' as label, 
    case when ""erc20Token""='\xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee' then '\xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2'  else ""erc20Token"" end as price_label ,
    ""erc20Token"",
    ""erc20TokenAmount""
   -- *
    from zeroex.""ExchangeProxy_evt_ERC721OrderFilled""
    union all 
    select  
    evt_block_time,
    maker, 
    taker,
    matcher,
    ""erc1155Token"" as nft_address,
    ""erc1155TokenId"" as nft_id,
    'erc1155' as label, 
    case when ""erc20Token""='\xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee' then '\xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2' else ""erc20Token"" end as price_label ,
    ""erc20Token"",
    ""erc20FillAmount"" as  ""erc20TokenAmount""
    from zeroex.""ExchangeProxy_evt_ERC1155OrderFilled""
    ), 
    
all_users as(
select evt_block_time, ""maker"" as user, 'seller' as label
from total_table 
union all 
select evt_block_time, ""taker"" as user ,'buyer' as label 
from total_table
)

select  count(user),  date_trunc('week', evt_block_time) as day 
from all_users
group by day
"
1071234,SudoAMM_txs/trades,,"[{""id"": 1838427, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-07-20T07:15:18.182663+00:00"", ""__typename"": ""visualizations""}, {""id"": 1838428, ""type"": ""counter"", ""name"": ""Total transactions"", ""options"": {""rowNumber"": 1, ""counterLabel"": """", ""counterColName"": ""total_transactions""}, ""created_at"": ""2022-07-20T07:15:18.182663+00:00"", ""__typename"": ""visualizations""}, {""id"": 1838429, ""type"": ""counter"", ""name"": ""Total NFTs traded"", ""options"": {""rowNumber"": 1, ""counterLabel"": """", ""counterColName"": ""total_nft_trades""}, ""created_at"": ""2022-07-20T07:15:18.182663+00:00"", ""__typename"": ""visualizations""}, {""id"": 1838848, ""type"": ""chart"", ""name"": ""Transactions"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""tickFormat"": ""0a""}, {""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""0,"", ""columnMapping"": {""day"": ""x"", ""transactions"": ""y"", ""total_transactions"": ""y""}, ""seriesOptions"": {""transactions"": {""name"": ""Daily transactions"", ""type"": ""column"", ""color"": ""#db9d8d"", ""yAxis"": 0, ""zIndex"": 0}, ""total_transactions"": {""name"": ""Total transactions (RHS)"", ""type"": ""area"", ""color"": ""#c9b9d5"", ""yAxis"": 1, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column"", ""numberFormatRightYAxisSeries"": ""0,""}, ""created_at"": ""2022-07-20T08:04:03.499992+00:00"", ""__typename"": ""visualizations""}, {""id"": 1838850, ""type"": ""chart"", ""name"": ""NFTs traded"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""0,"", ""columnMapping"": {""day"": ""x"", ""nft_trades"": ""y"", ""total_nft_trades"": ""y""}, ""seriesOptions"": {""nft_trades"": {""name"": ""Daily NFTs traded"", ""type"": ""column"", ""color"": ""#db9d8d"", ""yAxis"": 0, ""zIndex"": 0}, ""total_nft_trades"": {""name"": ""Total NFTs traded (RHS)"", ""type"": ""area"", ""color"": ""#d3b9d3"", ""yAxis"": 1, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-07-20T08:04:43.353729+00:00"", ""__typename"": ""visualizations""}]","WITH
all_transactions as (
    SELECT 
    date_trunc('day', block_time) as day
    , hash
    , count(nft.""tokenId"") as nft_trades 
    FROM ethereum.transactions tx
    left join erc721.""ERC721_evt_Transfer"" nft on tx.hash = nft.evt_tx_hash
    where success and tx.""to"" = '\x2b2e8cda09bba9660dca5cb6233787738ad68329' --sudoAMM router
    group by tx.hash, block_time
)

, days AS (
    SELECT generate_series('2022-05-25'::timestamp, date_trunc('day', NOW()), '1 day') AS day -- Generate all days since the first contract
)

, aggregated_transactions as (
select 
 d.day
, coalesce(count(hash),0) as transactions
, coalesce(sum(nft_trades),0) as nft_trades
from days d
left join all_transactions tx ON d.day = tx.day
group by d.day
)

select
day, transactions, nft_trades
, sum(transactions) over (order by day) as total_transactions
, sum(nft_trades) over (order by day) as total_nft_trades
from aggregated_transactions
where day > '2022-07-01'
order by 1 desc

"
1066161,SudoSwap_pairsCount,,"[{""id"": 1830941, ""type"": ""table"", ""name"": ""Recent pairs created"", ""options"": {""columns"": [{""name"": ""time"", ""title"": ""Block time""}, {""name"": ""project"", ""title"": ""Project""}, {""name"": ""_initialNFTIDs"", ""title"": ""NFTIDs""}, {""name"": ""price"", ""title"": ""Initial selling price"", ""numberFormat"": ""$0,.0000""}, {""name"": ""curve"", ""title"": ""Curve type""}, {""name"": ""pool"", ""title"": ""Pool type""}]}, ""created_at"": ""2022-07-19T09:10:23.851045+00:00"", ""__typename"": ""visualizations""}, {""id"": 1839019, ""type"": ""chart"", ""name"": ""Pairs created by curve type"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""pair""}}], ""legend"": {""enabled"": false}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""columnMapping"": {""exp"": ""y"", ""lin"": ""y"", ""time"": ""x"", ""total"": ""y""}, ""seriesOptions"": {""exp"": {""name"": ""Exponential curve"", ""type"": ""column"", ""color"": ""#db9d8d"", ""yAxis"": 0, ""zIndex"": 1}, ""lin"": {""name"": ""Linear curve"", ""type"": ""column"", ""color"": ""#d3b9d3"", ""yAxis"": 0, ""zIndex"": 0}, ""total"": {""name"": ""Total pairs"", ""type"": ""scatter"", ""color"": ""#1a2738"", ""yAxis"": 0, ""zIndex"": 2}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-07-20T08:36:27.731734+00:00"", ""__typename"": ""visualizations""}, {""id"": 1839333, ""type"": ""chart"", ""name"": ""Pairs created by pool type"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""pair""}}], ""legend"": {""enabled"": false}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""numberFormat"": ""0,"", ""columnMapping"": {""nft"": ""y"", ""time"": ""x"", ""token"": ""y"", ""total"": ""y"", ""trade"": ""y""}, ""seriesOptions"": {""nft"": {""name"": ""NFT"", ""type"": ""column"", ""color"": ""#db9d8d"", ""yAxis"": 0, ""zIndex"": 1}, ""token"": {""name"": ""Token"", ""type"": ""column"", ""color"": ""#d3b9d3"", ""yAxis"": 0, ""zIndex"": 0}, ""total"": {""name"": ""Total pairs"", ""type"": ""scatter"", ""color"": ""#1a2738"", ""yAxis"": 0, ""zIndex"": 3}, ""trade"": {""name"": ""Trade"", ""type"": ""column"", ""color"": ""#cbac56"", ""yAxis"": 0, ""zIndex"": 2}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-07-20T09:19:52.320044+00:00"", ""__typename"": ""visualizations""}, {""id"": 1839348, ""type"": ""counter"", ""name"": ""Pairs created"", ""options"": {""rowNumber"": 1, ""counterLabel"": ""pairs created"", ""counterColName"": ""cumulative""}, ""created_at"": ""2022-07-20T09:22:29.363469+00:00"", ""__typename"": ""visualizations""}]","WITH raw as (
    SELECT date_trunc('day',""call_block_time"") as time,
        case when r.""project_name"" is null then ""_nft""::text
        else r.""project_name""
        end as project, 
        -- ""_initialNFTIDs"", ""_spotPrice""/1e18 as price,
        case ""_bondingCurve""
        when '\x5b6ac51d9b1cede0068a1b26533cace807f883ee' then 'linear curve'
        when '\x432f962d8209781da23fb37b6b59ee15de7d9841' then 'exponential curve'
        end as curve,
        case ""_poolType""
        when 0 then 'Token'
        when 1 then 'NFT'
        when 2 then 'Trade'
        end as pool,
        count(*) as amount
    FROM sudo_amm.""LSSVMPairFactory_call_createPairETH"" s
    LEFT JOIN dune_user_generated.""rantumnft02"" r
    ON s.""_nft"" = r.""contract_address""
    WHERE s.""call_success"" is true
    GROUP BY 1,2,3,4
    ORDER BY 1 DESC
), total as (
SELECT count(distinct ""call_tx_hash"") as total, date_trunc('day',""call_block_time"") as time
FROM sudo_amm.""LSSVMPairFactory_call_createPairETH""
WHERE ""call_success"" is true
GROUP BY 2
)
SELECT l.*, e.exp, t.token, n.nft, r.trade, a.total, sum(a.total) over(order by a.time) as cumulative FROM
(SELECT time, sum(amount) as lin FROM raw WHERE curve = 'linear curve'
GROUP BY 1) as l
LEFT JOIN
(SELECT time, sum(amount) as exp FROM raw WHERE curve = 'exponential curve'
GROUP BY 1) as e
ON l.time = e.time
LEFT JOIN
(SELECT time, sum(amount) as token FROM raw WHERE pool = 'Token'
GROUP BY 1) as t
ON l.time = t.time
LEFT JOIN
(SELECT time, sum(amount) as nft FROM raw WHERE pool = 'NFT'
GROUP BY 1) as n
ON l.time = n.time
LEFT JOIN
(SELECT time, sum(amount) as trade FROM raw WHERE pool = 'Trade'
GROUP BY 1) as r
ON l.time = r.time
LEFT JOIN total a ON l.time = a.time
ORDER BY l.time DESC"
1071169,SudoAMM_volume,,"[{""id"": 1838355, ""type"": ""counter"", ""name"": ""Total volume in ETH"", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Total Volume"", ""stringSuffix"": "" ETH"", ""stringDecimal"": 2, ""counterColName"": ""total_amount_eth""}, ""created_at"": ""2022-07-20T07:05:29.582809+00:00"", ""__typename"": ""visualizations""}, {""id"": 1848145, ""type"": ""chart"", ""name"": ""Volume traded"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""USD""}, ""tickFormat"": ""$0a""}, {""type"": ""linear"", ""tickFormat"": ""%""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""$0,"", ""columnMapping"": {""day"": ""x"", ""share"": ""y"", ""amount_usd"": ""y"", ""total_amount_usd"": ""y""}, ""seriesOptions"": {""share"": {""name"": ""NFT market share (RHS)"", ""type"": ""line"", ""color"": ""#1A2738"", ""yAxis"": 1, ""zIndex"": 2}, ""amount_usd"": {""name"": ""Daily volume"", ""type"": ""column"", ""color"": ""#DB9D8D"", ""yAxis"": 0, ""zIndex"": 0}, ""total_amount_usd"": {""name"": ""Total volume"", ""type"": ""area"", ""color"": ""#D3B9D3"", ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column"", ""numberFormatRightYAxisSeries"": ""0.00%""}, ""created_at"": ""2022-07-21T05:48:40.599416+00:00"", ""__typename"": ""visualizations""}, {""id"": 1838356, ""type"": ""counter"", ""name"": ""Total volume in USD"", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Total volume"", ""stringPrefix"": ""$"", ""counterColName"": ""total_amount_usd""}, ""created_at"": ""2022-07-20T07:05:29.582809+00:00"", ""__typename"": ""visualizations""}, {""id"": 1838357, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-07-20T07:05:29.582809+00:00"", ""__typename"": ""visualizations""}]","-- most easy way to calculate the total volume is actually to use the fees and reverse engineer the volume with the fee multiplier..
-- THIS ONLY WORKS WHEN FEE IS SET TO SOMETHING NON ZERO!!!

WITH 
fee_multiplier_updates as (
    select ""newMultiplier"" as fee_multiplier, evt_block_number, evt_index 
    , lead(evt_block_number) over (order by evt_block_number asc, evt_index asc) as next_change_block_number
    , lead(evt_index) over (order by evt_block_number asc, evt_index asc) as next_change_index
    from sudo_amm.""LSSVMPairFactory_evt_ProtocolFeeMultiplierUpdate""
)

, fees AS (
select day
, sum(amount_eth/fee_factor) as amount_eth
, sum(amount_usd/fee_factor) as amount_usd
from(
    select 
    date_trunc('day',block_time) as day
    , value/1e18 as amount_eth
    , value/1e18 * usd.price as  amount_usd
    , coalesce(f.fee_multiplier/1e18,0) as fee_factor
    from (select * from ethereum.traces t where success and ""to"" = '\xb16c1342E617A5B6E4b631EB114483FDB289c0A4' and call_type = 'call') t
    inner join (select * from sudo_amm.""LSSVMPairFactory_call_createPairETH"" where call_success) p
    ON t.""from"" = p.""output_pair""
    left join (select * from prices.usd where contract_address = '\xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2' and minute > '2022-04-23') usd
    ON usd.minute = date_trunc('min',block_time)
    left join fee_multiplier_updates f
    ON t.block_number >= coalesce(f.evt_block_number, 0)
    and t.block_number < coalesce(f.next_change_block_number, 1e18)
    ) foo
    where fee_factor > 0
    group by day
)

, days as (
    select generate_series('2022-04-23', date_trunc('day',now()), '1 day') as day
), market as (
    select date_trunc('day', ""block_time"") as day, sum(""usd_amount"") as amount
    from nft.""trades""
    group by 1
), total as (
    select 
        d.day
        , coalesce(amount_eth,0) as amount_eth
        , coalesce(amount_usd,0) as amount_usd
        , sum(coalesce(amount_eth,0)) over (order by d.day) as total_amount_eth
        , sum(coalesce(amount_usd,0)) over (order by d.day) as total_amount_usd
        , coalesce(amount_usd,0)/m.amount as share
    from days d
    left join fees f
    on d.day = f.day
    left join market m
    on d.day = m.day
    order by d.day desc
)
SELECT * FROM total WHERE day > '2022-07-01'"
1071286,SudoAMM_users,,"[{""id"": 1838525, ""type"": ""counter"", ""name"": ""total users"", ""options"": {""rowNumber"": 1, ""counterLabel"": ""unique users"", ""counterColName"": ""total_users""}, ""created_at"": ""2022-07-20T07:25:26.448951+00:00"", ""__typename"": ""visualizations""}, {""id"": 1838796, ""type"": ""chart"", ""name"": ""Total users"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Users""}, ""tickFormat"": ""0,""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""0,"", ""columnMapping"": {""day"": ""x"", ""total_users"": ""y""}, ""seriesOptions"": {""total_users"": {""name"": ""Total unique users"", ""type"": ""column"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-07-20T08:00:19.767453+00:00"", ""__typename"": ""visualizations""}, {""id"": 1838523, ""type"": ""table"", ""name"": ""Query results"", ""options"": {""columns"": [{""name"": ""per"", ""numberFormat"": """"}]}, ""created_at"": ""2022-07-20T07:25:26.448951+00:00"", ""__typename"": ""visualizations""}, {""id"": 1838769, ""type"": ""chart"", ""name"": ""Daily users"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Users""}, ""tickFormat"": """"}, {""type"": ""linear"", ""title"": {""text"": """"}, ""tickFormat"": ""%""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""0,"", ""columnMapping"": {"""": ""y"", ""day"": ""x"", ""per"": ""y"", ""total_users"": ""y"", ""unique_users"": ""y""}, ""seriesOptions"": {""per"": {""name"": ""New users percentage"", ""type"": ""line"", ""color"": ""#1a2738"", ""yAxis"": 1, ""zIndex"": 2}, ""total_users"": {""name"": ""Total users"", ""type"": ""area"", ""color"": ""#d3b9d3"", ""yAxis"": 0, ""zIndex"": 1}, ""unique_users"": {""name"": ""Daily unique users"", ""type"": ""column"", ""color"": ""#db9d8d"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column"", ""numberFormatRightYAxisSeries"": ""0.00%""}, ""created_at"": ""2022-07-20T07:56:44.67312+00:00"", ""__typename"": ""visualizations""}]","WITH
all_transactions as (
SELECT block_time, ""from"" as user_address, hash FROM ethereum.transactions
where success and ""to"" = '\x2b2e8cda09bba9660dca5cb6233787738ad68329' --sudoAMM router
)

, daily_new_user_addresss as (
SELECT join_date, count(*) as new_user_addresss
FROM (
    SELECT user_address, date_trunc('day', min(block_time)) as join_date FROM all_transactions GROUP BY user_address
    ) foo
GROUP BY join_date
)

, daily_unique_user_addresss as (
    SELECT day, count(distinct user_address) as unique_user_addresss
FROM (
    SELECT user_address, date_trunc('day',block_time) as day FROM all_transactions
    ) foo
GROUP BY day
)

, days AS (
    SELECT generate_series('2022-05-25'::timestamp, date_trunc('day', NOW()), '1 day') AS day -- Generate all days since the first contract
    )
    
, data as (
SELECT d.day as day
, coalesce(new_user_addresss, 0) as new_users
, coalesce(unique_user_addresss, 0) as unique_users
, sum(coalesce(new_user_addresss,0)) over (order by d.day) as total_users
FROM days d
LEFT JOIN daily_new_user_addresss n ON d.day = n.join_date
LEFT JOIN daily_unique_user_addresss u ON d.day = u.day
)
select *,
case unique_users
when 0 then null
else (cast(new_users as decimal)/cast (unique_users as decimal)) end as per 
from data
where day > '2022-07-01'
order by day desc
"
1071055,Sudoswap_volume,,"[{""id"": 1848201, ""type"": ""chart"", ""name"": ""Trade volume/ market share"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""USD""}, ""tickFormat"": ""$0a""}, {""type"": ""linear"", ""tickFormat"": ""%""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""$0,"", ""columnMapping"": {""day"": ""x"", ""share"": ""y"", ""USD Volume"": ""y""}, ""seriesOptions"": {""share"": {""name"": ""NFT market share (RHS)"", ""type"": ""line"", ""color"": ""#1A2738"", ""yAxis"": 1, ""zIndex"": 1}, ""USD Volume"": {""name"": ""Daily volume"", ""type"": ""column"", ""color"": ""#DB9D8D"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column"", ""numberFormatRightYAxisSeries"": ""0.00%""}, ""created_at"": ""2022-07-21T05:57:17.21689+00:00"", ""__typename"": ""visualizations""}, {""id"": 1838194, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-07-20T06:47:32.804267+00:00"", ""__typename"": ""visualizations""}]","with weth_trades as (select date_trunc('day', t.evt_block_time) as day, sum(e.value/1e18) as ""WETH Volume""
--sum(sum(e.value/1e18)) OVER (ORDER BY e.evt_block_time asc ROWS BETWEEN 6 PRECEDING AND 0 FOLLOWING)
from zeroex_v2.""Exchange2.1_evt_Fill"" t
join erc20.""ERC20_evt_Transfer"" e 
on e.evt_tx_hash = t.evt_tx_hash
where ""feeRecipientAddress"" = '\x4e2f98c96e2d595a83AFa35888C4af58Ac343E44' --0xmons multisig
and e.contract_address = '\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' --WETH
group by day
),

stable_trades as (
select e.evt_block_time as day,
e.evt_tx_hash,
(CASE WHEN e.contract_address = '\xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48' then (e.value/1e6)/price --USDC
WHEN  e.contract_address = '\xdac17f958d2ee523a2206206994597c13d831ec7'then (e.value/1e6)/price --USDT
WHEN  e.contract_address = '\x6b175474e89094c44da98b954eedeac495271d0f'then (e.value/1e18)/price --DAI
WHEN  e.contract_address = '\x853d955acef822db058eb8505911ed77f175b99e'then (e.value/1e18)/price --FRAX
END) as value
from zeroex_v2.""Exchange2.1_evt_Fill"" t
join erc20.""ERC20_evt_Transfer"" e
join prices.usd on evt_block_time = minute
on e.evt_tx_hash = t.evt_tx_hash
where ""feeRecipientAddress"" = '\x4e2f98c96e2d595a83AFa35888C4af58Ac343E44'
and SYMBOL = 'WETH'
and e.contract_address in ( '\x6b175474e89094c44da98b954eedeac495271d0f', '\xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48', '\xdac17f958d2ee523a2206206994597c13d831ec7', '\x853d955acef822db058eb8505911ed77f175b99e')
order by day asc
),

stable_weth as (
select date_trunc('day', day) as day, sum(value) as ""WETH volume"" from stable_trades
group by day
),

merge as (
select * from weth_trades
union
select * from stable_weth),

grouped as (
select day, sum(""WETH Volume"") as ""WETH Volume"" from merge
group by day
), 
total as (
select date_trunc('day', ""block_time"") as day, sum(""usd_amount"") as amount
from nft.""trades""
group by 1
)
select g.day, ""WETH Volume"" * price as ""USD Volume"", ""WETH Volume"" * price/t.amount as share
from grouped g
left join total t 
on g.day = t.day
left join prices.usd p
on g.day = p.minute
where symbol = 'WETH'
"
1071002,SudoSwap_swapsCount,,"[{""id"": 1838119, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""tickFormat"": ""0a""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""0,"", ""columnMapping"": {""day"": ""x"", ""time"": ""x"", ""Swaps"": ""y"", ""swaps"": ""y"", ""Trades"": ""y"", ""cumulative"": ""y""}, ""seriesOptions"": {""swaps"": {""name"": ""Daily swaps"", ""type"": ""column"", ""color"": ""#db9d8d"", ""yAxis"": 0, ""zIndex"": 1}, ""cumulative"": {""name"": ""Total swaps (RHS)"", ""type"": ""area"", ""color"": ""#d3b9d3"", ""yAxis"": 1, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column"", ""numberFormatRightYAxisSeries"": ""0,""}, ""created_at"": ""2022-07-20T06:32:18.67109+00:00"", ""__typename"": ""visualizations""}, {""id"": 1838120, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-07-20T06:32:18.67109+00:00"", ""__typename"": ""visualizations""}, {""id"": 1838160, ""type"": ""counter"", ""name"": ""Counter"", ""options"": {""rowNumber"": 1, ""counterLabel"": ""swaps"", ""counterColName"": ""cumulative""}, ""created_at"": ""2022-07-20T06:39:43.211541+00:00"", ""__typename"": ""visualizations""}]","SELECT date_trunc('day', evt_block_time) as time ,
    count(distinct(evt_tx_hash)) as swaps,
    sum(count(distinct(evt_tx_hash))) OVER (ORDER BY date_trunc('day', evt_block_time)) as cumulative
FROM zeroex_v2.""Exchange2.1_evt_Fill"" t
WHERE ""feeRecipientAddress"" = '\x4e2f98c96e2d595a83AFa35888C4af58Ac343E44' --0xmons multisig
GROUP BY 1
ORDER BY 1 DESC"
16928,Aave V2 Collateral by Asset,,"[{""id"": 34130, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2021-01-10T13:01:43.873848+00:00"", ""__typename"": ""visualizations""}, {""id"": 34131, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": null}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0[.]00000"", ""columnMapping"": {""token"": ""x"", ""add_usd"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""add_usd"": {""type"": ""pie"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {""BAT"": {}, ""DAI"": {}, ""ENJ"": {}, ""KNC"": {}, ""MKR"": {}, ""REN"": {}, ""SNX"": {}, ""UNI"": {}, ""YFI"": {}, ""ZRX"": {}, ""AAVE"": {}, ""BUSD"": {}, ""LINK"": {}, ""MANA"": {}, ""TUSD"": {}, ""USDC"": {}, ""USDT"": {}, ""WBTC"": {}, ""WETH"": {}, ""sUSD"": {}}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2021-01-10T13:01:43.873848+00:00"", ""__typename"": ""visualizations""}]","SELECT
        t.symbol AS token,
        coalesce(sum(add_amt / 10^t.decimals*p.price),0) AS add_usd
FROM
(SELECT  evt_block_time AS block_time,
       amount AS add_amt,
       ""reserve"" AS ""add_address""
FROM aave_v2.""LendingPool_evt_Deposit"" 
WHERE evt_block_time>now()-interval '{{ N Days Ago }} days'
AND ""reserve""  not in ('\x4fabb145d64652a948d72533023f6e7a623c7c53', --BUSD
           '\x57ab1ec28d129707052df4df418d58a2d46d5f51', --sUSD
           '\xdac17f958d2ee523a2206206994597c13d831ec7', --USDT
           '\x056fd409e1d7a124bd7017459dfea2f387b6d5cd' --GUSD
           )
AND amount>0) add
LEFT JOIN erc20.tokens t ON t.contract_address = add.add_address
LEFT JOIN prices.""usd"" p ON p.minute = date_trunc('minute',block_time)
AND p.contract_address = add.add_address
GROUP BY t.symbol

"
16930,Aave V2 Borrow by Token,,"[{""id"": 34135, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": null}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0[.]00000"", ""columnMapping"": {""token"": ""x"", ""borrow_usd"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""borrow_usd"": {""type"": ""pie"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {""BAT"": {}, ""DAI"": {}, ""ENJ"": {}, ""MKR"": {}, ""YFI"": {}, ""BUSD"": {}, ""LINK"": {}, ""TUSD"": {}, ""USDC"": {}, ""USDT"": {}, ""WBTC"": {}, ""WETH"": {}, ""sUSD"": {}}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2021-01-10T13:09:36.200337+00:00"", ""__typename"": ""visualizations""}, {""id"": 34134, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2021-01-10T13:09:36.200337+00:00"", ""__typename"": ""visualizations""}]","SELECT 
       t.symbol AS token,
       sum(asset_amount / 10^t.decimals*p.price) AS borrow_usd
FROM
  (-- AAVE 1
    SELECT  evt_block_time AS ""block_time"",
            reserve AS ""asset_address"",
            amount AS ""asset_amount""
       FROM
         ( --lending
          SELECT evt_block_time,
                 reserve,
                 amount
          FROM aave_v2.""LendingPool_evt_Borrow""
          UNION ALL
          -- flash loan
          SELECT evt_block_time,
                       asset AS reserve,
                       amount
          FROM aave_v2.""LendingPool_evt_FlashLoan""
          ) t1 
          where evt_block_time>now()-interval '{{ N Days Ago }} days') aave
LEFT JOIN erc20.tokens t ON t.contract_address = aave.asset_address
LEFT JOIN prices.""usd"" p ON p.minute = date_trunc('minute',aave.block_time)
AND p.contract_address = aave.asset_address
GROUP BY t.symbol"
11491,Aave Weekly Liquidations Volume per Asset,,"[{""id"": 22821, ""type"": ""chart"", ""name"": """", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""datetime"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""$""}}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": ""stack""}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0[.]00000"", ""columnMapping"": {""week"": ""x"", ""token"": ""series"", ""amount"": ""unused"", ""usd_value"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""BAT"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}, ""DAI"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 1}, ""ENJ"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 13}, ""ETH"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 14}, ""KNC"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 2}, ""MKR"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 6}, ""REN"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 16}, ""REP"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 7}, ""SNX"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 17}, ""YFI"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 18}, ""ZRX"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 12}, ""BUSD"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 15}, ""LEND"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 3}, ""LINK"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 4}, ""MANA"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 5}, ""TUSD"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 8}, ""USDC"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 9}, ""USDT"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 10}, ""WBTC"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 11}, ""null"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 19}, ""sUSD"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 20}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""column""}, ""created_at"": ""2020-10-14T13:47:38.057992+00:00"", ""__typename"": ""visualizations""}, {""id"": 22820, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""month"", ""type"": ""datetime"", ""order"": 100000, ""title"": ""month"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""datetime"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""right"", ""booleanValues"": [""false"", ""true""], ""dateTimeFormat"": ""MMMM"", ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}, {""name"": ""token"", ""type"": ""string"", ""order"": 100001, ""title"": ""token"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""string"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""left"", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}, {""name"": ""amount"", ""type"": ""float"", ""order"": 100002, ""title"": ""amount"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""number"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""right"", ""numberFormat"": """", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}, {""name"": ""price"", ""type"": ""float"", ""order"": 100003, ""title"": ""price"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""number"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""right"", ""numberFormat"": """", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}, {""name"": ""usdvalue"", ""type"": ""float"", ""order"": 100004, ""title"": ""usdvalue"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""number"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""right"", ""numberFormat"": """", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}], ""autoHeight"": true, ""minColumns"": 2, ""defaultRows"": 14, ""itemsPerPage"": 25, ""defaultColumns"": 3}, ""created_at"": ""2020-10-14T13:47:38.057992+00:00"", ""__typename"": ""visualizations""}, {""id"": 22822, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": ""stack"", ""percentValues"": false}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""reverseY"": false, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0[.]00000"", ""columnMapping"": {""week"": ""x"", ""token"": ""series"", ""usd_value"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""BAT"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}, ""DAI"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 2}, ""ETH"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 3}, ""KNC"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 4}, ""MKR"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 8}, ""REN"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 9}, ""REP"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 10}, ""SNX"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 11}, ""YFI"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 16}, ""ZRX"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 17}, ""BUSD"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 1}, ""LEND"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 5}, ""LINK"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 6}, ""MANA"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 7}, ""TUSD"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 12}, ""USDC"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 13}, ""USDT"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 14}, ""WBTC"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 15}, ""sUSD"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 18}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""column""}, ""created_at"": ""2020-10-14T13:47:38.057+00:00"", ""__typename"": ""visualizations""}]","WITH liquidations AS (
    SELECT  date_trunc('week', evt_block_time) as week,
            t.symbol as token,
            SUM(""_liquidatedCollateralAmount""/10^decimals) as amount
    FROM aave.""LendingPool_evt_LiquidationCall"" liquidations
    LEFT JOIN erc20.""tokens"" t ON liquidations.""_collateral"" = t.contract_address
    GROUP BY 1,2
),

p AS (
    SELECT * 
    FROM prices.usd
)

SELECT  week, 
        token,
        amount,
        price,
        amount*price As usd_value
FROM liquidations
LEFT JOIN p ON liquidations.week = p.minute
AND p.symbol = liquidations.token
ORDER BY week DESC;"
21533,Daily Active Users,,"[{""id"": 44411, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2021-03-02T00:44:33.72145+00:00"", ""__typename"": ""visualizations""}, {""id"": 44412, ""type"": ""chart"", ""name"": ""Daily Active Users"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": false}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": null}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0[.]00000"", ""columnMapping"": {""dt"": ""x"", ""total_users"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""total_users"": {""type"": ""line"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""line""}, ""created_at"": ""2021-03-02T00:48:57.541025+00:00"", ""__typename"": ""visualizations""}, {""id"": 44937, ""type"": ""chart"", ""name"": ""Total Active Users"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": null}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0[.]00000"", ""columnMapping"": {""dt"": ""x"", ""cumulative_total"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""cumulative_total"": {""type"": ""area"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""area""}, ""created_at"": ""2021-03-03T14:26:10.026834+00:00"", ""__typename"": ""visualizations""}]","/*  Query Description
    A active user is defined as an user who have made any one of the following transactions:
    deposit, withdraw, borrow, flashloan, liquidated, RebalanceStableBorrowRat, RedeemUnderlying, repay, ReserveUsedAsCollateralDisabled,
    ReserveUsedAsCollateralEnabled, or swap.
    
     WARNING: figures are approximate since aToken accrual is not captured by Dune!
*/
WITH user_v1 AS
  (SELECT date_trunc('day',evt_block_time) AS dt,
          _user AS USER,
          'deposit' AS account
   FROM aave.""LendingPool_evt_Deposit""
   WHERE date(evt_block_time)>='6/1/2020'
   UNION SELECT date_trunc('day',evt_block_time) AS dt,
                _user AS USER,
                'borrow' AS account
   FROM aave.""LendingPool_evt_Borrow""
   WHERE date(evt_block_time)>='6/1/2020'
   UNION SELECT date_trunc('day',evt_block_time) AS dt,
                _target AS USER,
                'flashloan' AS account
   FROM aave.""LendingPool_evt_FlashLoan""
   WHERE date(evt_block_time)>='6/1/2020'
   UNION SELECT date_trunc('day',evt_block_time) AS dt,
                _liquidator AS USER,
                'liquidationcall' AS account
   FROM aave.""LendingPool_evt_LiquidationCall""
   WHERE date(evt_block_time)>='6/1/2020'
   UNION SELECT date_trunc('day',evt_block_time) AS dt,
                _user AS USER,
                'originationfeeliquidated' AS account
   FROM aave.""LendingPool_evt_OriginationFeeLiquidated""
   WHERE date(evt_block_time)>='6/1/2020'
   UNION SELECT date_trunc('day',evt_block_time) AS dt,
                _user AS USER,
                'rebalancestableborrowrate' AS account
   FROM aave.""LendingPool_evt_RebalanceStableBorrowRate""
   WHERE date(evt_block_time)>='6/1/2020'
   UNION SELECT date_trunc('day',evt_block_time) AS dt,
                _user AS USER,
                'redeemunderlying' AS account
   FROM aave.""LendingPool_evt_RedeemUnderlying""
   WHERE date(evt_block_time)>='6/1/2020'
   UNION SELECT date_trunc('day',evt_block_time) AS dt,
                _user AS USER,
                'repay' AS account
   FROM aave.""LendingPool_evt_Repay""
   WHERE date(evt_block_time)>='6/1/2020'
   UNION SELECT date_trunc('day',evt_block_time) AS dt,
                _user AS USER,
                'reserveusedascollateraldisabled' AS account
   FROM aave.""LendingPool_evt_ReserveUsedAsCollateralDisabled""
   WHERE date(evt_block_time)>='6/1/2020'
   UNION SELECT date_trunc('day',evt_block_time) AS dt,
                _user AS USER,
                'reserveusedascollateralenabled' AS account
   FROM aave.""LendingPool_evt_ReserveUsedAsCollateralEnabled""
   WHERE date(evt_block_time)>='6/1/2020'
   UNION SELECT date_trunc('day',evt_block_time) AS dt,
                _user AS USER,
                'swap' AS account
   FROM aave.""LendingPool_evt_Swap""
   WHERE date(evt_block_time)>='6/1/2020'),
     user_v2 AS
  (SELECT date_trunc('day',evt_block_time) AS dt,
          aave_v2.""LendingPool_evt_Deposit"".user AS USER,
                  'deposit' AS account_v2
   FROM aave_v2.""LendingPool_evt_Deposit""
   WHERE date(evt_block_time)>='6/1/2020'
   UNION SELECT date_trunc('day',evt_block_time) AS dt,
                aave_v2.""LendingPool_evt_Borrow"".user AS USER,
                        'borrow' AS account_v2
   FROM aave_v2.""LendingPool_evt_Borrow""
   WHERE date(evt_block_time)>='6/1/2020'
   UNION SELECT date_trunc('day',evt_block_time) AS dt,
                aave_v2.""LendingPool_evt_FlashLoan"".target AS USER,
                'flashloan' AS account_v2
   FROM aave_v2.""LendingPool_evt_FlashLoan""
   WHERE date(evt_block_time)>='6/1/2020'
   UNION SELECT date_trunc('day',evt_block_time) AS dt,
                aave_v2.""LendingPool_evt_LiquidationCall"".liquidator AS USER,
                'liquidationcall' AS account_v2
   FROM aave_v2.""LendingPool_evt_LiquidationCall""
   WHERE date(evt_block_time)>='6/1/2020'
   UNION SELECT date_trunc('day',evt_block_time) AS dt,
                aave_v2.""LendingPool_evt_RebalanceStableBorrowRate"".user AS USER,
                        'rebalancestableborrowrate' AS account_v2
   FROM aave_v2.""LendingPool_evt_RebalanceStableBorrowRate""
   WHERE date(evt_block_time)>='6/1/2020'
   UNION SELECT date_trunc('day',evt_block_time) AS dt,
                aave_v2.""LendingPool_evt_Repay"".user AS USER,
                        'repay' AS account_v2
   FROM aave_v2.""LendingPool_evt_Repay""
   WHERE date(evt_block_time)>='6/1/2020'
   UNION SELECT date_trunc('day',evt_block_time) AS dt,
                aave_v2.""LendingPool_evt_ReserveUsedAsCollateralDisabled"".user AS USER,
                        'reserveusedascollateraldisabled' AS account_v2
   FROM aave_v2.""LendingPool_evt_ReserveUsedAsCollateralDisabled""
   WHERE date(evt_block_time)>='6/1/2020'
   UNION SELECT date_trunc('day',evt_block_time) AS dt,
                aave_v2.""LendingPool_evt_ReserveUsedAsCollateralEnabled"".user AS USER,
                        'reserveusedascollateralenabled' AS account_v2
   FROM aave_v2.""LendingPool_evt_ReserveUsedAsCollateralEnabled""
   WHERE date(evt_block_time)>='6/1/2020'
   UNION SELECT date_trunc('day',evt_block_time) AS dt,
                aave_v2.""LendingPool_evt_Swap"".user AS USER,
                        'swap' AS account_v2
   FROM aave_v2.""LendingPool_evt_Swap""
   WHERE date(evt_block_time)>='6/1/2020'
   UNION SELECT date_trunc('day',evt_block_time) AS dt,
                aave_v2.""LendingPool_evt_Withdraw"".user AS USER,
                        'withdraw' AS account_v2
   FROM aave_v2.""LendingPool_evt_Withdraw""
   WHERE date(evt_block_time)>='6/1/2020'),
   active_user_v1 AS
   (
   SELECT dt,
          count(DISTINCT user_v1.user) AS active_users
    FROM user_v1
    group by dt
   ),
     active_user_v2 AS
   (
   SELECT dt,
          count(DISTINCT user_v2.user) AS active_users
    FROM user_v2
    group by dt
   ),
temp1 AS
  (SELECT A1.dt,
          A2.dt AS dt_v2,
          coalesce(A1.active_users, 0) AS active_users,
          coalesce(A2.active_users, 0) AS active_users_v2
   FROM active_user_v1 AS A1
   FULL OUTER JOIN active_user_v2 AS A2 ON (A1.dt=A2.dt)),
temp2 AS
  (SELECT coalesce(dt,dt_v2) AS dt,
          coalesce(dt_v2, dt) AS dt_v2,
          active_users,
          active_users_v2,
          active_users+active_users_v2 AS Total_Users
   FROM temp1)

SELECT dt,
       active_users,
       active_users_v2,
       total_users,
       sum(total_users) OVER (ORDER BY dt) AS Cumulative_Total 
FROM temp2

"
19118,Aave V1+V2 Cumulative Users,,"[{""id"": 38957, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""month"", ""type"": ""datetime"", ""order"": 100000, ""title"": ""month"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""datetime"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""right"", ""booleanValues"": [""false"", ""true""], ""dateTimeFormat"": ""MMMM"", ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}, {""name"": ""lenders"", ""type"": ""float"", ""order"": 100001, ""title"": ""lenders"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""number"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""right"", ""numberFormat"": """", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}, {""name"": ""borrowers"", ""type"": ""float"", ""order"": 100002, ""title"": ""borrowers"", ""visible"": true, ""allowHTML"": true, ""displayAs"": ""number"", ""imageWidth"": """", ""allowSearch"": false, ""imageHeight"": """", ""alignContent"": ""right"", ""numberFormat"": """", ""booleanValues"": [""false"", ""true""], ""highlightLinks"": false, ""linkUrlTemplate"": ""{{ @ }}"", ""imageUrlTemplate"": ""{{ @ }}"", ""linkOpenInNewTab"": true, ""linkTextTemplate"": ""{{ @ }}"", ""linkTitleTemplate"": ""{{ @ }}"", ""imageTitleTemplate"": ""{{ @ }}""}], ""autoHeight"": true, ""minColumns"": 2, ""defaultRows"": 14, ""itemsPerPage"": 25, ""defaultColumns"": 3}, ""created_at"": ""2021-02-03T12:15:38.035711+00:00"", ""__typename"": ""visualizations""}, {""id"": 38958, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": false}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": null}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0[.]00000"", ""columnMapping"": {""date"": ""x"", ""total_users"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""total_users"": {""type"": ""area"", ""color"": ""#FB8D3D"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""area""}, ""created_at"": ""2021-02-03T12:15:38.035711+00:00"", ""__typename"": ""visualizations""}]","SELECT date, sum(users) OVER (
                              ORDER BY date ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS total_users
FROM
    (SELECT date,count(USER) as users
    FROM
(SELECT min(date) AS date,
             account AS USER
    from (
SELECT date_trunc('day', evt_block_time) AS date, -- Aave
        cast(aave_v2.""LendingPool_evt_FlashLoan"".initiator AS bytea) as account,
        '1' as product
         FROM aave_v2.""LendingPool_evt_FlashLoan""
         
         UNION SELECT date_trunc('day', evt_block_time) AS date,
                      aave_v2.""LendingPool_evt_Borrow"".user AS account,
                      '2' as product
         FROM aave_v2.""LendingPool_evt_Borrow""
         
         UNION SELECT date_trunc('day', evt_block_time) AS date,
                      aave_v2.""LendingPool_evt_Deposit"".user AS account,
                      '3' as product
         FROM aave_v2.""LendingPool_evt_Deposit""
         
         UNION SELECT date_trunc('day', evt_block_time) AS date,
                      aave_v2.""LendingPool_evt_LiquidationCall"".user AS account,
                      '4' as product
         FROM aave_v2.""LendingPool_evt_LiquidationCall""
         
         UNION SELECT date_trunc('day', evt_block_time) AS date,
                      aave.""LendingPool_evt_FlashLoan""._target AS account,
                      '5' as product
         FROM aave.""LendingPool_evt_FlashLoan""
         
          UNION SELECT date_trunc('day', evt_block_time) AS date,
                      aave.""LendingPool_evt_Borrow""._user AS account,
                      '6' as product
         FROM aave.""LendingPool_evt_Borrow""
         
          UNION SELECT date_trunc('day', evt_block_time) AS date,
                      aave.""LendingPool_evt_Deposit""._user AS account,
                      '7' as product
         FROM aave.""LendingPool_evt_Deposit""
         
         UNION SELECT date_trunc('day', evt_block_time) AS date,
                      aave.""LendingPool_evt_LiquidationCall""._liquidator AS account,
                      '8' as product
         FROM aave.""LendingPool_evt_LiquidationCall"" 
         
         ) t1
         
       group by 2) t2
       group by 1) t3
"
21808,Daily New User,,"[{""id"": 49381, ""type"": ""chart"", ""name"": ""Cumulative Count of New User"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""columnMapping"": {""min_dt"": ""x"", ""cumulative_count"": ""y""}, ""seriesOptions"": {""cumulative_count"": {""type"": ""area"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2021-03-19T19:06:09.384365+00:00"", ""__typename"": ""visualizations""}, {""id"": 45016, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2021-03-03T19:55:56.25026+00:00"", ""__typename"": ""visualizations""}, {""id"": 45164, ""type"": ""chart"", ""name"": ""New Users over Time"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": false}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": null}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0[.]00000"", ""columnMapping"": {""count"": ""y"", ""min_dt"": ""x""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""count"": {""type"": ""area"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""area""}, ""created_at"": ""2021-03-04T05:48:50.812+00:00"", ""__typename"": ""visualizations""}]","/*  Query Description
    A new user is defined as an user who have made any one of the following transactions for the first time:
    deposit, withdraw, borrow, flashloan, liquidated, RebalanceStableBorrowRat, RedeemUnderlying, repay, ReserveUsedAsCollateralDisabled,
    ReserveUsedAsCollateralEnabled, or swap.
    
     WARNING: figures are approximate since aToken accrual is not captured by Dune!
*/


WITH user_v1 AS
  (SELECT date_trunc('day',evt_block_time) AS dt,
          _user AS user_address
   FROM aave.""LendingPool_evt_Deposit""
   WHERE date(evt_block_time)>='6/1/2020'
   UNION SELECT date_trunc('day',evt_block_time) AS dt,
                _user AS user_address
   FROM aave.""LendingPool_evt_Borrow""
   WHERE date(evt_block_time)>='6/1/2020'
   UNION SELECT date_trunc('day',evt_block_time) AS dt,
                _target AS user_address
   FROM aave.""LendingPool_evt_FlashLoan""
   WHERE date(evt_block_time)>='6/1/2020'
   UNION SELECT date_trunc('day',evt_block_time) AS dt,
                _liquidator AS user_address
   FROM aave.""LendingPool_evt_LiquidationCall""
   WHERE date(evt_block_time)>='6/1/2020'
   UNION SELECT date_trunc('day',evt_block_time) AS dt,
                _user AS user_address
   FROM aave.""LendingPool_evt_OriginationFeeLiquidated""
   WHERE date(evt_block_time)>='6/1/2020'
   UNION SELECT date_trunc('day',evt_block_time) AS dt,
                _user AS user_address
   FROM aave.""LendingPool_evt_RebalanceStableBorrowRate""
   WHERE date(evt_block_time)>='6/1/2020'
   UNION SELECT date_trunc('day',evt_block_time) AS dt,
                _user AS user_address
   FROM aave.""LendingPool_evt_RedeemUnderlying""
   WHERE date(evt_block_time)>='6/1/2020'
   UNION SELECT date_trunc('day',evt_block_time) AS dt,
                _user AS user_address
   FROM aave.""LendingPool_evt_Repay""
   WHERE date(evt_block_time)>='6/1/2020'
   UNION SELECT date_trunc('day',evt_block_time) AS dt,
                _user AS user_address
   FROM aave.""LendingPool_evt_ReserveUsedAsCollateralDisabled""
   WHERE date(evt_block_time)>='6/1/2020'
   UNION SELECT date_trunc('day',evt_block_time) AS dt,
                _user AS user_address
   FROM aave.""LendingPool_evt_ReserveUsedAsCollateralEnabled""
   WHERE date(evt_block_time)>='6/1/2020'
   UNION SELECT date_trunc('day',evt_block_time) AS dt,
                _user AS user_address
   FROM aave.""LendingPool_evt_Swap""
   WHERE date(evt_block_time)>='6/1/2020'),
     user_v2 AS
  (SELECT date_trunc('day',evt_block_time) AS dt,
          aave_v2.""LendingPool_evt_Deposit"".user AS user_address_v2
   FROM aave_v2.""LendingPool_evt_Deposit""
   WHERE date(evt_block_time)>='6/1/2020'
   UNION SELECT date_trunc('day',evt_block_time) AS dt,
                aave_v2.""LendingPool_evt_Borrow"".user AS user_address_v2
   FROM aave_v2.""LendingPool_evt_Borrow""
   WHERE date(evt_block_time)>='6/1/2020'
   UNION SELECT date_trunc('day',evt_block_time) AS dt,
                aave_v2.""LendingPool_evt_FlashLoan"".target AS user_address_v2
   FROM aave_v2.""LendingPool_evt_FlashLoan""
   WHERE date(evt_block_time)>='6/1/2020'
   UNION SELECT date_trunc('day',evt_block_time) AS dt,
                aave_v2.""LendingPool_evt_LiquidationCall"".liquidator AS user_address_v2
   FROM aave_v2.""LendingPool_evt_LiquidationCall""
   WHERE date(evt_block_time)>='6/1/2020'
   UNION SELECT date_trunc('day',evt_block_time) AS dt,
                aave_v2.""LendingPool_evt_RebalanceStableBorrowRate"".user AS user_address_v2
   FROM aave_v2.""LendingPool_evt_RebalanceStableBorrowRate""
   WHERE date(evt_block_time)>='6/1/2020'
   UNION SELECT date_trunc('day',evt_block_time) AS dt,
                aave_v2.""LendingPool_evt_Repay"".user AS user_address_v2
   FROM aave_v2.""LendingPool_evt_Repay""
   WHERE date(evt_block_time)>='6/1/2020'
   UNION SELECT date_trunc('day',evt_block_time) AS dt,
                aave_v2.""LendingPool_evt_ReserveUsedAsCollateralDisabled"".user AS user_address_v2
   FROM aave_v2.""LendingPool_evt_ReserveUsedAsCollateralDisabled""
   WHERE date(evt_block_time)>='6/1/2020'
   UNION SELECT date_trunc('day',evt_block_time) AS dt,
                aave_v2.""LendingPool_evt_ReserveUsedAsCollateralEnabled"".user AS user_address_v2
   FROM aave_v2.""LendingPool_evt_ReserveUsedAsCollateralEnabled""
   WHERE date(evt_block_time)>='6/1/2020'
   UNION SELECT date_trunc('day',evt_block_time) AS dt,
                aave_v2.""LendingPool_evt_Swap"".user AS user_address_v2
   FROM aave_v2.""LendingPool_evt_Swap""
   WHERE date(evt_block_time)>='6/1/2020'
   UNION SELECT date_trunc('day',evt_block_time) AS dt,
                aave_v2.""LendingPool_evt_Withdraw"".user AS user_address_v2
   FROM aave_v2.""LendingPool_evt_Withdraw""
   WHERE date(evt_block_time)>='6/1/2020'),

    user_all AS
    (
    SELECT * FROM user_v1
    UNION
    SELECT * FROM user_v2
    ),
    user_all_min_date AS
    (
    SELECT user_address, min(dt) as min_dt
    FROM user_all
    GROUP BY user_address
    ),
    temp AS(  
   SELECT min_dt, count(distinct user_address)
   FROM user_all_min_date
   GROUP BY min_dt
   ORDER BY min_dt desc)
   
 SELECT min_dt, count, sum(count) OVER (ORDER BY min_dt) AS cumulative_count FROM temp 
   
   "
12956,Aave Net Deposits,,"[{""id"": 25914, ""type"": ""chart"", ""name"": ""Daily Net Aave Staked"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": null}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0[.]00000"", ""columnMapping"": {""day"": ""x"", ""net_staked"": ""y"", ""cumulative_staked"": ""unused""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""net_staked"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""column""}, ""created_at"": ""2020-11-08T10:32:57.900392+00:00"", ""__typename"": ""visualizations""}, {""id"": 25912, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2020-11-08T10:07:53.526564+00:00"", ""__typename"": ""visualizations""}, {""id"": 25913, ""type"": ""chart"", ""name"": ""Total AAVE Staked"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": null}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0[.]00000"", ""columnMapping"": {""day"": ""x"", ""net_staked"": ""unused"", ""cumulative_staked"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""cumulative_staked"": {""type"": ""area"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""area""}, ""created_at"": ""2020-11-08T10:32:38.249+00:00"", ""__typename"": ""visualizations""}]","WITH txns AS
(
SELECT 
evt_block_time,
(value/1e18) * -1 as aave
FROM 
erc20.""ERC20_evt_Transfer"" e
WHERE 
e.contract_address = '\x4da27a545c0c5b758a6ba100e3a049001de870f5'
AND e.to = '\x0000000000000000000000000000000000000000'
UNION
SELECT 
evt_block_time,
(value/1e18) * 1 as aave
FROM 
erc20.""ERC20_evt_Transfer"" f
WHERE 
f.contract_address = '\x4da27a545c0c5b758a6ba100e3a049001de870f5'
AND f.from = '\x0000000000000000000000000000000000000000'
)

-- SELECT aave as net_staked
-- from txns
SELECT date_trunc('day', txns.evt_block_time) as day,
SUM(aave) as net_staked,
sum(SUM(aave)) over (order by date_trunc('day', txns.evt_block_time)) as cumulative_staked
FROM txns
GROUP BY 1 
ORDER BY 1 asc
"
11662,AAVE: Unique Borrowers per asset,,"[{""id"": 23141, ""type"": ""table"", ""name"": ""Table"", ""options"": {}, ""created_at"": ""2020-10-16T11:22:35.487+00:00"", ""__typename"": ""visualizations""}, {""id"": 23144, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""labels"": {""enabled"": true}}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear"", ""opposite"": true}], ""legend"": {""enabled"": true}, ""series"": {""error_y"": {""type"": ""data"", ""visible"": true}, ""stacking"": ""stack""}, ""error_y"": {""type"": ""data"", ""visible"": true}, ""minRows"": 5, ""customCode"": ""// Available variables are x, ys, element, and Plotly\n// Type console.log(x, ys); for more info about x and ys\n// To plot your graph call Plotly.plot(element, ...)\n// Plotly examples and docs: https://plot.ly/javascript/"", ""minColumns"": 1, ""textFormat"": """", ""defaultRows"": 8, ""numberFormat"": ""0,0[.]00000"", ""columnMapping"": {""day"": ""x"", ""token"": ""series"", ""lenders"": ""y""}, ""percentFormat"": ""0[.]00%"", ""seriesOptions"": {""BAT"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 0}, ""DAI"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 2}, ""ENJ"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 3}, ""ETH"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 4}, ""KNC"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 5}, ""MKR"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 9}, ""REN"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 10}, ""REP"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 11}, ""SNX"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 12}, ""ZRX"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 17}, ""BUSD"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 1}, ""LEND"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 6}, ""LINK"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 7}, ""MANA"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 8}, ""TUSD"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 13}, ""USDC"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 14}, ""USDT"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 15}, ""WBTC"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 16}, ""sUSD"": {""type"": ""column"", ""index"": 0, ""yAxis"": 0, ""zIndex"": 18}}, ""valuesOptions"": {}, ""dateTimeFormat"": ""DD/MM/YY HH:mm"", ""defaultColumns"": 3, ""showDataLabels"": false, ""globalSeriesType"": ""column""}, ""created_at"": ""2020-10-16T11:42:18.760092+00:00"", ""__typename"": ""visualizations""}]","
SELECT
date_trunc('day', evt_block_time) as day,
t.symbol as token,
count(distinct _user) as lenders
FROM aave.""LendingPool_evt_Borrow"" borrows
LEFT JOIN erc20.""tokens"" t ON borrows.""_reserve"" = t.contract_address
GROUP BY 1,2
;"
37478,Aave Deposits & Outstanding Loans Timeseries,Aave V2 timeseries of total deposits & outstanding loans in USD,"[{""id"": 74297, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""day"", ""title"": ""Day"", ""numberFormat"": """"}, {""name"": ""total_outstanding_supply"", ""title"": ""Deposited"", ""numberFormat"": ""$0,0""}, {""name"": ""total_outstanding_debt"", ""title"": ""Loaned"", ""numberFormat"": ""$0,0""}]}, ""created_at"": ""2021-04-24T14:26:29.632126+00:00"", ""__typename"": ""visualizations""}, {""id"": 74298, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Value in USD""}}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""$ 0,0"", ""columnMapping"": {""day"": ""x"", ""total_outstanding_debt"": ""y"", ""total_outstanding_supply"": ""y""}, ""seriesOptions"": {""total_outstanding_debt"": {""name"": ""Loaned"", ""type"": ""line"", ""color"": ""#01C7D5"", ""yAxis"": 0, ""zIndex"": 1}, ""total_outstanding_supply"": {""name"": ""Deposited"", ""type"": ""line"", ""color"": ""#F500CC"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""line""}, ""created_at"": ""2021-04-24T14:26:56.15355+00:00"", ""__typename"": ""visualizations""}]","WITH erc20tmp AS
(
select *,
    case 
        when symbol='ETH' then 'WETH'
        else symbol
    end as symbol1
from erc20.""tokens""
),

d AS
(
select 
date_trunc('day', evt_block_time) as day,
sum(""_amount"") as amt,
""_reserve""
from aave.""LendingPool_evt_Deposit""
--where evt_block_time > '2020-03-01'::date 
group by 1, 3
),

r AS
(
select 
date_trunc('day', evt_block_time) as day,
sum(""_amount"") as amt,
""_reserve""
from aave.""LendingPool_evt_RedeemUnderlying""
--where evt_block_time > '2020-03-01'::date 
group by 1, 3
),

supply AS
(
select
day,
token,
sum(sum(amt)) over (partition by token order by day)*avg(p.price) as outstanding
from
(
select 
d.day,
sum(d.amt/10^decimals) as amt,
t.symbol1 as token
from d
LEFT JOIN erc20tmp t ON d.""_reserve"" = t.contract_address
group by 1,3
union
select 
r.day,
sum(-r.amt/10^decimals) as amt,
t.symbol1 as token
from r
LEFT JOIN erc20tmp t ON r.""_reserve"" = t.contract_address
group by 1,3
) net
left join prices.usd p ON net.day = p.minute
WHERE p.symbol = net.token
GROUP BY 1,2
),

s1 AS
(
select
day,
sum(outstanding) as total_outstanding_supply
FROM supply
GROUP BY 1
),

b AS
(
select 
date_trunc('day', evt_block_time) as day,
sum(""_amount"") as amt,
""_reserve""
from aave.""LendingPool_evt_Borrow""
--where evt_block_time > '2020-03-01'::date 
group by 1, 3
),

r2 AS
(
select 
date_trunc('day', evt_block_time) as day,
sum(""_amountMinusFees"") as amt,
""_reserve""
from aave.""LendingPool_evt_Repay""
--where evt_block_time > '2020-03-01'::date 
group by 1, 3
),

borrow AS
(
select
day,
token,
sum(sum(amt)) over (partition by token order by day)*avg(p.price) as outstanding
from
(
select 
b.day,
sum(b.amt/10^decimals) as amt,
t.symbol1 as token
from b
LEFT JOIN erc20tmp t ON b.""_reserve"" = t.contract_address
group by 1,3
union
select 
r2.day,
sum(-r2.amt/10^decimals) as amt,
t.symbol1 as token
from r2
LEFT JOIN erc20tmp t ON r2.""_reserve"" = t.contract_address
group by 1,3
) net
left join prices.usd p ON net.day = p.minute
WHERE p.symbol = net.token
GROUP BY 1,2
),

b1 AS
( 
select
day,
sum(outstanding) as total_outstanding_debt
FROM borrow
GROUP BY 1
)

select 
s1.day,
s1.total_outstanding_supply,
b1.total_outstanding_debt
from s1
left join b1 on s1.day = b1.day
order by 1 desc"
37479,Aave Loan to Value (LTV) Timeseries,Aave V2 timeseries of Loan to Value in USD,"[{""id"": 74299, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""day"", ""title"": ""Day"", ""numberFormat"": """"}, {""name"": ""total_outstanding_supply"", ""title"": ""Deposited"", ""numberFormat"": ""$0,0""}, {""name"": ""total_outstanding_debt"", ""title"": ""Loaned"", ""numberFormat"": ""$0,0""}, {""name"": ""?column?"", ""title"": ""Loan to Value"", ""numberFormat"": "" %""}]}, ""created_at"": ""2021-04-24T14:41:29.291526+00:00"", ""__typename"": ""visualizations""}, {""id"": 74300, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Loan to Value (LTV)""}}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": "" %"", ""columnMapping"": {""day"": ""x"", ""?column?"": ""y"", ""total_outstanding_debt"": ""y"", ""total_outstanding_supply"": ""y""}, ""seriesOptions"": {""?column?"": {""name"": ""LTV"", ""type"": ""line"", ""color"": ""#CE00D1"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""line""}, ""created_at"": ""2021-04-24T14:41:29.291526+00:00"", ""__typename"": ""visualizations""}]","WITH erc20tmp AS
(
select *,
    case 
        when symbol='ETH' then 'WETH'
        else symbol
    end as symbol1
from erc20.""tokens""
),

d AS
(
select 
date_trunc('day', evt_block_time) as day,
sum(""_amount"") as amt,
""_reserve""
from aave.""LendingPool_evt_Deposit""
--where evt_block_time > '2020-03-01'::date 
group by 1, 3
),

r AS
(
select 
date_trunc('day', evt_block_time) as day,
sum(""_amount"") as amt,
""_reserve""
from aave.""LendingPool_evt_RedeemUnderlying""
--where evt_block_time > '2020-03-01'::date 
group by 1, 3
),

supply AS
(
select
day,
token,
sum(sum(amt)) over (partition by token order by day)*avg(p.price) as outstanding
from
(
select 
d.day,
sum(d.amt/10^decimals) as amt,
t.symbol1 as token
from d
LEFT JOIN erc20tmp t ON d.""_reserve"" = t.contract_address
group by 1,3
union
select 
r.day,
sum(-r.amt/10^decimals) as amt,
t.symbol1 as token
from r
LEFT JOIN erc20tmp t ON r.""_reserve"" = t.contract_address
group by 1,3
) net
left join prices.usd p ON net.day = p.minute
WHERE p.symbol = net.token
GROUP BY 1,2
),

s1 AS
(
select
day,
sum(outstanding) as total_outstanding_supply
FROM supply
GROUP BY 1
),

b AS
(
select 
date_trunc('day', evt_block_time) as day,
sum(""_amount"") as amt,
""_reserve""
from aave.""LendingPool_evt_Borrow""
--where evt_block_time > '2020-03-01'::date 
group by 1, 3
),

r2 AS
(
select 
date_trunc('day', evt_block_time) as day,
sum(""_amountMinusFees"") as amt,
""_reserve""
from aave.""LendingPool_evt_Repay""
--where evt_block_time > '2020-03-01'::date 
group by 1, 3
),

borrow AS
(
select
day,
token,
sum(sum(amt)) over (partition by token order by day)*avg(p.price) as outstanding
from
(
select 
b.day,
sum(b.amt/10^decimals) as amt,
t.symbol1 as token
from b
LEFT JOIN erc20tmp t ON b.""_reserve"" = t.contract_address
group by 1,3
union
select 
r2.day,
sum(-r2.amt/10^decimals) as amt,
t.symbol1 as token
from r2
LEFT JOIN erc20tmp t ON r2.""_reserve"" = t.contract_address
group by 1,3
) net
left join prices.usd p ON net.day = p.minute
WHERE p.symbol = net.token
GROUP BY 1,2
),

b1 AS
( 
select
day,
sum(outstanding) as total_outstanding_debt
FROM borrow
GROUP BY 1
)

select 
s1.day,
b1.total_outstanding_debt / s1.total_outstanding_supply
from s1
left join b1 on s1.day = b1.day
order by 1 desc"
134295,DMM vs AMM Liquidity,,"[{""id"": 264372, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-09-01T08:15:01.147619+00:00"", ""__typename"": ""visualizations""}, {""id"": 264377, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": false, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Liquidity in $""}}], ""legend"": {""enabled"": true}, ""series"": {""percentValues"": false}, ""reverseX"": false, ""numberFormat"": "",000.00"", ""columnMapping"": {""add"": ""y"", ""day"": ""x"", ""fee"": ""y"", ""dfyn"": ""y"", ""kyber"": ""y"", ""value"": ""y"", ""liquidity"": ""y""}, ""seriesOptions"": {""dfyn"": {""name"": ""DFYN"", ""type"": ""area"", ""color"": ""#536DFE"", ""yAxis"": 0, ""zIndex"": 0}, ""kyber"": {""name"": ""KyberDMM"", ""type"": ""area"", ""color"": ""#009688"", ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""line""}, ""created_at"": ""2021-09-01T08:18:57.647914+00:00"", ""__typename"": ""visualizations""}]","with adds as (
    select 
        DATE_TRUNC('day', evt_block_time) as ""day"",
        sum(amount0 + amount1) / 1e18 as ""add""
    from kyber.""DMMPool_evt_Mint""
    where contract_address = '\xaaae5aabdb7db627c58dfeeba27ba2933a39c592'
    group by DATE_TRUNC('day', evt_block_time)
    order by 1
),

removes as (
    select 
        DATE_TRUNC('day', evt_block_time) as ""day"",
        sum(amount0 + amount1) / 1e18 as ""minus""
    from kyber.""DMMPool_evt_Burn""
    where contract_address = '\xaaae5aabdb7db627c58dfeeba27ba2933a39c592'
    group by DATE_TRUNC('day', evt_block_time)
    order by 1
),

balances as (
    select a.""day"", ""add"" - COALESCE(""minus"", 0) as ""liquidity""
    from adds a
    left join removes r on a.""day"" = r.""day""
),

dfyn_adds as (
    select 
        DATE_TRUNC('day', evt_block_time) as ""day"",
        sum(amount0 / 1e6 + amount1 / 1e18) as ""add""
    from dfyn.""UniswapV2Pair_evt_Mint""
    where contract_address = '\x527e43ca8f600f120b1eaEe2aFc80E3Cb375e191' 
    group by DATE_TRUNC('day', evt_block_time)
    order by 1
),

dfyn_removes as (
    select 
        DATE_TRUNC('day', evt_block_time) as ""day"",
        sum(amount0 / 1e6 + amount1 / 1e18) as ""minus""
    from dfyn.""UniswapV2Pair_evt_Burn""
    where contract_address = '\x527e43ca8f600f120b1eaEe2aFc80E3Cb375e191' 
    group by DATE_TRUNC('day', evt_block_time)
    order by 1
),

dfyn_balances as (
    select a.""day"", ""add"" - COALESCE(""minus"", 0) as ""liquidity""
    from dfyn_adds a
    left join dfyn_removes r on a.""day"" = r.""day""
),

kyber as (
    select b.day, sum(b.liquidity) over (order by b.day) as ""kyber""
    from balances b
    order by 1
),

dfyn as (
    select db.day,sum(db.liquidity) over (order by db.day) as ""dfyn"" 
    from dfyn_balances db
    order by 1
)

select k.day, ""kyber"", ""dfyn""
from kyber k
left join dfyn d on k.day = d.day
where k.day > '2021-07-06' and k.day < '2021-08-28'"
132757,DMM vs AMM Volume,,"[{""id"": 261507, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-08-31T12:07:15.696347+00:00"", ""__typename"": ""visualizations""}, {""id"": 284492, ""type"": ""chart"", ""name"": ""DMM Fee (xUSD-DAI)"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""tickFormat"": """"}, ""yAxis"": [{""type"": ""linear"", ""tickFormat"": """"}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": "",000.00"", ""columnMapping"": {""day"": ""x"", ""fee"": ""y"", ""dfyn"": ""y"", ""dfyn_fee"": ""y"", ""fee_ratio"": ""y""}, ""seriesOptions"": {""fee"": {""name"": ""KyberDMM"", ""type"": ""column"", ""color"": ""#009688"", ""yAxis"": 0, ""zIndex"": 1}, ""dfyn_fee"": {""name"": ""DFYN"", ""type"": ""column"", ""color"": ""#536DFE"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""line""}, ""created_at"": ""2021-09-09T10:13:52.482407+00:00"", ""__typename"": ""visualizations""}, {""id"": 264322, ""type"": ""chart"", ""name"": """", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Volume in $""}, ""tickFormat"": """"}, {""type"": ""linear"", ""title"": {""text"": ""Fee in $""}}], ""legend"": {""enabled"": true}, ""series"": {""percentValues"": false}, ""reverseX"": false, ""numberFormat"": "",000.00"", ""columnMapping"": {"""": ""y"", ""day"": ""x"", ""hour"": ""x"", ""trxamount"": ""y"", ""dfyn_trxAmount"": ""y"", ""evt_block_time"": ""x""}, ""seriesOptions"": {""trxamount"": {""name"": ""KyberDMM"", ""type"": ""column"", ""color"": ""#009688"", ""yAxis"": 0, ""zIndex"": 0}, ""dfyn_trxAmount"": {""name"": ""DFYN"", ""type"": ""column"", ""color"": ""#536DFE"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": false, ""globalSeriesType"": ""line""}, ""created_at"": ""2021-09-01T07:42:27.573356+00:00"", ""__typename"": ""visualizations""}]","with swap as (
    select *
    from kyber.""DMMPool_evt_Swap""
    where contract_address = '\xaaae5aabdb7db627c58dfeeba27ba2933a39c592'
),

sync as (
    select *
    from kyber.""DMMPool_evt_Sync""
    where contract_address = '\xaaae5aabdb7db627c58dfeeba27ba2933a39c592'
),

event as (
    select
        ""amount0In"",
        ""amount0Out"",
        ""amount1In"",
        ""amount1Out"",
        ""feeInPrecision"",    
        ""vReserve0"", 
        ""vReserve1"",
        s.evt_tx_hash,
        s.evt_block_time,
        row_number() over (order by s.evt_block_time) as ""rn"" 
    from swap s
    left join sync sy on s.evt_tx_hash = sy.evt_tx_hash
    order by evt_block_time desc
),

consolidated as (
    select
        e.evt_block_time,
        e.""amount0In"" / 1e18 as ""amount0In"",
        e.""amount0Out"" / 1e18 as ""amount0Out"",
        e.""amount1In"" / 1e18 as ""amount1In"",
        e.""amount1Out"" / 1e18 as ""amount1Out"",
        e.""feeInPrecision"" / 1e18 as ""fee"",
        COALESCE(pre.""vReserve0"", 0) / 1e18 as ""vReserve0"",
        COALESCE(pre.""vReserve1"", 0) / 1e18 as ""vReserve1""
    from event e
    left join event pre on e.rn = pre.rn + 1
),

midcal as (
    select
        evt_block_time,
        case 
            when ""amount0In"" > 0 then ""fee"" * (""amount0In"" + ""amount1In"") * ""vReserve1""
            else ""fee"" * (""amount0In"" + ""amount1In"") * ""vReserve0""
        end as ""numerator"", 
         case 
            when ""amount0Out"" > 0 then ""fee"" * (""amount0In"" + ""amount1In"") + ""vReserve1""
            else ""fee"" * (""amount0In"" + ""amount1In"") + ""vReserve0""
        end as ""denominator""
    from consolidated
),

fees as (
    select 
        DATE_TRUNC('day', evt_block_time) as ""day"",
        sum(""numerator"" / ""denominator"") as ""fee""
    from midcal
    group by DATE_TRUNC('day', evt_block_time)
    order by 1
),

trx as (
    select
        DATE_TRUNC('day', evt_block_time) as ""day"",
        sum(""amount0In"" + ""amount0Out"" + ""amount1In"" + ""amount1Out"") / 2 / 1e18 as trxAmount
    from kyber.""DMMPool_evt_Swap""
    where contract_address = '\xaaae5aabdb7db627c58dfeeba27ba2933a39c592'
    group by DATE_TRUNC('day', evt_block_time)
    order by 1
),

-- select t.day, trxAmount, fee, fee / trxAmount as ""fee_ratio"", 
--     case
--         when 1=1 then 0.003 
--     end as ""dfyn""
-- from trx t
-- left join fees on t.day = fees.day
-- where t.day > '2021-07-31' and t.day < '2021-09-06'

dfyn_swap as (
    select *
    from dfyn.""UniswapV2Pair_evt_Swap""
    where contract_address = '\x527e43ca8f600f120b1eaEe2aFc80E3Cb375e191'
),


dfyn_trx as (
    select
        DATE_TRUNC('day', evt_block_time) as ""day"",
        sum(""amount0In"" / 1e6 + ""amount0Out"" / 1e6 + ""amount1In"" / 1e18 + ""amount1Out"" / 1e18) / 2 as trxAmount
    from dfyn.""UniswapV2Pair_evt_Swap""
    where contract_address = '\x527e43ca8f600f120b1eaEe2aFc80E3Cb375e191'
    group by DATE_TRUNC('day', evt_block_time)
    order by 1
)

select t.day, d.trxAmount as ""dfyn_trxAmount"", d.trxAmount * 0.003 as ""dfyn_fee"", t.trxAmount, f.fee
from trx t
left join dfyn_trx d on t.day = d.day
left join fees f on t.day = f.day
where t.day > '2021-07-27' and t.day < '2021-08-27'
-- fee color: 0 150 136
-- volume color: 139 195 74

"
145015,Avg. Fee Ratio (xUSD-DAI),,"[{""id"": 285629, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-09-09T20:29:17.451544+00:00"", ""__typename"": ""visualizations""}, {""id"": 285633, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""stringSuffix"": ""%"", ""stringDecimal"": 3, ""counterColName"": ""fee_ratio""}, ""created_at"": ""2021-09-09T20:30:11.071574+00:00"", ""__typename"": ""visualizations""}]","with swap as (
    select *
    from kyber.""DMMPool_evt_Swap""
    where contract_address = '\xaaae5aabdb7db627c58dfeeba27ba2933a39c592'
),

sync as (
    select *
    from kyber.""DMMPool_evt_Sync""
    where contract_address = '\xaaae5aabdb7db627c58dfeeba27ba2933a39c592'
),

event as (
    select
        ""amount0In"",
        ""amount0Out"",
        ""amount1In"",
        ""amount1Out"",
        ""feeInPrecision"",    
        ""vReserve0"", 
        ""vReserve1"",
        s.evt_tx_hash,
        s.evt_block_time,
        row_number() over (order by s.evt_block_time) as ""rn"" 
    from swap s
    left join sync sy on s.evt_tx_hash = sy.evt_tx_hash
    order by evt_block_time desc
),

consolidated as (
    select
        e.evt_block_time,
        e.""amount0In"" / 1e18 as ""amount0In"",
        e.""amount0Out"" / 1e18 as ""amount0Out"",
        e.""amount1In"" / 1e18 as ""amount1In"",
        e.""amount1Out"" / 1e18 as ""amount1Out"",
        e.""feeInPrecision"" / 1e18 as ""fee"",
        COALESCE(pre.""vReserve0"", 0) / 1e18 as ""vReserve0"",
        COALESCE(pre.""vReserve1"", 0) / 1e18 as ""vReserve1""
    from event e
    left join event pre on e.rn = pre.rn + 1
),

midcal as (
    select
        evt_block_time,
        case 
            when ""amount0In"" > 0 then ""fee"" * (""amount0In"" + ""amount1In"") * ""vReserve1""
            else ""fee"" * (""amount0In"" + ""amount1In"") * ""vReserve0""
        end as ""numerator"", 
         case 
            when ""amount0Out"" > 0 then ""fee"" * (""amount0In"" + ""amount1In"") + ""vReserve1""
            else ""fee"" * (""amount0In"" + ""amount1In"") + ""vReserve0""
        end as ""denominator""
    from consolidated
),

fees as (
    select 
        DATE_TRUNC('day', evt_block_time) as ""day"",
        sum(""numerator"" / ""denominator"") as ""fee""
    from midcal
    group by DATE_TRUNC('day', evt_block_time)
    order by 1
),

trx as (
    select
        DATE_TRUNC('day', evt_block_time) as ""day"",
        sum(""amount0In"" + ""amount0Out"" + ""amount1In"" + ""amount1Out"") / 2 / 1e18 as trxAmount
    from kyber.""DMMPool_evt_Swap""
    where contract_address = '\xaaae5aabdb7db627c58dfeeba27ba2933a39c592'
    group by DATE_TRUNC('day', evt_block_time)
    order by 1
)

select avg(fee / trxAmount) * 100 as ""fee_ratio""
from trx t
left join fees on t.day = fees.day
where t.day > '2021-08-06'
-- fee color: 0 150 136
-- volume color: 139 195 74

"
148143,DMM vs AMM Fee,,"[{""id"": 292189, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": "",000.00"", ""columnMapping"": {""day"": ""x"", ""fee"": ""y"", ""dfyn_fee"": ""y""}, ""seriesOptions"": {""fee"": {""name"": ""KyberDMM"", ""type"": ""column"", ""color"": ""#009688"", ""yAxis"": 0, ""zIndex"": 1}, ""dfyn_fee"": {""name"": ""DFYN"", ""type"": ""column"", ""color"": ""#536DFE"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2021-09-12T11:32:48.553486+00:00"", ""__typename"": ""visualizations""}, {""id"": 292188, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-09-12T11:32:36.694641+00:00"", ""__typename"": ""visualizations""}]","with swap as (
    select *
    from kyber.""DMMPool_evt_Swap""
    where contract_address = '\xaaae5aabdb7db627c58dfeeba27ba2933a39c592'
),

sync as (
    select *
    from kyber.""DMMPool_evt_Sync""
    where contract_address = '\xaaae5aabdb7db627c58dfeeba27ba2933a39c592'
),

event as (
    select
        ""amount0In"",
        ""amount0Out"",
        ""amount1In"",
        ""amount1Out"",
        ""feeInPrecision"",    
        ""vReserve0"", 
        ""vReserve1"",
        s.evt_tx_hash,
        s.evt_block_time,
        row_number() over (order by s.evt_block_time) as ""rn"" 
    from swap s
    left join sync sy on s.evt_tx_hash = sy.evt_tx_hash
    order by evt_block_time desc
),

consolidated as (
    select
        e.evt_block_time,
        e.""amount0In"" / 1e18 as ""amount0In"",
        e.""amount0Out"" / 1e18 as ""amount0Out"",
        e.""amount1In"" / 1e18 as ""amount1In"",
        e.""amount1Out"" / 1e18 as ""amount1Out"",
        e.""feeInPrecision"" / 1e18 as ""fee"",
        COALESCE(pre.""vReserve0"", 0) / 1e18 as ""vReserve0"",
        COALESCE(pre.""vReserve1"", 0) / 1e18 as ""vReserve1""
    from event e
    left join event pre on e.rn = pre.rn + 1
),

midcal as (
    select
        evt_block_time,
        case 
            when ""amount0In"" > 0 then ""fee"" * (""amount0In"" + ""amount1In"") * ""vReserve1""
            else ""fee"" * (""amount0In"" + ""amount1In"") * ""vReserve0""
        end as ""numerator"", 
         case 
            when ""amount0Out"" > 0 then ""fee"" * (""amount0In"" + ""amount1In"") + ""vReserve1""
            else ""fee"" * (""amount0In"" + ""amount1In"") + ""vReserve0""
        end as ""denominator""
    from consolidated
),

fees as (
    select 
        DATE_TRUNC('day', evt_block_time) as ""day"",
        sum(""numerator"" / ""denominator"") as ""fee""
    from midcal
    group by DATE_TRUNC('day', evt_block_time)
    order by 1
),

trx as (
    select
        DATE_TRUNC('day', evt_block_time) as ""day"",
        sum(""amount0In"" + ""amount0Out"" + ""amount1In"" + ""amount1Out"") / 2 / 1e18 as trxAmount
    from kyber.""DMMPool_evt_Swap""
    where contract_address = '\xaaae5aabdb7db627c58dfeeba27ba2933a39c592'
    group by DATE_TRUNC('day', evt_block_time)
    order by 1
),

-- select t.day, trxAmount, fee, fee / trxAmount as ""fee_ratio"", 
--     case
--         when 1=1 then 0.003 
--     end as ""dfyn""
-- from trx t
-- left join fees on t.day = fees.day
-- where t.day > '2021-07-31' and t.day < '2021-09-06'

dfyn_swap as (
    select *
    from dfyn.""UniswapV2Pair_evt_Swap""
    where contract_address = '\x527e43ca8f600f120b1eaEe2aFc80E3Cb375e191'
),


dfyn_trx as (
    select
        DATE_TRUNC('day', evt_block_time) as ""day"",
        sum(""amount0In"" / 1e6 + ""amount0Out"" / 1e6 + ""amount1In"" / 1e18 + ""amount1Out"" / 1e18) / 2 as trxAmount
    from dfyn.""UniswapV2Pair_evt_Swap""
    where contract_address = '\x527e43ca8f600f120b1eaEe2aFc80E3Cb375e191'
    group by DATE_TRUNC('day', evt_block_time)
    order by 1
)

select t.day, d.trxAmount as ""dfyn_trxAmount"", d.trxAmount * 0.003 as ""dfyn_fee"", t.trxAmount, f.fee
from trx t
left join dfyn_trx d on t.day = d.day
left join fees f on t.day = f.day
where t.day > '2021-07-27' and t.day < '2021-08-27'
-- fee color: 0 150 136
-- volume color: 139 195 74

"
144778,DMM vs AMM Fee Ratio (KNC-WETH),,"[{""id"": 285193, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-09-09T17:51:33.777344+00:00"", ""__typename"": ""visualizations""}, {""id"": 285194, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""tickFormat"": ""0.00%""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""0.00%"", ""columnMapping"": {""day"": ""x"", ""kyber_ratio"": ""y"", ""quick_ratio"": ""y""}, ""seriesOptions"": {""kyber_ratio"": {""name"": ""KyberDMM"", ""type"": ""area"", ""color"": ""#009688"", ""yAxis"": 0, ""zIndex"": 1}, ""quick_ratio"": {""name"": ""QuickSwap"", ""type"": ""line"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""line""}, ""created_at"": ""2021-09-09T17:52:09.476205+00:00"", ""__typename"": ""visualizations""}]","--kyber knc-weth \xd8b9e9444fcbf26bea4badd6142dd6a962bca86a
with kyber_swap as (
    select *
    from kyber.""DMMPool_evt_Swap""
    where contract_address = '\xd8b9e9444fcbf26bea4badd6142dd6a962bca86a'
),

kyber_sync as (
    select *
    from kyber.""DMMPool_evt_Sync""
    where contract_address = '\xd8b9e9444fcbf26bea4badd6142dd6a962bca86a'
),

kyber_event as (
    select
        ""amount0In"",
        ""amount0Out"",
        ""amount1In"",
        ""amount1Out"",
        ""feeInPrecision"",    
        ""vReserve0"", 
        ""vReserve1"",
        s.evt_tx_hash,
        s.evt_block_time,
        row_number() over (order by s.evt_block_time) as ""rn"" 
    from kyber_swap s
    left join kyber_sync sy on s.evt_tx_hash = sy.evt_tx_hash
    order by evt_block_time desc
),

kyber_consolidated as (
    select
        e.evt_block_time,
        e.""amount0In"" / 1e6 as ""amount0In"",
        e.""amount0Out"" / 1e6 as ""amount0Out"",
        e.""amount1In"" / 1e6 as ""amount1In"",
        e.""amount1Out"" / 1e6 as ""amount1Out"",
        e.""feeInPrecision"" / 1e18 as ""fee"",
        COALESCE(pre.""vReserve0"", 0) / 1e6 as ""vReserve0"",
        COALESCE(pre.""vReserve1"", 0) / 1e6 as ""vReserve1""
    from kyber_event e
    left join kyber_event pre on e.rn = pre.rn + 1
),

kyber_midcal as (
    select
        evt_block_time,
        case 
            when ""amount0In"" > 0 then ""fee"" * (""amount0In"" + ""amount1In"") * ""vReserve1""
            else ""fee"" * (""amount0In"" + ""amount1In"") * ""vReserve0""
        end as ""numerator"", 
         case 
            when ""amount0Out"" > 0 then ""fee"" * (""amount0In"" + ""amount1In"") + ""vReserve1""
            else ""fee"" * (""amount0In"" + ""amount1In"") + ""vReserve0""
        end as ""denominator""
    from kyber_consolidated
),

kyber_fees as (
    select 
        DATE_TRUNC('day', evt_block_time) as ""day"",
        sum(""numerator"" / ""denominator"") as ""kyber_fee""
    from kyber_midcal
    group by DATE_TRUNC('day', evt_block_time)
    order by 1
),

kyber_trx as (
    select
        DATE_TRUNC('day', evt_block_time) as ""day"",
        sum(""amount0In"" + ""amount0Out"" + ""amount1In"" + ""amount1Out"") / 2 / 1e6 as kyber_trxAmount
    from kyber.""DMMPool_evt_Swap""
    where contract_address = '\xd8b9e9444fcbf26bea4badd6142dd6a962bca86a'
    group by DATE_TRUNC('day', evt_block_time)
    order by 1
)

--quickswap usdc-usdt \x2cf7252e74036d1da831d11089d326296e64a728
-- quick_trx as (
--     select
--         DATE_TRUNC('day', evt_block_time) as ""day"",
--         sum(""amount0In"" + ""amount0Out"" + ""amount1In"" + ""amount1Out"") / 2 / 1e6 as quick_trxAmount,
--         sum(""amount0In"" + ""amount0Out"" + ""amount1In"" + ""amount1Out"") / 2 * 0.003 / 1e6 as quick_fee
--     from quickswap.""UniswapV2Pair_evt_Swap""
--     where contract_address = '\x2cf7252e74036d1da831d11089d326296e64a728' and evt_block_time > '2021-07-01' and evt_block_time < '2021-09-06'
--     group by DATE_TRUNC('day', evt_block_time)
--     order by 1
-- )

select kt.day, 
    case 
        when 1=1 then 0.003
    end as ""quick_ratio"", 
    (kyber_fee / kyber_trxAmount) as ""kyber_ratio""
-- kyber_fee, kyber_trxAmount
from kyber_trx kt
left join kyber_fees f on kt.day = f.day
where kt.day > '2021-08-06' and kt.day < '2021-09-06'"
144961,Avg. Fee Ratio (USDC-WETH),,"[{""id"": 285519, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-09-09T19:25:45.875918+00:00"", ""__typename"": ""visualizations""}, {""id"": 285520, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""stringSuffix"": ""%"", ""stringDecimal"": 3, ""counterColName"": ""kyber_ratio""}, ""created_at"": ""2021-09-09T19:25:59.400438+00:00"", ""__typename"": ""visualizations""}]","--kyber 
--usdc-usdt \x3904ac366d348636694cb6720aa1540e76441b1b
--usdc-weth \x95d708e9ee04b0136b98579141624d19c89b9d68
with kyber_swap as (
    select *
    from kyber.""DMMPool_evt_Swap""
    where contract_address = '\x95d708e9ee04b0136b98579141624d19c89b9d68'
),

kyber_sync as (
    select *
    from kyber.""DMMPool_evt_Sync""
    where contract_address = '\x95d708e9ee04b0136b98579141624d19c89b9d68'
),

kyber_event as (
    select
        ""amount0In"",
        ""amount0Out"",
        ""amount1In"",
        ""amount1Out"",
        ""feeInPrecision"",    
        ""vReserve0"", 
        ""vReserve1"",
        s.evt_tx_hash,
        s.evt_block_time,
        row_number() over (order by s.evt_block_time) as ""rn"" 
    from kyber_swap s
    left join kyber_sync sy on s.evt_tx_hash = sy.evt_tx_hash
    order by evt_block_time desc
),

kyber_consolidated as (
    select
        e.evt_block_time,
        e.""amount0In"" / 1e6 as ""amount0In"",
        e.""amount0Out"" / 1e6 as ""amount0Out"",
        e.""amount1In"" / 1e18 as ""amount1In"",
        e.""amount1Out"" / 1e18 as ""amount1Out"",
        e.""feeInPrecision"" / 1e18 as ""fee"",
        COALESCE(pre.""vReserve0"", 0) / 1e6 as ""vReserve0"",
        COALESCE(pre.""vReserve1"", 0) / 1e18 as ""vReserve1""
    from kyber_event e
    left join kyber_event pre on e.rn = pre.rn + 1
),

kyber_midcal as (
    select
        evt_block_time,
        case 
            when ""amount0In"" > 0 then ""fee"" * (""amount0In"" + ""amount1In"") * ""vReserve1""
            else ""fee"" * (""amount0In"" + ""amount1In"") * ""vReserve0""
        end as ""numerator"", 
         case 
            when ""amount0Out"" > 0 then ""fee"" * (""amount0In"" + ""amount1In"") + ""vReserve1""
            else ""fee"" * (""amount0In"" + ""amount1In"") + ""vReserve0""
        end as ""denominator""
    from kyber_consolidated
),

kyber_fees as (
    select 
        DATE_TRUNC('day', evt_block_time) as ""day"",
        sum(""numerator"" / ""denominator"") as ""kyber_fee""
    from kyber_midcal
    group by DATE_TRUNC('day', evt_block_time)
    order by 1
),

kyber_trx as (
    select
        DATE_TRUNC('day', evt_block_time) as ""day"",
        sum(""amount0In"" / 1e6 + ""amount0Out"" / 1e6 + ""amount1In"" / 1e18 + ""amount1Out"" / 1e18) / 2 as kyber_trxAmount
    from kyber.""DMMPool_evt_Swap""
    where contract_address = '\x95d708e9ee04b0136b98579141624d19c89b9d68'
    group by DATE_TRUNC('day', evt_block_time)
    order by 1
)

--quickswap 
--usdc-weth '\x853ee4b2a13f8a742d64c8f088be7ba2131f670d
-- quick_trx as (
--     select
--         DATE_TRUNC('day', evt_block_time) as ""day"",
--         sum(""amount0In"" / 1e6 + ""amount0Out"" / 1e18 + ""amount1In"" / 1e6 + ""amount1Out"" / 1e18) / 2 as quick_trxAmount,
--         sum(""amount0In"" / 1e6 + ""amount0Out"" / 1e18 + ""amount1In"" / 1e6 + ""amount1Out"" / 1e18) / 2 * 0.003 as quick_fee
--     from quickswap.""UniswapV2Pair_evt_Swap""
--     where contract_address = '\x853ee4b2a13f8a742d64c8f088be7ba2131f670d' and evt_block_time > '2021-07-01' and evt_block_time < '2021-09-06'
--     group by DATE_TRUNC('day', evt_block_time)
--     order by 1
-- )

select avg(kyber_fee / kyber_trxAmount) * 100 as ""kyber_ratio""
from kyber_trx kt
left join kyber_fees f on kt.day = f.day
where kt.day > '2021-08-06' and kt.day < '2021-09-06' and kt.day != '2021-08-30'"
144967,Avg. Fee Ratio (KNC-WETH),,"[{""id"": 285529, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-09-09T19:28:33.963911+00:00"", ""__typename"": ""visualizations""}, {""id"": 285538, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""stringSuffix"": ""%"", ""stringDecimal"": 3, ""counterColName"": ""kyber_ratio""}, ""created_at"": ""2021-09-09T19:31:29.702593+00:00"", ""__typename"": ""visualizations""}]","--kyber knc-weth \xd8b9e9444fcbf26bea4badd6142dd6a962bca86a
with kyber_swap as (
    select *
    from kyber.""DMMPool_evt_Swap""
    where contract_address = '\xd8b9e9444fcbf26bea4badd6142dd6a962bca86a'
),

kyber_sync as (
    select *
    from kyber.""DMMPool_evt_Sync""
    where contract_address = '\xd8b9e9444fcbf26bea4badd6142dd6a962bca86a'
),

kyber_event as (
    select
        ""amount0In"",
        ""amount0Out"",
        ""amount1In"",
        ""amount1Out"",
        ""feeInPrecision"",    
        ""vReserve0"", 
        ""vReserve1"",
        s.evt_tx_hash,
        s.evt_block_time,
        row_number() over (order by s.evt_block_time) as ""rn"" 
    from kyber_swap s
    left join kyber_sync sy on s.evt_tx_hash = sy.evt_tx_hash
    order by evt_block_time desc
),

kyber_consolidated as (
    select
        e.evt_block_time,
        e.""amount0In"" / 1e6 as ""amount0In"",
        e.""amount0Out"" / 1e6 as ""amount0Out"",
        e.""amount1In"" / 1e6 as ""amount1In"",
        e.""amount1Out"" / 1e6 as ""amount1Out"",
        e.""feeInPrecision"" / 1e18 as ""fee"",
        COALESCE(pre.""vReserve0"", 0) / 1e6 as ""vReserve0"",
        COALESCE(pre.""vReserve1"", 0) / 1e6 as ""vReserve1""
    from kyber_event e
    left join kyber_event pre on e.rn = pre.rn + 1
),

kyber_midcal as (
    select
        evt_block_time,
        case 
            when ""amount0In"" > 0 then ""fee"" * (""amount0In"" + ""amount1In"") * ""vReserve1""
            else ""fee"" * (""amount0In"" + ""amount1In"") * ""vReserve0""
        end as ""numerator"", 
         case 
            when ""amount0Out"" > 0 then ""fee"" * (""amount0In"" + ""amount1In"") + ""vReserve1""
            else ""fee"" * (""amount0In"" + ""amount1In"") + ""vReserve0""
        end as ""denominator""
    from kyber_consolidated
),

kyber_fees as (
    select 
        DATE_TRUNC('day', evt_block_time) as ""day"",
        sum(""numerator"" / ""denominator"") as ""kyber_fee""
    from kyber_midcal
    group by DATE_TRUNC('day', evt_block_time)
    order by 1
),

kyber_trx as (
    select
        DATE_TRUNC('day', evt_block_time) as ""day"",
        sum(""amount0In"" + ""amount0Out"" + ""amount1In"" + ""amount1Out"") / 2 / 1e6 as kyber_trxAmount
    from kyber.""DMMPool_evt_Swap""
    where contract_address = '\xd8b9e9444fcbf26bea4badd6142dd6a962bca86a'
    group by DATE_TRUNC('day', evt_block_time)
    order by 1
)

select avg(kyber_fee / kyber_trxAmount) * 100 as ""kyber_ratio""
from kyber_trx kt
left join kyber_fees f on kt.day = f.day
where kt.day > '2021-08-06' and kt.day != '2021-08-30'
"
148148,DMM vs AMM Fee Ratio (xUSD-DAI/USDC),,"[{""id"": 292196, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-09-12T11:39:02.843377+00:00"", ""__typename"": ""visualizations""}, {""id"": 292197, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""tickFormat"": ""0.00%""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""0.00%"", ""columnMapping"": {""day"": ""x"", ""dfyn"": ""y"", ""kyber"": ""y""}, ""seriesOptions"": {""dfyn"": {""type"": ""line"", ""yAxis"": 0, ""zIndex"": 0}, ""kyber"": {""type"": ""area"", ""color"": ""#009688"", ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""line""}, ""created_at"": ""2021-09-12T11:39:31.940543+00:00"", ""__typename"": ""visualizations""}]","with swap as (
    select *
    from kyber.""DMMPool_evt_Swap""
    where contract_address = '\xaaae5aabdb7db627c58dfeeba27ba2933a39c592'
),

sync as (
    select *
    from kyber.""DMMPool_evt_Sync""
    where contract_address = '\xaaae5aabdb7db627c58dfeeba27ba2933a39c592'
),

event as (
    select
        ""amount0In"",
        ""amount0Out"",
        ""amount1In"",
        ""amount1Out"",
        ""feeInPrecision"",    
        ""vReserve0"", 
        ""vReserve1"",
        s.evt_tx_hash,
        s.evt_block_time,
        row_number() over (order by s.evt_block_time) as ""rn"" 
    from swap s
    left join sync sy on s.evt_tx_hash = sy.evt_tx_hash
    order by evt_block_time desc
),

consolidated as (
    select
        e.evt_block_time,
        e.""amount0In"" / 1e18 as ""amount0In"",
        e.""amount0Out"" / 1e18 as ""amount0Out"",
        e.""amount1In"" / 1e18 as ""amount1In"",
        e.""amount1Out"" / 1e18 as ""amount1Out"",
        e.""feeInPrecision"" / 1e18 as ""fee"",
        COALESCE(pre.""vReserve0"", 0) / 1e18 as ""vReserve0"",
        COALESCE(pre.""vReserve1"", 0) / 1e18 as ""vReserve1""
    from event e
    left join event pre on e.rn = pre.rn + 1
),

midcal as (
    select
        evt_block_time,
        case 
            when ""amount0In"" > 0 then ""fee"" * (""amount0In"" + ""amount1In"") * ""vReserve1""
            else ""fee"" * (""amount0In"" + ""amount1In"") * ""vReserve0""
        end as ""numerator"", 
         case 
            when ""amount0Out"" > 0 then ""fee"" * (""amount0In"" + ""amount1In"") + ""vReserve1""
            else ""fee"" * (""amount0In"" + ""amount1In"") + ""vReserve0""
        end as ""denominator""
    from consolidated
),

fees as (
    select 
        DATE_TRUNC('day', evt_block_time) as ""day"",
        sum(""numerator"" / ""denominator"") as ""fee""
    from midcal
    group by DATE_TRUNC('day', evt_block_time)
    order by 1
),

trx as (
    select
        DATE_TRUNC('day', evt_block_time) as ""day"",
        sum(""amount0In"" + ""amount0Out"" + ""amount1In"" + ""amount1Out"") / 2 / 1e18 as trxAmount
    from kyber.""DMMPool_evt_Swap""
    where contract_address = '\xaaae5aabdb7db627c58dfeeba27ba2933a39c592'
    group by DATE_TRUNC('day', evt_block_time)
    order by 1
),

-- select t.day, trxAmount, fee, fee / trxAmount as ""fee_ratio"", 
--     case
--         when 1=1 then 0.003 
--     end as ""dfyn""
-- from trx t
-- left join fees on t.day = fees.day
-- where t.day > '2021-07-31' and t.day < '2021-09-06'

dfyn_swap as (
    select *
    from dfyn.""UniswapV2Pair_evt_Swap""
    where contract_address = '\x527e43ca8f600f120b1eaEe2aFc80E3Cb375e191'
),


dfyn_trx as (
    select
        DATE_TRUNC('day', evt_block_time) as ""day"",
        sum(""amount0In"" / 1e6 + ""amount0Out"" / 1e6 + ""amount1In"" / 1e18 + ""amount1Out"" / 1e18) / 2 as trxAmount
    from dfyn.""UniswapV2Pair_evt_Swap""
    where contract_address = '\x527e43ca8f600f120b1eaEe2aFc80E3Cb375e191'
    group by DATE_TRUNC('day', evt_block_time)
    order by 1
)

select t.day, f.fee / t.trxAmount as ""kyber"",
    case 
        when 1=1 then 0.003
    end as ""dfyn""
from trx t
left join fees f on t.day = f.day
where t.day > '2021-07-27' and t.day < '2021-08-27'
-- fee color: 0 150 136
-- volume color: 139 195 74

"
144353,DMM vs AMM Fee Ratio (USDC-WETH),,"[{""id"": 284435, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-09-09T09:44:52.273974+00:00"", ""__typename"": ""visualizations""}, {""id"": 284440, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""-"", ""tickFormat"": ""0.00%""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""numberFormat"": ""0.00%"", ""columnMapping"": {""day"": ""x"", ""kyber_ratio"": ""y"", ""quick_ratio"": ""y""}, ""seriesOptions"": {""kyber_ratio"": {""name"": ""KyberDMM"", ""type"": ""area"", ""color"": ""#009688"", ""yAxis"": 0, ""zIndex"": 1}, ""quick_ratio"": {""name"": ""QuickSwap"", ""type"": ""line"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""line""}, ""created_at"": ""2021-09-09T09:47:02.865205+00:00"", ""__typename"": ""visualizations""}]","--kyber 
--usdc-usdt \x3904ac366d348636694cb6720aa1540e76441b1b
--usdc-weth \x95d708e9ee04b0136b98579141624d19c89b9d68
with kyber_swap as (
    select *
    from kyber.""DMMPool_evt_Swap""
    where contract_address = '\x95d708e9ee04b0136b98579141624d19c89b9d68'
),

kyber_sync as (
    select *
    from kyber.""DMMPool_evt_Sync""
    where contract_address = '\x95d708e9ee04b0136b98579141624d19c89b9d68'
),

kyber_event as (
    select
        ""amount0In"",
        ""amount0Out"",
        ""amount1In"",
        ""amount1Out"",
        ""feeInPrecision"",    
        ""vReserve0"", 
        ""vReserve1"",
        s.evt_tx_hash,
        s.evt_block_time,
        row_number() over (order by s.evt_block_time) as ""rn"" 
    from kyber_swap s
    left join kyber_sync sy on s.evt_tx_hash = sy.evt_tx_hash
    order by evt_block_time desc
),

kyber_consolidated as (
    select
        e.evt_block_time,
        e.""amount0In"" / 1e6 as ""amount0In"",
        e.""amount0Out"" / 1e6 as ""amount0Out"",
        e.""amount1In"" / 1e18 as ""amount1In"",
        e.""amount1Out"" / 1e18 as ""amount1Out"",
        e.""feeInPrecision"" / 1e18 as ""fee"",
        COALESCE(pre.""vReserve0"", 0) / 1e6 as ""vReserve0"",
        COALESCE(pre.""vReserve1"", 0) / 1e18 as ""vReserve1""
    from kyber_event e
    left join kyber_event pre on e.rn = pre.rn + 1
),

kyber_midcal as (
    select
        evt_block_time,
        case 
            when ""amount0In"" > 0 then ""fee"" * (""amount0In"" + ""amount1In"") * ""vReserve1""
            else ""fee"" * (""amount0In"" + ""amount1In"") * ""vReserve0""
        end as ""numerator"", 
         case 
            when ""amount0Out"" > 0 then ""fee"" * (""amount0In"" + ""amount1In"") + ""vReserve1""
            else ""fee"" * (""amount0In"" + ""amount1In"") + ""vReserve0""
        end as ""denominator""
    from kyber_consolidated
),

kyber_fees as (
    select 
        DATE_TRUNC('day', evt_block_time) as ""day"",
        sum(""numerator"" / ""denominator"") as ""kyber_fee""
    from kyber_midcal
    group by DATE_TRUNC('day', evt_block_time)
    order by 1
),

kyber_trx as (
    select
        DATE_TRUNC('day', evt_block_time) as ""day"",
        sum(""amount0In"" / 1e6 + ""amount0Out"" / 1e6 + ""amount1In"" / 1e18 + ""amount1Out"" / 1e18) / 2 as kyber_trxAmount
    from kyber.""DMMPool_evt_Swap""
    where contract_address = '\x95d708e9ee04b0136b98579141624d19c89b9d68'
    group by DATE_TRUNC('day', evt_block_time)
    order by 1
)

--quickswap 
--usdc-usdt \x2cf7252e74036d1da831d11089d326296e64a728
--usdc-weth '\x853ee4b2a13f8a742d64c8f088be7ba2131f670d
-- quick_trx as (
--     select
--         DATE_TRUNC('day', evt_block_time) as ""day"",
--         sum(""amount0In"" / 1e6 + ""amount0Out"" / 1e18 + ""amount1In"" / 1e6 + ""amount1Out"" / 1e18) / 2 as quick_trxAmount,
--         sum(""amount0In"" / 1e6 + ""amount0Out"" / 1e18 + ""amount1In"" / 1e6 + ""amount1Out"" / 1e18) / 2 * 0.003 as quick_fee
--     from quickswap.""UniswapV2Pair_evt_Swap""
--     where contract_address = '\x853ee4b2a13f8a742d64c8f088be7ba2131f670d' 
--     group by DATE_TRUNC('day', evt_block_time)
--     order by 1
-- )

select kt.day, 
    case 
        when 1=1 then 0.003
    end as ""quick_ratio"", 
    (kyber_fee / kyber_trxAmount) as ""kyber_ratio""
from kyber_trx kt
left join kyber_fees f on kt.day = f.day
where kt.day > '2021-08-06' and kt.day < '2021-09-06' and kt.day != '2021-08-30'"
145548,Kyber LP Liquidity & Fee,,"[{""id"": 286862, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2021-09-10T07:56:47.268513+00:00"", ""__typename"": ""visualizations""}, {""id"": 286897, ""type"": ""chart"", ""name"": ""Fee / Liquidity (USDC-WETH)"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""tickFormat"": ""0.00%""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""0.00%"", ""columnMapping"": {""day"": ""x"", ""kyber"": ""y"", ""quick"": ""y"", ""fee_ratio"": ""y"", ""utilization"": ""y"", ""fee_ratio_by_liquidity"": ""y"", ""fee_ratio_by_utilization"": ""y""}, ""seriesOptions"": {""kyber"": {""name"": ""KyberDMM"", ""type"": ""column"", ""color"": ""#009688"", ""yAxis"": 0, ""zIndex"": 1}, ""quick"": {""name"": ""QuickSwap"", ""type"": ""column"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""line""}, ""created_at"": ""2021-09-10T08:13:07.119919+00:00"", ""__typename"": ""visualizations""}, {""id"": 287369, ""type"": ""chart"", ""name"": ""Volume / Liquidity (USDC-WETH)"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear"", ""tickFormat"": ""0%""}, {""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""percentValues"": false}, ""reverseX"": false, ""numberFormat"": ""0%"", ""columnMapping"": {"""": ""y"", ""day"": ""x"", ""?column?"": ""y"", ""?column? (1)"": ""y""}, ""seriesOptions"": {""kyber"": {""type"": ""line"", ""yAxis"": 1, ""zIndex"": 2}, ""quick"": {""type"": ""line"", ""yAxis"": 1, ""zIndex"": 3}, ""?column?"": {""name"": ""KyberDMM"", ""type"": ""column"", ""color"": ""#009688"", ""yAxis"": 0, ""zIndex"": 1}, ""?column? (1)"": {""name"": ""QuickSwap"", ""type"": ""column"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": false, ""globalSeriesType"": ""line""}, ""created_at"": ""2021-09-10T11:03:49.320204+00:00"", ""__typename"": ""visualizations""}]","-- usdc-weth \x95d708e9ee04b0136b98579141624d19c89b9d68
-- liquidty
with adds as (
    select 
        DATE_TRUNC('day', evt_block_time) as ""day"",
        sum(amount0 + amount1) / 1e6 as ""add""
    from kyber.""DMMPool_evt_Mint""
    where contract_address = '\x95d708e9ee04b0136b98579141624d19c89b9d68'
    group by DATE_TRUNC('day', evt_block_time)
    order by 1
),

removes as (
    select 
        DATE_TRUNC('day', evt_block_time) as ""day"",
        sum(amount0 + amount1) / 1e6 as ""minus""
    from kyber.""DMMPool_evt_Burn""
    where contract_address = '\x95d708e9ee04b0136b98579141624d19c89b9d68'
    group by DATE_TRUNC('day', evt_block_time)
    order by 1
),

balances as (
    select a.""day"", ""add"" - COALESCE(""minus"", 0) as ""liquidity""
    from adds a
    left join removes r on a.""day"" = r.""day""
),

-- show liquidity
lqty as (
    select b.day, sum(liquidity) over (order by b.day) as ""liquidity""
    from balances b
    order by 1
    -- color: 0 150 136
),

-- volume
swap as (
    select *
    from kyber.""DMMPool_evt_Swap""
    where contract_address = '\x95d708e9ee04b0136b98579141624d19c89b9d68'
),

sync as (
    select *
    from kyber.""DMMPool_evt_Sync""
    where contract_address = '\x95d708e9ee04b0136b98579141624d19c89b9d68'
),

event as (
    select
        ""amount0In"",
        ""amount0Out"",
        ""amount1In"",
        ""amount1Out"",
        ""feeInPrecision"",    
        ""vReserve0"", 
        ""vReserve1"",
        s.evt_tx_hash,
        s.evt_block_time,
        row_number() over (order by s.evt_block_time) as ""rn"" 
    from swap s
    left join sync sy on s.evt_tx_hash = sy.evt_tx_hash
    order by evt_block_time desc
),

consolidated as (
    select
        e.evt_block_time,
        e.""amount0In"" / 1e6 as ""amount0In"",
        e.""amount0Out"" / 1e6 as ""amount0Out"",
        e.""amount1In"" / 1e6 as ""amount1In"",
        e.""amount1Out"" / 1e6 as ""amount1Out"",
        e.""feeInPrecision"" / 1e18 as ""fee"",
        COALESCE(pre.""vReserve0"", 0) / 1e6 as ""vReserve0"",
        COALESCE(pre.""vReserve1"", 0) / 1e6 as ""vReserve1""
    from event e
    left join event pre on e.rn = pre.rn + 1
),

midcal as (
    select
        evt_block_time,
        case 
            when ""amount0In"" > 0 then ""fee"" * (""amount0In"" + ""amount1In"") * ""vReserve1""
            else ""fee"" * (""amount0In"" + ""amount1In"") * ""vReserve0""
        end as ""numerator"", 
         case 
            when ""amount0Out"" > 0 then ""fee"" * (""amount0In"" + ""amount1In"") + ""vReserve1""
            else ""fee"" * (""amount0In"" + ""amount1In"") + ""vReserve0""
        end as ""denominator""
    from consolidated
),

fees as (
    select 
        DATE_TRUNC('day', evt_block_time) as ""day"",
        sum(""numerator"" / ""denominator"") as ""fee""
    from midcal
    group by DATE_TRUNC('day', evt_block_time)
    order by 1
),

vol as (
    select
        DATE_TRUNC('day', evt_block_time) as ""day"",
        sum(""amount0In"" + ""amount0Out"" + ""amount1In"" + ""amount1Out"") / 2 / 1e6 as ""volume""
    from kyber.""DMMPool_evt_Swap""
    where contract_address = '\x95d708e9ee04b0136b98579141624d19c89b9d68'
    group by DATE_TRUNC('day', evt_block_time)
    order by 1
),

quick_vol as (
    select
        DATE_TRUNC('day', evt_block_time) as ""day"",
        sum(""amount0In"" + ""amount0Out"" + ""amount1In"" + ""amount1Out"") / 2 / 1e6 as ""quick_volume"",
        sum(""amount0In"" + ""amount0Out"" + ""amount1In"" + ""amount1Out"") / 2 * 0.003 / 1e6 as ""quick_fee""
    from quickswap.""UniswapV2Pair_evt_Swap""
    where contract_address = '\x853ee4b2a13f8a742d64c8f088be7ba2131f670d' 
    group by DATE_TRUNC('day', evt_block_time)
    order by 1
),

quick_adds as (
    select 
        DATE_TRUNC('day', evt_block_time) as ""day"",
        sum(amount0 + amount1) / 1e6 as ""add""
    from quickswap.""UniswapV2Pair_evt_Mint""
    where contract_address = '\x853ee4b2a13f8a742d64c8f088be7ba2131f670d'
    group by DATE_TRUNC('day', evt_block_time)
    order by 1
),

quick_removes as (
    select 
        DATE_TRUNC('day', evt_block_time) as ""day"",
        sum(amount0 + amount1) / 1e6 as ""minus""
    from quickswap.""UniswapV2Pair_evt_Burn""
    where contract_address = '\x853ee4b2a13f8a742d64c8f088be7ba2131f670d'
    group by DATE_TRUNC('day', evt_block_time)
    order by 1
),

quick_balances as (
    select a.""day"", ""add"" - COALESCE(""minus"", 0) as ""liquidity""
    from quick_adds a
    left join quick_removes r on a.""day"" = r.""day""
),

-- show liquidity
quick_lqty as (
    select day, sum(liquidity) over (order by day) as ""quick_liquidity""
    from quick_balances b
    order by 1
)

select vol.day, volume / liquidity, quick_volume / quick_liquidity, fee / liquidity as ""kyber"", ""quick_fee"" / ""quick_liquidity"" as ""quick""  
from lqty
left join vol on vol.day = lqty.day
left join fees on vol.day = fees.day
left join quick_lqty qlqty on vol.day = qlqty.day
left join quick_vol qvol on vol.day = qvol.day
where vol.day > '2021-07-06' and vol.day < '2021-09-07'

-- select vol.day, 
-- from quick_lqty lqty
-- left join quick_vol vol on vol.day = lqty.day
-- where vol.day > '2021-08-06' and vol.day < '2021-09-06'

-- select t.day, trxAmount, fee, fee / trxAmount as ""fee_ratio"", 
--     case
--         when 1=1 then 0.003 
--     end as ""dfyn""
-- from trx t
-- left join fees on t.day = fees.day
-- where t.day > '2021-08-06' and t.day < '2021-09-06'
-- -- fee color: 0 150 136
-- -- volume color: 139 195 74

"
1389149,lens-05-profile-summary,,"[{""id"": 2361733, ""type"": ""counter"", ""name"": ""Pure Digits Profile Name Count"", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Pure Digits Name"", ""counterColName"": ""pure_digit_profile_count""}, ""created_at"": ""2022-10-11T16:39:27.654545+00:00"", ""__typename"": ""visualizations""}, {""id"": 2361736, ""type"": ""counter"", ""name"": ""Pure Letters Profile Name Count"", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Pure Letters Name"", ""counterColName"": ""pure_letter_profile_count""}, ""created_at"": ""2022-10-11T16:40:06.788696+00:00"", ""__typename"": ""visualizations""}, {""id"": 2361497, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-10-11T16:01:01.968678+00:00"", ""__typename"": ""visualizations""}, {""id"": 2361547, ""type"": ""counter"", ""name"": ""Total Profiles"", ""options"": {""rowNumber"": 1, ""counterLabel"": ""Profiles Count"", ""counterColName"": ""total_profile_count""}, ""created_at"": ""2022-10-11T16:08:47.764277+00:00"", ""__typename"": ""visualizations""}, {""id"": 2361561, ""type"": ""chart"", ""name"": ""Profiles Handle Name Length Distribution"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""0.00a"", ""columnMapping"": {""name_count"": ""y"", ""name_length"": ""x"", ""name_length_type"": ""x""}, ""seriesOptions"": {""name_count"": {""name"": ""Profiles Count"", ""type"": ""pie"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2022-10-11T16:09:20.593247+00:00"", ""__typename"": ""visualizations""}, {""id"": 2361588, ""type"": ""chart"", ""name"": ""Profiles Handle Name Count By Length"", ""options"": {""sortX"": false, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""numberFormat"": ""0.00a"", ""columnMapping"": {""name_type"": ""series"", ""name_count"": ""y"", ""name_length_type"": ""x""}, ""seriesOptions"": {""name_count"": {""name"": ""Profiles Count"", ""type"": ""column"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-10-11T16:11:52.731911+00:00"", ""__typename"": ""visualizations""}, {""id"": 2361664, ""type"": ""chart"", ""name"": ""Profile Handle Names Type Distribution"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""0.00a"", ""columnMapping"": {""name_type"": ""x"", ""name_count"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2022-10-11T16:28:01.296361+00:00"", ""__typename"": ""visualizations""}, {""id"": 2361672, ""type"": ""chart"", ""name"": ""Profile Handle Name Type Percentage"", ""options"": {""sortX"": false, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack"", ""percentValues"": true}, ""reverseX"": false, ""columnMapping"": {""name_type"": ""series"", ""name_count"": ""y"", ""name_length_type"": ""x""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-10-11T16:30:36.64027+00:00"", ""__typename"": ""visualizations""}]","with profile_created as (
    select ""output_0"" as profile_id,
        vars->>'handle' as profile_handle_name,
        replace(vars->>'handle', '.lens', '') as short_name,
        vars->>'to' as user_address,
        vars->>'followNFTURI' as follow_nft_url,
        vars->>'imageURI' as image_url,
        call_tx_hash,
        call_block_time,
        vars
    from lens.""LensHub_call_createProfile""
),

profiles_summary as (
    select (case when length(short_name) >= 20 then 20 else length(short_name) end) as name_length,
        (case when short_name ~ '^[0-9]+$' then 'Pure Digits'
            when short_name ~ '^[a-z]+$' then 'Pure Letters'
            else 'Mixed'
        end) as name_type,
        count(*) as name_count
    from profile_created
    group by 1, 2
),

profiles_total as (
    select count(*) as total_profile_count,
        sum(case when short_name ~ '^[0-9]+$' then 1 else 0 end) as pure_digit_profile_count,
        sum(case when short_name ~ '^[a-z]+$' then 1 else 0 end) as pure_letter_profile_count
    from profile_created
)

select cast(name_length as text) || ' Chars' as name_length_type,
    name_type,
    name_count,
    total_profile_count,
    pure_digit_profile_count,
    pure_letter_profile_count
from profiles_summary
join profiles_total on true
order by name_type, name_count desc

"
919501,lens users summary,,"[{""id"": 1608645, ""type"": ""chart"", ""name"": ""Lens NFT Count By Transfer Type 7 Days"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""columnMapping"": {""transfer_type"": ""x"", ""seven_days_nft_count"": ""y""}, ""seriesOptions"": {""seven_days_nft_count"": {""name"": ""NFT Count"", ""type"": ""pie"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {""mint"": {""color"": ""#b911b5""}}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2022-06-17T16:04:07.235629+00:00"", ""__typename"": ""visualizations""}, {""id"": 1608534, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-06-17T15:47:58.671678+00:00"", ""__typename"": ""visualizations""}, {""id"": 1608542, ""type"": ""chart"", ""name"": ""Lens NFT Count By Transfer Type All Time"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""columnMapping"": {""nft_count"": ""y"", ""transfer_type"": ""x"", ""full_time_nft_count"": ""y""}, ""seriesOptions"": {""full_time_nft_count"": {""name"": ""NFT Count"", ""type"": ""pie"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2022-06-17T15:50:33.779478+00:00"", ""__typename"": ""visualizations""}, {""id"": 1608681, ""type"": ""counter"", ""name"": ""Total NFT Count"", ""options"": {""rowNumber"": 1, ""counterColName"": ""total_full_time_nft_count""}, ""created_at"": ""2022-06-17T16:12:56.714641+00:00"", ""__typename"": ""visualizations""}, {""id"": 1608685, ""type"": ""counter"", ""name"": ""Active Users In 7 Days"", ""options"": {""rowNumber"": 1, ""counterColName"": ""total_seven_days_user_count""}, ""created_at"": ""2022-06-17T16:13:46.285104+00:00"", ""__typename"": ""visualizations""}, {""id"": 1608691, ""type"": ""counter"", ""name"": ""NFT Transfered in 24 Hours"", ""options"": {""rowNumber"": 1, ""counterColName"": ""total_one_day_nft_count""}, ""created_at"": ""2022-06-17T16:14:37.021571+00:00"", ""__typename"": ""visualizations""}, {""id"": 1608696, ""type"": ""counter"", ""name"": ""NFT Transfered in 30 Days"", ""options"": {""rowNumber"": 1, ""counterColName"": ""total_thirty_days_nft_count""}, ""created_at"": ""2022-06-17T16:15:16.449337+00:00"", ""__typename"": ""visualizations""}, {""id"": 1608695, ""type"": ""counter"", ""name"": ""NFT Transfered in 7 Days"", ""options"": {""rowNumber"": 1, ""counterColName"": ""total_seven_days_nft_count""}, ""created_at"": ""2022-06-17T16:15:00.04144+00:00"", ""__typename"": ""visualizations""}, {""id"": 1608537, ""type"": ""chart"", ""name"": ""Lens User Count By Transfer Type All Time"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""columnMapping"": {""user_count"": ""y"", ""transfer_type"": ""x"", ""full_time_user_count"": ""y""}, ""seriesOptions"": {""full_time_user_count"": {""name"": ""Users Count"", ""type"": ""pie"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {""mint"": {""color"": ""#22c142""}}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2022-06-17T15:49:37.116271+00:00"", ""__typename"": ""visualizations""}, {""id"": 1608684, ""type"": ""counter"", ""name"": ""Active Users In 24 Hours"", ""options"": {""rowNumber"": 1, ""counterColName"": ""total_one_day_user_count""}, ""created_at"": ""2022-06-17T16:13:12.316689+00:00"", ""__typename"": ""visualizations""}, {""id"": 1608624, ""type"": ""chart"", ""name"": ""Lens User Count By Transfer Type 24 hours"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""columnMapping"": {""transfer_type"": ""x"", ""one_day_user_count"": ""y""}, ""seriesOptions"": {""one_day_user_count"": {""name"": ""Users Count"", ""type"": ""pie"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {""mint"": {""color"": ""#3a1a1a""}, ""receive"": {""color"": ""#1938ae""}}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2022-06-17T16:02:01.108462+00:00"", ""__typename"": ""visualizations""}, {""id"": 1608644, ""type"": ""chart"", ""name"": ""Lens NFT Count By Transfer Type 24 Hours"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""columnMapping"": {""transfer_type"": ""x"", ""one_day_nft_count"": ""y""}, ""seriesOptions"": {""one_day_nft_count"": {""name"": ""NFT Count"", ""type"": ""pie"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {""mint"": {""color"": ""#ebd91c""}, ""sent"": {""color"": ""#587b5f""}}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2022-06-17T16:03:39.568643+00:00"", ""__typename"": ""visualizations""}, {""id"": 1608647, ""type"": ""chart"", ""name"": ""Lens User Count By Transfer Type 7 Days"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""columnMapping"": {""transfer_type"": ""x"", ""seven_days_user_count"": ""y""}, ""seriesOptions"": {""seven_days_user_count"": {""name"": ""Users Count"", ""type"": ""pie"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {""mint"": {""color"": ""#25ccd3""}}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2022-06-17T16:04:25.580665+00:00"", ""__typename"": ""visualizations""}, {""id"": 1608663, ""type"": ""counter"", ""name"": ""Total Users Count"", ""options"": {""rowNumber"": 1, ""counterColName"": ""total_full_time_user_count""}, ""created_at"": ""2022-06-17T16:08:25.110278+00:00"", ""__typename"": ""visualizations""}, {""id"": 1608687, ""type"": ""counter"", ""name"": ""Active Users In 30 Days"", ""options"": {""rowNumber"": 1, ""counterColName"": ""total_thirty_days_user_count""}, ""created_at"": ""2022-06-17T16:14:10.765779+00:00"", ""__typename"": ""visualizations""}, {""id"": 1608649, ""type"": ""chart"", ""name"": ""Lens User Count By Transfer Type 30 Days"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""columnMapping"": {""transfer_type"": ""x"", ""thirty_days_user_count"": ""y""}, ""seriesOptions"": {""thirty_days_user_count"": {""name"": ""Users Count"", ""type"": ""pie"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {""mint"": {""color"": ""#eea41e""}}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2022-06-17T16:04:48.384564+00:00"", ""__typename"": ""visualizations""}, {""id"": 1608652, ""type"": ""chart"", ""name"": ""Lens NFT Count By Transfer Type 30 Days"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""columnMapping"": {""transfer_type"": ""x"", ""thirty_days_nft_count"": ""y""}, ""seriesOptions"": {""thirty_days_nft_count"": {""name"": ""NFT Count"", ""type"": ""pie"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {""mint"": {""color"": ""#a85050""}, ""receive"": {""color"": ""#125597""}}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2022-06-17T16:05:09.343468+00:00"", ""__typename"": ""visualizations""}]","with lens_transfers as (
    select evt_block_time,
        ""from"" as address,
        'sent' as transfer_type,
    -1 as nft_count
    FROM erc721.""ERC721_evt_Transfer""
    where contract_address = '\xdb46d1dc155634fbc732f92e853b10b288ad5a1d'
        and ""from"" != '\x0000000000000000000000000000000000000000'

    union all

    select evt_block_time,
        ""to"" as address,
        (case when ""from"" = '\x0000000000000000000000000000000000000000' then 'mint'
            else 'receive'
        end) as transfer_type,
    1 as nft_count
    FROM erc721.""ERC721_evt_Transfer""
    where contract_address = '\xdb46d1dc155634fbc732f92e853b10b288ad5a1d'
),

lens_users as (
    select transfer_type,
        count(distinct address) as full_time_user_count,
        sum(abs(nft_count)) as full_time_nft_count,
        count(distinct address) filter (where evt_block_time >= now() - interval '24 hours') as one_day_user_count,
        sum(abs(nft_count)) filter (where evt_block_time >= now() - interval '24 hours') as one_day_nft_count,
        count(distinct address) filter (where evt_block_time >= now() - interval '7 days') as seven_days_user_count,
        sum(abs(nft_count)) filter (where evt_block_time >= now() - interval '7 days') as seven_days_nft_count,
        count(distinct address) filter (where evt_block_time >= now() - interval '30 days') as thirty_days_user_count,
        sum(abs(nft_count)) filter (where evt_block_time >= now() - interval '30 days') as thirty_days_nft_count
    from lens_transfers
    group by transfer_type
),

lens_users_summary as (
    select count(distinct address) as total_full_time_user_count,
        sum(nft_count) as total_full_time_nft_count,
        count(distinct address) filter (where evt_block_time >= now() - interval '24 hours') as total_one_day_user_count,
        sum(nft_count) filter (where evt_block_time >= now() - interval '24 hours') as total_one_day_nft_count,
        count(distinct address) filter (where evt_block_time >= now() - interval '7 days') as total_seven_days_user_count,
        sum(nft_count) filter (where evt_block_time >= now() - interval '7 days') as total_seven_days_nft_count,
        count(distinct address) filter (where evt_block_time >= now() - interval '30 days') as total_thirty_days_user_count,
        sum(nft_count) filter (where evt_block_time >= now() - interval '30 days') as total_thirty_days_nft_count
    from lens_transfers
)

select transfer_type,
    full_time_user_count,
    full_time_nft_count,
    one_day_user_count,
    one_day_nft_count,
    seven_days_user_count,
    seven_days_nft_count,
    thirty_days_user_count,
    thirty_days_nft_count,
    total_full_time_user_count,
    total_full_time_nft_count,
    total_one_day_user_count,
    total_one_day_nft_count,
    total_seven_days_user_count,
    total_seven_days_nft_count,
    total_thirty_days_user_count,
    total_thirty_days_nft_count
from lens_users
join lens_users_summary on true

"
1389319,lens-06-profile-creation-weekly,,"[{""id"": 2361772, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-10-11T16:45:52.102802+00:00"", ""__typename"": ""visualizations""}, {""id"": 2361782, ""type"": ""chart"", ""name"": ""Profiles Created Weekly"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""columnMapping"": {""block_date"": ""x"", ""name_count"": ""y"", ""name_length_type"": ""series""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""area""}, ""created_at"": ""2022-10-11T16:48:18.243577+00:00"", ""__typename"": ""visualizations""}]","with profile_created as (
    select ""output_0"" as profile_id,
        vars->>'handle' as profile_handle_name,
        replace(vars->>'handle', '.lens', '') as short_name,
        vars->>'to' as user_address,
        vars->>'followNFTURI' as follow_nft_url,
        vars->>'imageURI' as image_url,
        call_tx_hash,
        call_block_time,
        vars
    from lens.""LensHub_call_createProfile""
),

profiles_summary as (
    select date_trunc('week', call_block_time) as block_date,
        (case when length(short_name) >= 20 then 20 else length(short_name) end) as name_length,
        count(*) as name_count
    from profile_created
    group by 1, 2
)

select block_date,
    cast(name_length as text) || ' Chars' as name_length_type,
    name_count
from profiles_summary
order by block_date

"
1389337,lens-07-latest-profile,,"[{""id"": 2361809, ""type"": ""table"", ""name"": ""Newest 1000 Profiles Created"", ""options"": {""columns"": [{""name"": ""call_block_time"", ""title"": ""Date Time""}, {""name"": ""profile_id"", ""title"": ""Profile ID""}, {""name"": ""profile_handle_name"", ""title"": ""Profile Handler Name""}, {""name"": ""short_name"", ""title"": ""Short Name""}, {""name"": ""call_tx_hash"", ""title"": ""TX Hash""}]}, ""created_at"": ""2022-10-11T16:52:21.31511+00:00"", ""__typename"": ""visualizations""}]","with profile_created as (
    select ""output_0"" as profile_id,
        vars->>'handle' as profile_handle_name,
        replace(vars->>'handle', '.lens', '') as short_name,
        vars->>'to' as user_address,
        vars->>'followNFTURI' as follow_nft_url,
        vars->>'imageURI' as image_url,
        call_tx_hash,
        call_block_time,
        vars
    from lens.""LensHub_call_createProfile""
)

select call_block_time,
    profile_id,
    profile_handle_name,
    short_name,
    call_tx_hash
from profile_created
order by call_block_time desc
limit 1000

"
1389358,lens-08-custom-search,,"[{""id"": 2361840, ""type"": ""table"", ""name"": ""Lens Created Profile Custom Search"", ""options"": {""columns"": [{""name"": ""call_block_time"", ""title"": ""Date Time""}, {""name"": ""profile_id"", ""title"": ""Profile ID""}, {""name"": ""profile_handle_name"", ""title"": ""Profile Handle Name""}, {""name"": ""short_name"", ""title"": ""Short Name""}, {""name"": ""link"", ""title"": ""Link""}, {""name"": ""call_tx_hash"", ""title"": ""TX Hash""}]}, ""created_at"": ""2022-10-11T17:00:09.867152+00:00"", ""__typename"": ""visualizations""}]","with profile_created as (
    select ""output_0"" as profile_id,
        vars->>'handle' as profile_handle_name,
        replace(vars->>'handle', '.lens', '') as short_name,
        vars->>'to' as user_address,
        vars->>'followNFTURI' as follow_nft_url,
        vars->>'imageURI' as image_url,
        call_tx_hash,
        call_block_time,
        vars
    from lens.""LensHub_call_createProfile""
)

select call_block_time,
    profile_id,
    profile_handle_name,
    short_name,
    '<a href=https://polygonscan.com/tx/' || replace(call_tx_hash::text, '\x', '0x') || ' target=_blank>Polyscan</a>' as link,
    call_tx_hash
from profile_created
where (case when '{{name_contains}}' <> 'keyword' then short_name like '%{{name_contains}}%' else 1 = 1 end)
    and (case when cast('{{name_length}}' as integer) < 5 then 2 = 2
            when cast('{{name_length}}' as integer) >= 20 then length(short_name) >= 20
            else length(short_name) = cast('{{name_length}}' as integer)
        end)
    and (case when '{{name_pattern}}' = 'Pure Digits' then short_name ~ '^[0-9]+$'
            when '{{name_pattern}}' = 'Pure Letters' then short_name ~ '^[a-z]+$'
            else 3 = 3
        end)
order by call_block_time desc
limit 10000


"
919622,Lens Top 100 NFT Holders,,"[{""id"": 1608789, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-06-17T16:44:20.27462+00:00"", ""__typename"": ""visualizations""}, {""id"": 1608857, ""type"": ""counter"", ""name"": ""Lens NFT Holders Count"", ""options"": {""rowNumber"": 1, ""counterColName"": ""lens_holder_count""}, ""created_at"": ""2022-06-17T16:52:58.781948+00:00"", ""__typename"": ""visualizations""}, {""id"": 1608858, ""type"": ""counter"", ""name"": ""Lens Minted NFT Count"", ""options"": {""rowNumber"": 1, ""counterColName"": ""lens_nft_count""}, ""created_at"": ""2022-06-17T16:53:17.042166+00:00"", ""__typename"": ""visualizations""}, {""id"": 1608792, ""type"": ""chart"", ""name"": ""Lens Top 100 NFT Holders"", ""options"": {""sortX"": false, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear""}], ""legend"": {""enabled"": false}, ""series"": {""stacking"": null}, ""reverseX"": false, ""columnMapping"": {""address"": ""x"", ""nft_count"": ""y"", ""block_date"": ""x"", ""user_count"": ""y"", ""accumulate_nft_count"": ""y"", ""accumulate_user_count"": ""y""}, ""seriesOptions"": {""nft_count"": {""name"": ""NFT Count"", ""type"": ""column"", ""yAxis"": 0, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-06-17T16:44:20.27462+00:00"", ""__typename"": ""visualizations""}, {""id"": 1608860, ""type"": ""table"", ""name"": ""Lens Top 100 NFT Holders"", ""options"": {}, ""created_at"": ""2022-06-17T16:54:06.531413+00:00"", ""__typename"": ""visualizations""}]","with lens_transfers as (
    select evt_block_time,
        ""from"" as address,
        'sent' as transfer_type,
    -1 as nft_count
    FROM erc721.""ERC721_evt_Transfer""
    where contract_address = '\xdb46d1dc155634fbc732f92e853b10b288ad5a1d'
        and ""from"" != '\x0000000000000000000000000000000000000000'

    union all

    select evt_block_time,
        ""to"" as address,
        (case when ""from"" = '\x0000000000000000000000000000000000000000' then 'mint'
            else 'receive'
        end) as transfer_type,
    1 as nft_count
    FROM erc721.""ERC721_evt_Transfer""
    where contract_address = '\xdb46d1dc155634fbc732f92e853b10b288ad5a1d'
),

lens_users_summary as (
    select address,
        sum(nft_count) as nft_count
    from lens_transfers
    group by address
    having sum(nft_count) > 0
    order by 2 desc
),

lens_holders_total as (
    select count(address) as lens_holder_count,
        sum(nft_count) as lens_nft_count
    from lens_users_summary
)

select address,
    nft_count,
    lens_holder_count,
    lens_nft_count
from lens_users_summary
join lens_holders_total on true
order by nft_count desc
limit 100"
919608,Lens Daily Users 60 Days,,"[{""id"": 1608740, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-06-17T16:31:37.403426+00:00"", ""__typename"": ""visualizations""}, {""id"": 1608755, ""type"": ""chart"", ""name"": ""Lens Daily Users Count 60 Days"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""columnMapping"": {""block_date"": ""x"", ""user_count"": ""y"", ""accumulate_user_count"": ""y""}, ""seriesOptions"": {""user_count"": {""name"": ""Users Count"", ""type"": ""area"", ""yAxis"": 0, ""zIndex"": 0}, ""accumulate_user_count"": {""name"": ""Accumulate Users Count"", ""type"": ""area"", ""yAxis"": 1, ""zIndex"": 1}}, ""valuesOptions"": {}, ""globalSeriesType"": ""area""}, ""created_at"": ""2022-06-17T16:38:14.31195+00:00"", ""__typename"": ""visualizations""}, {""id"": 1608757, ""type"": ""chart"", ""name"": ""Lens Daily Minted NFT Count 60 Days"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear""}], ""legend"": {""enabled"": false}, ""series"": {""percentValues"": false}, ""reverseX"": false, ""columnMapping"": {""nft_count"": ""y"", ""block_date"": ""x"", ""accumulate_nft_count"": ""y""}, ""seriesOptions"": {""nft_count"": {""name"": ""NFT Count"", ""type"": ""area"", ""yAxis"": 0, ""zIndex"": 1}, ""accumulate_nft_count"": {""name"": ""Accumulated NFT Count"", ""type"": ""area"", ""color"": ""#2fc5b8"", ""yAxis"": 1, ""zIndex"": 0}}, ""valuesOptions"": {}, ""globalSeriesType"": ""area""}, ""created_at"": ""2022-06-17T16:39:11.715284+00:00"", ""__typename"": ""visualizations""}, {""id"": 1608741, ""type"": ""chart"", ""name"": ""Lens Daily Summary 60 Days"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}, {""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""columnMapping"": {""nft_count"": ""y"", ""block_date"": ""x"", ""user_count"": ""y"", ""accumulate_nft_count"": ""y"", ""accumulate_user_count"": ""y""}, ""seriesOptions"": {""nft_count"": {""name"": ""Minted NFT Count"", ""type"": ""column"", ""yAxis"": 0, ""zIndex"": 1}, ""user_count"": {""name"": ""Users Count"", ""type"": ""column"", ""yAxis"": 0, ""zIndex"": 0}, ""accumulate_nft_count"": {""name"": ""Accumulate Minted NFT Count"", ""type"": ""line"", ""yAxis"": 1, ""zIndex"": 3}, ""accumulate_user_count"": {""name"": ""Accumulate Users Count"", ""type"": ""line"", ""yAxis"": 1, ""zIndex"": 2}}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-06-17T16:32:02.382934+00:00"", ""__typename"": ""visualizations""}]","with lens_transfers as (
    select evt_block_time,
        ""from"" as address,
        'sent' as transfer_type,
    -1 as nft_count
    FROM erc721.""ERC721_evt_Transfer""
    where contract_address = '\xdb46d1dc155634fbc732f92e853b10b288ad5a1d'
        and ""from"" != '\x0000000000000000000000000000000000000000'

    union all

    select evt_block_time,
        ""to"" as address,
        (case when ""from"" = '\x0000000000000000000000000000000000000000' then 'mint'
            else 'receive'
        end) as transfer_type,
    1 as nft_count
    FROM erc721.""ERC721_evt_Transfer""
    where contract_address = '\xdb46d1dc155634fbc732f92e853b10b288ad5a1d'
),

lens_users_summary as (
    select date_trunc('day', evt_block_time) as block_date,
        count(distinct address) as user_count,
        sum(nft_count) as nft_count
    from lens_transfers
    where evt_block_time >= now() - interval '60 days'
    group by block_date
    order by 1
)

select block_date,
    user_count,
    nft_count,
    sum(user_count) over (order by block_date) as accumulate_user_count,
    sum(nft_count) over (order by block_date) as accumulate_nft_count
from lens_users_summary
order by block_date"
919659,Lens Users Segment By Holding NFT Count,,"[{""id"": 1608920, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-06-17T17:03:05.529163+00:00"", ""__typename"": ""visualizations""}, {""id"": 1608934, ""type"": ""table"", ""name"": ""Lens Users Segment By Holding NFT Count"", ""options"": {}, ""created_at"": ""2022-06-17T17:06:27.755451+00:00"", ""__typename"": ""visualizations""}, {""id"": 1608922, ""type"": ""chart"", ""name"": ""Lens Users Count Segment By Holding NFT Count"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""columnMapping"": {""user_count"": ""y"", ""nft_count_type"": ""x""}, ""seriesOptions"": {""user_count"": {""name"": ""Users Count"", ""type"": ""pie"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {""1 NFT"": {""color"": ""#3dc97f""}}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2022-06-17T17:03:54.185198+00:00"", ""__typename"": ""visualizations""}, {""id"": 1608926, ""type"": ""chart"", ""name"": ""Lens Users NFT Count Segment"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""columnMapping"": {""nft_count"": ""y"", ""nft_count_type"": ""x""}, ""seriesOptions"": {""nft_count"": {""name"": ""NFT Count"", ""type"": ""pie"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2022-06-17T17:04:19.179085+00:00"", ""__typename"": ""visualizations""}]","with lens_transfers as (
    select evt_block_time,
        ""from"" as address,
        'sent' as transfer_type,
    -1 as nft_count
    FROM erc721.""ERC721_evt_Transfer""
    where contract_address = '\xdb46d1dc155634fbc732f92e853b10b288ad5a1d'
        and ""from"" != '\x0000000000000000000000000000000000000000'

    union all

    select evt_block_time,
        ""to"" as address,
        (case when ""from"" = '\x0000000000000000000000000000000000000000' then 'mint'
            else 'receive'
        end) as transfer_type,
    1 as nft_count
    FROM erc721.""ERC721_evt_Transfer""
    where contract_address = '\xdb46d1dc155634fbc732f92e853b10b288ad5a1d'
),

lens_users_summary as (
    select address,
        sum(nft_count) as nft_count
    from lens_transfers
    group by address
    having sum(nft_count) > 0
    order by 2 desc
)

select (case when nft_count > 20 then 'More Than 20 NFTs'
            when nft_count > 10 and nft_count <= 20 then '10 - 20 NFTs'
            when nft_count > 5 and nft_count <= 10 then '5 - 10 NFTs'
            when nft_count > 1 and nft_count <= 5 then '2 - 5 NFTs'
            else '1 NFT'
        end) as nft_count_type,
    count(address) as user_count,
    sum(nft_count) as nft_count
from lens_users_summary
group by 1
"
781958,Most Followed Lens Profiles,,"[{""id"": 1395050, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-05-18T16:51:19.042693+00:00"", ""__typename"": ""visualizations""}, {""id"": 1395117, ""type"": ""table"", ""name"": """", ""options"": {""columns"": [{""name"": ""concat"", ""title"": ""Follow NFT Address""}, {""name"": ""followers"", ""title"": ""Follower Count""}]}, ""created_at"": ""2022-05-18T17:01:21.08732+00:00"", ""__typename"": ""visualizations""}]","SELECT (CONCAT('0x', substring(contract_address::text from 3))), COUNT(*) AS followers
FROM(
SELECT et.""contract_address"", lf.""call_tx_hash"", lf.""call_success"" FROM lens.""LensHub_call_followWithSig"" lf
LEFT JOIN erc721.""ERC721_evt_Transfer"" et ON et.""evt_tx_hash""=""call_tx_hash""
WHERE ""call_success"" = True
UNION
SELECT et.""contract_address"", lf2.""call_tx_hash"", lf2.""call_success"" FROM lens.""LensHub_call_follow"" lf2
LEFT JOIN erc721.""ERC721_evt_Transfer"" et ON et.""evt_tx_hash""=""call_tx_hash""
WHERE ""call_success"" = True
)a
GROUP BY 1 
ORDER BY 2 DESC 

-- SELECT (CONCAT('0x', substring(et.""contract_address""::text from 3))), COUNT(*) AS followers
-- FROM lens.""LensHub_call_followWithSig"" lf
-- LEFT JOIN erc721.""ERC721_evt_Transfer"" et ON et.""evt_tx_hash""=""call_tx_hash""
-- WHERE et.""contract_address"" IS NOT NULL
-- AND lf.""call_success"" = True
-- GROUP BY 1 
-- ORDER BY 2 DESC "
1373709,Monthly Active Lens Profiles,"Profiles that made at least one post, comment or mirror that month","[{""id"": 2337636, ""type"": ""table"", ""name"": ""Query results"", ""options"": {""columns"": [{""name"": ""comment_count"", ""title"": ""Comments""}, {""name"": ""link"", ""title"": ""Profile ID, Publication ID""}, {""name"": ""mirrors_count"", ""title"": ""Mirrors""}, {""name"": ""collect_count"", ""title"": ""Collects""}]}, ""created_at"": ""2022-10-08T14:08:49.384981+00:00"", ""__typename"": ""visualizations""}, {""id"": 2337742, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""columnMapping"": {""week"": ""x"", ""count"": ""y"", ""month"": ""x""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-10-08T14:32:00.111476+00:00"", ""__typename"": ""visualizations""}]","WITH comments AS (
SELECT 
""call_block_time"",
vars->>'profileId'::text AS profileid
FROM lens.""LensHub_call_commentWithSig""
WHERE ""call_success"" = True
UNION ALL 
SELECT 
""call_block_time"",
vars->>'profileId'::text AS profileid
FROM lens.""LensHub_call_comment""
WHERE ""call_success"" = True
),

mirrors AS(
SELECT 
""call_block_time"",
vars->>'profileId' AS profileid
FROM lens.""LensHub_call_mirrorWithSig""
WHERE ""call_success"" = TRUE
UNION ALL
SELECT 
""call_block_time"",
vars->>'profileId' AS profileid
FROM lens.""LensHub_call_mirror""
WHERE ""call_success"" = TRUE
),

posts AS(
SELECT 
""call_block_time"",
vars->>'profileId' AS profileid 
FROM lens.""LensHub_call_postWithSig""
WHERE ""call_success"" = TRUE
UNION ALL
SELECT 
""call_block_time"",
vars->>'profileId' AS profileid 
FROM lens.""LensHub_call_post""
WHERE ""call_success"" = TRUE
)

SELECT 
date_trunc('month',""call_block_time"") as month,
COUNT(DISTINCT profileid)
FROM (
SELECT * FROM comments 
UNION ALL
SELECT * FROM mirrors 
UNION ALL
SELECT * FROM posts
)a
WHERE date_trunc('month',""call_block_time"") < date_trunc('month',now())
GROUP BY 1
"
1373772,Monthly New Profiles,Number of new profiles minted every week,"[{""id"": 2337751, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-10-08T14:35:19.346537+00:00"", ""__typename"": ""visualizations""}, {""id"": 2337756, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""columnMapping"": {""week"": ""x"", ""count"": ""y"", ""month"": ""x""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-10-08T14:36:43.211707+00:00"", ""__typename"": ""visualizations""}]","SELECT
date_trunc('month', ""evt_block_time"") AS month,
COUNT(*) AS count
FROM erc721.""ERC721_evt_Transfer""
WHERE contract_address = '\xdb46d1dc155634fbc732f92e853b10b288ad5a1d'  -- lens protocol contract address
AND ""from"" = '\x0000000000000000000000000000000000000000'  -- mint address
GROUP BY 1"
847168,Most frequent posters,,"[{""id"": 1479795, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-05-26T09:23:27.497527+00:00"", ""__typename"": ""visualizations""}, {""id"": 1479863, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""profile"", ""title"": ""Profile ID""}, {""name"": ""count"", ""title"": ""No of Posts""}]}, ""created_at"": ""2022-05-26T09:26:37.11343+00:00"", ""__typename"": ""visualizations""}]","SELECT profile, COUNT(*) FROM (
SELECT vars->>'profileId' AS profile FROM lens.""LensHub_call_postWithSig""
WHERE ""call_success"" = TRUE
UNION ALL
SELECT vars->>'profileId' AS profile FROM lens.""LensHub_call_post""
WHERE ""call_success"" = TRUE
)a
GROUP BY 1
ORDER BY 2 DESC
-- SELECT * FROM lens.""LensHub_call_postWithSig"""
1373788,Profiles Segmented by Engagement,"Any post, comment or mirror is counted as an engagement","[{""id"": 2337770, ""type"": ""table"", ""name"": ""Query results"", ""options"": {""columns"": [{""name"": ""comment_count"", ""title"": ""Comments""}, {""name"": ""link"", ""title"": ""Profile ID, Publication ID""}, {""name"": ""mirrors_count"", ""title"": ""Mirrors""}, {""name"": ""collect_count"", ""title"": ""Collects""}]}, ""created_at"": ""2022-10-08T14:41:23.593384+00:00"", ""__typename"": ""visualizations""}, {""id"": 2337836, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""columnMapping"": {""count"": ""y"", ""engagements"": ""x""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2022-10-08T14:57:54.246836+00:00"", ""__typename"": ""visualizations""}]","WITH comments AS (
SELECT 
""call_block_time"",
vars->>'profileId'::text AS profileid
FROM lens.""LensHub_call_commentWithSig""
WHERE ""call_success"" = True
),

mirrors AS(
SELECT 
""call_block_time"",
vars->>'profileId' AS profileid
FROM lens.""LensHub_call_mirrorWithSig""
WHERE ""call_success"" = TRUE
),

posts AS(
SELECT 
""call_block_time"",
vars->>'profileId' AS profileid 
FROM lens.""LensHub_call_postWithSig""
WHERE ""call_success"" = TRUE
UNION ALL
SELECT 
""call_block_time"",
vars->>'profileId' AS profileid 
FROM lens.""LensHub_call_post""
WHERE ""call_success"" = TRUE
)

SELECT 
engagements,
COUNT(*)
FROM(
SELECT 
*,
CASE
    WHEN actions = 0 THEN '0 Engagements'
    WHEN actions > 0 AND actions < 11 THEN '1-10 Engagements'
    WHEN actions > 10 AND actions < 51 THEN '10-50 Engagements'
    WHEN actions > 50 AND actions < 101 THEN '50-100 Engagements'
    ELSE '>100 Engagements'
END AS engagements
FROM (
SELECT 
profileid,
COUNT(*) as actions
FROM (
SELECT * FROM comments 
UNION ALL
SELECT * FROM mirrors 
UNION ALL
SELECT * FROM posts
)a
GROUP BY 1)b
)c
GROUP BY 1
"
781877,Lens Profiles,,"[{""id"": 1394917, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-05-18T16:26:54.786359+00:00"", ""__typename"": ""visualizations""}, {""id"": 1394918, ""type"": ""counter"", ""name"": ""Profile Owners"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""\ud83c\udf3f"", ""stringSuffix"": ""\ud83c\udf3f"", ""counterColName"": ""owners""}, ""created_at"": ""2022-05-18T16:26:54.786359+00:00"", ""__typename"": ""visualizations""}, {""id"": 1394950, ""type"": ""counter"", ""name"": ""Single Profile Wallets"", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""\ud83c\udf3f"", ""stringSuffix"": ""\ud83c\udf3f"", ""counterColName"": ""single_token_wallets""}, ""created_at"": ""2022-05-18T16:34:19.102832+00:00"", ""__typename"": ""visualizations""}]","with agg as 
    (with transfers as 
        ((SELECT 
        ""to"" as wallet,
        'mint' as action,
        1 as value
        FROM erc721.""ERC721_evt_Transfer""
        where contract_address = '\xdb46d1dc155634fbc732f92e853b10b288ad5a1d'
        and ""from"" = '\x0000000000000000000000000000000000000000')
        
        union all
        
        (SELECT 
        ""to"" as wallet,
        'gain' as action,
        1 as value
        FROM erc721.""ERC721_evt_Transfer""
        where contract_address = '\xdb46d1dc155634fbc732f92e853b10b288ad5a1d'
        and ""from"" != '\x0000000000000000000000000000000000000000')
        
        union all 
        
        (SELECT 
        ""from"" as wallet,
        'lose' as action,
        -1 as value
        FROM erc721.""ERC721_evt_Transfer""
        where contract_address = '\xdb46d1dc155634fbc732f92e853b10b288ad5a1d'
        and ""from"" != '\x0000000000000000000000000000000000000000'))
    
    select 
    wallet,
    sum(value) as tokens
    from 
    transfers 
    group by wallet
    order by tokens desc) 

select 
count(distinct wallet) as owners,
max(tokens) as most_owned,
avg(tokens) as average_owned,
count(distinct wallet) filter (where tokens = 1) as single_token_wallets,
percentile_cont(0.5) within group ( order by tokens) as median,
percentile_cont(0.25) within group ( order by tokens) as ""25th"",
percentile_cont(0.75) within group ( order by tokens) as ""75th""


from 
agg
where tokens > 0 
"
1017416,Most engaged post,,"[{""id"": 1756662, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""pubid"", ""title"": ""Post ID""}, {""name"": ""count"", ""title"": ""No of comments""}, {""name"": ""comment_count"", ""title"": ""Comments""}, {""name"": ""mirrors_count"", ""title"": ""Mirrors""}, {""name"": ""collect_count"", ""title"": ""Collected""}, {""name"": ""post_id"", ""title"": ""ProfileId, PostId""}, {""name"": ""link"", ""title"": ""Profile ID, Publication ID""}]}, ""created_at"": ""2022-07-08T21:32:11.847276+00:00"", ""__typename"": ""visualizations""}, {""id"": 1756661, ""type"": ""table"", ""name"": ""Query results"", ""options"": {""columns"": [{""name"": ""comment_count"", ""title"": ""Comments""}, {""name"": ""link"", ""title"": ""Profile ID, Publication ID""}, {""name"": ""mirrors_count"", ""title"": ""Mirrors""}, {""name"": ""collect_count"", ""title"": ""Collects""}]}, ""created_at"": ""2022-07-08T21:32:11.847276+00:00"", ""__typename"": ""visualizations""}]","WITH comments AS (
SELECT 
CONCAT(profileid, ', ', pubid) AS link,
-- '<a href=""https://lenster.xyz/posts/0x0' || to_hex(profileid::int) || '-0x0' || to_hex(pubid::int) || '"" target=""_blank"" >' || 'lenster.xyz/posts/0x0' || to_hex(profileid::int) || '-0x0' || to_hex(pubid::int) || '</a>' As link,
comment_count
FROM
(SELECT 
vars->>'profileIdPointed'::text AS profileid,
vars->>'pubIdPointed'::text AS pubid, 
COUNT(*) AS comment_count
FROM lens.""LensHub_call_commentWithSig""
WHERE ""call_success"" = True
GROUP BY 1,2
)a
),

mirrors AS(
SELECT 
CONCAT(profileid, ', ', pubid) AS link,
mirrors_count
FROM
(SELECT 
vars->>'profileIdPointed' AS profileid,
vars->>'pubIdPointed' AS pubid, 
COUNT(*) AS mirrors_count
FROM lens.""LensHub_call_mirrorWithSig""
WHERE ""call_success"" = TRUE
GROUP BY 1,2)a
),

collects AS(
SELECT
CONCAT(profileid, ', ', pubid) AS link,
collect_count
FROM
(SELECT 
vars->>'profileId' AS profileid,
vars->>'pubId' AS pubid, 
COUNT(*) AS collect_count
FROM lens.""LensHub_call_collectWithSig""
WHERE ""call_success"" = TRUE
GROUP BY 1,2)a
)

SELECT 
comments.link
,comment_count 
,mirrors_count 
,collect_count 
FROM comments
LEFT JOIN mirrors on mirrors.link = comments.link
LEFT JOIN collects on collects.link = comments.link
ORDER BY comments.comment_count DESC

-- (CONCAT(vars->>'profileIdPointed', ', ', vars->>'pubIdPointed')) AS post_id,
"
782098,No of Posts Created,,"[{""id"": 1395291, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-05-18T17:24:33.987956+00:00"", ""__typename"": ""visualizations""}, {""id"": 1395297, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""\ud83c\udf3f"", ""stringSuffix"": ""\ud83c\udf3f"", ""counterColName"": ""count""}, ""created_at"": ""2022-05-18T17:25:47.252598+00:00"", ""__typename"": ""visualizations""}]","SELECT COUNT(*) FROM (
SELECT * FROM lens.""LensHub_call_postWithSig""
UNION ALL
SELECT * FROM lens.""LensHub_call_post""
)a
WHERE ""call_success"" = TRUE

-- SELECT * FROM lens.""LensHub_call_postWithSig"""
781918,No of wallets that own a Lens Profile,,"[{""id"": 1394998, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""columnMapping"": {""day"": ""x"", ""count"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-05-18T16:41:53.816152+00:00"", ""__typename"": ""visualizations""}, {""id"": 1394983, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-05-18T16:39:05.023916+00:00"", ""__typename"": ""visualizations""}]","with running_wallet_balances as   
    (with base_data as  
        (with days as 
            (SELECT generate_series(date_trunc('day',min(evt_block_time))::TIMESTAMP, date_trunc('day', NOW()), '1 day') AS DAY
            FROM erc721.""ERC721_evt_Transfer""
            where contract_address = '\xdb46d1dc155634fbc732f92e853b10b288ad5a1d'),      
        all_wallets as
            (select 
            distinct wallet 
            from 
                (select
                ""from"" as wallet
                FROM erc721.""ERC721_evt_Transfer""
                where contract_address = '\xdb46d1dc155634fbc732f92e853b10b288ad5a1d'
                union all 
                select
                ""to"" as wallet
                FROM erc721.""ERC721_evt_Transfer""
                where contract_address = '\xdb46d1dc155634fbc732f92e853b10b288ad5a1d')
            distinct_wallets)
        select 
        day,
        wallet
        from 
        days
        full outer join all_wallets on true),
        
    aggregated_transfers as 
        (with transfers as 
            ((SELECT 
            date_trunc('day',evt_block_time) as day,
            ""to"" as wallet,
            count(evt_tx_hash) as value
            FROM erc721.""ERC721_evt_Transfer""
            where contract_address = '\xdb46d1dc155634fbc732f92e853b10b288ad5a1d'
            -- and evt_block_time >= '2021-06-20'
            group by day, wallet)
            
            union all 
            
            (SELECT 
            date_trunc('day',evt_block_time) as day,
            ""from"" as wallet,
            count(evt_tx_hash)*-1 as value
            FROM erc721.""ERC721_evt_Transfer""
            where contract_address = '\xdb46d1dc155634fbc732f92e853b10b288ad5a1d'
            -- and evt_block_time >= '2021-06-20'
            group by day, wallet))
        select
        day,
        wallet,
        sum(value) as resulting
        from 
        transfers 
        group by day, wallet)
        
        select 
        base_data.day,
        base_data.wallet,
        sum(coalesce(resulting,0)) over (partition by base_data.wallet order by base_data.day) as holding
        from 
        base_data
        left join aggregated_transfers on base_data.day = aggregated_transfers.day and base_data.wallet = aggregated_transfers.wallet 
        -- where base_data.wallet != '\x0000000000000000000000000000000000000000'
        )
    
    select 
    day::timestamp as day,
    count(wallet) filter (where holding > 0)
    from running_wallet_balances
    group by day::timestamp 
    order by day::timestamp "
782226,No of Comments Created,,"[{""id"": 1395588, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-05-18T18:04:28.629835+00:00"", ""__typename"": ""visualizations""}, {""id"": 1395589, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""stringPrefix"": ""\ud83c\udf3f"", ""stringSuffix"": ""\ud83c\udf3f"", ""counterColName"": ""count""}, ""created_at"": ""2022-05-18T18:04:28.629835+00:00"", ""__typename"": ""visualizations""}]","SELECT COUNT(*) FROM (
SELECT * FROM lens.""LensHub_call_commentWithSig""z
UNION ALL 
SELECT * FROM lens.""LensHub_call_comment""
)a
WHERE ""call_success"" = TRUE

-- SELECT * FROM lens.""LensHub_call_postWithSig"""
1373693,Engagements per Month,,"[{""id"": 2337607, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-10-08T14:02:55.470247+00:00"", ""__typename"": ""visualizations""}, {""id"": 2337627, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""columnMapping"": {"""": ""y"", ""week"": ""x"", ""count"": ""y"", ""month"": ""x"", ""posts"": ""y"", ""mirrors"": ""y"", ""comments"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-10-08T14:07:16.731889+00:00"", ""__typename"": ""visualizations""}]","WITH posts AS(
SELECT month, COUNT(*) AS posts
FROM (
SELECT date_trunc('month',""call_block_time"") as month, 
vars->>'profileId' AS profile 
FROM lens.""LensHub_call_postWithSig""
WHERE ""call_success"" = TRUE
UNION ALL
SELECT date_trunc('month',""call_block_time"") as month, 
vars->>'profileId' AS profile 
FROM lens.""LensHub_call_post""
WHERE ""call_success"" = TRUE
)a
GROUP BY 1
)

, comments AS (
SELECT month, 
COUNT(*) AS comments
FROM (
SELECT date_trunc('month',""call_block_time"") as month
FROM lens.""LensHub_call_commentWithSig""
WHERE ""call_success"" = True
UNION ALL
SELECT date_trunc('month',""call_block_time"") as month
FROM lens.""LensHub_call_commentWithSig""
WHERE ""call_success"" = True)a
GROUP BY 1
)

, mirrors AS (
SELECT month, 
COUNT(*) AS mirrors
FROM(
SELECT date_trunc('month',""call_block_time"") as month
FROM lens.""LensHub_call_mirrorWithSig""
WHERE ""call_success"" = True
UNION ALL
SELECT date_trunc('month',""call_block_time"") as month
FROM lens.""LensHub_call_mirror""
WHERE ""call_success"" = True)a
GROUP BY 1
)

, collects AS (
SELECT month, 
COUNT(*) AS collects
FROM(
SELECT date_trunc('month',""call_block_time"") as month
FROM lens.""LensHub_call_collectWithSig""
WHERE ""call_success"" = True
UNION ALL
SELECT date_trunc('month',""call_block_time"") as month
FROM lens.""LensHub_call_collect""
WHERE ""call_success"" = True)a
GROUP BY 1
)

SELECT p.month,
posts,
comments,
mirrors,
collects
FROM posts p
LEFT JOIN comments c ON p.month = c.month
LEFT JOIN mirrors m ON p.month = m.month
LEFT JOIN collects co ON p.month = co.month
WHERE p.month < date_trunc('month',now())
"
1376314,Profiles Segmented by Continued Engagement,"Time between a profiles first engagement and most recent engagement. Engagement = post, comment, mirror","[{""id"": 2341715, ""type"": ""table"", ""name"": ""Query results"", ""options"": {""columns"": [{""name"": ""comment_count"", ""title"": ""Comments""}, {""name"": ""link"", ""title"": ""Profile ID, Publication ID""}, {""name"": ""mirrors_count"", ""title"": ""Mirrors""}, {""name"": ""collect_count"", ""title"": ""Collects""}]}, ""created_at"": ""2022-10-09T09:26:39.187085+00:00"", ""__typename"": ""visualizations""}, {""id"": 2341716, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""columnMapping"": {""count"": ""y"", ""engagements"": ""x"", ""continued_engagement"": ""x""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2022-10-09T09:26:39.187085+00:00"", ""__typename"": ""visualizations""}]","WITH comments AS (
SELECT 
""call_block_time"",
vars->>'profileId'::text AS profileid
FROM lens.""LensHub_call_commentWithSig""
WHERE ""call_success"" = True
UNION ALL 
SELECT 
""call_block_time"",
vars->>'profileId'::text AS profileid
FROM lens.""LensHub_call_comment""
WHERE ""call_success"" = True
),

mirrors AS(
SELECT 
""call_block_time"",
vars->>'profileId' AS profileid
FROM lens.""LensHub_call_mirrorWithSig""
WHERE ""call_success"" = TRUE
UNION ALL
SELECT 
""call_block_time"",
vars->>'profileId' AS profileid
FROM lens.""LensHub_call_mirror""
WHERE ""call_success"" = TRUE
),

posts AS(
SELECT 
""call_block_time"",
vars->>'profileId' AS profileid 
FROM lens.""LensHub_call_postWithSig""
WHERE ""call_success"" = TRUE
UNION ALL
SELECT 
""call_block_time"",
vars->>'profileId' AS profileid 
FROM lens.""LensHub_call_post""
WHERE ""call_success"" = TRUE
)

SELECT 
continued_engagement,
COUNT(*)
FROM(
SELECT 
*,
CASE
    WHEN (last_engagement - first_engagement) < interval'1 week' THEN '<1 week'
    WHEN (last_engagement - first_engagement) >= interval'1 week' AND (last_engagement - first_engagement) < interval'2 weeks' THEN '1-2 weeks'
    WHEN (last_engagement - first_engagement) >= interval'2 weeks' AND (last_engagement - first_engagement) < interval'3 weeks' THEN '2-3 weeks'
    WHEN (last_engagement - first_engagement) >= interval'3 weeks' AND (last_engagement - first_engagement) < interval'3 months' THEN '3weeks - 3 months'
    ELSE '>3 months'
END AS continued_engagement
FROM (
SELECT 
profileid,
MIN(""call_block_time"") as first_engagement,
MAX(""call_block_time"") as last_engagement
FROM (
SELECT * FROM comments 
UNION ALL
SELECT * FROM mirrors 
UNION ALL
SELECT * FROM posts
)a
GROUP BY 1)b
)c
GROUP BY 1
"
1376362,Weekly Activity Distribution,"Engagement = post, comment, mirror","[{""id"": 2341783, ""type"": ""table"", ""name"": ""Query results"", ""options"": {""columns"": [{""name"": ""comment_count"", ""title"": ""Comments""}, {""name"": ""link"", ""title"": ""Profile ID, Publication ID""}, {""name"": ""mirrors_count"", ""title"": ""Mirrors""}, {""name"": ""collect_count"", ""title"": ""Collects""}, {""name"": ""weekday"", ""title"": ""Weekday""}, {""name"": ""hour"", ""title"": ""Hour of Day""}, {""name"": ""avg_engagements"", ""title"": ""Average No of Engagements""}, {""name"": ""median"", ""title"": ""Median No of Engagements""}]}, ""created_at"": ""2022-10-09T09:46:08.168534+00:00"", ""__typename"": ""visualizations""}]","WITH comments AS (
SELECT 
""call_block_time"",
vars->>'profileId'::text AS profileid
FROM lens.""LensHub_call_commentWithSig""
WHERE ""call_success"" = True
),

mirrors AS(
SELECT 
""call_block_time"",
vars->>'profileId' AS profileid
FROM lens.""LensHub_call_mirrorWithSig""
WHERE ""call_success"" = TRUE
),

posts AS(
SELECT 
""call_block_time"",
vars->>'profileId' AS profileid 
FROM lens.""LensHub_call_postWithSig""
WHERE ""call_success"" = TRUE
UNION ALL
SELECT 
""call_block_time"",
vars->>'profileId' AS profileid 
FROM lens.""LensHub_call_post""
WHERE ""call_success"" = TRUE
)


SELECT 
weekday,
hour,
(PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY cnt)) as median
-- ROUND(AVG(cnt)) as avg_engagements
FROM(
SELECT 
week,
hour,
CASE
    WHEN extract(dow from ""call_block_time"") = 1 THEN 'Mon'
    WHEN extract(dow from ""call_block_time"") = 2 THEN 'Tue'
    WHEN extract(dow from ""call_block_time"") = 3 THEN 'Wed'
    WHEN extract(dow from ""call_block_time"") = 4 THEN 'Thurs'
    WHEN extract(dow from ""call_block_time"") = 5 THEN 'Fri'
    WHEN extract(dow from ""call_block_time"") = 6 THEN 'Sat'
    ELSE 'Sun'
END AS weekday,
COUNT(*) as cnt
FROM(
SELECT 
profileid,
""call_block_time"",
extract(hour from ""call_block_time"") as hour,
date_trunc('week',""call_block_time"") as week
FROM (
SELECT * FROM comments 
UNION ALL
SELECT * FROM mirrors 
UNION ALL
SELECT * FROM posts
)a)b
GROUP BY 1,2,3)c
GROUP BY 1,2
ORDER BY 3 DESC
-- )b
-- )c
-- GROUP BY 1
"
891346,Lens Profiles with Posts,,"[{""id"": 1557922, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-06-08T07:39:53.258453+00:00"", ""__typename"": ""visualizations""}, {""id"": 1557954, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""counterColName"": ""count""}, ""created_at"": ""2022-06-08T07:48:47.91614+00:00"", ""__typename"": ""visualizations""}]","
WITH p AS (
SELECT 
profile, COUNT(*) AS total
FROM (
SELECT vars->>'profileId' AS profile FROM lens.""LensHub_call_postWithSig""
WHERE ""call_success"" = TRUE
UNION ALL
SELECT vars->>'profileId' AS profile FROM lens.""LensHub_call_post""
WHERE ""call_success"" = TRUE
)a
GROUP BY profile
-- ORDER BY 2 DESC
)

SELECT COUNT(*) FROM p


"
891408,Lenster Daily Gas Fee Consumed ($MATIC),,"[{""id"": 1558084, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-06-08T08:14:12.200365+00:00"", ""__typename"": ""visualizations""}, {""id"": 1558121, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Daily Gas Fee Consumed""}}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""MATIC"", ""columnMapping"": {""day"": ""x"", ""gas_fees"": ""y"", ""daily_gas_fees"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-06-08T08:21:41.641857+00:00"", ""__typename"": ""visualizations""}]","SELECT
  date_trunc('day', ""block_time"") AS day,
  ROUND(SUM(gas_used * gas_price / 1e18)) AS daily_gas_fees
FROM
  polygon.""transactions""
WHERE
  ""to"" = '\xdb46d1dc155634fbc732f92e853b10b288ad5a1d' -- Lens Smart Contract
GROUP BY day
"
891428,Lenster Total Gas Fee Consumed ($MATIC),,"[{""id"": 1558141, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-06-08T08:26:35.916368+00:00"", ""__typename"": ""visualizations""}, {""id"": 1558143, ""type"": ""counter"", ""name"": ""$MATIC"", ""options"": {""rowNumber"": 1, ""counterColName"": ""daily_gas_fees""}, ""created_at"": ""2022-06-08T08:26:59.31104+00:00"", ""__typename"": ""visualizations""}]","SELECT
  ROUND(SUM(gas_used * gas_price / 1e18)) AS daily_gas_fees
FROM
  polygon.""transactions""
WHERE
  ""to"" = '\xdb46d1dc155634fbc732f92e853b10b288ad5a1d' -- Lens Smart Contract
"
891372,Lens Profiles with Posts Percentage,,"[{""id"": 1558003, ""type"": ""counter"", ""name"": """", ""options"": {""rowNumber"": 1, ""stringSuffix"": ""%"", ""stringDecimal"": 2, ""counterColName"": ""percentage""}, ""created_at"": ""2022-06-08T07:54:13.650112+00:00"", ""__typename"": ""visualizations""}, {""id"": 1558002, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-06-08T07:54:13.650112+00:00"", ""__typename"": ""visualizations""}]","
WITH p AS (
SELECT 
profile
FROM (
SELECT vars->>'profileId' AS profile FROM lens.""LensHub_call_postWithSig""
WHERE ""call_success"" = TRUE
UNION ALL
SELECT vars->>'profileId' AS profile FROM lens.""LensHub_call_post""
WHERE ""call_success"" = TRUE
)a
GROUP BY profile
),

t AS (
SELECT
  COUNT(*) AS total,
  COUNT(DISTINCT ""to"") AS wallet
FROM
  erc721.""ERC721_evt_Transfer""
WHERE
  contract_address = '\xdb46d1dc155634fbc732f92e853b10b288ad5a1d'
  AND ""from"" = '\x0000000000000000000000000000000000000000'
)

SELECT ROUND(COUNT(p.profile)/(t.total + 0.0) * 100, 2) AS percentage 
FROM p,t 
GROUP BY t.total



"
891203,Lenster Posts,,"[{""id"": 1557652, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-06-08T06:08:59.87382+00:00"", ""__typename"": ""visualizations""}, {""id"": 1557653, ""type"": ""counter"", ""name"": ""Total Posts"", ""options"": {""rowNumber"": 1, ""stringPrefix"": """", ""stringSuffix"": """", ""counterColName"": ""count""}, ""created_at"": ""2022-06-08T06:08:59.87382+00:00"", ""__typename"": ""visualizations""}]","SELECT COUNT(*) FROM (
SELECT * FROM lens.""LensHub_call_postWithSig""
UNION ALL
SELECT * FROM lens.""LensHub_call_post""
)a
WHERE ""call_success"" = TRUE"
891205,Lenster Comments,,"[{""id"": 1557655, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-06-08T06:10:30.51804+00:00"", ""__typename"": ""visualizations""}, {""id"": 1557656, ""type"": ""counter"", ""name"": ""Total Comments"", ""options"": {""rowNumber"": 1, ""stringPrefix"": """", ""stringSuffix"": """", ""counterColName"": ""count""}, ""created_at"": ""2022-06-08T06:10:30.51804+00:00"", ""__typename"": ""visualizations""}]","SELECT COUNT(*) FROM (
SELECT * FROM lens.""LensHub_call_commentWithSig""z
UNION ALL 
SELECT * FROM lens.""LensHub_call_comment""
)a
WHERE ""call_success"" = TRUE"
891256,Daily Lens Profile Mint,,"[{""id"": 1557748, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-06-08T06:34:33.082063+00:00"", ""__typename"": ""visualizations""}, {""id"": 1557754, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""Lens Profile Mint""}}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""columnMapping"": {""day"": ""x"", ""mint"": ""y"", ""total"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-06-08T06:36:33.061267+00:00"", ""__typename"": ""visualizations""}]","SELECT
  date_trunc('day', ""evt_block_time"") AS day,
  COUNT(*) AS mint
FROM
  erc721.""ERC721_evt_Transfer""
WHERE
  contract_address = '\xdb46d1dc155634fbc732f92e853b10b288ad5a1d'  -- lens protocol contract address
  AND ""from"" = '\x0000000000000000000000000000000000000000'  -- mint address
 GROUP BY day"
891266,Daily Lenster Comments,,"[{""id"": 1557768, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""# Comments""}}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""columnMapping"": {""day"": ""x"", ""comments"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-06-08T06:47:05.117749+00:00"", ""__typename"": ""visualizations""}, {""id"": 1557766, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-06-08T06:44:21.478915+00:00"", ""__typename"": ""visualizations""}]","SELECT 

date_trunc('day', ""call_block_time"") AS day,
COUNT(*) AS comments

FROM (
SELECT * FROM lens.""LensHub_call_commentWithSig""z
UNION ALL 
SELECT * FROM lens.""LensHub_call_comment""
)a
WHERE ""call_success"" = TRUE
GROUP BY day
ORDER BY day DESC
"
891273,Daily Lenster Posts,,"[{""id"": 1557778, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-06-08T06:52:26.498181+00:00"", ""__typename"": ""visualizations""}, {""id"": 1557779, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-"", ""title"": {""text"": ""Date""}}, ""yAxis"": [{""type"": ""linear"", ""title"": {""text"": ""# Posts""}}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""columnMapping"": {""day"": ""x"", ""posts"": ""y"", ""comments"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-06-08T06:52:26.498181+00:00"", ""__typename"": ""visualizations""}]","SELECT
  date_trunc('day', ""call_block_time"") AS day,
  COUNT(*) AS posts
FROM
  (
    SELECT
      *
    FROM
      lens.""LensHub_call_postWithSig""
    UNION ALL
    SELECT
      *
    FROM
      lens.""LensHub_call_post""
  ) a
WHERE
  ""call_success"" = TRUE
GROUP BY
  day
ORDER BY
  day DESC"
891286,Lenster Posts Amount,,"[{""id"": 1557801, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-06-08T06:58:00.318505+00:00"", ""__typename"": ""visualizations""}, {""id"": 1557802, ""type"": ""table"", ""name"": ""Table"", ""options"": {""columns"": [{""name"": ""profile"", ""title"": ""Profile ID""}, {""name"": ""count"", ""title"": ""No of Posts""}, {""name"": ""posts"", ""title"": ""Number of Posts""}, {""name"": ""lens_profile_counter"", ""title"": ""Number of Lens Profiles""}]}, ""created_at"": ""2022-06-08T06:58:00.318505+00:00"", ""__typename"": ""visualizations""}, {""id"": 1557803, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""columnMapping"": {""count"": ""y"", ""posts"": ""x"", ""profile"": ""x"", ""post_amount"": ""y"", ""total_profile"": ""y"", ""lens_profile_counter"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2022-06-08T06:58:07.759652+00:00"", ""__typename"": ""visualizations""}]","
WITH lens AS (
SELECT profile, COUNT(*) AS total 
FROM (
SELECT vars->>'profileId' AS profile FROM lens.""LensHub_call_postWithSig""
WHERE ""call_success"" = TRUE
UNION ALL
SELECT vars->>'profileId' AS profile FROM lens.""LensHub_call_post""
WHERE ""call_success"" = TRUE
)a
GROUP BY 1
-- ORDER BY 2 DESC
)

SELECT
  COUNT(*) AS lens_profile_counter,
  CASE
    WHEN lens.total >= 20  THEN '> 20 posts'
    WHEN lens.total >= 10  THEN '10~20 posts'
    WHEN lens.total >= 5  THEN '5~10 posts'
    WHEN lens.total >= 2  THEN '2~5 posts'
    WHEN lens.total >= 1  THEN '1 post'
    ELSE '0 post'
  END AS ""posts""
FROM lens
GROUP BY 2
ORDER BY 1 DESC

"
1509533,Lens Revenue by User V2.1,,"[{""id"": 2539526, ""type"": ""table"", ""name"": ""Query results"", ""options"": {""columns"": [{""name"": ""link"", ""title"": ""Lens Handle & Link""}, {""name"": ""handle"", ""isHidden"": true}, {""name"": ""total_usd"", ""title"": ""Total USD"", ""numberFormat"": ""0.00""}, {""name"": ""address"", ""isHidden"": true}, {""name"": ""amount_matic"", ""title"": ""MATIC""}, {""name"": ""amount_usdc"", ""title"": ""USDC""}, {""name"": ""amount_weth"", ""title"": ""WETH""}, {""name"": ""amount_ntc"", ""title"": ""NTC""}, {""name"": ""amount_matic_usd"", ""title"": ""MATIC in USD"", ""numberFormat"": ""0.00""}, {""name"": ""amount_usdc_usd"", ""isHidden"": true, ""numberFormat"": ""0.00""}, {""name"": ""amount_weth_usd"", ""title"": ""WETH in USD"", ""numberFormat"": ""0.00""}, {""name"": ""amount_ntc_usd"", ""isHidden"": true, ""numberFormat"": ""0.00""}]}, ""created_at"": ""2022-11-02T13:20:31.46454+00:00"", ""__typename"": ""visualizations""}, {""id"": 2539527, ""type"": ""chart"", ""name"": ""Pie Chart (Total USD)"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""reverseX"": false, ""numberFormat"": ""$ 0.00"", ""columnMapping"": {"""": ""y"", ""handle"": ""x"", ""profile"": ""x"", ""total_usd"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2022-11-02T13:20:31.46454+00:00"", ""__typename"": ""visualizations""}, {""id"": 2539528, ""type"": ""chart"", ""name"": ""Pie Chart (MATIC)"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""columnMapping"": {""handle"": ""x"", ""amount_matic"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2022-11-02T13:20:31.46454+00:00"", ""__typename"": ""visualizations""}, {""id"": 2539529, ""type"": ""chart"", ""name"": ""Pie Chart (WETH)"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""columnMapping"": {""handle"": ""x"", ""amount_weth"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2022-11-02T13:20:31.46454+00:00"", ""__typename"": ""visualizations""}, {""id"": 2539530, ""type"": ""chart"", ""name"": ""Pie Chart (NTC)"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""columnMapping"": {""handle"": ""x"", ""amount_ntc"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2022-11-02T13:20:31.46454+00:00"", ""__typename"": ""visualizations""}, {""id"": 2539531, ""type"": ""chart"", ""name"": ""Pie Chart (USDC)"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""columnMapping"": {""handle"": ""x"", ""amount_usdc"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2022-11-02T13:20:31.46454+00:00"", ""__typename"": ""visualizations""}]","WITH 
-- Lens Collect-Event (https://github.com/lens-protocol/core/blob/746bda9cde9939a6ed19de6f70a0b4d390230bca/contracts/libraries/Events.sol#L313)
-- Get all relevant txn hashes to match transfer events
collect_evts AS (
    SELECT DISTINCT
        tx_hash
    FROM polygon.""logs""
    WHERE 
        block_time > now() - interval '{{interval}}'
        AND topic1 = '\xed39bf0d9afa849610b901c9d7f4d00751ba20de2db023428065bec153833218'
        AND contract_address = '\xDb46d1Dc155634FbC732f92E853b10B288AD5a1d'
),

-- Groups prices by contract address (e.g. each token), sorts them minute ascending to extract the latest price of each token
latest_prices AS (
    SELECT DISTINCT on (contract_address) contract_address, minute, price
    FROM  prices.""usd""
    WHERE contract_address IN (
        '\x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270', -- MATIC
        '\x2791Bca1f2de4661ED88A30C99A7a9449Aa84174', -- USD
        '\x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619', -- WETH
        '\xD838290e877E0188a4A44700463419ED96c16107' -- NTC 
    )
    ORDER BY contract_address, minute desc
),

-- Joins latest price and pivots the table for easier frontend view
revenue AS (
    SELECT 
        SUBSTRING(topic3 FROM 13 FOR 20) AS address,
        SUM(CASE WHEN contract_address = '\x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270' THEN BYTEA2NUMERIC(SUBSTRING(data FROM 1 FOR 32)) / 1e18 ELSE 0 END) AS amount_matic,
        SUM(CASE WHEN contract_address = '\x2791Bca1f2de4661ED88A30C99A7a9449Aa84174' THEN BYTEA2NUMERIC(SUBSTRING(data FROM 1 FOR 32)) / 1e6 ELSE 0 END) AS amount_usdc,
        SUM(CASE WHEN contract_address = '\x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619' THEN BYTEA2NUMERIC(SUBSTRING(data FROM 1 FOR 32)) / 1e18 ELSE 0 END) AS amount_weth,
        SUM(CASE WHEN contract_address = '\xD838290e877E0188a4A44700463419ED96c16107' THEN BYTEA2NUMERIC(SUBSTRING(data FROM 1 FOR 32)) / 1e18 ELSE 0 END) AS amount_ntc,
        
        -- converted to USD 
        SUM(CASE WHEN contract_address = '\x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270' THEN BYTEA2NUMERIC(SUBSTRING(data FROM 1 FOR 32)) / 1e18 * price ELSE 0 END) AS amount_matic_usd,
        SUM(CASE WHEN contract_address = '\x2791Bca1f2de4661ED88A30C99A7a9449Aa84174' THEN BYTEA2NUMERIC(SUBSTRING(data FROM 1 FOR 32)) / 1e6 * price ELSE 0 END) AS amount_usdc_usd,
        SUM(CASE WHEN contract_address = '\x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619' THEN BYTEA2NUMERIC(SUBSTRING(data FROM 1 FOR 32)) / 1e18 * price ELSE 0 END) AS amount_weth_usd,
        SUM(CASE WHEN contract_address = '\xD838290e877E0188a4A44700463419ED96c16107' THEN BYTEA2NUMERIC(SUBSTRING(data FROM 1 FOR 32)) / 1e18 * price ELSE 0 END) AS amount_ntc_usd
    
    FROM polygon.""logs""
    LEFT JOIN collect_evts USING(tx_hash)
    LEFT JOIN latest_prices USING(contract_address)
    WHERE 
        block_time > now() - interval '{{interval}}'
        AND tx_hash IN (collect_evts.tx_hash)
        AND logs.topic1 = '\xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'
        AND logs.contract_address IN (
            '\x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270', -- MATIC
            '\x2791Bca1f2de4661ED88A30C99A7a9449Aa84174', -- USDC
            '\x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619', -- WETH
            '\xD838290e877E0188a4A44700463419ED96c16107' -- NTC 
        )
        AND logs.data IS NOT NULL
    GROUP BY 1
),

-- Lens Profile Creation Events (to associate handle with address)
lens_profile_created AS (
    SELECT
        pg_typeof(vars)
        ,CONCAT('\x', substring(vars::json ->> 'to' from 3))::bytea as ""address""
        ,vars::json ->> 'handle' AS ""handle""
        ,call_block_time
    FROM lens.""ProfileCreationProxy_call_proxyCreateProfile""
),
-- only pick latest created profile for each address
latet_lens_handle AS (
    SELECT DISTINCT ON (address) address, handle
    FROM lens_profile_created
    ORDER BY address, call_block_time DESC
)

SELECT
    latet_lens_handle.handle as handle,
    '<a href=""https://lenster.xyz/u/' || latet_lens_handle.handle || '.lens"" target=""_blank"" >🪴 ' || latet_lens_handle.handle || '</a>' As link,
    amount_matic_usd + amount_weth_usd + amount_usdc_usd + COALESCE(amount_ntc_usd, 0) AS total_usd, -- no price for ntc so COALESCE
    revenue.*,
    latet_lens_handle.address as address
FROM revenue
LEFT JOIN latet_lens_handle ON latet_lens_handle.address = revenue.address
ORDER BY total_usd DESC
"
1450488,Lenster Engagements per Month,,"[{""id"": 2456119, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-10-24T14:07:56.020036+00:00"", ""__typename"": ""visualizations""}, {""id"": 2456120, ""type"": ""chart"", ""name"": ""Chart"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": true}, ""series"": {""stacking"": ""stack""}, ""reverseX"": false, ""columnMapping"": {"""": ""y"", ""week"": ""x"", ""count"": ""y"", ""month"": ""x"", ""posts"": ""y"", ""mirrors"": ""y"", ""comments"": ""y""}, ""seriesOptions"": {}, ""valuesOptions"": {}, ""globalSeriesType"": ""column""}, ""created_at"": ""2022-10-24T14:07:56.020036+00:00"", ""__typename"": ""visualizations""}]","WITH posts AS(
SELECT month, COUNT(*) AS posts
FROM (
SELECT date_trunc('month',""call_block_time"") as month, 
vars->>'profileId' AS profile 
FROM lens.""LensHub_call_postWithSig""
WHERE ""call_success"" = TRUE
UNION ALL
SELECT date_trunc('month',""call_block_time"") as month, 
vars->>'profileId' AS profile 
FROM lens.""LensHub_call_post""
WHERE ""call_success"" = TRUE
)a
GROUP BY 1
)

, comments AS (
SELECT month, 
COUNT(*) AS comments
FROM (
SELECT date_trunc('month',""call_block_time"") as month
FROM lens.""LensHub_call_commentWithSig""
WHERE ""call_success"" = True
UNION ALL
SELECT date_trunc('month',""call_block_time"") as month
FROM lens.""LensHub_call_commentWithSig""
WHERE ""call_success"" = True)a
GROUP BY 1
)

, mirrors AS (
SELECT month, 
COUNT(*) AS mirrors
FROM(
SELECT date_trunc('month',""call_block_time"") as month
FROM lens.""LensHub_call_mirrorWithSig""
WHERE ""call_success"" = True
UNION ALL
SELECT date_trunc('month',""call_block_time"") as month
FROM lens.""LensHub_call_mirror""
WHERE ""call_success"" = True)a
GROUP BY 1
)

, collects AS (
SELECT month, 
COUNT(*) AS collects
FROM(
SELECT date_trunc('month',""call_block_time"") as month
FROM lens.""LensHub_call_collectWithSig""
WHERE ""call_success"" = True
UNION ALL
SELECT date_trunc('month',""call_block_time"") as month
FROM lens.""LensHub_call_collect""
WHERE ""call_success"" = True)a
GROUP BY 1
)

SELECT p.month,
posts,
comments,
mirrors,
collects
FROM posts p
LEFT JOIN comments c ON p.month = c.month
LEFT JOIN mirrors m ON p.month = m.month
LEFT JOIN collects co ON p.month = co.month
WHERE p.month < date_trunc('month',now())
"
1388387,Lensters top posters,,"[{""id"": 2360168, ""type"": ""table"", ""name"": """", ""options"": {""columns"": [{""name"": ""profileId"", ""isHidden"": true}]}, ""created_at"": ""2022-10-11T13:08:25.35+00:00"", ""__typename"": ""visualizations""}]","WITH lens_minted AS (
    SELECT
        date_trunc('day',evt_block_time) as ""mint_date""
        , ""to"" as ""owner""
        , ""tokenId""
    FROM erc721.""ERC721_evt_Transfer""
    WHERE contract_address = '\xdb46d1dc155634fbc732f92e853b10b288ad5a1d'
    AND ""from"" = '\x0000000000000000000000000000000000000000'
), lens_profile_creation AS (
    SELECT
        pg_typeof(vars)
        ,CONCAT('\x', substring(vars::json ->> 'to' from 3))::bytea as ""owner""
        ,vars::json ->> 'handle' AS ""handle""
        ,vars::json ->> 'imageURI' AS ""imageURI""
        ,vars::json ->> 'followModule' AS ""followModule""
        ,vars::json ->> 'followNFTURI' AS ""followNFTURI""
        ,vars::json ->> 'followModuleInitData' AS ""followModuleInitData""
    FROM lens.""ProfileCreationProxy_call_proxyCreateProfile""
), lens_posters AS (

    SELECT profile, COUNT(*) as post_count FROM (
    SELECT vars->>'profileId' AS profile FROM lens.""LensHub_call_postWithSig""
    WHERE ""call_success"" = TRUE
    UNION ALL
    SELECT vars->>'profileId' AS profile FROM lens.""LensHub_call_post""
    WHERE ""call_success"" = TRUE
    )a
    GROUP BY 1
    ORDER BY 2 DESC
), lens_owners_handles AS (
    SELECT
        COALESCE(m.owner, p.owner) as ""owner""
        ,m.""tokenId""
        ,CASE 
            -- special case
            WHEN m.owner = '\x6c77a5a88c0ae712baeabe12fea81532060dcbf5' THEN 'lensprotocol' 
            ELSE p.handle
        END as ""handle""
    FROM lens_minted m
    FULL JOIN lens_profile_creation p
    ON m.owner = p.owner
), lens_top_posters AS (
    SELECT 
        CONCAT('<a href=""https://lenster.xyz/u/',h.handle,'.lens','"" target=""_blank""> </a>', ' ', h.handle) AS lens_profile
        ,p.profile as ""profileId"" 
        ,p.post_count
        ,h.owner -- wallet address
    FROM lens_posters p
    LEFT JOIN lens_owners_handles h
    ON p.profile = h.""tokenId""::TEXT
    ORDER BY p.post_count DESC
)

SELECT 
    DISTINCT lens_profile
    ,""profileId"" --Todo: some wallets have multiple lens handles
    ,post_count
    -- ,owner
FROM lens_top_posters
ORDER BY post_count DESC"
1451114,Lens active users in last 24 hours users summary,,"[{""id"": 2457185, ""type"": ""counter"", ""name"": ""Total NFT Count"", ""options"": {""rowNumber"": 1, ""counterColName"": ""total_full_time_nft_count""}, ""created_at"": ""2022-10-24T15:44:20.955098+00:00"", ""__typename"": ""visualizations""}, {""id"": 2457186, ""type"": ""counter"", ""name"": ""Active Users In 7 Days"", ""options"": {""rowNumber"": 1, ""counterColName"": ""total_seven_days_user_count""}, ""created_at"": ""2022-10-24T15:44:20.955098+00:00"", ""__typename"": ""visualizations""}, {""id"": 2457187, ""type"": ""counter"", ""name"": ""NFT Transfered in 24 Hours"", ""options"": {""rowNumber"": 1, ""counterColName"": ""total_one_day_nft_count""}, ""created_at"": ""2022-10-24T15:44:20.955098+00:00"", ""__typename"": ""visualizations""}, {""id"": 2457188, ""type"": ""counter"", ""name"": ""NFT Transfered in 30 Days"", ""options"": {""rowNumber"": 1, ""counterColName"": ""total_thirty_days_nft_count""}, ""created_at"": ""2022-10-24T15:44:20.955098+00:00"", ""__typename"": ""visualizations""}, {""id"": 2457189, ""type"": ""counter"", ""name"": ""NFT Transfered in 7 Days"", ""options"": {""rowNumber"": 1, ""counterColName"": ""total_seven_days_nft_count""}, ""created_at"": ""2022-10-24T15:44:20.955098+00:00"", ""__typename"": ""visualizations""}, {""id"": 2457190, ""type"": ""chart"", ""name"": ""Lens User Count By Transfer Type All Time"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""columnMapping"": {""user_count"": ""y"", ""transfer_type"": ""x"", ""full_time_user_count"": ""y""}, ""seriesOptions"": {""full_time_user_count"": {""name"": ""Users Count"", ""type"": ""pie"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {""mint"": {""color"": ""#22c142""}}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2022-10-24T15:44:20.955098+00:00"", ""__typename"": ""visualizations""}, {""id"": 2457182, ""type"": ""chart"", ""name"": ""Lens NFT Count By Transfer Type 7 Days"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""columnMapping"": {""transfer_type"": ""x"", ""seven_days_nft_count"": ""y""}, ""seriesOptions"": {""seven_days_nft_count"": {""name"": ""NFT Count"", ""type"": ""pie"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {""mint"": {""color"": ""#b911b5""}}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2022-10-24T15:44:20.955098+00:00"", ""__typename"": ""visualizations""}, {""id"": 2457183, ""type"": ""table"", ""name"": ""Query results"", ""options"": {}, ""created_at"": ""2022-10-24T15:44:20.955098+00:00"", ""__typename"": ""visualizations""}, {""id"": 2457191, ""type"": ""counter"", ""name"": ""Active Users In 24 Hours"", ""options"": {""rowNumber"": 1, ""counterColName"": ""total_one_day_user_count""}, ""created_at"": ""2022-10-24T15:44:20.955098+00:00"", ""__typename"": ""visualizations""}, {""id"": 2457192, ""type"": ""chart"", ""name"": ""Lens User Count By Transfer Type 24 hours"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""columnMapping"": {""transfer_type"": ""x"", ""one_day_user_count"": ""y""}, ""seriesOptions"": {""one_day_user_count"": {""name"": ""Users Count"", ""type"": ""pie"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {""mint"": {""color"": ""#3a1a1a""}, ""receive"": {""color"": ""#1938ae""}}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2022-10-24T15:44:20.955098+00:00"", ""__typename"": ""visualizations""}, {""id"": 2457193, ""type"": ""chart"", ""name"": ""Lens NFT Count By Transfer Type 24 Hours"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""columnMapping"": {""transfer_type"": ""x"", ""one_day_nft_count"": ""y""}, ""seriesOptions"": {""one_day_nft_count"": {""name"": ""NFT Count"", ""type"": ""pie"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {""mint"": {""color"": ""#ebd91c""}, ""sent"": {""color"": ""#587b5f""}}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2022-10-24T15:44:20.955098+00:00"", ""__typename"": ""visualizations""}, {""id"": 2457194, ""type"": ""chart"", ""name"": ""Lens User Count By Transfer Type 7 Days"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""columnMapping"": {""transfer_type"": ""x"", ""seven_days_user_count"": ""y""}, ""seriesOptions"": {""seven_days_user_count"": {""name"": ""Users Count"", ""type"": ""pie"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {""mint"": {""color"": ""#25ccd3""}}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2022-10-24T15:44:20.955098+00:00"", ""__typename"": ""visualizations""}, {""id"": 2457195, ""type"": ""counter"", ""name"": ""Total Users Count"", ""options"": {""rowNumber"": 1, ""counterColName"": ""total_full_time_user_count""}, ""created_at"": ""2022-10-24T15:44:20.955098+00:00"", ""__typename"": ""visualizations""}, {""id"": 2457196, ""type"": ""counter"", ""name"": ""Active Users In 30 Days"", ""options"": {""rowNumber"": 1, ""counterColName"": ""total_thirty_days_user_count""}, ""created_at"": ""2022-10-24T15:44:20.955098+00:00"", ""__typename"": ""visualizations""}, {""id"": 2457184, ""type"": ""chart"", ""name"": ""Lens NFT Count By Transfer Type All Time"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""columnMapping"": {""nft_count"": ""y"", ""transfer_type"": ""x"", ""full_time_nft_count"": ""y""}, ""seriesOptions"": {""full_time_nft_count"": {""name"": ""NFT Count"", ""type"": ""pie"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2022-10-24T15:44:20.955098+00:00"", ""__typename"": ""visualizations""}, {""id"": 2457197, ""type"": ""chart"", ""name"": ""Lens User Count By Transfer Type 30 Days"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""columnMapping"": {""transfer_type"": ""x"", ""thirty_days_user_count"": ""y""}, ""seriesOptions"": {""thirty_days_user_count"": {""name"": ""Users Count"", ""type"": ""pie"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {""mint"": {""color"": ""#eea41e""}}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2022-10-24T15:44:20.955098+00:00"", ""__typename"": ""visualizations""}, {""id"": 2457198, ""type"": ""chart"", ""name"": ""Lens NFT Count By Transfer Type 30 Days"", ""options"": {""sortX"": true, ""xAxis"": {""type"": ""-""}, ""yAxis"": [{""type"": ""linear""}], ""legend"": {""enabled"": false}, ""reverseX"": false, ""columnMapping"": {""transfer_type"": ""x"", ""thirty_days_nft_count"": ""y""}, ""seriesOptions"": {""thirty_days_nft_count"": {""name"": ""NFT Count"", ""type"": ""pie"", ""yAxis"": 0, ""zIndex"": 0}}, ""valuesOptions"": {""mint"": {""color"": ""#a85050""}, ""receive"": {""color"": ""#125597""}}, ""showDataLabels"": true, ""globalSeriesType"": ""pie""}, ""created_at"": ""2022-10-24T15:44:20.955098+00:00"", ""__typename"": ""visualizations""}]","with lens_transfers as (
    select evt_block_time,
        ""from"" as address,
        'sent' as transfer_type,
    -1 as nft_count
    FROM erc721.""ERC721_evt_Transfer""
    where contract_address = '\xdb46d1dc155634fbc732f92e853b10b288ad5a1d'
        and ""from"" != '\x0000000000000000000000000000000000000000'

    union all

    select evt_block_time,
        ""to"" as address,
        (case when ""from"" = '\x0000000000000000000000000000000000000000' then 'mint'
            else 'receive'
        end) as transfer_type,
    1 as nft_count
    FROM erc721.""ERC721_evt_Transfer""
    where contract_address = '\xdb46d1dc155634fbc732f92e853b10b288ad5a1d'
),

lens_users as (
    select transfer_type,
        count(distinct address) as full_time_user_count,
        sum(abs(nft_count)) as full_time_nft_count,
        count(distinct address) filter (where evt_block_time >= now() - interval '24 hours') as one_day_user_count,
        sum(abs(nft_count)) filter (where evt_block_time >= now() - interval '24 hours') as one_day_nft_count,
        count(distinct address) filter (where evt_block_time >= now() - interval '7 days') as seven_days_user_count,
        sum(abs(nft_count)) filter (where evt_block_time >= now() - interval '7 days') as seven_days_nft_count,
        count(distinct address) filter (where evt_block_time >= now() - interval '30 days') as thirty_days_user_count,
        sum(abs(nft_count)) filter (where evt_block_time >= now() - interval '30 days') as thirty_days_nft_count
    from lens_transfers
    group by transfer_type
),

lens_users_summary as (
    select count(distinct address) as total_full_time_user_count,
        sum(nft_count) as total_full_time_nft_count,
        count(distinct address) filter (where evt_block_time >= now() - interval '24 hours') as total_one_day_user_count,
        sum(nft_count) filter (where evt_block_time >= now() - interval '24 hours') as total_one_day_nft_count,
        count(distinct address) filter (where evt_block_time >= now() - interval '7 days') as total_seven_days_user_count,
        sum(nft_count) filter (where evt_block_time >= now() - interval '7 days') as total_seven_days_nft_count,
        count(distinct address) filter (where evt_block_time >= now() - interval '30 days') as total_thirty_days_user_count,
        sum(nft_count) filter (where evt_block_time >= now() - interval '30 days') as total_thirty_days_nft_count
    from lens_transfers
)

select transfer_type,
    full_time_user_count,
    full_time_nft_count,
    one_day_user_count,
    one_day_nft_count,
    seven_days_user_count,
    seven_days_nft_count,
    thirty_days_user_count,
    thirty_days_nft_count,
    total_full_time_user_count,
    total_full_time_nft_count,
    total_one_day_user_count,
    total_one_day_nft_count,
    total_seven_days_user_count,
    total_seven_days_nft_count,
    total_thirty_days_user_count,
    total_thirty_days_nft_count
from lens_users
join lens_users_summary on true

"
